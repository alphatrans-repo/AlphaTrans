{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/integercompression/TestUtils.java",
    "imports": {
        "10-10:import Arrays": {
            "start": 10,
            "end": 10,
            "body": [
                "import java.util.Arrays;\n"
            ]
        },
        "12-12:import Test": {
            "start": 12,
            "end": 12,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "14-14:import static Assert.*": {
            "start": 14,
            "end": 14,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "TestUtils": {
            "start": 19,
            "end": 19,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "164-186:testPackingw_test0_decomposed": {
                    "start": 164,
                    "end": 186,
                    "body": [
                        "    public void testPackingw_test0_decomposed()  {\n",
                        "        int[] outputarray = new int[32];\n",
                        "        for(int b = 1; b < 32; ++b) {\n",
                        "           int[] data = new int[32];\n",
                        "           int[] newdata = new int[32];\n",
                        "           int mask = (1<<b) -1;\n",
                        "           for(int j = 0; j < data.length; ++j) {\n",
                        "               data[j] = mask - (j % mask);\n",
                        "           }\n",
                        "           for(int n = 0; n <= 32; ++n) {\n",
                        "               Arrays.fill(outputarray, 0);\n",
                        "               int howmany = Util.packw(outputarray, 0, data, n, b);\n",
                        "               if(howmany != Util.packsizew(n, b)) throw new RuntimeException(\"bug \"+n+\" \"+b);\n",
                        "               Util.unpackw(Arrays.copyOf(outputarray, howmany), 0, newdata, n, b);\n",
                        "               for(int i = 0; i < n; ++i)\n",
                        "                   if(newdata[i] != data[i]) {\n",
                        "                       System.out.println(Arrays.toString(Arrays.copyOf(data, n)));\n",
                        "                       System.out.println(Arrays.toString(Arrays.copyOf(newdata,n)));\n",
                        "                       throw new RuntimeException(\"bug \"+b+\" \"+n);\n",
                        "                   }\n",
                        "           }\n",
                        "       }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPackingw_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                            "Util",
                            "166-180:packw"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "fill(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                            "Util",
                            "159-164:packsizew"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                            "Util",
                            "182-196:unpackw"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "toString(int[])"
                        ]
                    ]
                },
                "139-161:testPacking_test0_decomposed": {
                    "start": 139,
                    "end": 161,
                    "body": [
                        "    public void testPacking_test0_decomposed()  {\n",
                        "        int[] outputarray = new int[32];\n",
                        "        for(int b = 1; b < 32; ++b) {\n",
                        "           int[] data = new int[32];\n",
                        "           int[] newdata = new int[32];\n",
                        "           int mask = (1<<b) -1;\n",
                        "           for(int j = 0; j < data.length; ++j) {\n",
                        "               data[j] = mask - (j % mask);\n",
                        "           }\n",
                        "           for(int n = 0; n <= 32; ++n) {\n",
                        "               Arrays.fill(outputarray, 0);\n",
                        "               int howmany = Util.pack(outputarray, 0, data,0, n, b);\n",
                        "               if(howmany != Util.packsize(n, b)) throw new RuntimeException(\"bug \"+n+\" \"+b);\n",
                        "               Util.unpack(Arrays.copyOf(outputarray, howmany), 0, newdata,0, n, b);\n",
                        "               for(int i = 0; i < n; ++i)\n",
                        "                   if(newdata[i] != data[i]) {\n",
                        "                       System.out.println(Arrays.toString(Arrays.copyOf(data, n)));\n",
                        "                       System.out.println(Arrays.toString(Arrays.copyOf(newdata,n)));\n",
                        "                       throw new RuntimeException(\"bug \"+b+\" \"+n);\n",
                        "                   }\n",
                        "           }\n",
                        "       }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPacking_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                            "Util",
                            "120-139:pack"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "fill(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                            "Util",
                            "113-118:packsize"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                            "Util",
                            "141-157:unpack"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "toString(int[])"
                        ]
                    ]
                },
                "129-136:uncompressHeadless": {
                    "start": 129,
                    "end": 136,
                    "body": [
                        "    protected static int[] uncompressHeadless(SkippableIntegerCODEC codec, int[] data, int len) {\n",
                        "        int[] outBuf = new int[len + 1024];\n",
                        "        IntWrapper inPos = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper outPos = IntWrapper.IntWrapper1();\n",
                        "        codec.headlessUncompress(data, inPos, data.length, outBuf, outPos,len);\n",
                        "        if(outPos.get() < len) throw new RuntimeException(\"Insufficient output.\");\n",
                        "        return Arrays.copyOf(outBuf, outPos.get());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected",
                        "static"
                    ],
                    "return_types": [
                        [
                            "int[]",
                            "int[]"
                        ]
                    ],
                    "signature": "uncompressHeadless(SkippableIntegerCODEC, int[], int)",
                    "parameters": [
                        "codec",
                        "data",
                        "len"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                            "SkippableIntegerCODEC",
                            "66-68:headlessUncompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ]
                    ]
                },
                "121-127:compressHeadless": {
                    "start": 121,
                    "end": 127,
                    "body": [
                        "    protected static int[] compressHeadless(SkippableIntegerCODEC codec, int[] data) {\n",
                        "        int[] outBuf = new int[data.length * 4];\n",
                        "        IntWrapper inPos = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper outPos = IntWrapper.IntWrapper1();\n",
                        "        codec.headlessCompress(data, inPos, data.length, outBuf, outPos);\n",
                        "        return Arrays.copyOf(outBuf, outPos.get());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected",
                        "static"
                    ],
                    "return_types": [
                        [
                            "int[]",
                            "int[]"
                        ]
                    ],
                    "signature": "compressHeadless(SkippableIntegerCODEC, int[])",
                    "parameters": [
                        "codec",
                        "data"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                            "SkippableIntegerCODEC",
                            "44-46:headlessCompress"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ]
                    ]
                },
                "113-119:uncompress1": {
                    "start": 113,
                    "end": 119,
                    "body": [
                        "    protected static int[] uncompress1(ByteIntegerCODEC codec, byte[] data, int len) {\n",
                        "        int[] outBuf = new int[len + 1024];\n",
                        "        IntWrapper inPos = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper outPos = IntWrapper.IntWrapper1();\n",
                        "        codec.uncompress1(data, inPos, data.length, outBuf, outPos);\n",
                        "        return Arrays.copyOf(outBuf, outPos.get());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected",
                        "static"
                    ],
                    "return_types": [
                        [
                            "int[]",
                            "int[]"
                        ]
                    ],
                    "signature": "uncompress1(ByteIntegerCODEC, byte[], int)",
                    "parameters": [
                        "codec",
                        "data",
                        "len"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.ByteIntegerCODEC",
                            "ByteIntegerCODEC",
                            "57-59:uncompress1"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ]
                    ]
                },
                "105-111:compress0": {
                    "start": 105,
                    "end": 111,
                    "body": [
                        "    protected static byte[] compress0(ByteIntegerCODEC codec, int[] data) {\n",
                        "        byte[] outBuf = new byte[data.length * 4 * 4];\n",
                        "        IntWrapper inPos = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper outPos = IntWrapper.IntWrapper1();\n",
                        "        codec.compress1(data, inPos, data.length, outBuf, outPos);\n",
                        "        return Arrays.copyOf(outBuf, outPos.get());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected",
                        "static"
                    ],
                    "return_types": [
                        [
                            "byte[]",
                            "byte[]"
                        ]
                    ],
                    "signature": "compress0(ByteIntegerCODEC, int[])",
                    "parameters": [
                        "codec",
                        "data"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.ByteIntegerCODEC",
                            "ByteIntegerCODEC",
                            "36-38:compress1"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(byte[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ]
                    ]
                },
                "95-101:uncompress0": {
                    "start": 95,
                    "end": 101,
                    "body": [
                        "    protected static int[] uncompress0(IntegerCODEC codec, int[] data, int len) {\n",
                        "        int[] outBuf = new int[len + 1024];\n",
                        "        IntWrapper inPos = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper outPos = IntWrapper.IntWrapper1();\n",
                        "        codec.uncompress0(data, inPos, data.length, outBuf, outPos);\n",
                        "        return Arrays.copyOf(outBuf, outPos.get());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected",
                        "static"
                    ],
                    "return_types": [
                        [
                            "int[]",
                            "int[]"
                        ]
                    ],
                    "signature": "uncompress0(IntegerCODEC, int[], int)",
                    "parameters": [
                        "codec",
                        "data",
                        "len"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "57-59:uncompress0"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ]
                    ]
                },
                "87-93:compress1": {
                    "start": 87,
                    "end": 93,
                    "body": [
                        "    public static int[] compress1(IntegerCODEC codec, int[] data) {\n",
                        "        int[] outBuf = new int[data.length * 4];\n",
                        "        IntWrapper inPos = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper outPos = IntWrapper.IntWrapper1();\n",
                        "        codec.compress0(data, inPos, data.length, outBuf, outPos);\n",
                        "        return Arrays.copyOf(outBuf, outPos.get());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "int[]",
                            "int[]"
                        ]
                    ],
                    "signature": "compress1(IntegerCODEC, int[])",
                    "parameters": [
                        "codec",
                        "data"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ]
                    ]
                },
                "58-85:assertSymmetry": {
                    "start": 58,
                    "end": 85,
                    "body": [
                        "    public static void assertSymmetry(IntegerCODEC codec, int... orig) {\n",
                        "        // There are some cases that compressed array is bigger than original\n",
                        "        // array.  So output array for compress must be larger.\n",
                        "        //\n",
                        "        // Example:\n",
                        "        //  - VariableByte compresses an array like [ -1 ].\n",
                        "        //  - Composition compresses a short array.\n",
                        "        final int EXTEND = 1;\n",
                        "\n",
                        "        int[] compressed = new int[orig.length + EXTEND];\n",
                        "        IntWrapper c_inpos = new IntWrapper(0);\n",
                        "        IntWrapper c_outpos = new IntWrapper(0);\n",
                        "        codec.compress0(orig, c_inpos, orig.length, compressed,\n",
                        "                c_outpos);\n",
                        "\n",
                        "        assertTrue(c_outpos.get() <= orig.length + EXTEND);\n",
                        "\n",
                        "        // Uncompress an array.\n",
                        "        int[] uncompressed = new int[orig.length];\n",
                        "        IntWrapper u_inpos = new IntWrapper(0);\n",
                        "        IntWrapper u_outpos = new IntWrapper(0);\n",
                        "        codec.uncompress0(compressed, u_inpos, c_outpos.get(),\n",
                        "                uncompressed, u_outpos);\n",
                        "\n",
                        "        // Compare between uncompressed and orig arrays.\n",
                        "        int[] target = Arrays.copyOf(uncompressed, u_outpos.get());\n",
                        "        assertArrayEquals(orig, target);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "assertSymmetry(IntegerCODEC, int[])",
                    "parameters": [
                        "codec",
                        "orig"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "57-59:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(int[],int[])"
                        ]
                    ]
                },
                "41-50:dumpIntArrayAsHex": {
                    "start": 41,
                    "end": 50,
                    "body": [
                        "    protected static void dumpIntArrayAsHex(int[] data, String label) {\n",
                        "        System.out.print(label);\n",
                        "        for (int i = 0; i < data.length; ++i) {\n",
                        "            if (i % 8 == 0) {\n",
                        "                System.out.println();\n",
                        "            }\n",
                        "            System.out.format(\" %1$08X\", data[i]);\n",
                        "        }\n",
                        "        System.out.println();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected",
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "dumpIntArrayAsHex(int[], String)",
                    "parameters": [
                        "data",
                        "label"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "print(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println()"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "format(java.lang.String,java.lang.Object[])"
                        ]
                    ]
                },
                "30-39:dumpIntArray": {
                    "start": 30,
                    "end": 39,
                    "body": [
                        "    protected static void dumpIntArray(int[] data, String label) {\n",
                        "        System.out.print(label);\n",
                        "        for (int i = 0; i < data.length; ++i) {\n",
                        "            if (i % 6 == 0) {\n",
                        "                System.out.println();\n",
                        "            }\n",
                        "            System.out.format(\" %1$11d\", data[i]);\n",
                        "        }\n",
                        "        System.out.println();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected",
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "dumpIntArray(int[], String)",
                    "parameters": [
                        "data",
                        "label"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "print(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println()"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "format(java.lang.String,java.lang.Object[])"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}