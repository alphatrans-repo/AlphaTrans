{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-graph/src/main/java/org/apache/commons/graph/model/InMemoryPath.java",
    "imports": {
        "37-37:import Map": {
            "start": 37,
            "end": 37,
            "body": [
                "import java.util.Map;\n"
            ]
        },
        "36-36:import List": {
            "start": 36,
            "end": 36,
            "body": [
                "import java.util.List;\n"
            ]
        },
        "34-34:import HashMap": {
            "start": 34,
            "end": 34,
            "body": [
                "import java.util.HashMap;\n"
            ]
        },
        "35-35:import LinkedList": {
            "start": 35,
            "end": 35,
            "body": [
                "import java.util.LinkedList;\n"
            ]
        },
        "32-32:import VertexPair": {
            "start": 32,
            "end": 32,
            "body": [
                "import org.apache.commons.graph.VertexPair;\n"
            ]
        },
        "31-31:import Path": {
            "start": 31,
            "end": 31,
            "body": [
                "import org.apache.commons.graph.Path;\n"
            ]
        },
        "27-27:import static String.format": {
            "start": 27,
            "end": 27,
            "body": [
                "import static java.lang.String.format;\n"
            ]
        },
        "28-28:import static Arrays.asList": {
            "start": 28,
            "end": 28,
            "body": [
                "import static java.util.Arrays.asList;\n"
            ]
        },
        "29-29:import static Collections.unmodifiableList": {
            "start": 29,
            "end": 29,
            "body": [
                "import static java.util.Collections.unmodifiableList;\n"
            ]
        },
        "23-23:import static Assertions.checkNotNull": {
            "start": 23,
            "end": 23,
            "body": [
                "import static org.apache.commons.graph.utils.Assertions.checkNotNull;\n"
            ]
        },
        "22-22:import static Assertions.checkArgument": {
            "start": 22,
            "end": 22,
            "body": [
                "import static org.apache.commons.graph.utils.Assertions.checkArgument;\n"
            ]
        },
        "24-24:import static Objects.eq": {
            "start": 24,
            "end": 24,
            "body": [
                "import static org.apache.commons.graph.utils.Objects.eq;\n"
            ]
        },
        "25-25:import static Objects.hash": {
            "start": 25,
            "end": 25,
            "body": [
                "import static org.apache.commons.graph.utils.Objects.hash;\n"
            ]
        }
    },
    "classes": {
        "InMemoryPath": {
            "start": 46,
            "end": 46,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [
                "Path<V,E>",
                "InMemoryPath<>"
            ],
            "extends": [],
            "methods": {
                "231-233:toString": {
                    "start": 231,
                    "end": 233,
                    "body": [
                        "    public String toString() {\n",
                        "        return format(\"InMemoryPath [vertices=%s, edges=%s]\", vertices, edges);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "toString()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ]
                    ]
                },
                "224-227:hashCode": {
                    "start": 224,
                    "end": 227,
                    "body": [
                        "    public int hashCode() {\n",
                        "        final int prime = 31;\n",
                        "        return hash(1, prime, edges, source, target, vertices);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "hashCode()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.utils.Objects",
                            "Objects",
                            "44-51:hash"
                        ]
                    ]
                },
                "132-147:equals": {
                    "start": 132,
                    "end": 147,
                    "body": [
                        "    public boolean equals(Object obj) {\n",
                        "        if (this == obj) {\n",
                        "            return true;\n",
                        "        }\n",
                        "\n",
                        "        if (obj == null || getClass() != obj.getClass()) {\n",
                        "            return false;\n",
                        "        }\n",
                        "\n",
                        "        @SuppressWarnings(\"unchecked\") // test against any Path typed instance\n",
                        "        InMemoryPath<Object, Object> other = (InMemoryPath<Object, Object>) obj;\n",
                        "        return eq(source, other.getSource())\n",
                        "                && eq(target, other.getTarget())\n",
                        "                && eq(vertices, other.getVertices0())\n",
                        "                && eq(edges, other.getEdges());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "equals(Object)",
                    "parameters": [
                        "obj"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "getClass()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.utils.Objects",
                            "Objects",
                            "32-34:eq"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "getSource()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "getTarget()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "getVertices0()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryPath",
                            "getEdges()"
                        ]
                    ]
                },
                "218-220:getVertices1": {
                    "start": 218,
                    "end": 220,
                    "body": [
                        "    public VertexPair<V> getVertices1(E e) {\n",
                        "        return indexedVertices.get(e);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "VertexPair<V>",
                            "VertexPair<V>"
                        ]
                    ],
                    "signature": "getVertices1(E)",
                    "parameters": [
                        "e"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get(java.lang.Object)"
                        ]
                    ]
                },
                "213-215:getVertices0": {
                    "start": 213,
                    "end": 215,
                    "body": [
                        "    public Iterable<V> getVertices0() {\n",
                        "        return unmodifiableList(vertices);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Iterable<V>",
                            "java.lang.Iterable<V>"
                        ]
                    ],
                    "signature": "getVertices0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Collections",
                            "unmodifiableList(java.util.List)"
                        ]
                    ]
                },
                "208-210:getTarget": {
                    "start": 208,
                    "end": 210,
                    "body": [
                        "    public V getTarget() {\n",
                        "        return target;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "V",
                            "V"
                        ]
                    ],
                    "signature": "getTarget()",
                    "parameters": [],
                    "calls": []
                },
                "203-205:getSource": {
                    "start": 203,
                    "end": 205,
                    "body": [
                        "    public V getSource() {\n",
                        "        return source;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "V",
                            "V"
                        ]
                    ],
                    "signature": "getSource()",
                    "parameters": [],
                    "calls": []
                },
                "198-200:getSize": {
                    "start": 198,
                    "end": 200,
                    "body": [
                        "    public int getSize() {\n",
                        "        return edges.size();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "getSize()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "size()"
                        ]
                    ]
                },
                "193-195:getOrder": {
                    "start": 193,
                    "end": 195,
                    "body": [
                        "    public int getOrder() {\n",
                        "        return vertices.size();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "getOrder()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "size()"
                        ]
                    ]
                },
                "188-190:getEdges": {
                    "start": 188,
                    "end": 190,
                    "body": [
                        "    public Iterable<E> getEdges() {\n",
                        "        return unmodifiableList(edges);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Iterable<E>",
                            "java.lang.Iterable<E>"
                        ]
                    ],
                    "signature": "getEdges()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Collections",
                            "unmodifiableList(java.util.List)"
                        ]
                    ]
                },
                "183-185:getEdge": {
                    "start": 183,
                    "end": 185,
                    "body": [
                        "    public E getEdge(V source, V target) {\n",
                        "        return indexedEdges.get(new VertexPair<V>(source, target));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "E",
                            "E"
                        ]
                    ],
                    "signature": "getEdge(V, V)",
                    "parameters": [
                        "source",
                        "target"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get(java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/VertexPair",
                            "VertexPair<V>(java.lang.Object,java.lang.Object)"
                        ]
                    ]
                },
                "168-180:getDegree": {
                    "start": 168,
                    "end": 180,
                    "body": [
                        "    public int getDegree(V v) {\n",
                        "        v = checkNotNull(v, \"Impossible to get the degree of a null vertex\");\n",
                        "        checkArgument(\n",
                        "                successors.containsKey(v),\n",
                        "                \"Impossible to get the degree of input vertex; %s not contained in this path\",\n",
                        "                v);\n",
                        "\n",
                        "        if (source.equals(v) || target.equals(v)) {\n",
                        "            return 1;\n",
                        "        }\n",
                        "\n",
                        "        return 2;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "getDegree(V)",
                    "parameters": [
                        "v"
                    ],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.utils.Assertions",
                            "Assertions",
                            "64-70:checkNotNull"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.utils.Assertions",
                            "Assertions",
                            "42-47:checkArgument"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "containsKey(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals(java.lang.Object)"
                        ]
                    ]
                },
                "150-165:getConnectedVertices": {
                    "start": 150,
                    "end": 165,
                    "body": [
                        "    public Iterable<V> getConnectedVertices(V v) {\n",
                        "        v = checkNotNull(v, \"Impossible to get the degree of a null vertex\");\n",
                        "\n",
                        "        if (target.equals(v)) {\n",
                        "            return null;\n",
                        "        }\n",
                        "\n",
                        "        checkArgument(\n",
                        "                successors.containsKey(v),\n",
                        "                \"Impossible to get the degree of input vertex; %s not contained in this path\",\n",
                        "                v);\n",
                        "\n",
                        "        @SuppressWarnings(\"unchecked\") // type driven by input type\n",
                        "        List<V> connected = asList(successors.get(v));\n",
                        "        return connected;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Iterable<V>",
                            "java.lang.Iterable<V>"
                        ]
                    ],
                    "signature": "getConnectedVertices(V)",
                    "parameters": [
                        "v"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "asList(java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get(java.lang.Object)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.utils.Assertions",
                            "Assertions",
                            "64-70:checkNotNull"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.utils.Assertions",
                            "Assertions",
                            "42-47:checkArgument"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "containsKey(java.lang.Object)"
                        ]
                    ]
                },
                "126-128:containsVertex": {
                    "start": 126,
                    "end": 128,
                    "body": [
                        "    public boolean containsVertex(V v) {\n",
                        "        return vertices.contains(v);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "containsVertex(V)",
                    "parameters": [
                        "v"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "contains(java.lang.Object)"
                        ]
                    ]
                },
                "121-123:containsEdge": {
                    "start": 121,
                    "end": 123,
                    "body": [
                        "    public boolean containsEdge(E e) {\n",
                        "        return edges.contains(e);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "containsEdge(E)",
                    "parameters": [
                        "e"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "contains(java.lang.Object)"
                        ]
                    ]
                },
                "109-118:addConnectionInTail": {
                    "start": 109,
                    "end": 118,
                    "body": [
                        "    public void addConnectionInTail(V head, E edge, V tail) {\n",
                        "        vertices.addLast(head);\n",
                        "        edges.addLast(edge);\n",
                        "\n",
                        "        if (target.equals(tail)) {\n",
                        "            vertices.addLast(tail);\n",
                        "        }\n",
                        "\n",
                        "        addConnection(head, edge, tail);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "addConnectionInTail(V, E, V)",
                    "parameters": [
                        "head",
                        "edge",
                        "tail"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "addLast(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.model.InMemoryPath",
                            "InMemoryPath",
                            "76-82:addConnection"
                        ]
                    ]
                },
                "91-100:addConnectionInHead": {
                    "start": 91,
                    "end": 100,
                    "body": [
                        "    public void addConnectionInHead(V head, E edge, V tail) {\n",
                        "        if (target.equals(tail)) {\n",
                        "            vertices.addFirst(tail);\n",
                        "        }\n",
                        "\n",
                        "        vertices.addFirst(head);\n",
                        "        edges.addFirst(edge);\n",
                        "\n",
                        "        addConnection(head, edge, tail);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "addConnectionInHead(V, E, V)",
                    "parameters": [
                        "head",
                        "edge",
                        "tail"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "addFirst(java.lang.Object)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.model.InMemoryPath",
                            "InMemoryPath",
                            "76-82:addConnection"
                        ]
                    ]
                },
                "71-74:InMemoryPath": {
                    "start": 71,
                    "end": 74,
                    "body": [
                        "    public InMemoryPath(V start, V target) {\n",
                        "        this.source = checkNotNull(start, \"Path source cannot be null\");\n",
                        "        this.target = checkNotNull(target, \"Path target cannot be null\");\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "InMemoryPath(V, V)",
                    "parameters": [
                        "start",
                        "target"
                    ],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.utils.Assertions",
                            "Assertions",
                            "64-70:checkNotNull"
                        ]
                    ]
                },
                "76-82:addConnection": {
                    "start": 76,
                    "end": 82,
                    "body": [
                        "    private void addConnection(V head, E edge, V tail) {\n",
                        "        successors.put(head, tail);\n",
                        "\n",
                        "        VertexPair<V> vertexPair = new VertexPair<V>(head, tail);\n",
                        "        indexedEdges.put(vertexPair, edge);\n",
                        "        indexedVertices.put(edge, vertexPair);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "addConnection(V, E, V)",
                    "parameters": [
                        "head",
                        "edge",
                        "tail"
                    ],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/VertexPair",
                            "VertexPair<V>(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(org.apache.commons.graph.VertexPair,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(java.lang.Object,org.apache.commons.graph.VertexPair)"
                        ]
                    ]
                }
            },
            "fields": {
                "62-62:indexedVertices": {
                    "start": 62,
                    "end": 62,
                    "body": [
                        "    private final Map<E, VertexPair<V>> indexedVertices = new HashMap<E, VertexPair<V>>();\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Map<E,VertexPair<V>>",
                            "java.util.Map<E,VertexPair<V>>"
                        ]
                    ]
                },
                "60-60:indexedEdges": {
                    "start": 60,
                    "end": 60,
                    "body": [
                        "    private final Map<VertexPair<V>, E> indexedEdges = new HashMap<VertexPair<V>, E>();\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Map<VertexPair<V>,E>",
                            "java.util.Map<VertexPair<V>,E>"
                        ]
                    ]
                },
                "58-58:successors": {
                    "start": 58,
                    "end": 58,
                    "body": [
                        "    private final Map<V, V> successors = new HashMap<V, V>();\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Map<V,V>",
                            "java.util.Map<V,V>"
                        ]
                    ]
                },
                "56-56:edges": {
                    "start": 56,
                    "end": 56,
                    "body": [
                        "    private final LinkedList<E> edges = new LinkedList<E>();\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "LinkedList<E>",
                            "java.util.LinkedList<E>"
                        ]
                    ]
                },
                "54-54:vertices": {
                    "start": 54,
                    "end": 54,
                    "body": [
                        "    private final LinkedList<V> vertices = new LinkedList<V>();\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "LinkedList<V>",
                            "java.util.LinkedList<V>"
                        ]
                    ]
                },
                "52-52:target": {
                    "start": 52,
                    "end": 52,
                    "body": [
                        "    private final V target;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "V",
                            "V"
                        ]
                    ]
                },
                "50-50:source": {
                    "start": 50,
                    "end": 50,
                    "body": [
                        "    private final V source;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "V",
                            "V"
                        ]
                    ]
                },
                "48-48:serialVersionUID": {
                    "start": 48,
                    "end": 48,
                    "body": [
                        "    private static final long serialVersionUID = -7248626031673230570L;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "long",
                            "long"
                        ]
                    ]
                }
            }
        }
    }
}