{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/Simple9.java",
    "imports": {},
    "classes": {
        "Simple9": {
            "start": 20,
            "end": 20,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [
                "IntegerCODEC",
                "SkippableIntegerCODEC"
            ],
            "extends": [],
            "methods": {
                "295-297:toString": {
                    "start": 295,
                    "end": 297,
                    "body": [
                        "\tpublic String toString() {\n",
                        "\t\treturn this.getClass().getSimpleName();\n",
                        "\t}\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "toString()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "getSimpleName()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "getClass()"
                        ]
                    ]
                },
                "281-288:uncompress0": {
                    "start": 281,
                    "end": 288,
                    "body": [
                        "\tpublic void uncompress0(int[] in, IntWrapper inpos, int inlength, int[] out, IntWrapper outpos) {\n",
                        "\t\tif (inlength == 0)\n",
                        "\t\t\treturn;\n",
                        "\t\tfinal int outlength = in[inpos.get()];\n",
                        "\t\tinpos.increment();\n",
                        "\t\theadlessUncompress(in, inpos, inlength, out, outpos, outlength);\n",
                        "\n",
                        "\t}\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "uncompress0(int[], IntWrapper, int, int[], IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "69-71:increment"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Simple9",
                            "Simple9",
                            "83-269:headlessUncompress"
                        ]
                    ]
                },
                "272-278:compress0": {
                    "start": 272,
                    "end": 278,
                    "body": [
                        "\tpublic void compress0(int[] in, IntWrapper inpos, int inlength, int[] out, IntWrapper outpos) {\n",
                        "\t\tif (inlength == 0)\n",
                        "\t\t\treturn;\n",
                        "\t\tout[outpos.get()] = inlength;\n",
                        "\t\toutpos.increment();\n",
                        "\t\theadlessCompress(in, inpos, inlength, out, outpos);\n",
                        "\t}\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "compress0(int[], IntWrapper, int, int[], IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "69-71:increment"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Simple9",
                            "Simple9",
                            "24-80:headlessCompress"
                        ]
                    ]
                },
                "83-269:headlessUncompress": {
                    "start": 83,
                    "end": 269,
                    "body": [
                        "\tpublic void headlessUncompress(int[] in, IntWrapper inpos, int inlength, int[] out, IntWrapper outpos,\n",
                        "\t\t\tint outlength) {\n",
                        "\t\tint currentPos = outpos.get();\n",
                        "\t\tint tmpinpos = inpos.get();\n",
                        "\t\tfinal int finalout = currentPos + outlength;\n",
                        "\t\twhile (currentPos < finalout - 28) {\n",
                        "\t\t\tint val = in[tmpinpos++];\n",
                        "\t\t\tint header = val >>> 28;\n",
                        "\t\t\tswitch (header) {\n",
                        "\t\t\tcase 0: { // number : 28, bitwidth : 1\n",
                        "\t\t\t\tout[currentPos++] = (val << 4) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 5) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 6) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 7) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 8) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 9) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 10) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 11) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 12) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 13) >>> 31; // 10\n",
                        "\t\t\t\tout[currentPos++] = (val << 14) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 15) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 16) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 17) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 18) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 19) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 20) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 21) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 22) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 23) >>> 31; // 20\n",
                        "\t\t\t\tout[currentPos++] = (val << 24) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 25) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 26) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 27) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 28) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 29) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 30) >>> 31;\n",
                        "\t\t\t\tout[currentPos++] = (val << 31) >>> 31;\n",
                        "\t\t\t\tbreak;\n",
                        "\t\t\t}\n",
                        "\t\t\tcase 1: { // number : 14, bitwidth : 2\n",
                        "\t\t\t\tout[currentPos++] = (val << 4) >>> 30;\n",
                        "\t\t\t\tout[currentPos++] = (val << 6) >>> 30;\n",
                        "\t\t\t\tout[currentPos++] = (val << 8) >>> 30;\n",
                        "\t\t\t\tout[currentPos++] = (val << 10) >>> 30;\n",
                        "\t\t\t\tout[currentPos++] = (val << 12) >>> 30;\n",
                        "\t\t\t\tout[currentPos++] = (val << 14) >>> 30;\n",
                        "\t\t\t\tout[currentPos++] = (val << 16) >>> 30;\n",
                        "\t\t\t\tout[currentPos++] = (val << 18) >>> 30;\n",
                        "\t\t\t\tout[currentPos++] = (val << 20) >>> 30;\n",
                        "\t\t\t\tout[currentPos++] = (val << 22) >>> 30; // 10\n",
                        "\t\t\t\tout[currentPos++] = (val << 24) >>> 30;\n",
                        "\t\t\t\tout[currentPos++] = (val << 26) >>> 30;\n",
                        "\t\t\t\tout[currentPos++] = (val << 28) >>> 30;\n",
                        "\t\t\t\tout[currentPos++] = (val << 30) >>> 30;\n",
                        "\t\t\t\tbreak;\n",
                        "\t\t\t}\n",
                        "\t\t\tcase 2: { // number : 9, bitwidth : 3\n",
                        "\t\t\t\tout[currentPos++] = (val << 5) >>> 29;\n",
                        "\t\t\t\tout[currentPos++] = (val << 8) >>> 29;\n",
                        "\t\t\t\tout[currentPos++] = (val << 11) >>> 29;\n",
                        "\t\t\t\tout[currentPos++] = (val << 14) >>> 29;\n",
                        "\t\t\t\tout[currentPos++] = (val << 17) >>> 29;\n",
                        "\t\t\t\tout[currentPos++] = (val << 20) >>> 29;\n",
                        "\t\t\t\tout[currentPos++] = (val << 23) >>> 29;\n",
                        "\t\t\t\tout[currentPos++] = (val << 26) >>> 29;\n",
                        "\t\t\t\tout[currentPos++] = (val << 29) >>> 29;\n",
                        "\t\t\t\tbreak;\n",
                        "\t\t\t}\n",
                        "\t\t\tcase 3: { // number : 7, bitwidth : 4\n",
                        "\t\t\t\tout[currentPos++] = (val << 4) >>> 28;\n",
                        "\t\t\t\tout[currentPos++] = (val << 8) >>> 28;\n",
                        "\t\t\t\tout[currentPos++] = (val << 12) >>> 28;\n",
                        "\t\t\t\tout[currentPos++] = (val << 16) >>> 28;\n",
                        "\t\t\t\tout[currentPos++] = (val << 20) >>> 28;\n",
                        "\t\t\t\tout[currentPos++] = (val << 24) >>> 28;\n",
                        "\t\t\t\tout[currentPos++] = (val << 28) >>> 28;\n",
                        "\t\t\t\tbreak;\n",
                        "\t\t\t}\n",
                        "\t\t\tcase 4: { // number : 5, bitwidth : 5\n",
                        "\t\t\t\tout[currentPos++] = (val << 7) >>> 27;\n",
                        "\t\t\t\tout[currentPos++] = (val << 12) >>> 27;\n",
                        "\t\t\t\tout[currentPos++] = (val << 17) >>> 27;\n",
                        "\t\t\t\tout[currentPos++] = (val << 22) >>> 27;\n",
                        "\t\t\t\tout[currentPos++] = (val << 27) >>> 27;\n",
                        "\t\t\t\tbreak;\n",
                        "\t\t\t}\n",
                        "\t\t\tcase 5: { // number : 4, bitwidth : 7\n",
                        "\t\t\t\tout[currentPos++] = (val << 4) >>> 25;\n",
                        "\t\t\t\tout[currentPos++] = (val << 11) >>> 25;\n",
                        "\t\t\t\tout[currentPos++] = (val << 18) >>> 25;\n",
                        "\t\t\t\tout[currentPos++] = (val << 25) >>> 25;\n",
                        "\t\t\t\tbreak;\n",
                        "\t\t\t}\n",
                        "\t\t\tcase 6: { // number : 3, bitwidth : 9\n",
                        "\t\t\t\tout[currentPos++] = (val << 5) >>> 23;\n",
                        "\t\t\t\tout[currentPos++] = (val << 14) >>> 23;\n",
                        "\t\t\t\tout[currentPos++] = (val << 23) >>> 23;\n",
                        "\t\t\t\tbreak;\n",
                        "\t\t\t}\n",
                        "\t\t\tcase 7: { // number : 2, bitwidth : 14\n",
                        "\t\t\t\tout[currentPos++] = (val << 4) >>> 18;\n",
                        "\t\t\t\tout[currentPos++] = (val << 18) >>> 18;\n",
                        "\t\t\t\tbreak;\n",
                        "\t\t\t}\n",
                        "\t\t\tcase 8: { // number : 1, bitwidth : 28\n",
                        "\t\t\t\tout[currentPos++] = (val << 4) >>> 4;\n",
                        "\t\t\t\tbreak;\n",
                        "\t\t\t}\n",
                        "\t\t\tdefault: {\n",
                        "\t\t\t\tthrow new RuntimeException(\"shouldn't happen: limited to 28-bit integers\");\n",
                        "\t\t\t}\n",
                        "\t\t\t}\n",
                        "\t\t}\n",
                        "\t\twhile (currentPos < finalout) {\n",
                        "\t\t\tint val = in[tmpinpos++];\n",
                        "\t\t\tint header = val >>> 28;\n",
                        "\t\t\tswitch (header) {\n",
                        "\t\t\tcase 0: { // number : 28, bitwidth : 1\n",
                        "\t\t\t\tfinal int howmany = finalout - currentPos;\n",
                        "\t\t\t\tfor (int k = 0; k < howmany; ++k) {\n",
                        "\t\t\t\t\tout[currentPos++] = (val << (k + 4)) >>> 31;\n",
                        "\t\t\t\t}\n",
                        "\t\t\t\tbreak;\n",
                        "\t\t\t}\n",
                        "\t\t\tcase 1: { // number : 14, bitwidth : 2\n",
                        "\t\t\t\tfinal int howmany = finalout - currentPos < 14 ? finalout - currentPos : 14;\n",
                        "\t\t\t\tfor (int k = 0; k < howmany; ++k) {\n",
                        "\t\t\t\t\tout[currentPos++] = (val << (2 * k + 4)) >>> 30;\n",
                        "\t\t\t\t}\n",
                        "\t\t\t\tbreak;\n",
                        "\t\t\t}\n",
                        "\t\t\tcase 2: { // number : 9, bitwidth : 3\n",
                        "\t\t\t\tfinal int howmany = finalout - currentPos < 9 ? finalout - currentPos : 9;\n",
                        "\t\t\t\tfor (int k = 0; k < howmany; ++k) {\n",
                        "\t\t\t\t\tout[currentPos++] = (val << (3 * k + 5)) >>> 29;\n",
                        "\t\t\t\t}\n",
                        "\t\t\t\tbreak;\n",
                        "\t\t\t}\n",
                        "\t\t\tcase 3: { // number : 7, bitwidth : 4\n",
                        "\t\t\t\tfinal int howmany = finalout - currentPos < 7 ? finalout - currentPos : 7;\n",
                        "\t\t\t\tfor (int k = 0; k < howmany; ++k) {\n",
                        "\t\t\t\t\tout[currentPos++] = (val << (4 * k + 4)) >>> 28;\n",
                        "\t\t\t\t}\n",
                        "\t\t\t\tbreak;\n",
                        "\t\t\t}\n",
                        "\t\t\tcase 4: { // number : 5, bitwidth : 5\n",
                        "\t\t\t\tfinal int howmany = finalout - currentPos < 5 ? finalout - currentPos : 5;\n",
                        "\t\t\t\tfor (int k = 0; k < howmany; ++k) {\n",
                        "\t\t\t\t\tout[currentPos++] = (val << (5 * k + 7)) >>> 27;\n",
                        "\t\t\t\t}\n",
                        "\t\t\t\tbreak;\n",
                        "\t\t\t}\n",
                        "\t\t\tcase 5: { // number : 4, bitwidth : 7\n",
                        "\t\t\t\tfinal int howmany = finalout - currentPos < 4 ? finalout - currentPos : 4;\n",
                        "\t\t\t\tfor (int k = 0; k < howmany; ++k) {\n",
                        "\t\t\t\t\tout[currentPos++] = (val << (7 * k + 4)) >>> 25;\n",
                        "\t\t\t\t}\n",
                        "\t\t\t\tbreak;\n",
                        "\t\t\t}\n",
                        "\t\t\tcase 6: { // number : 3, bitwidth : 9\n",
                        "\t\t\t\tfinal int howmany = finalout - currentPos < 3 ? finalout - currentPos : 3;\n",
                        "\t\t\t\tfor (int k = 0; k < howmany; ++k) {\n",
                        "\t\t\t\t\tout[currentPos++] = (val << (9 * k + 5)) >>> 23;\n",
                        "\t\t\t\t}\n",
                        "\t\t\t\tbreak;\n",
                        "\t\t\t}\n",
                        "\t\t\tcase 7: { // number : 2, bitwidth : 14\n",
                        "\t\t\t\tfinal int howmany = finalout - currentPos < 2 ? finalout - currentPos : 2;\n",
                        "\t\t\t\tfor (int k = 0; k < howmany; ++k) {\n",
                        "\t\t\t\t\tout[currentPos++] = (val << (14 * k + 4)) >>> 18;\n",
                        "\t\t\t\t}\n",
                        "\t\t\t\tbreak;\n",
                        "\t\t\t}\n",
                        "\t\t\tcase 8: { // number : 1, bitwidth : 28\n",
                        "\t\t\t\tout[currentPos++] = (val << 4) >>> 4;\n",
                        "\t\t\t\tbreak;\n",
                        "\t\t\t}\n",
                        "\t\t\tdefault: {\n",
                        "\t\t\t\tthrow new RuntimeException(\"shouldn't happen\");\n",
                        "\t\t\t}\n",
                        "\t\t\t}\n",
                        "\t\t}\n",
                        "\t\toutpos.set(currentPos);\n",
                        "\t\tinpos.set(tmpinpos);\n",
                        "\n",
                        "\t}\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessUncompress(int[], IntWrapper, int, int[], IntWrapper, int)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos",
                        "outlength"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "89-91:set"
                        ]
                    ]
                },
                "24-80:headlessCompress": {
                    "start": 24,
                    "end": 80,
                    "body": [
                        "\tpublic void headlessCompress(int[] in, IntWrapper inpos, int inlength, int out[], IntWrapper outpos) {\n",
                        "\t\tint tmpoutpos = outpos.get();\n",
                        "\t\tint currentPos = inpos.get();\n",
                        "\t\tfinal int finalin = currentPos + inlength;\n",
                        "\t\touter: while (currentPos < finalin - 28) {\n",
                        "\t\t\tmainloop: for (int selector = 0; selector < 8; selector++) {\n",
                        "\n",
                        "\t\t\t\tint res = 0;\n",
                        "\t\t\t\tint compressedNum = codeNum[selector];\n",
                        "\t\t\t\tint b = bitLength[selector];\n",
                        "\t\t\t\tint max = 1 << b;\n",
                        "\t\t\t\tint i = 0;\n",
                        "\t\t\t\tfor (; i < compressedNum; i++) {\n",
                        "\t\t\t\t\tif (max <= in[currentPos + i])\n",
                        "\t\t\t\t\t\tcontinue mainloop;\n",
                        "\t\t\t\t\tres = (res << b) + in[currentPos + i];\n",
                        "\t\t\t\t}\n",
                        "\t\t\t\tres |= selector << 28;\n",
                        "\t\t\t\tout[tmpoutpos++] = res;\n",
                        "\t\t\t\tcurrentPos += compressedNum;\n",
                        "\t\t\t\tcontinue outer;\n",
                        "\t\t\t}\n",
                        "\t\t\tfinal int selector = 8;\n",
                        "\t\t\tif (in[currentPos] >= 1 << bitLength[selector])\n",
                        "\t\t\t\tthrow new RuntimeException(\"Too big a number\");\n",
                        "\t\t\tout[tmpoutpos++] = in[currentPos++] | (selector << 28);\n",
                        "\t\t}\n",
                        "\t\touter: while (currentPos < finalin) {\n",
                        "\t\t\tmainloop: for (int selector = 0; selector < 8; selector++) {\n",
                        "\t\t\t\tint res = 0;\n",
                        "\t\t\t\tint compressedNum = codeNum[selector];\n",
                        "\t\t\t\tif (finalin <= currentPos + compressedNum - 1)\n",
                        "\t\t\t\t\tcompressedNum = finalin - currentPos;\n",
                        "\t\t\t\tint b = bitLength[selector];\n",
                        "\t\t\t\tint max = 1 << b;\n",
                        "\t\t\t\tint i = 0;\n",
                        "\t\t\t\tfor (; i < compressedNum; i++) {\n",
                        "\t\t\t\t\tif (max <= in[currentPos + i])\n",
                        "\t\t\t\t\t\tcontinue mainloop;\n",
                        "\t\t\t\t\tres = (res << b) + in[currentPos + i];\n",
                        "\t\t\t\t}\n",
                        "\n",
                        "\t\t\t\tif (compressedNum != codeNum[selector])\n",
                        "\t\t\t\t\tres <<= (codeNum[selector] - compressedNum) * b;\n",
                        "\t\t\t\tres |= selector << 28;\n",
                        "\t\t\t\tout[tmpoutpos++] = res;\n",
                        "\t\t\t\tcurrentPos += compressedNum;\n",
                        "\t\t\t\tcontinue outer;\n",
                        "\t\t\t}\n",
                        "\t\t\tfinal int selector = 8;\n",
                        "\t\t\tif (in[currentPos] >= 1 << bitLength[selector])\n",
                        "\t\t\t\tthrow new RuntimeException(\"Too big a number\");\n",
                        "\t\t\tout[tmpoutpos++] = in[currentPos++] | (selector << 28);\n",
                        "\t\t}\n",
                        "\t\tinpos.set(currentPos);\n",
                        "\t\toutpos.set(tmpoutpos);\n",
                        "\t}\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessCompress(int[], IntWrapper, int, int[], IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "89-91:set"
                        ]
                    ]
                }
            },
            "fields": {
                "292-292:codeNum": {
                    "start": 292,
                    "end": 292,
                    "body": [
                        "\tprivate final static int codeNum[] = { 28, 14, 9, 7, 5, 4, 3, 2, 1 };\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int[]",
                            "int[]"
                        ]
                    ]
                },
                "290-290:bitLength": {
                    "start": 290,
                    "end": 290,
                    "body": [
                        "\tprivate final static int bitLength[] = { 1, 2, 3, 4, 5, 7, 9, 14, 28 };\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int[]",
                            "int[]"
                        ]
                    ]
                }
            }
        }
    }
}