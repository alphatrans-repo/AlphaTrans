{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-graph/src/main/java/org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector.java",
    "imports": {
        "26-26:import DirectedGraph": {
            "start": 26,
            "end": 26,
            "body": [
                "import org.apache.commons.graph.DirectedGraph;\n"
            ]
        },
        "28-28:import VertexPair": {
            "start": 28,
            "end": 28,
            "body": [
                "import org.apache.commons.graph.VertexPair;\n"
            ]
        },
        "27-27:import Mapper": {
            "start": 27,
            "end": 27,
            "body": [
                "import org.apache.commons.graph.Mapper;\n"
            ]
        },
        "29-29:import AbstractGraphConnection": {
            "start": 29,
            "end": 29,
            "body": [
                "import org.apache.commons.graph.builder.AbstractGraphConnection;\n"
            ]
        },
        "30-30:import OrderedMonoid": {
            "start": 30,
            "end": 30,
            "body": [
                "import org.apache.commons.graph.weight.OrderedMonoid;\n"
            ]
        },
        "22-22:import static CommonsGraph.newDirectedMutableGraph": {
            "start": 22,
            "end": 22,
            "body": [
                "import static org.apache.commons.graph.CommonsGraph.newDirectedMutableGraph;\n"
            ]
        },
        "23-23:import static CommonsGraph.visit": {
            "start": 23,
            "end": 23,
            "body": [
                "import static org.apache.commons.graph.CommonsGraph.visit;\n"
            ]
        },
        "24-24:import static Assertions.checkNotNull": {
            "start": 24,
            "end": 24,
            "body": [
                "import static org.apache.commons.graph.utils.Assertions.checkNotNull;\n"
            ]
        }
    },
    "classes": {
        "new AbstractGraphConnection<V,EdgeWrapper<WE>>(...) { ... }": {
            "start": 155,
            "end": 155,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "DefaultMaxFlowAlgorithmSelector",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "158-173:connect0": {
                    "start": 158,
                    "end": 173,
                    "body": [
                        "                    public void connect0() {\n",
                        "                        for (V vertex : graph.getVertices0()) {\n",
                        "                            addVertex(vertex);\n",
                        "                        }\n",
                        "                        for (WE edge : graph.getEdges()) {\n",
                        "                            VertexPair<V> edgeVertices = graph.getVertices1(edge);\n",
                        "                            V head = edgeVertices.getHead();\n",
                        "                            V tail = edgeVertices.getTail();\n",
                        "\n",
                        "                            addEdge(new EdgeWrapper<WE>(edge)).from(head).to(tail);\n",
                        "\n",
                        "                            if (graph.getEdge(tail, head) == null) {\n",
                        "                                addEdge(EdgeWrapper.EdgeWrapper1()).from(tail).to(head);\n",
                        "                            }\n",
                        "                        }\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/Graph",
                            "getVertices0"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Graph",
                            "getEdges"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Graph",
                            "getVertices1"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/VertexPair",
                            "getHead"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/VertexPair",
                            "getTail"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector$EdgeWrapper",
                            "EdgeWrapper<WE>"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Graph",
                            "getEdge"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.flow.DefaultMaxFlowAlgorithmSelector",
                            "EdgeWrapper",
                            "50-52:EdgeWrapper1"
                        ]
                    ],
                    "is_overload": false
                },
                "154-155:": {
                    "start": 154,
                    "end": 155,
                    "body": [
                        "        return newDirectedMutableGraph(\n",
                        "                new AbstractGraphConnection<V, EdgeWrapper<WE>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false
                }
            },
            "fields": {}
        },
        "EdgeWrapper": {
            "start": 42,
            "end": 42,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "DefaultMaxFlowAlgorithmSelector",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "54-56:getWrapped": {
                    "start": 54,
                    "end": 56,
                    "body": [
                        "        public WE getWrapped() {\n",
                        "            return wrapped;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "WE",
                            "WE"
                        ]
                    ],
                    "signature": "getWrapped()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getWrapped(self) -> typing.Any:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "50-52:EdgeWrapper1": {
                    "start": 50,
                    "end": 52,
                    "body": [
                        "        public static EdgeWrapper EdgeWrapper1() {\n",
                        "            return new EdgeWrapper(null);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "EdgeWrapper<>",
                            "EdgeWrapper<>"
                        ]
                    ],
                    "signature": "EdgeWrapper1()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector$EdgeWrapper",
                            "EdgeWrapper<>(java.lang.Object)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def EdgeWrapper1() -> EdgeWrapper[typing.Any]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "46-48:EdgeWrapper": {
                    "start": 46,
                    "end": 48,
                    "body": [
                        "        public EdgeWrapper(WE wrapped) {\n",
                        "            this.wrapped = wrapped;\n",
                        "        }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "EdgeWrapper(WE)",
                    "parameters": [
                        "wrapped"
                    ],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __init__(self, wrapped: typing.Any) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {
                "44-44:wrapped": {
                    "start": 44,
                    "end": 44,
                    "body": [
                        "        private final WE wrapped;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "WE",
                            "WE"
                        ]
                    ],
                    "partial_translation": [
                        "    __wrapped: typing.Any = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class EdgeWrapper:\n\n"
        },
        "DefaultMaxFlowAlgorithmSelector": {
            "start": 39,
            "end": 40,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "EdgeWrapper",
                "MapperWrapper",
                "new AbstractGraphConnection<V,EdgeWrapper<WE>>(...) { ... }"
            ],
            "implements": [
                "MaxFlowAlgorithmSelector"
            ],
            "extends": [],
            "methods": {
                "125-150:applyingFordFulkerson": {
                    "start": 125,
                    "end": 150,
                    "body": [
                        "    public <WO extends OrderedMonoid<W>> W applyingFordFulkerson(WO weightOperations) {\n",
                        "        final WO checkedWeightOperations =\n",
                        "                checkNotNull(\n",
                        "                        weightOperations,\n",
                        "                        \"Weight operations can not be null to find the max flow in the graph\");\n",
                        "\n",
                        "        final DirectedGraph<V, EdgeWrapper<WE>> flowNetwork =\n",
                        "                newFlowNetwok(graph, checkedWeightOperations);\n",
                        "\n",
                        "        final FlowNetworkHandler<V, EdgeWrapper<WE>, W> flowNetworkHandler =\n",
                        "                new FlowNetworkHandler<V, EdgeWrapper<WE>, W>(\n",
                        "                        flowNetwork,\n",
                        "                        source,\n",
                        "                        target,\n",
                        "                        checkedWeightOperations,\n",
                        "                        new MapperWrapper<WE, W, WO>(checkedWeightOperations, weightedEdges));\n",
                        "\n",
                        "        visit(flowNetwork).from(source).applyingDepthFirstSearch1(flowNetworkHandler);\n",
                        "\n",
                        "        while (flowNetworkHandler.hasAugmentingPath()) {\n",
                        "            flowNetworkHandler.updateResidualNetworkWithCurrentAugmentingPath();\n",
                        "            visit(flowNetwork).from(source).applyingDepthFirstSearch1(flowNetworkHandler);\n",
                        "        }\n",
                        "\n",
                        "        return flowNetworkHandler.onCompleted();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "W",
                            "W"
                        ]
                    ],
                    "signature": "applyingFordFulkerson(WO)",
                    "parameters": [
                        "weightOperations"
                    ],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.utils.Assertions",
                            "Assertions",
                            "64-70:checkNotNull"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.flow.DefaultMaxFlowAlgorithmSelector",
                            "DefaultMaxFlowAlgorithmSelector",
                            "152-175:newFlowNetwok"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowNetworkHandler",
                            "FlowNetworkHandler<V,EdgeWrapper<WE>,W>(org.apache.commons.graph.DirectedGraph,java.lang.Object,java.lang.Object,org.apache.commons.graph.weight.OrderedMonoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector$MapperWrapper",
                            "MapperWrapper<WE,W,WO>(org.apache.commons.graph.weight.OrderedMonoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/visit/VisitAlgorithmsSelector",
                            "applyingDepthFirstSearch1(org.apache.commons.graph.visit.GraphVisitHandler)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/visit/VisitSourceSelector",
                            "from(java.lang.Object)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "354-357:visit"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowNetworkHandler",
                            "hasAugmentingPath()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowNetworkHandler",
                            "updateResidualNetworkWithCurrentAugmentingPath()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowNetworkHandler",
                            "onCompleted()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def applyingFordFulkerson(self, weightOperations: typing.Any) -> typing.Any:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "97-122:applyingEdmondsKarp": {
                    "start": 97,
                    "end": 122,
                    "body": [
                        "    public <WO extends OrderedMonoid<W>> W applyingEdmondsKarp(WO weightOperations) {\n",
                        "        final WO checkedWeightOperations =\n",
                        "                checkNotNull(\n",
                        "                        weightOperations,\n",
                        "                        \"Weight operations can not be null to find the max flow in the graph\");\n",
                        "\n",
                        "        final DirectedGraph<V, EdgeWrapper<WE>> flowNetwork =\n",
                        "                newFlowNetwok(graph, checkedWeightOperations);\n",
                        "\n",
                        "        final FlowNetworkHandler<V, EdgeWrapper<WE>, W> flowNetworkHandler =\n",
                        "                new FlowNetworkHandler<V, EdgeWrapper<WE>, W>(\n",
                        "                        flowNetwork,\n",
                        "                        source,\n",
                        "                        target,\n",
                        "                        checkedWeightOperations,\n",
                        "                        new MapperWrapper<WE, W, WO>(checkedWeightOperations, weightedEdges));\n",
                        "\n",
                        "        visit(flowNetwork).from(source).applyingBreadthFirstSearch1(flowNetworkHandler);\n",
                        "\n",
                        "        while (flowNetworkHandler.hasAugmentingPath()) {\n",
                        "            flowNetworkHandler.updateResidualNetworkWithCurrentAugmentingPath();\n",
                        "            visit(flowNetwork).from(source).applyingBreadthFirstSearch1(flowNetworkHandler);\n",
                        "        }\n",
                        "\n",
                        "        return flowNetworkHandler.onCompleted();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "W",
                            "W"
                        ]
                    ],
                    "signature": "applyingEdmondsKarp(WO)",
                    "parameters": [
                        "weightOperations"
                    ],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.utils.Assertions",
                            "Assertions",
                            "64-70:checkNotNull"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.flow.DefaultMaxFlowAlgorithmSelector",
                            "DefaultMaxFlowAlgorithmSelector",
                            "152-175:newFlowNetwok"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowNetworkHandler",
                            "FlowNetworkHandler<V,EdgeWrapper<WE>,W>(org.apache.commons.graph.DirectedGraph,java.lang.Object,java.lang.Object,org.apache.commons.graph.weight.OrderedMonoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector$MapperWrapper",
                            "MapperWrapper<WE,W,WO>(org.apache.commons.graph.weight.OrderedMonoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/visit/VisitAlgorithmsSelector",
                            "applyingBreadthFirstSearch1(org.apache.commons.graph.visit.GraphVisitHandler)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/visit/VisitSourceSelector",
                            "from(java.lang.Object)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "354-357:visit"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowNetworkHandler",
                            "hasAugmentingPath()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowNetworkHandler",
                            "updateResidualNetworkWithCurrentAugmentingPath()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowNetworkHandler",
                            "onCompleted()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def applyingEdmondsKarp(self, weightOperations: typing.Any) -> typing.Any:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "88-94:DefaultMaxFlowAlgorithmSelector": {
                    "start": 88,
                    "end": 94,
                    "body": [
                        "    public DefaultMaxFlowAlgorithmSelector(\n",
                        "            DirectedGraph<V, WE> graph, Mapper<WE, W> weightedEdges, V source, V target) {\n",
                        "        this.graph = graph;\n",
                        "        this.weightedEdges = weightedEdges;\n",
                        "        this.source = source;\n",
                        "        this.target = target;\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "DefaultMaxFlowAlgorithmSelector(DirectedGraph<V,WE>, Mapper<WE,W>, V, V)",
                    "parameters": [
                        "graph",
                        "weightedEdges",
                        "source",
                        "target"
                    ],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __init__(self, graph: DirectedGraph[typing.Any, typing.Any], weightedEdges: Mapper[typing.Any, typing.Any], source: typing.Any, target: typing.Any) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "152-175:newFlowNetwok": {
                    "start": 152,
                    "end": 175,
                    "body": [
                        "    private <WO extends OrderedMonoid<W>> DirectedGraph<V, EdgeWrapper<WE>> newFlowNetwok(\n",
                        "            final DirectedGraph<V, WE> graph, final WO weightOperations) {\n",
                        "        return newDirectedMutableGraph(\n",
                        "                new AbstractGraphConnection<V, EdgeWrapper<WE>>() {\n",
                        "\n",
                        "                    @Override\n",
                        "                    public void connect0() {\n",
                        "                        for (V vertex : graph.getVertices0()) {\n",
                        "                            addVertex(vertex);\n",
                        "                        }\n",
                        "                        for (WE edge : graph.getEdges()) {\n",
                        "                            VertexPair<V> edgeVertices = graph.getVertices1(edge);\n",
                        "                            V head = edgeVertices.getHead();\n",
                        "                            V tail = edgeVertices.getTail();\n",
                        "\n",
                        "                            addEdge(new EdgeWrapper<WE>(edge)).from(head).to(tail);\n",
                        "\n",
                        "                            if (graph.getEdge(tail, head) == null) {\n",
                        "                                addEdge(EdgeWrapper.EdgeWrapper1()).from(tail).to(head);\n",
                        "                            }\n",
                        "                        }\n",
                        "                    }\n",
                        "                });\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "DirectedGraph<V,EdgeWrapper<WE>>",
                            "DirectedGraph<V,EdgeWrapper<WE>>"
                        ]
                    ],
                    "signature": "newFlowNetwok(DirectedGraph<V,WE>, WO)",
                    "parameters": [
                        "graph",
                        "weightOperations"
                    ],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __newFlowNetwok(self, graph: DirectedGraph[typing.Any, typing.Any], weightOperations: typing.Any) -> DirectedGraph[typing.Any, EdgeWrapper[typing.Any]]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {
                "86-86:target": {
                    "start": 86,
                    "end": 86,
                    "body": [
                        "    private final V target;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "V",
                            "V"
                        ]
                    ],
                    "partial_translation": [
                        "    __target: typing.Any = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "84-84:source": {
                    "start": 84,
                    "end": 84,
                    "body": [
                        "    private final V source;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "V",
                            "V"
                        ]
                    ],
                    "partial_translation": [
                        "    __source: typing.Any = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "82-82:weightedEdges": {
                    "start": 82,
                    "end": 82,
                    "body": [
                        "    private final Mapper<WE, W> weightedEdges;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Mapper<WE,W>",
                            "Mapper<WE,W>"
                        ]
                    ],
                    "partial_translation": [
                        "    __weightedEdges: Mapper[typing.Any, typing.Any] = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "80-80:graph": {
                    "start": 80,
                    "end": 80,
                    "body": [
                        "    private final DirectedGraph<V, WE> graph;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "DirectedGraph<V,WE>",
                            "DirectedGraph<V,WE>"
                        ]
                    ],
                    "partial_translation": [
                        "    __graph: DirectedGraph[typing.Any, typing.Any] = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class DefaultMaxFlowAlgorithmSelector(MaxFlowAlgorithmSelector):\n\n"
        },
        "MapperWrapper": {
            "start": 60,
            "end": 61,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "DefaultMaxFlowAlgorithmSelector",
            "nests": [],
            "implements": [
                "Mapper"
            ],
            "extends": [],
            "methods": {
                "72-77:map": {
                    "start": 72,
                    "end": 77,
                    "body": [
                        "        public W map(EdgeWrapper<WE> input) {\n",
                        "            if (input.getWrapped() == null) {\n",
                        "                return weightOperations.identity();\n",
                        "            }\n",
                        "            return weightedEdges.map(input.getWrapped());\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "W",
                            "W"
                        ]
                    ],
                    "signature": "map(EdgeWrapper<WE>)",
                    "parameters": [
                        "input"
                    ],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/flow/DefaultMaxFlowAlgorithmSelector$EdgeWrapper",
                            "getWrapped()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Mapper",
                            "map(java.lang.Object)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def map_(self, input_: EdgeWrapper[typing.Any]) -> typing.Any:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "67-70:MapperWrapper": {
                    "start": 67,
                    "end": 70,
                    "body": [
                        "        public MapperWrapper(WO weightOperations, Mapper<WE, W> weightedEdges) {\n",
                        "            this.weightOperations = weightOperations;\n",
                        "            this.weightedEdges = weightedEdges;\n",
                        "        }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "MapperWrapper(WO, Mapper<WE,W>)",
                    "parameters": [
                        "weightOperations",
                        "weightedEdges"
                    ],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __init__(self, weightOperations: typing.Any, weightedEdges: Mapper[typing.Any, typing.Any]) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {
                "65-65:weightedEdges": {
                    "start": 65,
                    "end": 65,
                    "body": [
                        "        private final Mapper<WE, W> weightedEdges;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Mapper<WE,W>",
                            "Mapper<WE,W>"
                        ]
                    ],
                    "partial_translation": [
                        "    __weightedEdges: Mapper[typing.Any, typing.Any] = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "63-63:weightOperations": {
                    "start": 63,
                    "end": 63,
                    "body": [
                        "        private final WO weightOperations;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "WO",
                            "WO"
                        ]
                    ],
                    "partial_translation": [
                        "    __weightOperations: typing.Any = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class MapperWrapper(Mapper):\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import io",
        "import typing\nfrom typing import *",
        "from src.main.org.apache.commons.graph.CommonsGraph import *",
        "from src.main.org.apache.commons.graph.DirectedGraph import *",
        "from src.main.org.apache.commons.graph.Graph import *",
        "from src.main.org.apache.commons.graph.Mapper import *",
        "from src.main.org.apache.commons.graph.builder.GraphConnection import *",
        "from src.main.org.apache.commons.graph.flow.FlowNetworkHandler import *",
        "from src.main.org.apache.commons.graph.flow.MaxFlowAlgorithmSelector import *",
        "from src.main.org.apache.commons.graph.model.DirectedMutableGraph import *",
        "from src.main.org.apache.commons.graph.utils.Assertions import *",
        "from src.main.org.apache.commons.graph.visit.GraphVisitHandler import *",
        "from src.main.org.apache.commons.graph.visit.VisitAlgorithmsSelector import *",
        "from src.main.org.apache.commons.graph.visit.VisitSourceSelector import *",
        "from src.main.org.apache.commons.graph.weight.OrderedMonoid import *",
        "from src.main.org.apache.commons.graph.VertexPair import *",
        "from src.main.org.apache.commons.graph.builder.AbstractGraphConnection import *",
        "from src.main.org.apache.commons.graph.builder.HeadVertexConnector import *",
        "from src.main.org.apache.commons.graph.builder.TailVertexConnector import *"
    ]
}