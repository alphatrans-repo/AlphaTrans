{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-validator/src/main/java/org/apache/commons/validator/ValidatorAction.java",
    "imports": {
        "22-22:import BufferedReader": {
            "start": 22,
            "end": 22,
            "body": [
                "import java.io.BufferedReader;\n"
            ]
        },
        "23-23:import IOException": {
            "start": 23,
            "end": 23,
            "body": [
                "import java.io.IOException;\n"
            ]
        },
        "26-26:import Serializable": {
            "start": 26,
            "end": 26,
            "body": [
                "import java.io.Serializable;\n"
            ]
        },
        "24-24:import InputStream": {
            "start": 24,
            "end": 24,
            "body": [
                "import java.io.InputStream;\n"
            ]
        },
        "25-25:import InputStreamReader": {
            "start": 25,
            "end": 25,
            "body": [
                "import java.io.InputStreamReader;\n"
            ]
        },
        "32-32:import Map": {
            "start": 32,
            "end": 32,
            "body": [
                "import java.util.Map;\n"
            ]
        },
        "31-31:import List": {
            "start": 31,
            "end": 31,
            "body": [
                "import java.util.List;\n"
            ]
        },
        "27-27:import Method": {
            "start": 27,
            "end": 27,
            "body": [
                "import java.lang.reflect.Method;\n"
            ]
        },
        "28-28:import Modifier": {
            "start": 28,
            "end": 28,
            "body": [
                "import java.lang.reflect.Modifier;\n"
            ]
        },
        "29-29:import ArrayList": {
            "start": 29,
            "end": 29,
            "body": [
                "import java.util.ArrayList;\n"
            ]
        },
        "30-30:import Collections": {
            "start": 30,
            "end": 30,
            "body": [
                "import java.util.Collections;\n"
            ]
        },
        "33-33:import StringTokenizer": {
            "start": 33,
            "end": 33,
            "body": [
                "import java.util.StringTokenizer;\n"
            ]
        },
        "19-19:import Log": {
            "start": 19,
            "end": 19,
            "body": [
                "import org.apache.commons.logging.Log;\n"
            ]
        },
        "20-20:import LogFactory": {
            "start": 20,
            "end": 20,
            "body": [
                "import org.apache.commons.logging.LogFactory;\n"
            ]
        }
    },
    "classes": {
        "ValidatorAction": {
            "start": 44,
            "end": 44,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [
                "Serializable"
            ],
            "extends": [],
            "methods": {
                "482-488:toString": {
                    "start": 482,
                    "end": 488,
                    "body": [
                        "    public String toString() {\n",
                        "        StringBuilder results = new StringBuilder(\"ValidatorAction: \");\n",
                        "        results.append(name);\n",
                        "        results.append(\"\\n\");\n",
                        "\n",
                        "        return results.toString();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "toString()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ]
                    ]
                },
                "472-474:getDependencyList": {
                    "start": 472,
                    "end": 474,
                    "body": [
                        "    public List<String> getDependencyList() {\n",
                        "        return Collections.unmodifiableList(this.dependencyList);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "List<String>",
                            "java.util.List<String>"
                        ]
                    ],
                    "signature": "getDependencyList()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Collections",
                            "unmodifiableList(java.util.List)"
                        ]
                    ]
                },
                "463-465:isDependency": {
                    "start": 463,
                    "end": 465,
                    "body": [
                        "    public boolean isDependency(String validatorName) {\n",
                        "        return this.dependencyList.contains(validatorName);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isDependency(String)",
                    "parameters": [
                        "validatorName"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/List",
                            "contains(java.lang.Object)"
                        ]
                    ]
                },
                "354-379:loadJavascriptFunction": {
                    "start": 354,
                    "end": 379,
                    "body": [
                        "    protected synchronized void loadJavascriptFunction() {\n",
                        "\n",
                        "        if (this.javascriptAlreadyLoaded()) {\n",
                        "            return;\n",
                        "        }\n",
                        "\n",
                        "        if (getLog().isTraceEnabled()) {\n",
                        "            getLog().trace(\"  Loading function begun\");\n",
                        "        }\n",
                        "\n",
                        "        if (this.jsFunction == null) {\n",
                        "            this.jsFunction = this.generateJsFunction();\n",
                        "        }\n",
                        "\n",
                        "        String javascriptFileName = this.formatJavascriptFileName();\n",
                        "\n",
                        "        if (getLog().isTraceEnabled()) {\n",
                        "            getLog().trace(\"  Loading js function '\" + javascriptFileName + \"'\");\n",
                        "        }\n",
                        "\n",
                        "        this.javascript = this.readJavascriptFile(javascriptFileName);\n",
                        "\n",
                        "        if (getLog().isTraceEnabled()) {\n",
                        "            getLog().trace(\"  Loading javascript function completed\");\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "synchronized",
                        "protected"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "loadJavascriptFunction()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.ValidatorAction",
                            "ValidatorAction",
                            "429-437:formatJavascriptFileName"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.ValidatorAction",
                            "ValidatorAction",
                            "442-444:javascriptAlreadyLoaded"
                        ],
                        [
                            "library",
                            "Log",
                            "isTraceEnabled()"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.ValidatorAction",
                            "ValidatorAction",
                            "664-669:getLog"
                        ],
                        [
                            "library",
                            "Log",
                            "trace(java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.ValidatorAction",
                            "ValidatorAction",
                            "447-455:generateJsFunction"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.ValidatorAction",
                            "ValidatorAction",
                            "387-424:readJavascriptFile"
                        ]
                    ]
                },
                "341-343:init": {
                    "start": 341,
                    "end": 343,
                    "body": [
                        "    protected void init() {\n",
                        "        this.loadJavascriptFunction();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "init()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.ValidatorAction",
                            "ValidatorAction",
                            "354-379:loadJavascriptFunction"
                        ]
                    ]
                },
                "331-338:setJavascript": {
                    "start": 331,
                    "end": 338,
                    "body": [
                        "    public void setJavascript(String javascript) {\n",
                        "        if (jsFunction != null) {\n",
                        "            throw new IllegalStateException(\n",
                        "                    \"Cannot call setJavascript() after calling setJsFunction()\");\n",
                        "        }\n",
                        "\n",
                        "        this.javascript = javascript;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "setJavascript(String)",
                    "parameters": [
                        "javascript"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/IllegalStateException",
                            "IllegalStateException(java.lang.String)"
                        ]
                    ]
                },
                "322-324:getJavascript": {
                    "start": 322,
                    "end": 324,
                    "body": [
                        "    public String getJavascript() {\n",
                        "        return javascript;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "getJavascript()",
                    "parameters": [],
                    "calls": []
                },
                "308-315:setJsFunction": {
                    "start": 308,
                    "end": 315,
                    "body": [
                        "    public void setJsFunction(String jsFunction) {\n",
                        "        if (javascript != null) {\n",
                        "            throw new IllegalStateException(\n",
                        "                    \"Cannot call setJsFunction() after calling setJavascript()\");\n",
                        "        }\n",
                        "\n",
                        "        this.jsFunction = jsFunction;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "setJsFunction(String)",
                    "parameters": [
                        "jsFunction"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/IllegalStateException",
                            "IllegalStateException(java.lang.String)"
                        ]
                    ]
                },
                "277-279:setJsFunctionName": {
                    "start": 277,
                    "end": 279,
                    "body": [
                        "    public void setJsFunctionName(String jsFunctionName) {\n",
                        "        this.jsFunctionName = jsFunctionName;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "setJsFunctionName(String)",
                    "parameters": [
                        "jsFunctionName"
                    ],
                    "calls": []
                },
                "267-269:getJsFunctionName": {
                    "start": 267,
                    "end": 269,
                    "body": [
                        "    public String getJsFunctionName() {\n",
                        "        return jsFunctionName;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "getJsFunctionName()",
                    "parameters": [],
                    "calls": []
                },
                "257-259:setMsg": {
                    "start": 257,
                    "end": 259,
                    "body": [
                        "    public void setMsg(String msg) {\n",
                        "        this.msg = msg;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "setMsg(String)",
                    "parameters": [
                        "msg"
                    ],
                    "calls": []
                },
                "248-250:getMsg": {
                    "start": 248,
                    "end": 250,
                    "body": [
                        "    public String getMsg() {\n",
                        "        return msg;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "getMsg()",
                    "parameters": [],
                    "calls": []
                },
                "228-241:setDepends": {
                    "start": 228,
                    "end": 241,
                    "body": [
                        "    public void setDepends(String depends) {\n",
                        "        this.depends = depends;\n",
                        "\n",
                        "        this.dependencyList.clear();\n",
                        "\n",
                        "        StringTokenizer st = new StringTokenizer(depends, \",\");\n",
                        "        while (st.hasMoreTokens()) {\n",
                        "            String depend = st.nextToken().trim();\n",
                        "\n",
                        "            if (depend != null && depend.length() > 0) {\n",
                        "                this.dependencyList.add(depend);\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "setDepends(String)",
                    "parameters": [
                        "depends"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/StringTokenizer",
                            "StringTokenizer(java.lang.String,java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "clear()"
                        ],
                        [
                            "library",
                            "java.base/java/util/StringTokenizer",
                            "hasMoreTokens()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "trim()"
                        ],
                        [
                            "library",
                            "java.base/java/util/StringTokenizer",
                            "nextToken()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "add(java.lang.String)"
                        ]
                    ]
                },
                "219-221:getDepends": {
                    "start": 219,
                    "end": 221,
                    "body": [
                        "    public String getDepends() {\n",
                        "        return this.depends;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "getDepends()",
                    "parameters": [],
                    "calls": []
                },
                "199-212:setMethodParams": {
                    "start": 199,
                    "end": 212,
                    "body": [
                        "    public void setMethodParams(String methodParams) {\n",
                        "        this.methodParams = methodParams;\n",
                        "\n",
                        "        this.methodParameterList.clear();\n",
                        "\n",
                        "        StringTokenizer st = new StringTokenizer(methodParams, \",\");\n",
                        "        while (st.hasMoreTokens()) {\n",
                        "            String value = st.nextToken().trim();\n",
                        "\n",
                        "            if (value != null && value.length() > 0) {\n",
                        "                this.methodParameterList.add(value);\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "setMethodParams(String)",
                    "parameters": [
                        "methodParams"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/StringTokenizer",
                            "StringTokenizer(java.lang.String,java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "clear()"
                        ],
                        [
                            "library",
                            "java.base/java/util/StringTokenizer",
                            "hasMoreTokens()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "trim()"
                        ],
                        [
                            "library",
                            "java.base/java/util/StringTokenizer",
                            "nextToken()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "add(java.lang.String)"
                        ]
                    ]
                },
                "190-192:getMethodParams": {
                    "start": 190,
                    "end": 192,
                    "body": [
                        "    public String getMethodParams() {\n",
                        "        return methodParams;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "getMethodParams()",
                    "parameters": [],
                    "calls": []
                },
                "181-183:setMethod": {
                    "start": 181,
                    "end": 183,
                    "body": [
                        "    public void setMethod(String method) {\n",
                        "        this.method = method;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "setMethod(String)",
                    "parameters": [
                        "method"
                    ],
                    "calls": []
                },
                "172-174:getMethod": {
                    "start": 172,
                    "end": 174,
                    "body": [
                        "    public String getMethod() {\n",
                        "        return method;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "getMethod()",
                    "parameters": [],
                    "calls": []
                },
                "163-165:setClassname": {
                    "start": 163,
                    "end": 165,
                    "body": [
                        "    public void setClassname(String classname) {\n",
                        "        this.classname = classname;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "setClassname(String)",
                    "parameters": [
                        "classname"
                    ],
                    "calls": []
                },
                "154-156:getClassname": {
                    "start": 154,
                    "end": 156,
                    "body": [
                        "    public String getClassname() {\n",
                        "        return classname;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "getClassname()",
                    "parameters": [],
                    "calls": []
                },
                "145-147:setName": {
                    "start": 145,
                    "end": 147,
                    "body": [
                        "    public void setName(String name) {\n",
                        "        this.name = name;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "setName(String)",
                    "parameters": [
                        "name"
                    ],
                    "calls": []
                },
                "136-138:getName": {
                    "start": 136,
                    "end": 138,
                    "body": [
                        "    public String getName() {\n",
                        "        return name;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "getName()",
                    "parameters": [],
                    "calls": []
                },
                "664-669:getLog": {
                    "start": 664,
                    "end": 669,
                    "body": [
                        "    private Log getLog() {\n",
                        "        if (log == null) {\n",
                        "            log = LogFactory.getLog(ValidatorAction.class);\n",
                        "        }\n",
                        "        return log;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "Log",
                            "Log"
                        ]
                    ],
                    "signature": "getLog()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "LogFactory",
                            "getLog(java.lang.Class)"
                        ]
                    ]
                },
                "651-654:onlyReturnErrors": {
                    "start": 651,
                    "end": 654,
                    "body": [
                        "    private boolean onlyReturnErrors(Map<String, Object> params) {\n",
                        "        Validator v = (Validator) params.get(Validator.VALIDATOR_PARAM);\n",
                        "        return v.getOnlyReturnErrors();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "onlyReturnErrors(Map<String,Object>)",
                    "parameters": [
                        "params"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get(java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.Validator",
                            "Validator",
                            "327-329:getOnlyReturnErrors"
                        ]
                    ]
                },
                "645-648:getClassLoader": {
                    "start": 645,
                    "end": 648,
                    "body": [
                        "    private ClassLoader getClassLoader(Map<String, Object> params) {\n",
                        "        Validator v = (Validator) params.get(Validator.VALIDATOR_PARAM);\n",
                        "        return v.getClassLoader();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "ClassLoader",
                            "java.lang.ClassLoader"
                        ]
                    ],
                    "signature": "getClassLoader(Map<String,Object>)",
                    "parameters": [
                        "params"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get(java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.Validator",
                            "Validator",
                            "289-302:getClassLoader"
                        ]
                    ]
                },
                "636-642:isValid": {
                    "start": 636,
                    "end": 642,
                    "body": [
                        "    private boolean isValid(Object result) {\n",
                        "        if (result instanceof Boolean) {\n",
                        "            Boolean valid = (Boolean) result;\n",
                        "            return valid.booleanValue();\n",
                        "        }\n",
                        "        return result != null;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isValid(Object)",
                    "parameters": [
                        "result"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Boolean",
                            "booleanValue()"
                        ]
                    ]
                },
                "591-621:getValidationClassInstance": {
                    "start": 591,
                    "end": 621,
                    "body": [
                        "    private Object getValidationClassInstance() throws ValidatorException {\n",
                        "        if (Modifier.isStatic(this.validationMethod.getModifiers())) {\n",
                        "            this.instance = null;\n",
                        "\n",
                        "        } else {\n",
                        "            if (this.instance == null) {\n",
                        "                try {\n",
                        "                    this.instance = this.validationClass.newInstance();\n",
                        "                } catch (InstantiationException e) {\n",
                        "                    String msg1 =\n",
                        "                            \"Couldn't create instance of \"\n",
                        "                                    + this.classname\n",
                        "                                    + \".  \"\n",
                        "                                    + e.getMessage();\n",
                        "\n",
                        "                    throw new ValidatorException(msg1);\n",
                        "\n",
                        "                } catch (IllegalAccessException e) {\n",
                        "                    String msg1 =\n",
                        "                            \"Couldn't create instance of \"\n",
                        "                                    + this.classname\n",
                        "                                    + \".  \"\n",
                        "                                    + e.getMessage();\n",
                        "\n",
                        "                    throw new ValidatorException(msg1);\n",
                        "                }\n",
                        "            }\n",
                        "        }\n",
                        "\n",
                        "        return this.instance;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "Object",
                            "java.lang.Object"
                        ]
                    ],
                    "signature": "getValidationClassInstance()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/reflect/Modifier",
                            "isStatic(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/reflect/Method",
                            "getModifiers()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "newInstance()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.ValidatorException",
                            "ValidatorException",
                            "30-32:ValidatorException"
                        ]
                    ]
                },
                "575-585:getParameterValues": {
                    "start": 575,
                    "end": 585,
                    "body": [
                        "    private Object[] getParameterValues(Map<String, ? super Object> params) {\n",
                        "\n",
                        "        Object[] paramValue = new Object[this.methodParameterList.size()];\n",
                        "\n",
                        "        for (int i = 0; i < this.methodParameterList.size(); i++) {\n",
                        "            String paramClassName = this.methodParameterList.get(i);\n",
                        "            paramValue[i] = params.get(paramClassName);\n",
                        "        }\n",
                        "\n",
                        "        return paramValue;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "Object[]",
                            "java.lang.Object[]"
                        ]
                    ],
                    "signature": "getParameterValues(Map<String,? super Object>)",
                    "parameters": [
                        "params"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/List",
                            "size()"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "get(int)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get(java.lang.Object)"
                        ]
                    ]
                },
                "546-566:loadParameterClasses": {
                    "start": 546,
                    "end": 566,
                    "body": [
                        "    private void loadParameterClasses(ClassLoader loader) throws ValidatorException {\n",
                        "\n",
                        "        if (this.parameterClasses != null) {\n",
                        "            return;\n",
                        "        }\n",
                        "\n",
                        "        Class<?>[] parameterClasses = new Class[this.methodParameterList.size()];\n",
                        "\n",
                        "        for (int i = 0; i < this.methodParameterList.size(); i++) {\n",
                        "            String paramClassName = this.methodParameterList.get(i);\n",
                        "\n",
                        "            try {\n",
                        "                parameterClasses[i] = loader.loadClass(paramClassName);\n",
                        "\n",
                        "            } catch (ClassNotFoundException e) {\n",
                        "                throw new ValidatorException(e.getMessage());\n",
                        "            }\n",
                        "        }\n",
                        "\n",
                        "        this.parameterClasses = parameterClasses;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "loadParameterClasses(ClassLoader)",
                    "parameters": [
                        "loader"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/List",
                            "size()"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "get(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/ClassLoader",
                            "loadClass(java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.ValidatorException",
                            "ValidatorException",
                            "30-32:ValidatorException"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ]
                    ]
                },
                "526-537:loadValidationClass": {
                    "start": 526,
                    "end": 537,
                    "body": [
                        "    private void loadValidationClass(ClassLoader loader) throws ValidatorException {\n",
                        "\n",
                        "        if (this.validationClass != null) {\n",
                        "            return;\n",
                        "        }\n",
                        "\n",
                        "        try {\n",
                        "            this.validationClass = loader.loadClass(this.classname);\n",
                        "        } catch (ClassNotFoundException e) {\n",
                        "            throw new ValidatorException(e.toString());\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "loadValidationClass(ClassLoader)",
                    "parameters": [
                        "loader"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/ClassLoader",
                            "loadClass(java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.ValidatorException",
                            "ValidatorException",
                            "30-32:ValidatorException"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "toString()"
                        ]
                    ]
                },
                "506-518:loadValidationMethod": {
                    "start": 506,
                    "end": 518,
                    "body": [
                        "    private void loadValidationMethod() throws ValidatorException {\n",
                        "        if (this.validationMethod != null) {\n",
                        "            return;\n",
                        "        }\n",
                        "\n",
                        "        try {\n",
                        "            this.validationMethod =\n",
                        "                    this.validationClass.getMethod(this.method, this.parameterClasses);\n",
                        "\n",
                        "        } catch (NoSuchMethodException e) {\n",
                        "            throw new ValidatorException(\"No such validation method: \" + e.getMessage());\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "loadValidationMethod()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "getMethod(java.lang.String,java.lang.Class[])"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.ValidatorException",
                            "ValidatorException",
                            "30-32:ValidatorException"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ]
                    ]
                },
                "447-455:generateJsFunction": {
                    "start": 447,
                    "end": 455,
                    "body": [
                        "    private String generateJsFunction() {\n",
                        "        StringBuilder jsName = new StringBuilder(\"org.apache.commons.validator.javascript\");\n",
                        "\n",
                        "        jsName.append(\".validate\");\n",
                        "        jsName.append(name.substring(0, 1).toUpperCase());\n",
                        "        jsName.append(name.substring(1, name.length()));\n",
                        "\n",
                        "        return jsName.toString();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "generateJsFunction()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "toUpperCase()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "substring(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ]
                    ]
                },
                "442-444:javascriptAlreadyLoaded": {
                    "start": 442,
                    "end": 444,
                    "body": [
                        "    private boolean javascriptAlreadyLoaded() {\n",
                        "        return (this.javascript != null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "javascriptAlreadyLoaded()",
                    "parameters": [],
                    "calls": []
                },
                "429-437:formatJavascriptFileName": {
                    "start": 429,
                    "end": 437,
                    "body": [
                        "    private String formatJavascriptFileName() {\n",
                        "        String fname = this.jsFunction.substring(1);\n",
                        "\n",
                        "        if (!this.jsFunction.startsWith(\"/\")) {\n",
                        "            fname = jsFunction.replace('.', '/') + \".js\";\n",
                        "        }\n",
                        "\n",
                        "        return fname;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "formatJavascriptFileName()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "substring(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "startsWith(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "replace(char,char)"
                        ]
                    ]
                },
                "387-424:readJavascriptFile": {
                    "start": 387,
                    "end": 424,
                    "body": [
                        "    private String readJavascriptFile(String javascriptFileName) {\n",
                        "        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n",
                        "        if (classLoader == null) {\n",
                        "            classLoader = this.getClass().getClassLoader();\n",
                        "        }\n",
                        "\n",
                        "        InputStream is = classLoader.getResourceAsStream(javascriptFileName);\n",
                        "        if (is == null) {\n",
                        "            is = this.getClass().getResourceAsStream(javascriptFileName);\n",
                        "        }\n",
                        "\n",
                        "        if (is == null) {\n",
                        "            getLog().debug(\"  Unable to read javascript name \" + javascriptFileName);\n",
                        "            return null;\n",
                        "        }\n",
                        "\n",
                        "        StringBuilder buffer = new StringBuilder();\n",
                        "        BufferedReader reader = new BufferedReader(new InputStreamReader(is)); // TODO encoding\n",
                        "        try {\n",
                        "            String line = null;\n",
                        "            while ((line = reader.readLine()) != null) {\n",
                        "                buffer.append(line).append(\"\\n\");\n",
                        "            }\n",
                        "\n",
                        "        } catch (IOException e) {\n",
                        "            getLog().error(\"Error reading javascript file.\", e);\n",
                        "\n",
                        "        } finally {\n",
                        "            try {\n",
                        "                reader.close();\n",
                        "            } catch (IOException e) {\n",
                        "                getLog().error(\"Error closing stream to javascript file.\", e);\n",
                        "            }\n",
                        "        }\n",
                        "\n",
                        "        String function = buffer.toString();\n",
                        "        return function.equals(\"\") ? null : function;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "readJavascriptFile(String)",
                    "parameters": [
                        "javascriptFileName"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Thread",
                            "getContextClassLoader()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Thread",
                            "currentThread()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/ClassLoader",
                            "getResourceAsStream(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder()"
                        ],
                        [
                            "library",
                            "java.base/java/io/BufferedReader",
                            "BufferedReader(java.io.Reader)"
                        ],
                        [
                            "library",
                            "java.base/java/io/InputStreamReader",
                            "InputStreamReader(java.io.InputStream)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "getClassLoader()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "getClass()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "getResourceAsStream(java.lang.String)"
                        ],
                        [
                            "library",
                            "Log",
                            "debug(java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.ValidatorAction",
                            "ValidatorAction",
                            "664-669:getLog"
                        ],
                        [
                            "library",
                            "java.base/java/io/BufferedReader",
                            "readLine()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.String)"
                        ],
                        [
                            "library",
                            "Log",
                            "error(java.lang.Object,java.lang.Throwable)"
                        ],
                        [
                            "library",
                            "java.base/java/io/BufferedReader",
                            "close()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "equals(java.lang.Object)"
                        ]
                    ]
                }
            },
            "fields": {
                "129-129:methodParameterList": {
                    "start": 129,
                    "end": 129,
                    "body": [
                        "    private final List<String> methodParameterList = new ArrayList<>();\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "List<String>",
                            "java.util.List<String>"
                        ]
                    ]
                },
                "122-123:dependencyList": {
                    "start": 122,
                    "end": 123,
                    "body": [
                        "    private final List<String> dependencyList =\n",
                        "            Collections.synchronizedList(new ArrayList<String>());\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "List<String>",
                            "java.util.List<String>"
                        ]
                    ]
                },
                "114-114:instance": {
                    "start": 114,
                    "end": 114,
                    "body": [
                        "    private Object instance = null;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "Object",
                            "java.lang.Object"
                        ]
                    ]
                },
                "108-108:javascript": {
                    "start": 108,
                    "end": 108,
                    "body": [
                        "    private String javascript = null;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "102-102:jsFunction": {
                    "start": 102,
                    "end": 102,
                    "body": [
                        "    private String jsFunction = null;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "97-97:jsFunctionName": {
                    "start": 97,
                    "end": 97,
                    "body": [
                        "    private String jsFunctionName = null;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "94-94:msg": {
                    "start": 94,
                    "end": 94,
                    "body": [
                        "    private String msg = null;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "91-91:depends": {
                    "start": 91,
                    "end": 91,
                    "body": [
                        "    private String depends = null;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "85-85:parameterClasses": {
                    "start": 85,
                    "end": 85,
                    "body": [
                        "    private Class<?>[] parameterClasses = null;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "Class<?>[]",
                            "java.lang.Class<?>[]"
                        ]
                    ]
                },
                "77-82:methodParams": {
                    "start": 77,
                    "end": 82,
                    "body": [
                        "    private String methodParams =\n",
                        "            Validator.BEAN_PARAM\n",
                        "                    + \",\"\n",
                        "                    + Validator.VALIDATOR_ACTION_PARAM\n",
                        "                    + \",\"\n",
                        "                    + Validator.FIELD_PARAM;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "67-67:validationMethod": {
                    "start": 67,
                    "end": 67,
                    "body": [
                        "    private Method validationMethod = null;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "Method",
                            "java.lang.reflect.Method"
                        ]
                    ]
                },
                "64-64:method": {
                    "start": 64,
                    "end": 64,
                    "body": [
                        "    private String method = null;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "61-61:validationClass": {
                    "start": 61,
                    "end": 61,
                    "body": [
                        "    private Class<?> validationClass = null;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "Class<?>",
                            "java.lang.Class<?>"
                        ]
                    ]
                },
                "58-58:classname": {
                    "start": 58,
                    "end": 58,
                    "body": [
                        "    private String classname = null;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "52-52:name": {
                    "start": 52,
                    "end": 52,
                    "body": [
                        "    private String name = null;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "49-49:log": {
                    "start": 49,
                    "end": 49,
                    "body": [
                        "    private transient Log log = LogFactory.getLog(ValidatorAction.class);\n"
                    ],
                    "modifiers": [
                        "transient",
                        "private"
                    ],
                    "types": [
                        [
                            "Log",
                            "Log"
                        ]
                    ]
                },
                "46-46:serialVersionUID": {
                    "start": 46,
                    "end": 46,
                    "body": [
                        "    private static final long serialVersionUID = 1339713700053204597L;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "long",
                            "long"
                        ]
                    ]
                }
            }
        }
    }
}