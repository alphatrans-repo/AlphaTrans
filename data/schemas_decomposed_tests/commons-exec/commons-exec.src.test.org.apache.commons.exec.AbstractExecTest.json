{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-exec/src/test/java/org/apache/commons/exec/AbstractExecTest.java",
    "imports": {
        "20-20:import File": {
            "start": 20,
            "end": 20,
            "body": [
                "import java.io.File;\n"
            ]
        }
    },
    "classes": {
        "AbstractExecTest": {
            "start": 22,
            "end": 22,
            "is_abstract": true,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "59-63:testNotSupportedForCurrentOperatingSystem": {
                    "start": 59,
                    "end": 63,
                    "body": [
                        "    protected String testNotSupportedForCurrentOperatingSystem() {\n",
                        "        final String msg = String.format(\"The test is not possible for OS : %s\", OS_NAME);\n",
                        "        System.out.println(msg);\n",
                        "        return msg;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "testNotSupportedForCurrentOperatingSystem()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "53-57:testIsBrokenForCurrentOperatingSystem": {
                    "start": 53,
                    "end": 57,
                    "body": [
                        "    protected String testIsBrokenForCurrentOperatingSystem() {\n",
                        "        final String msg = String.format(\"The test is broken for OS : %s\", OS_NAME);\n",
                        "        System.err.println(msg);\n",
                        "        return msg;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "testIsBrokenForCurrentOperatingSystem()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "45-51:resolveTestScript1": {
                    "start": 45,
                    "end": 51,
                    "body": [
                        "    protected File resolveTestScript1(final String directoryName, final String baseName) {\n",
                        "        final File result = TestUtil.resolveScriptForOS(testDir + \"/\" + directoryName + \"/\" + baseName);\n",
                        "        if (!result.exists()) {\n",
                        "            throw new IllegalArgumentException(\"Unable to find the following file: \" + result.getAbsolutePath());\n",
                        "        }\n",
                        "        return result;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "File",
                            "java.io.File"
                        ]
                    ],
                    "signature": "resolveTestScript1(String, String)",
                    "parameters": [
                        "directoryName",
                        "baseName"
                    ],
                    "calls": [
                        [
                            "commons-exec.src.test.org.apache.commons.exec.TestUtil",
                            "TestUtil",
                            "47-59:resolveScriptForOS"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "exists()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalArgumentException",
                            "IllegalArgumentException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "getAbsolutePath()"
                        ]
                    ]
                },
                "34-40:resolveTestScript0": {
                    "start": 34,
                    "end": 40,
                    "body": [
                        "    protected File resolveTestScript0(final String baseName) {\n",
                        "        final File result = TestUtil.resolveScriptForOS(testDir + \"/\" + baseName);\n",
                        "        if (!result.exists()) {\n",
                        "            throw new IllegalArgumentException(\"Unable to find the following file: \" + result.getAbsolutePath());\n",
                        "        }\n",
                        "        return result;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "File",
                            "java.io.File"
                        ]
                    ],
                    "signature": "resolveTestScript0(String)",
                    "parameters": [
                        "baseName"
                    ],
                    "calls": [
                        [
                            "commons-exec.src.test.org.apache.commons.exec.TestUtil",
                            "TestUtil",
                            "47-59:resolveScriptForOS"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "exists()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalArgumentException",
                            "IllegalArgumentException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "getAbsolutePath()"
                        ]
                    ]
                }
            },
            "fields": {
                "25-25:WATCHDOG_TIMEOUT": {
                    "start": 25,
                    "end": 25,
                    "body": [
                        "    public static final int WATCHDOG_TIMEOUT = 3000;\n"
                    ],
                    "modifiers": [
                        "public",
                        "final",
                        "static"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                },
                "24-24:TEST_TIMEOUT": {
                    "start": 24,
                    "end": 24,
                    "body": [
                        "    public static final int TEST_TIMEOUT = 15000;\n"
                    ],
                    "modifiers": [
                        "public",
                        "final",
                        "static"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                },
                "29-29:testDir": {
                    "start": 29,
                    "end": 29,
                    "body": [
                        "    private final File testDir = new File(\"src/test/scripts\");\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "File",
                            "java.io.File"
                        ]
                    ]
                },
                "27-27:OS_NAME": {
                    "start": 27,
                    "end": 27,
                    "body": [
                        "    private static final String OS_NAME = System.getProperty(\"os.name\");\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                }
            }
        }
    }
}