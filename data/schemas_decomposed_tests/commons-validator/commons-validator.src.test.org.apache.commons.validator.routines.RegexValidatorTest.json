{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-validator/src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java",
    "imports": {
        "22-22:import PatternSyntaxException": {
            "start": 22,
            "end": 22,
            "body": [
                "import java.util.regex.PatternSyntaxException;\n"
            ]
        },
        "20-20:import TestCase": {
            "start": 20,
            "end": 20,
            "body": [
                "import junit.framework.TestCase;\n"
            ]
        },
        "18-18:import Test": {
            "start": 18,
            "end": 18,
            "body": [
                "import org.junit.Test;\n"
            ]
        }
    },
    "classes": {
        "RegexValidatorTest": {
            "start": 30,
            "end": 30,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "TestCase"
            ],
            "methods": {
                "1348-1354:testToString_test3_decomposed": {
                    "start": 1348,
                    "end": 1354,
                    "body": [
                        "    public void testToString_test3_decomposed()  {\n",
                        "        RegexValidator single = RegexValidator.RegexValidator3(REGEX);\n",
                        "        assertEquals(\"Single\", \"RegexValidator{\" + REGEX + \"}\", single.toString());\n",
                        "        RegexValidator multiple = RegexValidator.RegexValidator1(new String[] {REGEX, REGEX});\n",
                        "        assertEquals(\n",
                        "                \"Multiple\", \"RegexValidator{\" + REGEX + \",\" + REGEX + \"}\", multiple.toString());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testToString_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "207-218:toString"
                        ]
                    ]
                },
                "1341-1345:testToString_test2_decomposed": {
                    "start": 1341,
                    "end": 1345,
                    "body": [
                        "    public void testToString_test2_decomposed()  {\n",
                        "        RegexValidator single = RegexValidator.RegexValidator3(REGEX);\n",
                        "        assertEquals(\"Single\", \"RegexValidator{\" + REGEX + \"}\", single.toString());\n",
                        "        RegexValidator multiple = RegexValidator.RegexValidator1(new String[] {REGEX, REGEX});\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testToString_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "207-218:toString"
                        ]
                    ]
                },
                "1335-1338:testToString_test1_decomposed": {
                    "start": 1335,
                    "end": 1338,
                    "body": [
                        "    public void testToString_test1_decomposed()  {\n",
                        "        RegexValidator single = RegexValidator.RegexValidator3(REGEX);\n",
                        "        assertEquals(\"Single\", \"RegexValidator{\" + REGEX + \"}\", single.toString());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testToString_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "207-218:toString"
                        ]
                    ]
                },
                "1330-1332:testToString_test0_decomposed": {
                    "start": 1330,
                    "end": 1332,
                    "body": [
                        "    public void testToString_test0_decomposed()  {\n",
                        "        RegexValidator single = RegexValidator.RegexValidator3(REGEX);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testToString_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ]
                    ]
                },
                "1321-1327:testExceptions_test0_decomposed": {
                    "start": 1321,
                    "end": 1327,
                    "body": [
                        "    public void testExceptions_test0_decomposed()  {\n",
                        "        String invalidRegex = \"^([abCD12]*$\";\n",
                        "        try {\n",
                        "            RegexValidator.RegexValidator3(invalidRegex);\n",
                        "        } catch (PatternSyntaxException e) {\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testExceptions_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ]
                    ]
                },
                "1278-1318:testMissingRegex_test3_decomposed": {
                    "start": 1278,
                    "end": 1318,
                    "body": [
                        "    public void testMissingRegex_test3_decomposed()  {\n",
                        "        try {\n",
                        "            RegexValidator.RegexValidator3((String) null);\n",
                        "            fail(\"Single Null - expected IllegalArgumentException\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "            assertEquals(\"Single Null\", \"Regular expression[0] is missing\", e.getMessage());\n",
                        "        }\n",
                        "        try {\n",
                        "            RegexValidator.RegexValidator3(\"\");\n",
                        "            fail(\"Single Zero Length - expected IllegalArgumentException\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "            assertEquals(\"Single Zero Length\", \"Regular expression[0] is missing\", e.getMessage());\n",
                        "        }\n",
                        "        try {\n",
                        "            RegexValidator.RegexValidator1((String[]) null);\n",
                        "            fail(\"Null Array - expected IllegalArgumentException\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "            assertEquals(\"Null Array\", \"Regular expressions are missing\", e.getMessage());\n",
                        "        }\n",
                        "        try {\n",
                        "            RegexValidator.RegexValidator1(new String[0]);\n",
                        "            fail(\"Zero Length Array - expected IllegalArgumentException\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "            assertEquals(\"Zero Length Array\", \"Regular expressions are missing\", e.getMessage());\n",
                        "        }\n",
                        "        String[] expressions = new String[] {\"ABC\", null};\n",
                        "        try {\n",
                        "            RegexValidator.RegexValidator1(expressions);\n",
                        "            fail(\"Array has Null - expected IllegalArgumentException\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "            assertEquals(\"Array has Null\", \"Regular expression[1] is missing\", e.getMessage());\n",
                        "        }\n",
                        "        expressions = new String[] {\"\", \"ABC\"};\n",
                        "        try {\n",
                        "            RegexValidator.RegexValidator1(expressions);\n",
                        "            fail(\"Array has Zero Length - expected IllegalArgumentException\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "            assertEquals(\n",
                        "                    \"Array has Zero Length\", \"Regular expression[0] is missing\", e.getMessage());\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMissingRegex_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ]
                    ]
                },
                "1243-1275:testMissingRegex_test2_decomposed": {
                    "start": 1243,
                    "end": 1275,
                    "body": [
                        "    public void testMissingRegex_test2_decomposed()  {\n",
                        "        try {\n",
                        "            RegexValidator.RegexValidator3((String) null);\n",
                        "            fail(\"Single Null - expected IllegalArgumentException\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "            assertEquals(\"Single Null\", \"Regular expression[0] is missing\", e.getMessage());\n",
                        "        }\n",
                        "        try {\n",
                        "            RegexValidator.RegexValidator3(\"\");\n",
                        "            fail(\"Single Zero Length - expected IllegalArgumentException\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "            assertEquals(\"Single Zero Length\", \"Regular expression[0] is missing\", e.getMessage());\n",
                        "        }\n",
                        "        try {\n",
                        "            RegexValidator.RegexValidator1((String[]) null);\n",
                        "            fail(\"Null Array - expected IllegalArgumentException\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "            assertEquals(\"Null Array\", \"Regular expressions are missing\", e.getMessage());\n",
                        "        }\n",
                        "        try {\n",
                        "            RegexValidator.RegexValidator1(new String[0]);\n",
                        "            fail(\"Zero Length Array - expected IllegalArgumentException\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "            assertEquals(\"Zero Length Array\", \"Regular expressions are missing\", e.getMessage());\n",
                        "        }\n",
                        "        String[] expressions = new String[] {\"ABC\", null};\n",
                        "        try {\n",
                        "            RegexValidator.RegexValidator1(expressions);\n",
                        "            fail(\"Array has Null - expected IllegalArgumentException\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "            assertEquals(\"Array has Null\", \"Regular expression[1] is missing\", e.getMessage());\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMissingRegex_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ]
                    ]
                },
                "1215-1240:testMissingRegex_test1_decomposed": {
                    "start": 1215,
                    "end": 1240,
                    "body": [
                        "    public void testMissingRegex_test1_decomposed()  {\n",
                        "        try {\n",
                        "            RegexValidator.RegexValidator3((String) null);\n",
                        "            fail(\"Single Null - expected IllegalArgumentException\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "            assertEquals(\"Single Null\", \"Regular expression[0] is missing\", e.getMessage());\n",
                        "        }\n",
                        "        try {\n",
                        "            RegexValidator.RegexValidator3(\"\");\n",
                        "            fail(\"Single Zero Length - expected IllegalArgumentException\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "            assertEquals(\"Single Zero Length\", \"Regular expression[0] is missing\", e.getMessage());\n",
                        "        }\n",
                        "        try {\n",
                        "            RegexValidator.RegexValidator1((String[]) null);\n",
                        "            fail(\"Null Array - expected IllegalArgumentException\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "            assertEquals(\"Null Array\", \"Regular expressions are missing\", e.getMessage());\n",
                        "        }\n",
                        "        try {\n",
                        "            RegexValidator.RegexValidator1(new String[0]);\n",
                        "            fail(\"Zero Length Array - expected IllegalArgumentException\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "            assertEquals(\"Zero Length Array\", \"Regular expressions are missing\", e.getMessage());\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMissingRegex_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ]
                    ]
                },
                "1199-1212:testMissingRegex_test0_decomposed": {
                    "start": 1199,
                    "end": 1212,
                    "body": [
                        "    public void testMissingRegex_test0_decomposed()  {\n",
                        "        try {\n",
                        "            RegexValidator.RegexValidator3((String) null);\n",
                        "            fail(\"Single Null - expected IllegalArgumentException\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "            assertEquals(\"Single Null\", \"Regular expression[0] is missing\", e.getMessage());\n",
                        "        }\n",
                        "        try {\n",
                        "            RegexValidator.RegexValidator3(\"\");\n",
                        "            fail(\"Single Zero Length - expected IllegalArgumentException\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "            assertEquals(\"Single Zero Length\", \"Regular expression[0] is missing\", e.getMessage());\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMissingRegex_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ]
                    ]
                },
                "1191-1196:testNullValue_test3_decomposed": {
                    "start": 1191,
                    "end": 1196,
                    "body": [
                        "    public void testNullValue_test3_decomposed()  {\n",
                        "        RegexValidator validator = RegexValidator.RegexValidator3(REGEX);\n",
                        "        assertEquals(\"Instance isValid()\", false, validator.isValid(null));\n",
                        "        assertEquals(\"Instance validate()\", null, validator.validate(null));\n",
                        "        assertEquals(\"Instance match()\", null, validator.match(null));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullValue_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ]
                    ]
                },
                "1184-1188:testNullValue_test2_decomposed": {
                    "start": 1184,
                    "end": 1188,
                    "body": [
                        "    public void testNullValue_test2_decomposed()  {\n",
                        "        RegexValidator validator = RegexValidator.RegexValidator3(REGEX);\n",
                        "        assertEquals(\"Instance isValid()\", false, validator.isValid(null));\n",
                        "        assertEquals(\"Instance validate()\", null, validator.validate(null));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullValue_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ]
                    ]
                },
                "1178-1181:testNullValue_test1_decomposed": {
                    "start": 1178,
                    "end": 1181,
                    "body": [
                        "    public void testNullValue_test1_decomposed()  {\n",
                        "        RegexValidator validator = RegexValidator.RegexValidator3(REGEX);\n",
                        "        assertEquals(\"Instance isValid()\", false, validator.isValid(null));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullValue_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ]
                    ]
                },
                "1173-1175:testNullValue_test0_decomposed": {
                    "start": 1173,
                    "end": 1175,
                    "body": [
                        "    public void testNullValue_test0_decomposed()  {\n",
                        "        RegexValidator validator = RegexValidator.RegexValidator3(REGEX);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullValue_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ]
                    ]
                },
                "1142-1170:testMultipleInsensitive_test15_decomposed": {
                    "start": 1142,
                    "end": 1170,
                    "body": [
                        "    public void testMultipleInsensitive_test15_decomposed()  {\n",
                        "        RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX, false);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator2(REGEX_1, false);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator2(REGEX_2, false);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator2(REGEX_3, false);\n",
                        "        String value = \"AAC FDE 321\";\n",
                        "        String expect = \"AACFDE321\";\n",
                        "        String[] array = new String[] {\"AAC\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"match() Multiple\", array, multiple.match(value));\n",
                        "        single1.match(value);\n",
                        "        checkArray(\"match() 1st\", null, single1.match(value));\n",
                        "        single2.match(value);\n",
                        "        checkArray(\"match() 2nd\", array, single2.match(value));\n",
                        "        single3.match(value);\n",
                        "        checkArray(\"match() 3rd\", null, single3.match(value));\n",
                        "        value = \"AAC*FDE*321\";\n",
                        "        assertEquals(\"isValid() Invalid\", false, multiple.isValid(value));\n",
                        "        assertEquals(\"validate() Invalid\", null, multiple.validate(value));\n",
                        "        assertEquals(\"match() Multiple\", null, multiple.match(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleInsensitive_test15_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "75-88:RegexValidator"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ]
                    ]
                },
                "1112-1139:testMultipleInsensitive_test14_decomposed": {
                    "start": 1112,
                    "end": 1139,
                    "body": [
                        "    public void testMultipleInsensitive_test14_decomposed()  {\n",
                        "        RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX, false);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator2(REGEX_1, false);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator2(REGEX_2, false);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator2(REGEX_3, false);\n",
                        "        String value = \"AAC FDE 321\";\n",
                        "        String expect = \"AACFDE321\";\n",
                        "        String[] array = new String[] {\"AAC\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"match() Multiple\", array, multiple.match(value));\n",
                        "        single1.match(value);\n",
                        "        checkArray(\"match() 1st\", null, single1.match(value));\n",
                        "        single2.match(value);\n",
                        "        checkArray(\"match() 2nd\", array, single2.match(value));\n",
                        "        single3.match(value);\n",
                        "        checkArray(\"match() 3rd\", null, single3.match(value));\n",
                        "        value = \"AAC*FDE*321\";\n",
                        "        assertEquals(\"isValid() Invalid\", false, multiple.isValid(value));\n",
                        "        assertEquals(\"validate() Invalid\", null, multiple.validate(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleInsensitive_test14_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "75-88:RegexValidator"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "1083-1109:testMultipleInsensitive_test13_decomposed": {
                    "start": 1083,
                    "end": 1109,
                    "body": [
                        "    public void testMultipleInsensitive_test13_decomposed()  {\n",
                        "        RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX, false);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator2(REGEX_1, false);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator2(REGEX_2, false);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator2(REGEX_3, false);\n",
                        "        String value = \"AAC FDE 321\";\n",
                        "        String expect = \"AACFDE321\";\n",
                        "        String[] array = new String[] {\"AAC\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"match() Multiple\", array, multiple.match(value));\n",
                        "        single1.match(value);\n",
                        "        checkArray(\"match() 1st\", null, single1.match(value));\n",
                        "        single2.match(value);\n",
                        "        checkArray(\"match() 2nd\", array, single2.match(value));\n",
                        "        single3.match(value);\n",
                        "        checkArray(\"match() 3rd\", null, single3.match(value));\n",
                        "        value = \"AAC*FDE*321\";\n",
                        "        assertEquals(\"isValid() Invalid\", false, multiple.isValid(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleInsensitive_test13_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "75-88:RegexValidator"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "1056-1080:testMultipleInsensitive_test12_decomposed": {
                    "start": 1056,
                    "end": 1080,
                    "body": [
                        "    public void testMultipleInsensitive_test12_decomposed()  {\n",
                        "        RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX, false);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator2(REGEX_1, false);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator2(REGEX_2, false);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator2(REGEX_3, false);\n",
                        "        String value = \"AAC FDE 321\";\n",
                        "        String expect = \"AACFDE321\";\n",
                        "        String[] array = new String[] {\"AAC\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"match() Multiple\", array, multiple.match(value));\n",
                        "        single1.match(value);\n",
                        "        checkArray(\"match() 1st\", null, single1.match(value));\n",
                        "        single2.match(value);\n",
                        "        checkArray(\"match() 2nd\", array, single2.match(value));\n",
                        "        single3.match(value);\n",
                        "        checkArray(\"match() 3rd\", null, single3.match(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleInsensitive_test12_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "75-88:RegexValidator"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "1030-1053:testMultipleInsensitive_test11_decomposed": {
                    "start": 1030,
                    "end": 1053,
                    "body": [
                        "    public void testMultipleInsensitive_test11_decomposed()  {\n",
                        "        RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX, false);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator2(REGEX_1, false);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator2(REGEX_2, false);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator2(REGEX_3, false);\n",
                        "        String value = \"AAC FDE 321\";\n",
                        "        String expect = \"AACFDE321\";\n",
                        "        String[] array = new String[] {\"AAC\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"match() Multiple\", array, multiple.match(value));\n",
                        "        single1.match(value);\n",
                        "        checkArray(\"match() 1st\", null, single1.match(value));\n",
                        "        single2.match(value);\n",
                        "        checkArray(\"match() 2nd\", array, single2.match(value));\n",
                        "        single3.match(value);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleInsensitive_test11_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "75-88:RegexValidator"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "1005-1027:testMultipleInsensitive_test10_decomposed": {
                    "start": 1005,
                    "end": 1027,
                    "body": [
                        "    public void testMultipleInsensitive_test10_decomposed()  {\n",
                        "        RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX, false);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator2(REGEX_1, false);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator2(REGEX_2, false);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator2(REGEX_3, false);\n",
                        "        String value = \"AAC FDE 321\";\n",
                        "        String expect = \"AACFDE321\";\n",
                        "        String[] array = new String[] {\"AAC\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"match() Multiple\", array, multiple.match(value));\n",
                        "        single1.match(value);\n",
                        "        checkArray(\"match() 1st\", null, single1.match(value));\n",
                        "        single2.match(value);\n",
                        "        checkArray(\"match() 2nd\", array, single2.match(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleInsensitive_test10_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "75-88:RegexValidator"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "981-1002:testMultipleInsensitive_test9_decomposed": {
                    "start": 981,
                    "end": 1002,
                    "body": [
                        "    public void testMultipleInsensitive_test9_decomposed()  {\n",
                        "        RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX, false);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator2(REGEX_1, false);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator2(REGEX_2, false);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator2(REGEX_3, false);\n",
                        "        String value = \"AAC FDE 321\";\n",
                        "        String expect = \"AACFDE321\";\n",
                        "        String[] array = new String[] {\"AAC\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"match() Multiple\", array, multiple.match(value));\n",
                        "        single1.match(value);\n",
                        "        checkArray(\"match() 1st\", null, single1.match(value));\n",
                        "        single2.match(value);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleInsensitive_test9_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "75-88:RegexValidator"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "958-978:testMultipleInsensitive_test8_decomposed": {
                    "start": 958,
                    "end": 978,
                    "body": [
                        "    public void testMultipleInsensitive_test8_decomposed()  {\n",
                        "        RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX, false);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator2(REGEX_1, false);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator2(REGEX_2, false);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator2(REGEX_3, false);\n",
                        "        String value = \"AAC FDE 321\";\n",
                        "        String expect = \"AACFDE321\";\n",
                        "        String[] array = new String[] {\"AAC\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"match() Multiple\", array, multiple.match(value));\n",
                        "        single1.match(value);\n",
                        "        checkArray(\"match() 1st\", null, single1.match(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleInsensitive_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "75-88:RegexValidator"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "936-955:testMultipleInsensitive_test7_decomposed": {
                    "start": 936,
                    "end": 955,
                    "body": [
                        "    public void testMultipleInsensitive_test7_decomposed()  {\n",
                        "        RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX, false);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator2(REGEX_1, false);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator2(REGEX_2, false);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator2(REGEX_3, false);\n",
                        "        String value = \"AAC FDE 321\";\n",
                        "        String expect = \"AACFDE321\";\n",
                        "        String[] array = new String[] {\"AAC\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"match() Multiple\", array, multiple.match(value));\n",
                        "        single1.match(value);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleInsensitive_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "75-88:RegexValidator"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "915-933:testMultipleInsensitive_test6_decomposed": {
                    "start": 915,
                    "end": 933,
                    "body": [
                        "    public void testMultipleInsensitive_test6_decomposed()  {\n",
                        "        RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX, false);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator2(REGEX_1, false);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator2(REGEX_2, false);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator2(REGEX_3, false);\n",
                        "        String value = \"AAC FDE 321\";\n",
                        "        String expect = \"AACFDE321\";\n",
                        "        String[] array = new String[] {\"AAC\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"match() Multiple\", array, multiple.match(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleInsensitive_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "75-88:RegexValidator"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "895-912:testMultipleInsensitive_test5_decomposed": {
                    "start": 895,
                    "end": 912,
                    "body": [
                        "    public void testMultipleInsensitive_test5_decomposed()  {\n",
                        "        RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX, false);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator2(REGEX_1, false);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator2(REGEX_2, false);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator2(REGEX_3, false);\n",
                        "        String value = \"AAC FDE 321\";\n",
                        "        String expect = \"AACFDE321\";\n",
                        "        String[] array = new String[] {\"AAC\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleInsensitive_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "75-88:RegexValidator"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ]
                    ]
                },
                "876-892:testMultipleInsensitive_test4_decomposed": {
                    "start": 876,
                    "end": 892,
                    "body": [
                        "    public void testMultipleInsensitive_test4_decomposed()  {\n",
                        "        RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX, false);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator2(REGEX_1, false);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator2(REGEX_2, false);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator2(REGEX_3, false);\n",
                        "        String value = \"AAC FDE 321\";\n",
                        "        String expect = \"AACFDE321\";\n",
                        "        String[] array = new String[] {\"AAC\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"validate() 3rd\", null, single3.validate(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleInsensitive_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "75-88:RegexValidator"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ]
                    ]
                },
                "861-873:testMultipleInsensitive_test3_decomposed": {
                    "start": 861,
                    "end": 873,
                    "body": [
                        "    public void testMultipleInsensitive_test3_decomposed()  {\n",
                        "        RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX, false);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator2(REGEX_1, false);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator2(REGEX_2, false);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator2(REGEX_3, false);\n",
                        "        String value = \"AAC FDE 321\";\n",
                        "        String expect = \"AACFDE321\";\n",
                        "        String[] array = new String[] {\"AAC\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"isValid() 3rd\", false, single3.isValid(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleInsensitive_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "75-88:RegexValidator"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ]
                    ]
                },
                "849-858:testMultipleInsensitive_test2_decomposed": {
                    "start": 849,
                    "end": 858,
                    "body": [
                        "    public void testMultipleInsensitive_test2_decomposed()  {\n",
                        "        RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX, false);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator2(REGEX_1, false);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator2(REGEX_2, false);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator2(REGEX_3, false);\n",
                        "        String value = \"AAC FDE 321\";\n",
                        "        String expect = \"AACFDE321\";\n",
                        "        String[] array = new String[] {\"AAC\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"isValid() Multiple\", true, multiple.isValid(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleInsensitive_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "75-88:RegexValidator"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ]
                    ]
                },
                "841-846:testMultipleInsensitive_test1_decomposed": {
                    "start": 841,
                    "end": 846,
                    "body": [
                        "    public void testMultipleInsensitive_test1_decomposed()  {\n",
                        "        RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX, false);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator2(REGEX_1, false);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator2(REGEX_2, false);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator2(REGEX_3, false);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleInsensitive_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "75-88:RegexValidator"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ]
                    ]
                },
                "836-838:testMultipleInsensitive_test0_decomposed": {
                    "start": 836,
                    "end": 838,
                    "body": [
                        "    public void testMultipleInsensitive_test0_decomposed()  {\n",
                        "        RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX, false);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleInsensitive_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "75-88:RegexValidator"
                        ]
                    ]
                },
                "805-833:testMultipleSensitive_test15_decomposed": {
                    "start": 805,
                    "end": 833,
                    "body": [
                        "    public void testMultipleSensitive_test15_decomposed()  {\n",
                        "        RegexValidator multiple = RegexValidator.RegexValidator1(MULTIPLE_REGEX);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator3(REGEX_1);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator3(REGEX_2);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator3(REGEX_3);\n",
                        "        String value = \"aac FDE 321\";\n",
                        "        String expect = \"aacFDE321\";\n",
                        "        String[] array = new String[] {\"aac\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"Sensitive isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"Sensitive validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"Sensitive match() Multiple\", array, multiple.match(value));\n",
                        "        single1.match(value);\n",
                        "        checkArray(\"Sensitive match() 1st\", null, single1.match(value));\n",
                        "        single2.match(value);\n",
                        "        checkArray(\"Sensitive match() 2nd\", array, single2.match(value));\n",
                        "        single3.match(value);\n",
                        "        checkArray(\"Sensitive match() 3rd\", null, single3.match(value));\n",
                        "        value = \"AAC*FDE*321\";\n",
                        "        assertEquals(\"isValid() Invalid\", false, multiple.isValid(value));\n",
                        "        assertEquals(\"validate() Invalid\", null, multiple.validate(value));\n",
                        "        assertEquals(\"match() Multiple\", null, multiple.match(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleSensitive_test15_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ]
                    ]
                },
                "775-802:testMultipleSensitive_test14_decomposed": {
                    "start": 775,
                    "end": 802,
                    "body": [
                        "    public void testMultipleSensitive_test14_decomposed()  {\n",
                        "        RegexValidator multiple = RegexValidator.RegexValidator1(MULTIPLE_REGEX);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator3(REGEX_1);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator3(REGEX_2);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator3(REGEX_3);\n",
                        "        String value = \"aac FDE 321\";\n",
                        "        String expect = \"aacFDE321\";\n",
                        "        String[] array = new String[] {\"aac\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"Sensitive isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"Sensitive validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"Sensitive match() Multiple\", array, multiple.match(value));\n",
                        "        single1.match(value);\n",
                        "        checkArray(\"Sensitive match() 1st\", null, single1.match(value));\n",
                        "        single2.match(value);\n",
                        "        checkArray(\"Sensitive match() 2nd\", array, single2.match(value));\n",
                        "        single3.match(value);\n",
                        "        checkArray(\"Sensitive match() 3rd\", null, single3.match(value));\n",
                        "        value = \"AAC*FDE*321\";\n",
                        "        assertEquals(\"isValid() Invalid\", false, multiple.isValid(value));\n",
                        "        assertEquals(\"validate() Invalid\", null, multiple.validate(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleSensitive_test14_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "746-772:testMultipleSensitive_test13_decomposed": {
                    "start": 746,
                    "end": 772,
                    "body": [
                        "    public void testMultipleSensitive_test13_decomposed()  {\n",
                        "        RegexValidator multiple = RegexValidator.RegexValidator1(MULTIPLE_REGEX);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator3(REGEX_1);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator3(REGEX_2);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator3(REGEX_3);\n",
                        "        String value = \"aac FDE 321\";\n",
                        "        String expect = \"aacFDE321\";\n",
                        "        String[] array = new String[] {\"aac\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"Sensitive isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"Sensitive validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"Sensitive match() Multiple\", array, multiple.match(value));\n",
                        "        single1.match(value);\n",
                        "        checkArray(\"Sensitive match() 1st\", null, single1.match(value));\n",
                        "        single2.match(value);\n",
                        "        checkArray(\"Sensitive match() 2nd\", array, single2.match(value));\n",
                        "        single3.match(value);\n",
                        "        checkArray(\"Sensitive match() 3rd\", null, single3.match(value));\n",
                        "        value = \"AAC*FDE*321\";\n",
                        "        assertEquals(\"isValid() Invalid\", false, multiple.isValid(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleSensitive_test13_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "719-743:testMultipleSensitive_test12_decomposed": {
                    "start": 719,
                    "end": 743,
                    "body": [
                        "    public void testMultipleSensitive_test12_decomposed()  {\n",
                        "        RegexValidator multiple = RegexValidator.RegexValidator1(MULTIPLE_REGEX);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator3(REGEX_1);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator3(REGEX_2);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator3(REGEX_3);\n",
                        "        String value = \"aac FDE 321\";\n",
                        "        String expect = \"aacFDE321\";\n",
                        "        String[] array = new String[] {\"aac\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"Sensitive isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"Sensitive validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"Sensitive match() Multiple\", array, multiple.match(value));\n",
                        "        single1.match(value);\n",
                        "        checkArray(\"Sensitive match() 1st\", null, single1.match(value));\n",
                        "        single2.match(value);\n",
                        "        checkArray(\"Sensitive match() 2nd\", array, single2.match(value));\n",
                        "        single3.match(value);\n",
                        "        checkArray(\"Sensitive match() 3rd\", null, single3.match(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleSensitive_test12_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "693-716:testMultipleSensitive_test11_decomposed": {
                    "start": 693,
                    "end": 716,
                    "body": [
                        "    public void testMultipleSensitive_test11_decomposed()  {\n",
                        "        RegexValidator multiple = RegexValidator.RegexValidator1(MULTIPLE_REGEX);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator3(REGEX_1);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator3(REGEX_2);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator3(REGEX_3);\n",
                        "        String value = \"aac FDE 321\";\n",
                        "        String expect = \"aacFDE321\";\n",
                        "        String[] array = new String[] {\"aac\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"Sensitive isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"Sensitive validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"Sensitive match() Multiple\", array, multiple.match(value));\n",
                        "        single1.match(value);\n",
                        "        checkArray(\"Sensitive match() 1st\", null, single1.match(value));\n",
                        "        single2.match(value);\n",
                        "        checkArray(\"Sensitive match() 2nd\", array, single2.match(value));\n",
                        "        single3.match(value);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleSensitive_test11_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "668-690:testMultipleSensitive_test10_decomposed": {
                    "start": 668,
                    "end": 690,
                    "body": [
                        "    public void testMultipleSensitive_test10_decomposed()  {\n",
                        "        RegexValidator multiple = RegexValidator.RegexValidator1(MULTIPLE_REGEX);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator3(REGEX_1);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator3(REGEX_2);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator3(REGEX_3);\n",
                        "        String value = \"aac FDE 321\";\n",
                        "        String expect = \"aacFDE321\";\n",
                        "        String[] array = new String[] {\"aac\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"Sensitive isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"Sensitive validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"Sensitive match() Multiple\", array, multiple.match(value));\n",
                        "        single1.match(value);\n",
                        "        checkArray(\"Sensitive match() 1st\", null, single1.match(value));\n",
                        "        single2.match(value);\n",
                        "        checkArray(\"Sensitive match() 2nd\", array, single2.match(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleSensitive_test10_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "644-665:testMultipleSensitive_test9_decomposed": {
                    "start": 644,
                    "end": 665,
                    "body": [
                        "    public void testMultipleSensitive_test9_decomposed()  {\n",
                        "        RegexValidator multiple = RegexValidator.RegexValidator1(MULTIPLE_REGEX);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator3(REGEX_1);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator3(REGEX_2);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator3(REGEX_3);\n",
                        "        String value = \"aac FDE 321\";\n",
                        "        String expect = \"aacFDE321\";\n",
                        "        String[] array = new String[] {\"aac\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"Sensitive isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"Sensitive validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"Sensitive match() Multiple\", array, multiple.match(value));\n",
                        "        single1.match(value);\n",
                        "        checkArray(\"Sensitive match() 1st\", null, single1.match(value));\n",
                        "        single2.match(value);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleSensitive_test9_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "621-641:testMultipleSensitive_test8_decomposed": {
                    "start": 621,
                    "end": 641,
                    "body": [
                        "    public void testMultipleSensitive_test8_decomposed()  {\n",
                        "        RegexValidator multiple = RegexValidator.RegexValidator1(MULTIPLE_REGEX);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator3(REGEX_1);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator3(REGEX_2);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator3(REGEX_3);\n",
                        "        String value = \"aac FDE 321\";\n",
                        "        String expect = \"aacFDE321\";\n",
                        "        String[] array = new String[] {\"aac\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"Sensitive isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"Sensitive validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"Sensitive match() Multiple\", array, multiple.match(value));\n",
                        "        single1.match(value);\n",
                        "        checkArray(\"Sensitive match() 1st\", null, single1.match(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleSensitive_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "599-618:testMultipleSensitive_test7_decomposed": {
                    "start": 599,
                    "end": 618,
                    "body": [
                        "    public void testMultipleSensitive_test7_decomposed()  {\n",
                        "        RegexValidator multiple = RegexValidator.RegexValidator1(MULTIPLE_REGEX);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator3(REGEX_1);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator3(REGEX_2);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator3(REGEX_3);\n",
                        "        String value = \"aac FDE 321\";\n",
                        "        String expect = \"aacFDE321\";\n",
                        "        String[] array = new String[] {\"aac\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"Sensitive isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"Sensitive validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"Sensitive match() Multiple\", array, multiple.match(value));\n",
                        "        single1.match(value);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleSensitive_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "578-596:testMultipleSensitive_test6_decomposed": {
                    "start": 578,
                    "end": 596,
                    "body": [
                        "    public void testMultipleSensitive_test6_decomposed()  {\n",
                        "        RegexValidator multiple = RegexValidator.RegexValidator1(MULTIPLE_REGEX);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator3(REGEX_1);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator3(REGEX_2);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator3(REGEX_3);\n",
                        "        String value = \"aac FDE 321\";\n",
                        "        String expect = \"aacFDE321\";\n",
                        "        String[] array = new String[] {\"aac\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"Sensitive isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"Sensitive validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "        checkArray(\"Sensitive match() Multiple\", array, multiple.match(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleSensitive_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "558-575:testMultipleSensitive_test5_decomposed": {
                    "start": 558,
                    "end": 575,
                    "body": [
                        "    public void testMultipleSensitive_test5_decomposed()  {\n",
                        "        RegexValidator multiple = RegexValidator.RegexValidator1(MULTIPLE_REGEX);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator3(REGEX_1);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator3(REGEX_2);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator3(REGEX_3);\n",
                        "        String value = \"aac FDE 321\";\n",
                        "        String expect = \"aacFDE321\";\n",
                        "        String[] array = new String[] {\"aac\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"Sensitive isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"Sensitive validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 3rd\", null, single3.validate(value));\n",
                        "        multiple.match(value);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleSensitive_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ]
                    ]
                },
                "539-555:testMultipleSensitive_test4_decomposed": {
                    "start": 539,
                    "end": 555,
                    "body": [
                        "    public void testMultipleSensitive_test4_decomposed()  {\n",
                        "        RegexValidator multiple = RegexValidator.RegexValidator1(MULTIPLE_REGEX);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator3(REGEX_1);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator3(REGEX_2);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator3(REGEX_3);\n",
                        "        String value = \"aac FDE 321\";\n",
                        "        String expect = \"aacFDE321\";\n",
                        "        String[] array = new String[] {\"aac\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"Sensitive isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 3rd\", false, single3.isValid(value));\n",
                        "        assertEquals(\"Sensitive validate() Multiple\", expect, multiple.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 1st\", null, single1.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 2nd\", expect, single2.validate(value));\n",
                        "        assertEquals(\"Sensitive validate() 3rd\", null, single3.validate(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleSensitive_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ]
                    ]
                },
                "524-536:testMultipleSensitive_test3_decomposed": {
                    "start": 524,
                    "end": 536,
                    "body": [
                        "    public void testMultipleSensitive_test3_decomposed()  {\n",
                        "        RegexValidator multiple = RegexValidator.RegexValidator1(MULTIPLE_REGEX);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator3(REGEX_1);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator3(REGEX_2);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator3(REGEX_3);\n",
                        "        String value = \"aac FDE 321\";\n",
                        "        String expect = \"aacFDE321\";\n",
                        "        String[] array = new String[] {\"aac\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"Sensitive isValid() Multiple\", true, multiple.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 1st\", false, single1.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 2nd\", true, single2.isValid(value));\n",
                        "        assertEquals(\"Sensitive isValid() 3rd\", false, single3.isValid(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleSensitive_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ]
                    ]
                },
                "512-521:testMultipleSensitive_test2_decomposed": {
                    "start": 512,
                    "end": 521,
                    "body": [
                        "    public void testMultipleSensitive_test2_decomposed()  {\n",
                        "        RegexValidator multiple = RegexValidator.RegexValidator1(MULTIPLE_REGEX);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator3(REGEX_1);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator3(REGEX_2);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator3(REGEX_3);\n",
                        "        String value = \"aac FDE 321\";\n",
                        "        String expect = \"aacFDE321\";\n",
                        "        String[] array = new String[] {\"aac\", \"FDE\", \"321\"};\n",
                        "        assertEquals(\"Sensitive isValid() Multiple\", true, multiple.isValid(value));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleSensitive_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ]
                    ]
                },
                "504-509:testMultipleSensitive_test1_decomposed": {
                    "start": 504,
                    "end": 509,
                    "body": [
                        "    public void testMultipleSensitive_test1_decomposed()  {\n",
                        "        RegexValidator multiple = RegexValidator.RegexValidator1(MULTIPLE_REGEX);\n",
                        "        RegexValidator single1 = RegexValidator.RegexValidator3(REGEX_1);\n",
                        "        RegexValidator single2 = RegexValidator.RegexValidator3(REGEX_2);\n",
                        "        RegexValidator single3 = RegexValidator.RegexValidator3(REGEX_3);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleSensitive_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ]
                    ]
                },
                "499-501:testMultipleSensitive_test0_decomposed": {
                    "start": 499,
                    "end": 501,
                    "body": [
                        "    public void testMultipleSensitive_test0_decomposed()  {\n",
                        "        RegexValidator multiple = RegexValidator.RegexValidator1(MULTIPLE_REGEX);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMultipleSensitive_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "90-92:RegexValidator1"
                        ]
                    ]
                },
                "460-496:testSingle_test16_decomposed": {
                    "start": 460,
                    "end": 496,
                    "body": [
                        "    public void testSingle_test16_decomposed()  {\n",
                        "        RegexValidator sensitive = RegexValidator.RegexValidator3(REGEX);\n",
                        "        RegexValidator insensitive = RegexValidator.RegexValidator2(REGEX, false);\n",
                        "        assertEquals(\"Sensitive isValid() valid\", true, sensitive.isValid(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive isValid() invalid\", false, sensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() valid\", true, insensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() invalid\", false, insensitive.isValid(\"ABd-de-1\"));\n",
                        "        assertEquals(\"Sensitive validate() valid\", \"acDE1\", sensitive.validate(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive validate() invalid\", null, sensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() valid\", \"ABde1\", insensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() invalid\", null, insensitive.validate(\"ABd-de-1\"));\n",
                        "        sensitive.match(\"ac-DE-1\");\n",
                        "        checkArray(\n",
                        "                \"Sensitive match() valid\",\n",
                        "                new String[] {\"ac\", \"DE\", \"1\"},\n",
                        "                sensitive.match(\"ac-DE-1\"));\n",
                        "        sensitive.match(\"AB-de-1\");\n",
                        "        checkArray(\"Sensitive match() invalid\", null, sensitive.match(\"AB-de-1\"));\n",
                        "        insensitive.match(\"AB-de-1\");\n",
                        "        checkArray(\n",
                        "                \"Insensitive match() valid\",\n",
                        "                new String[] {\"AB\", \"de\", \"1\"},\n",
                        "                insensitive.match(\"AB-de-1\"));\n",
                        "        insensitive.match(\"ABd-de-1\");\n",
                        "        checkArray(\"Insensitive match() invalid\", null, insensitive.match(\"ABd-de-1\"));\n",
                        "        RegexValidator.RegexValidator3(\"^([A-Z]*)$\");\n",
                        "        assertEquals(\n",
                        "                \"validate one\",\n",
                        "                \"ABC\",\n",
                        "                (RegexValidator.RegexValidator3(\"^([A-Z]*)$\")).validate(\"ABC\"));\n",
                        "        RegexValidator.RegexValidator3(\"^([A-Z]*)$\");\n",
                        "        (RegexValidator.RegexValidator3(\"^([A-Z]*)$\")).match(\"ABC\");\n",
                        "        checkArray(\n",
                        "                \"match one\",\n",
                        "                new String[] {\"ABC\"},\n",
                        "                (RegexValidator.RegexValidator3(\"^([A-Z]*)$\")).match(\"ABC\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingle_test16_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "425-457:testSingle_test15_decomposed": {
                    "start": 425,
                    "end": 457,
                    "body": [
                        "    public void testSingle_test15_decomposed()  {\n",
                        "        RegexValidator sensitive = RegexValidator.RegexValidator3(REGEX);\n",
                        "        RegexValidator insensitive = RegexValidator.RegexValidator2(REGEX, false);\n",
                        "        assertEquals(\"Sensitive isValid() valid\", true, sensitive.isValid(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive isValid() invalid\", false, sensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() valid\", true, insensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() invalid\", false, insensitive.isValid(\"ABd-de-1\"));\n",
                        "        assertEquals(\"Sensitive validate() valid\", \"acDE1\", sensitive.validate(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive validate() invalid\", null, sensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() valid\", \"ABde1\", insensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() invalid\", null, insensitive.validate(\"ABd-de-1\"));\n",
                        "        sensitive.match(\"ac-DE-1\");\n",
                        "        checkArray(\n",
                        "                \"Sensitive match() valid\",\n",
                        "                new String[] {\"ac\", \"DE\", \"1\"},\n",
                        "                sensitive.match(\"ac-DE-1\"));\n",
                        "        sensitive.match(\"AB-de-1\");\n",
                        "        checkArray(\"Sensitive match() invalid\", null, sensitive.match(\"AB-de-1\"));\n",
                        "        insensitive.match(\"AB-de-1\");\n",
                        "        checkArray(\n",
                        "                \"Insensitive match() valid\",\n",
                        "                new String[] {\"AB\", \"de\", \"1\"},\n",
                        "                insensitive.match(\"AB-de-1\"));\n",
                        "        insensitive.match(\"ABd-de-1\");\n",
                        "        checkArray(\"Insensitive match() invalid\", null, insensitive.match(\"ABd-de-1\"));\n",
                        "        RegexValidator.RegexValidator3(\"^([A-Z]*)$\");\n",
                        "        assertEquals(\n",
                        "                \"validate one\",\n",
                        "                \"ABC\",\n",
                        "                (RegexValidator.RegexValidator3(\"^([A-Z]*)$\")).validate(\"ABC\"));\n",
                        "        RegexValidator.RegexValidator3(\"^([A-Z]*)$\");\n",
                        "        (RegexValidator.RegexValidator3(\"^([A-Z]*)$\")).match(\"ABC\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingle_test15_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "391-422:testSingle_test14_decomposed": {
                    "start": 391,
                    "end": 422,
                    "body": [
                        "    public void testSingle_test14_decomposed()  {\n",
                        "        RegexValidator sensitive = RegexValidator.RegexValidator3(REGEX);\n",
                        "        RegexValidator insensitive = RegexValidator.RegexValidator2(REGEX, false);\n",
                        "        assertEquals(\"Sensitive isValid() valid\", true, sensitive.isValid(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive isValid() invalid\", false, sensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() valid\", true, insensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() invalid\", false, insensitive.isValid(\"ABd-de-1\"));\n",
                        "        assertEquals(\"Sensitive validate() valid\", \"acDE1\", sensitive.validate(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive validate() invalid\", null, sensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() valid\", \"ABde1\", insensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() invalid\", null, insensitive.validate(\"ABd-de-1\"));\n",
                        "        sensitive.match(\"ac-DE-1\");\n",
                        "        checkArray(\n",
                        "                \"Sensitive match() valid\",\n",
                        "                new String[] {\"ac\", \"DE\", \"1\"},\n",
                        "                sensitive.match(\"ac-DE-1\"));\n",
                        "        sensitive.match(\"AB-de-1\");\n",
                        "        checkArray(\"Sensitive match() invalid\", null, sensitive.match(\"AB-de-1\"));\n",
                        "        insensitive.match(\"AB-de-1\");\n",
                        "        checkArray(\n",
                        "                \"Insensitive match() valid\",\n",
                        "                new String[] {\"AB\", \"de\", \"1\"},\n",
                        "                insensitive.match(\"AB-de-1\"));\n",
                        "        insensitive.match(\"ABd-de-1\");\n",
                        "        checkArray(\"Insensitive match() invalid\", null, insensitive.match(\"ABd-de-1\"));\n",
                        "        RegexValidator.RegexValidator3(\"^([A-Z]*)$\");\n",
                        "        assertEquals(\n",
                        "                \"validate one\",\n",
                        "                \"ABC\",\n",
                        "                (RegexValidator.RegexValidator3(\"^([A-Z]*)$\")).validate(\"ABC\"));\n",
                        "        RegexValidator.RegexValidator3(\"^([A-Z]*)$\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingle_test14_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "358-388:testSingle_test13_decomposed": {
                    "start": 358,
                    "end": 388,
                    "body": [
                        "    public void testSingle_test13_decomposed()  {\n",
                        "        RegexValidator sensitive = RegexValidator.RegexValidator3(REGEX);\n",
                        "        RegexValidator insensitive = RegexValidator.RegexValidator2(REGEX, false);\n",
                        "        assertEquals(\"Sensitive isValid() valid\", true, sensitive.isValid(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive isValid() invalid\", false, sensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() valid\", true, insensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() invalid\", false, insensitive.isValid(\"ABd-de-1\"));\n",
                        "        assertEquals(\"Sensitive validate() valid\", \"acDE1\", sensitive.validate(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive validate() invalid\", null, sensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() valid\", \"ABde1\", insensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() invalid\", null, insensitive.validate(\"ABd-de-1\"));\n",
                        "        sensitive.match(\"ac-DE-1\");\n",
                        "        checkArray(\n",
                        "                \"Sensitive match() valid\",\n",
                        "                new String[] {\"ac\", \"DE\", \"1\"},\n",
                        "                sensitive.match(\"ac-DE-1\"));\n",
                        "        sensitive.match(\"AB-de-1\");\n",
                        "        checkArray(\"Sensitive match() invalid\", null, sensitive.match(\"AB-de-1\"));\n",
                        "        insensitive.match(\"AB-de-1\");\n",
                        "        checkArray(\n",
                        "                \"Insensitive match() valid\",\n",
                        "                new String[] {\"AB\", \"de\", \"1\"},\n",
                        "                insensitive.match(\"AB-de-1\"));\n",
                        "        insensitive.match(\"ABd-de-1\");\n",
                        "        checkArray(\"Insensitive match() invalid\", null, insensitive.match(\"ABd-de-1\"));\n",
                        "        RegexValidator.RegexValidator3(\"^([A-Z]*)$\");\n",
                        "        assertEquals(\n",
                        "                \"validate one\",\n",
                        "                \"ABC\",\n",
                        "                (RegexValidator.RegexValidator3(\"^([A-Z]*)$\")).validate(\"ABC\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingle_test13_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "329-355:testSingle_test12_decomposed": {
                    "start": 329,
                    "end": 355,
                    "body": [
                        "    public void testSingle_test12_decomposed()  {\n",
                        "        RegexValidator sensitive = RegexValidator.RegexValidator3(REGEX);\n",
                        "        RegexValidator insensitive = RegexValidator.RegexValidator2(REGEX, false);\n",
                        "        assertEquals(\"Sensitive isValid() valid\", true, sensitive.isValid(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive isValid() invalid\", false, sensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() valid\", true, insensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() invalid\", false, insensitive.isValid(\"ABd-de-1\"));\n",
                        "        assertEquals(\"Sensitive validate() valid\", \"acDE1\", sensitive.validate(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive validate() invalid\", null, sensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() valid\", \"ABde1\", insensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() invalid\", null, insensitive.validate(\"ABd-de-1\"));\n",
                        "        sensitive.match(\"ac-DE-1\");\n",
                        "        checkArray(\n",
                        "                \"Sensitive match() valid\",\n",
                        "                new String[] {\"ac\", \"DE\", \"1\"},\n",
                        "                sensitive.match(\"ac-DE-1\"));\n",
                        "        sensitive.match(\"AB-de-1\");\n",
                        "        checkArray(\"Sensitive match() invalid\", null, sensitive.match(\"AB-de-1\"));\n",
                        "        insensitive.match(\"AB-de-1\");\n",
                        "        checkArray(\n",
                        "                \"Insensitive match() valid\",\n",
                        "                new String[] {\"AB\", \"de\", \"1\"},\n",
                        "                insensitive.match(\"AB-de-1\"));\n",
                        "        insensitive.match(\"ABd-de-1\");\n",
                        "        checkArray(\"Insensitive match() invalid\", null, insensitive.match(\"ABd-de-1\"));\n",
                        "        RegexValidator.RegexValidator3(\"^([A-Z]*)$\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingle_test12_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "301-326:testSingle_test11_decomposed": {
                    "start": 301,
                    "end": 326,
                    "body": [
                        "    public void testSingle_test11_decomposed()  {\n",
                        "        RegexValidator sensitive = RegexValidator.RegexValidator3(REGEX);\n",
                        "        RegexValidator insensitive = RegexValidator.RegexValidator2(REGEX, false);\n",
                        "        assertEquals(\"Sensitive isValid() valid\", true, sensitive.isValid(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive isValid() invalid\", false, sensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() valid\", true, insensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() invalid\", false, insensitive.isValid(\"ABd-de-1\"));\n",
                        "        assertEquals(\"Sensitive validate() valid\", \"acDE1\", sensitive.validate(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive validate() invalid\", null, sensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() valid\", \"ABde1\", insensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() invalid\", null, insensitive.validate(\"ABd-de-1\"));\n",
                        "        sensitive.match(\"ac-DE-1\");\n",
                        "        checkArray(\n",
                        "                \"Sensitive match() valid\",\n",
                        "                new String[] {\"ac\", \"DE\", \"1\"},\n",
                        "                sensitive.match(\"ac-DE-1\"));\n",
                        "        sensitive.match(\"AB-de-1\");\n",
                        "        checkArray(\"Sensitive match() invalid\", null, sensitive.match(\"AB-de-1\"));\n",
                        "        insensitive.match(\"AB-de-1\");\n",
                        "        checkArray(\n",
                        "                \"Insensitive match() valid\",\n",
                        "                new String[] {\"AB\", \"de\", \"1\"},\n",
                        "                insensitive.match(\"AB-de-1\"));\n",
                        "        insensitive.match(\"ABd-de-1\");\n",
                        "        checkArray(\"Insensitive match() invalid\", null, insensitive.match(\"ABd-de-1\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingle_test11_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "274-298:testSingle_test10_decomposed": {
                    "start": 274,
                    "end": 298,
                    "body": [
                        "    public void testSingle_test10_decomposed()  {\n",
                        "        RegexValidator sensitive = RegexValidator.RegexValidator3(REGEX);\n",
                        "        RegexValidator insensitive = RegexValidator.RegexValidator2(REGEX, false);\n",
                        "        assertEquals(\"Sensitive isValid() valid\", true, sensitive.isValid(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive isValid() invalid\", false, sensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() valid\", true, insensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() invalid\", false, insensitive.isValid(\"ABd-de-1\"));\n",
                        "        assertEquals(\"Sensitive validate() valid\", \"acDE1\", sensitive.validate(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive validate() invalid\", null, sensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() valid\", \"ABde1\", insensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() invalid\", null, insensitive.validate(\"ABd-de-1\"));\n",
                        "        sensitive.match(\"ac-DE-1\");\n",
                        "        checkArray(\n",
                        "                \"Sensitive match() valid\",\n",
                        "                new String[] {\"ac\", \"DE\", \"1\"},\n",
                        "                sensitive.match(\"ac-DE-1\"));\n",
                        "        sensitive.match(\"AB-de-1\");\n",
                        "        checkArray(\"Sensitive match() invalid\", null, sensitive.match(\"AB-de-1\"));\n",
                        "        insensitive.match(\"AB-de-1\");\n",
                        "        checkArray(\n",
                        "                \"Insensitive match() valid\",\n",
                        "                new String[] {\"AB\", \"de\", \"1\"},\n",
                        "                insensitive.match(\"AB-de-1\"));\n",
                        "        insensitive.match(\"ABd-de-1\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingle_test10_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "248-271:testSingle_test9_decomposed": {
                    "start": 248,
                    "end": 271,
                    "body": [
                        "    public void testSingle_test9_decomposed()  {\n",
                        "        RegexValidator sensitive = RegexValidator.RegexValidator3(REGEX);\n",
                        "        RegexValidator insensitive = RegexValidator.RegexValidator2(REGEX, false);\n",
                        "        assertEquals(\"Sensitive isValid() valid\", true, sensitive.isValid(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive isValid() invalid\", false, sensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() valid\", true, insensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() invalid\", false, insensitive.isValid(\"ABd-de-1\"));\n",
                        "        assertEquals(\"Sensitive validate() valid\", \"acDE1\", sensitive.validate(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive validate() invalid\", null, sensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() valid\", \"ABde1\", insensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() invalid\", null, insensitive.validate(\"ABd-de-1\"));\n",
                        "        sensitive.match(\"ac-DE-1\");\n",
                        "        checkArray(\n",
                        "                \"Sensitive match() valid\",\n",
                        "                new String[] {\"ac\", \"DE\", \"1\"},\n",
                        "                sensitive.match(\"ac-DE-1\"));\n",
                        "        sensitive.match(\"AB-de-1\");\n",
                        "        checkArray(\"Sensitive match() invalid\", null, sensitive.match(\"AB-de-1\"));\n",
                        "        insensitive.match(\"AB-de-1\");\n",
                        "        checkArray(\n",
                        "                \"Insensitive match() valid\",\n",
                        "                new String[] {\"AB\", \"de\", \"1\"},\n",
                        "                insensitive.match(\"AB-de-1\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingle_test9_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "226-245:testSingle_test8_decomposed": {
                    "start": 226,
                    "end": 245,
                    "body": [
                        "    public void testSingle_test8_decomposed()  {\n",
                        "        RegexValidator sensitive = RegexValidator.RegexValidator3(REGEX);\n",
                        "        RegexValidator insensitive = RegexValidator.RegexValidator2(REGEX, false);\n",
                        "        assertEquals(\"Sensitive isValid() valid\", true, sensitive.isValid(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive isValid() invalid\", false, sensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() valid\", true, insensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() invalid\", false, insensitive.isValid(\"ABd-de-1\"));\n",
                        "        assertEquals(\"Sensitive validate() valid\", \"acDE1\", sensitive.validate(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive validate() invalid\", null, sensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() valid\", \"ABde1\", insensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() invalid\", null, insensitive.validate(\"ABd-de-1\"));\n",
                        "        sensitive.match(\"ac-DE-1\");\n",
                        "        checkArray(\n",
                        "                \"Sensitive match() valid\",\n",
                        "                new String[] {\"ac\", \"DE\", \"1\"},\n",
                        "                sensitive.match(\"ac-DE-1\"));\n",
                        "        sensitive.match(\"AB-de-1\");\n",
                        "        checkArray(\"Sensitive match() invalid\", null, sensitive.match(\"AB-de-1\"));\n",
                        "        insensitive.match(\"AB-de-1\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingle_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "205-223:testSingle_test7_decomposed": {
                    "start": 205,
                    "end": 223,
                    "body": [
                        "    public void testSingle_test7_decomposed()  {\n",
                        "        RegexValidator sensitive = RegexValidator.RegexValidator3(REGEX);\n",
                        "        RegexValidator insensitive = RegexValidator.RegexValidator2(REGEX, false);\n",
                        "        assertEquals(\"Sensitive isValid() valid\", true, sensitive.isValid(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive isValid() invalid\", false, sensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() valid\", true, insensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() invalid\", false, insensitive.isValid(\"ABd-de-1\"));\n",
                        "        assertEquals(\"Sensitive validate() valid\", \"acDE1\", sensitive.validate(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive validate() invalid\", null, sensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() valid\", \"ABde1\", insensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() invalid\", null, insensitive.validate(\"ABd-de-1\"));\n",
                        "        sensitive.match(\"ac-DE-1\");\n",
                        "        checkArray(\n",
                        "                \"Sensitive match() valid\",\n",
                        "                new String[] {\"ac\", \"DE\", \"1\"},\n",
                        "                sensitive.match(\"ac-DE-1\"));\n",
                        "        sensitive.match(\"AB-de-1\");\n",
                        "        checkArray(\"Sensitive match() invalid\", null, sensitive.match(\"AB-de-1\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingle_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "185-202:testSingle_test6_decomposed": {
                    "start": 185,
                    "end": 202,
                    "body": [
                        "    public void testSingle_test6_decomposed()  {\n",
                        "        RegexValidator sensitive = RegexValidator.RegexValidator3(REGEX);\n",
                        "        RegexValidator insensitive = RegexValidator.RegexValidator2(REGEX, false);\n",
                        "        assertEquals(\"Sensitive isValid() valid\", true, sensitive.isValid(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive isValid() invalid\", false, sensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() valid\", true, insensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() invalid\", false, insensitive.isValid(\"ABd-de-1\"));\n",
                        "        assertEquals(\"Sensitive validate() valid\", \"acDE1\", sensitive.validate(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive validate() invalid\", null, sensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() valid\", \"ABde1\", insensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() invalid\", null, insensitive.validate(\"ABd-de-1\"));\n",
                        "        sensitive.match(\"ac-DE-1\");\n",
                        "        checkArray(\n",
                        "                \"Sensitive match() valid\",\n",
                        "                new String[] {\"ac\", \"DE\", \"1\"},\n",
                        "                sensitive.match(\"ac-DE-1\"));\n",
                        "        sensitive.match(\"AB-de-1\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingle_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "166-182:testSingle_test5_decomposed": {
                    "start": 166,
                    "end": 182,
                    "body": [
                        "    public void testSingle_test5_decomposed()  {\n",
                        "        RegexValidator sensitive = RegexValidator.RegexValidator3(REGEX);\n",
                        "        RegexValidator insensitive = RegexValidator.RegexValidator2(REGEX, false);\n",
                        "        assertEquals(\"Sensitive isValid() valid\", true, sensitive.isValid(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive isValid() invalid\", false, sensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() valid\", true, insensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() invalid\", false, insensitive.isValid(\"ABd-de-1\"));\n",
                        "        assertEquals(\"Sensitive validate() valid\", \"acDE1\", sensitive.validate(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive validate() invalid\", null, sensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() valid\", \"ABde1\", insensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() invalid\", null, insensitive.validate(\"ABd-de-1\"));\n",
                        "        sensitive.match(\"ac-DE-1\");\n",
                        "        checkArray(\n",
                        "                \"Sensitive match() valid\",\n",
                        "                new String[] {\"ac\", \"DE\", \"1\"},\n",
                        "                sensitive.match(\"ac-DE-1\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingle_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.RegexValidatorTest",
                            "RegexValidatorTest",
                            "95-113:checkArray"
                        ]
                    ]
                },
                "151-163:testSingle_test4_decomposed": {
                    "start": 151,
                    "end": 163,
                    "body": [
                        "    public void testSingle_test4_decomposed()  {\n",
                        "        RegexValidator sensitive = RegexValidator.RegexValidator3(REGEX);\n",
                        "        RegexValidator insensitive = RegexValidator.RegexValidator2(REGEX, false);\n",
                        "        assertEquals(\"Sensitive isValid() valid\", true, sensitive.isValid(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive isValid() invalid\", false, sensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() valid\", true, insensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() invalid\", false, insensitive.isValid(\"ABd-de-1\"));\n",
                        "        assertEquals(\"Sensitive validate() valid\", \"acDE1\", sensitive.validate(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive validate() invalid\", null, sensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() valid\", \"ABde1\", insensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() invalid\", null, insensitive.validate(\"ABd-de-1\"));\n",
                        "        sensitive.match(\"ac-DE-1\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingle_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "151-167:match"
                        ]
                    ]
                },
                "137-148:testSingle_test3_decomposed": {
                    "start": 137,
                    "end": 148,
                    "body": [
                        "    public void testSingle_test3_decomposed()  {\n",
                        "        RegexValidator sensitive = RegexValidator.RegexValidator3(REGEX);\n",
                        "        RegexValidator insensitive = RegexValidator.RegexValidator2(REGEX, false);\n",
                        "        assertEquals(\"Sensitive isValid() valid\", true, sensitive.isValid(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive isValid() invalid\", false, sensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() valid\", true, insensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() invalid\", false, insensitive.isValid(\"ABd-de-1\"));\n",
                        "        assertEquals(\"Sensitive validate() valid\", \"acDE1\", sensitive.validate(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive validate() invalid\", null, sensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() valid\", \"ABde1\", insensitive.validate(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive validate() invalid\", null, insensitive.validate(\"ABd-de-1\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingle_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "177-199:validate"
                        ]
                    ]
                },
                "127-134:testSingle_test2_decomposed": {
                    "start": 127,
                    "end": 134,
                    "body": [
                        "    public void testSingle_test2_decomposed()  {\n",
                        "        RegexValidator sensitive = RegexValidator.RegexValidator3(REGEX);\n",
                        "        RegexValidator insensitive = RegexValidator.RegexValidator2(REGEX, false);\n",
                        "        assertEquals(\"Sensitive isValid() valid\", true, sensitive.isValid(\"ac-DE-1\"));\n",
                        "        assertEquals(\"Sensitive isValid() invalid\", false, sensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() valid\", true, insensitive.isValid(\"AB-de-1\"));\n",
                        "        assertEquals(\"Insensitive isValid() invalid\", false, insensitive.isValid(\"ABd-de-1\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingle_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,boolean,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "132-142:isValid"
                        ]
                    ]
                },
                "121-124:testSingle_test1_decomposed": {
                    "start": 121,
                    "end": 124,
                    "body": [
                        "    public void testSingle_test1_decomposed()  {\n",
                        "        RegexValidator sensitive = RegexValidator.RegexValidator3(REGEX);\n",
                        "        RegexValidator insensitive = RegexValidator.RegexValidator2(REGEX, false);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingle_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ]
                    ]
                },
                "116-118:testSingle_test0_decomposed": {
                    "start": 116,
                    "end": 118,
                    "body": [
                        "    public void testSingle_test0_decomposed()  {\n",
                        "        RegexValidator sensitive = RegexValidator.RegexValidator3(REGEX);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingle_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "98-100:RegexValidator3"
                        ]
                    ]
                },
                "63-65:tearDown": {
                    "start": 63,
                    "end": 65,
                    "body": [
                        "    protected void tearDown() throws Exception {\n",
                        "        super.tearDown();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "tearDown()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "tearDown()"
                        ]
                    ]
                },
                "57-59:setUp": {
                    "start": 57,
                    "end": 59,
                    "body": [
                        "    protected void setUp() throws Exception {\n",
                        "        super.setUp();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "setUp()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "setUp()"
                        ]
                    ]
                },
                "51-53:RegexValidatorTest": {
                    "start": 51,
                    "end": 53,
                    "body": [
                        "    public RegexValidatorTest(String name) {\n",
                        "        super(name);\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "RegexValidatorTest(String)",
                    "parameters": [
                        "name"
                    ],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "TestCase(java.lang.String)"
                        ]
                    ]
                },
                "95-113:checkArray": {
                    "start": 95,
                    "end": 113,
                    "body": [
                        "    private void checkArray(String label, String[] expect, String[] result) {\n",
                        "\n",
                        "        if (expect == null || result == null) {\n",
                        "            if (expect == null && result == null) {\n",
                        "                return; // valid, both null\n",
                        "            } else {\n",
                        "                fail(label + \" Null expect=\" + expect + \" result=\" + result);\n",
                        "            }\n",
                        "            return; // not strictly necessary, but prevents possible NPE below\n",
                        "        }\n",
                        "\n",
                        "        if (expect.length != result.length) {\n",
                        "            fail(label + \" Length expect=\" + expect.length + \" result=\" + result.length);\n",
                        "        }\n",
                        "\n",
                        "        for (int i = 0; i < expect.length; i++) {\n",
                        "            assertEquals(label + \" value[\" + i + \"]\", expect[i], result[i]);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "checkArray(String, String[], String[])",
                    "parameters": [
                        "label",
                        "expect",
                        "result"
                    ],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ]
                    ]
                }
            },
            "fields": {
                "44-44:MULTIPLE_REGEX": {
                    "start": 44,
                    "end": 44,
                    "body": [
                        "    private static final String[] MULTIPLE_REGEX = new String[] {REGEX_1, REGEX_2, REGEX_3};\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String[]",
                            "java.lang.String[]"
                        ]
                    ]
                },
                "43-43:REGEX_3": {
                    "start": 43,
                    "end": 43,
                    "body": [
                        "    private static final String REGEX_3 = \"^\" + COMPONENT_1 + COMPONENT_2 + COMPONENT_3 + \"$\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "41-42:REGEX_2": {
                    "start": 41,
                    "end": 42,
                    "body": [
                        "    private static final String REGEX_2 =\n",
                        "            \"^\" + COMPONENT_1 + SEPARATOR_2 + COMPONENT_2 + SEPARATOR_2 + COMPONENT_3 + \"$\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "39-40:REGEX_1": {
                    "start": 39,
                    "end": 40,
                    "body": [
                        "    private static final String REGEX_1 =\n",
                        "            \"^\" + COMPONENT_1 + SEPARATOR_1 + COMPONENT_2 + SEPARATOR_1 + COMPONENT_3 + \"$\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "38-38:SEPARATOR_2": {
                    "start": 38,
                    "end": 38,
                    "body": [
                        "    private static final String SEPARATOR_2 = \"(?:\\\\s)\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "37-37:SEPARATOR_1": {
                    "start": 37,
                    "end": 37,
                    "body": [
                        "    private static final String SEPARATOR_1 = \"(?:\\\\-)\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "36-36:COMPONENT_3": {
                    "start": 36,
                    "end": 36,
                    "body": [
                        "    private static final String COMPONENT_3 = \"([123]{3})\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "35-35:COMPONENT_2": {
                    "start": 35,
                    "end": 35,
                    "body": [
                        "    private static final String COMPONENT_2 = \"([DEF]{3})\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "34-34:COMPONENT_1": {
                    "start": 34,
                    "end": 34,
                    "body": [
                        "    private static final String COMPONENT_1 = \"([abc]{3})\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "32-32:REGEX": {
                    "start": 32,
                    "end": 32,
                    "body": [
                        "    private static final String REGEX = \"^([abc]*)(?:\\\\-)([DEF]*)(?:\\\\-)([123]*)$\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                }
            }
        }
    }
}