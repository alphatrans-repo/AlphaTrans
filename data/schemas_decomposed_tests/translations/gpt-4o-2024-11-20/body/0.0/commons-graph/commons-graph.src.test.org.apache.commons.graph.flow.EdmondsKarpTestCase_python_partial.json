{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-graph/src/test/java/org/apache/commons/graph/flow/EdmondsKarpTestCase.java",
    "imports": {
        "30-30:import DirectedMutableGraph": {
            "start": 30,
            "end": 30,
            "body": [
                "import org.apache.commons.graph.model.DirectedMutableGraph;\n"
            ]
        },
        "26-26:import AbstractGraphConnection": {
            "start": 26,
            "end": 26,
            "body": [
                "import org.apache.commons.graph.builder.AbstractGraphConnection;\n"
            ]
        },
        "32-32:import Test": {
            "start": 32,
            "end": 32,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "28-28:import BaseLabeledWeightedEdge": {
            "start": 28,
            "end": 28,
            "body": [
                "import org.apache.commons.graph.model.BaseLabeledWeightedEdge;\n"
            ]
        },
        "27-27:import BaseLabeledVertex": {
            "start": 27,
            "end": 27,
            "body": [
                "import org.apache.commons.graph.model.BaseLabeledVertex;\n"
            ]
        },
        "29-29:import BaseWeightedEdge": {
            "start": 29,
            "end": 29,
            "body": [
                "import org.apache.commons.graph.model.BaseWeightedEdge;\n"
            ]
        },
        "31-31:import IntegerWeightBaseOperations": {
            "start": 31,
            "end": 31,
            "body": [
                "import org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations;\n"
            ]
        },
        "24-24:import static Assert.assertEquals": {
            "start": 24,
            "end": 24,
            "body": [
                "import static org.junit.Assert.assertEquals;\n"
            ]
        },
        "23-23:import static CommonsGraph.newDirectedMutableGraph": {
            "start": 23,
            "end": 23,
            "body": [
                "import static org.apache.commons.graph.CommonsGraph.newDirectedMutableGraph;\n"
            ]
        },
        "22-22:import static CommonsGraph.findMaxFlow": {
            "start": 22,
            "end": 22,
            "body": [
                "import static org.apache.commons.graph.CommonsGraph.findMaxFlow;\n"
            ]
        }
    },
    "classes": {
        "EdmondsKarpTestCase": {
            "start": 38,
            "end": 38,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }"
            ],
            "implements": [],
            "extends": [],
            "methods": {
                "813-850:testSparse_test8_decomposed": {
                    "start": 813,
                    "end": 850,
                    "body": [
                        "    public void testSparse_test8_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 0;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(g);\n",
                        "        Integer actual =\n",
                        "                findMaxFlow(graph)\n",
                        "                        .whereEdgesHaveWeights(new BaseWeightedEdge<Integer>())\n",
                        "                        .from(a)\n",
                        "                        .to(g)\n",
                        "                        .applyingEdmondsKarp(new IntegerWeightBaseOperations());\n",
                        "        assertEquals(actual, expected);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSparse_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/MaxFlowAlgorithmSelector",
                            "applyingEdmondsKarp(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testSparse_test8_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "774-810:testSparse_test7_decomposed": {
                    "start": 774,
                    "end": 810,
                    "body": [
                        "    public void testSparse_test7_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 0;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(g);\n",
                        "        Integer actual =\n",
                        "                findMaxFlow(graph)\n",
                        "                        .whereEdgesHaveWeights(new BaseWeightedEdge<Integer>())\n",
                        "                        .from(a)\n",
                        "                        .to(g)\n",
                        "                        .applyingEdmondsKarp(new IntegerWeightBaseOperations());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSparse_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/MaxFlowAlgorithmSelector",
                            "applyingEdmondsKarp(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testSparse_test7_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "741-771:testSparse_test6_decomposed": {
                    "start": 741,
                    "end": 771,
                    "body": [
                        "    public void testSparse_test6_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 0;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(g);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSparse_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testSparse_test6_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "709-738:testSparse_test5_decomposed": {
                    "start": 709,
                    "end": 738,
                    "body": [
                        "    public void testSparse_test5_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 0;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSparse_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testSparse_test5_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "678-706:testSparse_test4_decomposed": {
                    "start": 678,
                    "end": 706,
                    "body": [
                        "    public void testSparse_test4_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 0;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSparse_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testSparse_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "648-675:testSparse_test3_decomposed": {
                    "start": 648,
                    "end": 675,
                    "body": [
                        "    public void testSparse_test3_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 0;\n",
                        "        findMaxFlow(graph);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSparse_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testSparse_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "620-645:testSparse_test2_decomposed": {
                    "start": 620,
                    "end": 645,
                    "body": [
                        "    public void testSparse_test2_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                            }\n",
                        "                        });\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSparse_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testSparse_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "614-617:testSparse_test1_decomposed": {
                    "start": 614,
                    "end": 617,
                    "body": [
                        "    public void testSparse_test1_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSparse_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testSparse_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "609-611:testSparse_test0_decomposed": {
                    "start": 609,
                    "end": 611,
                    "body": [
                        "    public void testSparse_test0_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSparse_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testSparse_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "592-606:testNullVertices_test4_decomposed": {
                    "start": 592,
                    "end": 606,
                    "body": [
                        "    public void testNullVertices_test4_decomposed()  {\n",
                        "        final BaseLabeledVertex a = null;\n",
                        "        final BaseLabeledVertex g = null;\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>();\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(g);\n",
                        "        findMaxFlow(graph)\n",
                        "                .whereEdgesHaveWeights(new BaseWeightedEdge<Integer>())\n",
                        "                .from(a)\n",
                        "                .to(g)\n",
                        "                .applyingEdmondsKarp(new IntegerWeightBaseOperations());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/MaxFlowAlgorithmSelector",
                            "applyingEdmondsKarp(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "580-589:testNullVertices_test3_decomposed": {
                    "start": 580,
                    "end": 589,
                    "body": [
                        "    public void testNullVertices_test3_decomposed()  {\n",
                        "        final BaseLabeledVertex a = null;\n",
                        "        final BaseLabeledVertex g = null;\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>();\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(g);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "569-577:testNullVertices_test2_decomposed": {
                    "start": 569,
                    "end": 577,
                    "body": [
                        "    public void testNullVertices_test2_decomposed()  {\n",
                        "        final BaseLabeledVertex a = null;\n",
                        "        final BaseLabeledVertex g = null;\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>();\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "559-566:testNullVertices_test1_decomposed": {
                    "start": 559,
                    "end": 566,
                    "body": [
                        "    public void testNullVertices_test1_decomposed()  {\n",
                        "        final BaseLabeledVertex a = null;\n",
                        "        final BaseLabeledVertex g = null;\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>();\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "550-556:testNullVertices_test0_decomposed": {
                    "start": 550,
                    "end": 556,
                    "body": [
                        "    public void testNullVertices_test0_decomposed()  {\n",
                        "        final BaseLabeledVertex a = null;\n",
                        "        final BaseLabeledVertex g = null;\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>();\n",
                        "        findMaxFlow(graph);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "529-547:testNullGraph_test6_decomposed": {
                    "start": 529,
                    "end": 547,
                    "body": [
                        "    public void testNullGraph_test6_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null);\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(g);\n",
                        "        findMaxFlow(\n",
                        "                        (DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null)\n",
                        "                .whereEdgesHaveWeights(new BaseWeightedEdge<Integer>())\n",
                        "                .from(a)\n",
                        "                .to(g)\n",
                        "                .applyingEdmondsKarp(new IntegerWeightBaseOperations());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/MaxFlowAlgorithmSelector",
                            "applyingEdmondsKarp(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test6_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "515-526:testNullGraph_test5_decomposed": {
                    "start": 515,
                    "end": 526,
                    "body": [
                        "    public void testNullGraph_test5_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null);\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(g);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test5_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "503-512:testNullGraph_test4_decomposed": {
                    "start": 503,
                    "end": 512,
                    "body": [
                        "    public void testNullGraph_test4_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null);\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "493-500:testNullGraph_test3_decomposed": {
                    "start": 493,
                    "end": 500,
                    "body": [
                        "    public void testNullGraph_test3_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null);\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "485-490:testNullGraph_test2_decomposed": {
                    "start": 485,
                    "end": 490,
                    "body": [
                        "    public void testNullGraph_test2_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "479-482:testNullGraph_test1_decomposed": {
                    "start": 479,
                    "end": 482,
                    "body": [
                        "    public void testNullGraph_test1_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "474-476:testNullGraph_test0_decomposed": {
                    "start": 474,
                    "end": 476,
                    "body": [
                        "    public void testNullGraph_test0_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "407-471:testFindMaxFlowAndVerify_test8_decomposed": {
                    "start": 407,
                    "end": 471,
                    "body": [
                        "    public void testFindMaxFlowAndVerify_test8_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                BaseLabeledVertex d = addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                BaseLabeledVertex e = addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                BaseLabeledVertex f = addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> D\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> A\", 3))\n",
                        "                                        .from(c)\n",
                        "                                        .to(a);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> E\", 2))\n",
                        "                                        .from(c)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> E\", 2))\n",
                        "                                        .from(d)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> F\", 6))\n",
                        "                                        .from(d)\n",
                        "                                        .to(f);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> B\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> G\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(g);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"F -> G\", 9))\n",
                        "                                        .from(f)\n",
                        "                                        .to(g);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 5;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(g);\n",
                        "        Integer actual =\n",
                        "                findMaxFlow(graph)\n",
                        "                        .whereEdgesHaveWeights(new BaseWeightedEdge<Integer>())\n",
                        "                        .from(a)\n",
                        "                        .to(g)\n",
                        "                        .applyingEdmondsKarp(new IntegerWeightBaseOperations());\n",
                        "        assertEquals(expected, actual);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindMaxFlowAndVerify_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/MaxFlowAlgorithmSelector",
                            "applyingEdmondsKarp(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindMaxFlowAndVerify_test8_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "341-404:testFindMaxFlowAndVerify_test7_decomposed": {
                    "start": 341,
                    "end": 404,
                    "body": [
                        "    public void testFindMaxFlowAndVerify_test7_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                BaseLabeledVertex d = addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                BaseLabeledVertex e = addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                BaseLabeledVertex f = addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> D\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> A\", 3))\n",
                        "                                        .from(c)\n",
                        "                                        .to(a);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> E\", 2))\n",
                        "                                        .from(c)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> E\", 2))\n",
                        "                                        .from(d)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> F\", 6))\n",
                        "                                        .from(d)\n",
                        "                                        .to(f);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> B\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> G\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(g);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"F -> G\", 9))\n",
                        "                                        .from(f)\n",
                        "                                        .to(g);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 5;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(g);\n",
                        "        Integer actual =\n",
                        "                findMaxFlow(graph)\n",
                        "                        .whereEdgesHaveWeights(new BaseWeightedEdge<Integer>())\n",
                        "                        .from(a)\n",
                        "                        .to(g)\n",
                        "                        .applyingEdmondsKarp(new IntegerWeightBaseOperations());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindMaxFlowAndVerify_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/MaxFlowAlgorithmSelector",
                            "applyingEdmondsKarp(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindMaxFlowAndVerify_test7_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "281-338:testFindMaxFlowAndVerify_test6_decomposed": {
                    "start": 281,
                    "end": 338,
                    "body": [
                        "    public void testFindMaxFlowAndVerify_test6_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                BaseLabeledVertex d = addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                BaseLabeledVertex e = addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                BaseLabeledVertex f = addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> D\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> A\", 3))\n",
                        "                                        .from(c)\n",
                        "                                        .to(a);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> E\", 2))\n",
                        "                                        .from(c)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> E\", 2))\n",
                        "                                        .from(d)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> F\", 6))\n",
                        "                                        .from(d)\n",
                        "                                        .to(f);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> B\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> G\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(g);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"F -> G\", 9))\n",
                        "                                        .from(f)\n",
                        "                                        .to(g);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 5;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(g);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindMaxFlowAndVerify_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindMaxFlowAndVerify_test6_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "222-278:testFindMaxFlowAndVerify_test5_decomposed": {
                    "start": 222,
                    "end": 278,
                    "body": [
                        "    public void testFindMaxFlowAndVerify_test5_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                BaseLabeledVertex d = addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                BaseLabeledVertex e = addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                BaseLabeledVertex f = addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> D\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> A\", 3))\n",
                        "                                        .from(c)\n",
                        "                                        .to(a);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> E\", 2))\n",
                        "                                        .from(c)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> E\", 2))\n",
                        "                                        .from(d)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> F\", 6))\n",
                        "                                        .from(d)\n",
                        "                                        .to(f);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> B\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> G\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(g);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"F -> G\", 9))\n",
                        "                                        .from(f)\n",
                        "                                        .to(g);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 5;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindMaxFlowAndVerify_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindMaxFlowAndVerify_test5_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "164-219:testFindMaxFlowAndVerify_test4_decomposed": {
                    "start": 164,
                    "end": 219,
                    "body": [
                        "    public void testFindMaxFlowAndVerify_test4_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                BaseLabeledVertex d = addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                BaseLabeledVertex e = addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                BaseLabeledVertex f = addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> D\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> A\", 3))\n",
                        "                                        .from(c)\n",
                        "                                        .to(a);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> E\", 2))\n",
                        "                                        .from(c)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> E\", 2))\n",
                        "                                        .from(d)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> F\", 6))\n",
                        "                                        .from(d)\n",
                        "                                        .to(f);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> B\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> G\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(g);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"F -> G\", 9))\n",
                        "                                        .from(f)\n",
                        "                                        .to(g);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 5;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindMaxFlowAndVerify_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindMaxFlowAndVerify_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "107-161:testFindMaxFlowAndVerify_test3_decomposed": {
                    "start": 107,
                    "end": 161,
                    "body": [
                        "    public void testFindMaxFlowAndVerify_test3_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                BaseLabeledVertex d = addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                BaseLabeledVertex e = addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                BaseLabeledVertex f = addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> D\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> A\", 3))\n",
                        "                                        .from(c)\n",
                        "                                        .to(a);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> E\", 2))\n",
                        "                                        .from(c)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> E\", 2))\n",
                        "                                        .from(d)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> F\", 6))\n",
                        "                                        .from(d)\n",
                        "                                        .to(f);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> B\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> G\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(g);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"F -> G\", 9))\n",
                        "                                        .from(f)\n",
                        "                                        .to(g);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 5;\n",
                        "        findMaxFlow(graph);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindMaxFlowAndVerify_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindMaxFlowAndVerify_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "52-104:testFindMaxFlowAndVerify_test2_decomposed": {
                    "start": 52,
                    "end": 104,
                    "body": [
                        "    public void testFindMaxFlowAndVerify_test2_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                BaseLabeledVertex d = addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                BaseLabeledVertex e = addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                BaseLabeledVertex f = addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> D\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> A\", 3))\n",
                        "                                        .from(c)\n",
                        "                                        .to(a);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> E\", 2))\n",
                        "                                        .from(c)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> E\", 2))\n",
                        "                                        .from(d)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> F\", 6))\n",
                        "                                        .from(d)\n",
                        "                                        .to(f);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> B\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> G\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(g);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"F -> G\", 9))\n",
                        "                                        .from(f)\n",
                        "                                        .to(g);\n",
                        "                            }\n",
                        "                        });\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindMaxFlowAndVerify_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindMaxFlowAndVerify_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "46-49:testFindMaxFlowAndVerify_test1_decomposed": {
                    "start": 46,
                    "end": 49,
                    "body": [
                        "    public void testFindMaxFlowAndVerify_test1_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex g = new BaseLabeledVertex(\"G\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindMaxFlowAndVerify_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindMaxFlowAndVerify_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "41-43:testFindMaxFlowAndVerify_test0_decomposed": {
                    "start": 41,
                    "end": 43,
                    "body": [
                        "    public void testFindMaxFlowAndVerify_test0_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindMaxFlowAndVerify_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindMaxFlowAndVerify_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                }
            },
            "fields": {},
            "is_enum": false,
            "python_class_declaration": "class EdmondsKarpTestCase(unittest.TestCase):\n\n"
        },
        "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }": {
            "start": 57,
            "end": 58,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "EdmondsKarpTestCase",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "60-102:connect0": {
                    "start": 60,
                    "end": 102,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                BaseLabeledVertex d = addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                BaseLabeledVertex e = addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                BaseLabeledVertex f = addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> D\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> A\", 3))\n",
                        "                                        .from(c)\n",
                        "                                        .to(a);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> E\", 2))\n",
                        "                                        .from(c)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> E\", 2))\n",
                        "                                        .from(d)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> F\", 6))\n",
                        "                                        .from(d)\n",
                        "                                        .to(f);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> B\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> G\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(g);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"F -> G\", 9))\n",
                        "                                        .from(f)\n",
                        "                                        .to(g);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "115-157:connect0": {
                    "start": 115,
                    "end": 157,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                BaseLabeledVertex d = addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                BaseLabeledVertex e = addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                BaseLabeledVertex f = addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> D\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> A\", 3))\n",
                        "                                        .from(c)\n",
                        "                                        .to(a);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> E\", 2))\n",
                        "                                        .from(c)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> E\", 2))\n",
                        "                                        .from(d)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> F\", 6))\n",
                        "                                        .from(d)\n",
                        "                                        .to(f);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> B\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> G\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(g);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"F -> G\", 9))\n",
                        "                                        .from(f)\n",
                        "                                        .to(g);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "172-214:connect0": {
                    "start": 172,
                    "end": 214,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                BaseLabeledVertex d = addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                BaseLabeledVertex e = addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                BaseLabeledVertex f = addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> D\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> A\", 3))\n",
                        "                                        .from(c)\n",
                        "                                        .to(a);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> E\", 2))\n",
                        "                                        .from(c)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> E\", 2))\n",
                        "                                        .from(d)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> F\", 6))\n",
                        "                                        .from(d)\n",
                        "                                        .to(f);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> B\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> G\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(g);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"F -> G\", 9))\n",
                        "                                        .from(f)\n",
                        "                                        .to(g);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "230-272:connect0": {
                    "start": 230,
                    "end": 272,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                BaseLabeledVertex d = addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                BaseLabeledVertex e = addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                BaseLabeledVertex f = addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> D\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> A\", 3))\n",
                        "                                        .from(c)\n",
                        "                                        .to(a);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> E\", 2))\n",
                        "                                        .from(c)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> E\", 2))\n",
                        "                                        .from(d)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> F\", 6))\n",
                        "                                        .from(d)\n",
                        "                                        .to(f);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> B\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> G\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(g);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"F -> G\", 9))\n",
                        "                                        .from(f)\n",
                        "                                        .to(g);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "289-331:connect0": {
                    "start": 289,
                    "end": 331,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                BaseLabeledVertex d = addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                BaseLabeledVertex e = addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                BaseLabeledVertex f = addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> D\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> A\", 3))\n",
                        "                                        .from(c)\n",
                        "                                        .to(a);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> E\", 2))\n",
                        "                                        .from(c)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> E\", 2))\n",
                        "                                        .from(d)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> F\", 6))\n",
                        "                                        .from(d)\n",
                        "                                        .to(f);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> B\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> G\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(g);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"F -> G\", 9))\n",
                        "                                        .from(f)\n",
                        "                                        .to(g);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "349-391:connect0": {
                    "start": 349,
                    "end": 391,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                BaseLabeledVertex d = addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                BaseLabeledVertex e = addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                BaseLabeledVertex f = addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> D\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> A\", 3))\n",
                        "                                        .from(c)\n",
                        "                                        .to(a);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> E\", 2))\n",
                        "                                        .from(c)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> E\", 2))\n",
                        "                                        .from(d)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> F\", 6))\n",
                        "                                        .from(d)\n",
                        "                                        .to(f);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> B\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> G\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(g);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"F -> G\", 9))\n",
                        "                                        .from(f)\n",
                        "                                        .to(g);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "415-457:connect0": {
                    "start": 415,
                    "end": 457,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                BaseLabeledVertex d = addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                BaseLabeledVertex e = addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                BaseLabeledVertex f = addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> D\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> A\", 3))\n",
                        "                                        .from(c)\n",
                        "                                        .to(a);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> E\", 2))\n",
                        "                                        .from(c)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> E\", 2))\n",
                        "                                        .from(d)\n",
                        "                                        .to(e);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"D -> F\", 6))\n",
                        "                                        .from(d)\n",
                        "                                        .to(f);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> B\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"E -> G\", 1))\n",
                        "                                        .from(e)\n",
                        "                                        .to(g);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"F -> G\", 9))\n",
                        "                                        .from(f)\n",
                        "                                        .to(g);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "628-643:connect0": {
                    "start": 628,
                    "end": 643,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "656-671:connect0": {
                    "start": 656,
                    "end": 671,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "686-701:connect0": {
                    "start": 686,
                    "end": 701,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "717-732:connect0": {
                    "start": 717,
                    "end": 732,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "749-764:connect0": {
                    "start": 749,
                    "end": 764,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "782-797:connect0": {
                    "start": 782,
                    "end": 797,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "821-836:connect0": {
                    "start": 821,
                    "end": 836,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"D\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"E\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"F\"));\n",
                        "                                addVertex(g);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 3))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 4))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "55-58:": {
                    "start": 55,
                    "end": 58,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "110-113:": {
                    "start": 110,
                    "end": 113,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "167-170:": {
                    "start": 167,
                    "end": 170,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "225-228:": {
                    "start": 225,
                    "end": 228,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "284-287:": {
                    "start": 284,
                    "end": 287,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "344-347:": {
                    "start": 344,
                    "end": 347,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "410-413:": {
                    "start": 410,
                    "end": 413,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "623-626:": {
                    "start": 623,
                    "end": 626,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "651-654:": {
                    "start": 651,
                    "end": 654,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "681-684:": {
                    "start": 681,
                    "end": 684,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "712-715:": {
                    "start": 712,
                    "end": 715,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "744-747:": {
                    "start": 744,
                    "end": 747,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "777-780:": {
                    "start": 777,
                    "end": 780,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "816-819:": {
                    "start": 816,
                    "end": 819,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                }
            },
            "fields": {}
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import unittest",
        "import pytest",
        "import io",
        "import os",
        "import unittest",
        "from src.main.org.apache.commons.graph.CommonsGraph import *",
        "from src.main.org.apache.commons.graph.DirectedGraph import *",
        "from src.main.org.apache.commons.graph.Mapper import *",
        "from src.main.org.apache.commons.graph.builder.GraphConnection import *",
        "from src.main.org.apache.commons.graph.flow.FlowWeightedEdgesBuilder import *",
        "from src.main.org.apache.commons.graph.flow.FromHeadBuilder import *",
        "from src.main.org.apache.commons.graph.flow.MaxFlowAlgorithmSelector import *",
        "from src.main.org.apache.commons.graph.flow.ToTailBuilder import *",
        "from src.test.org.apache.commons.graph.model.BaseLabeledVertex import *",
        "from src.test.org.apache.commons.graph.model.BaseWeightedEdge import *",
        "from src.main.org.apache.commons.graph.model.DirectedMutableGraph import *",
        "from src.main.org.apache.commons.graph.weight.OrderedMonoid import *",
        "from src.main.org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations import *",
        "from src.main.org.apache.commons.graph.builder.AbstractGraphConnection import *",
        "from src.main.org.apache.commons.graph.builder.HeadVertexConnector import *",
        "from src.main.org.apache.commons.graph.builder.TailVertexConnector import *",
        "from src.test.org.apache.commons.graph.model.BaseLabeledWeightedEdge import *"
    ]
}