{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/integercompression/ExampleTest.java",
    "imports": {
        "13-13:import Test": {
            "start": 13,
            "end": 13,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "11-11:import java.util.*": {
            "start": 11,
            "end": 11,
            "body": [
                "import java.util.*;\n"
            ]
        },
        "10-10:import me.lemire.integercompression.differential.*": {
            "start": 10,
            "end": 10,
            "body": [
                "import me.lemire.integercompression.differential.*;\n"
            ]
        }
    },
    "classes": {
        "ExampleTest": {
            "start": 19,
            "end": 19,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "940-975:headlessDemo_test10_decomposed": {
                    "start": 940,
                    "end": 975,
                    "body": [
                        "    public void headlessDemo_test10_decomposed()  {\n",
                        "        System.out.println(\"Compressing arrays with minimal header...\");\n",
                        "        int[] uncompressed1 = { 1, 2, 1, 3, 1 };\n",
                        "        int[] uncompressed2 = { 3, 2, 4, 6, 1 };\n",
                        "        int[] compressed = new int[uncompressed1.length + uncompressed2.length + 1024];\n",
                        "        SkippableIntegerCODEC codec = new SkippableComposition(new BinaryPacking(), new VariableByte());\n",
                        "        IntWrapper outPos = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper previous = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper.IntWrapper1();\n",
                        "        codec.headlessCompress(uncompressed1, IntWrapper.IntWrapper1(), uncompressed1.length, compressed, outPos);\n",
                        "        int length1 = outPos.get() - previous.get();\n",
                        "        previous = new IntWrapper(outPos.get());\n",
                        "        IntWrapper.IntWrapper1();\n",
                        "        codec.headlessCompress(uncompressed2, IntWrapper.IntWrapper1(), uncompressed2.length, compressed, outPos);\n",
                        "        int length2 = outPos.get() - previous.get();\n",
                        "        compressed = Arrays.copyOf(compressed, length1 + length2);\n",
                        "        System.out\n",
                        "\t\t\t\t.println(\"compressed unsorted integers from \" + uncompressed1.length * 4 + \"B to \" + length1 * 4 + \"B\");\n",
                        "        System.out\n",
                        "\t\t\t\t.println(\"compressed unsorted integers from \" + uncompressed2.length * 4 + \"B to \" + length2 * 4 + \"B\");\n",
                        "        System.out.println(\"Total compressed output \" + compressed.length);\n",
                        "        int[] recovered1 = new int[uncompressed1.length];\n",
                        "        int[] recovered2 = new int[uncompressed1.length];\n",
                        "        IntWrapper inPos = IntWrapper.IntWrapper1();\n",
                        "        System.out.println(\"Decoding first array starting at pos = \" + inPos);\n",
                        "        codec.headlessUncompress(compressed, inPos, compressed.length, recovered1, new IntWrapper(0),\n",
                        "\t\t\t\tuncompressed1.length);\n",
                        "        System.out.println(\"Decoding second array starting at pos = \" + inPos);\n",
                        "        codec.headlessUncompress(compressed, inPos, compressed.length, recovered2, new IntWrapper(0),\n",
                        "\t\t\t\tuncompressed2.length);\n",
                        "        if (!Arrays.equals(uncompressed1, recovered1))\n",
                        "\t\t\tthrow new RuntimeException(\"First array does not match.\");\n",
                        "        if (!Arrays.equals(uncompressed2, recovered2))\n",
                        "\t\t\tthrow new RuntimeException(\"Second array does not match.\");\n",
                        "        System.out.println(\"The arrays match, your code is probably ok.\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessDemo_test10_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                            "BinaryPacking",
                            "BinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                            "SkippableIntegerCODEC",
                            "44-46:headlessCompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                            "SkippableIntegerCODEC",
                            "66-68:headlessUncompress"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "equals(int[],int[])"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ]
                    ]
                },
                "907-937:headlessDemo_test9_decomposed": {
                    "start": 907,
                    "end": 937,
                    "body": [
                        "    public void headlessDemo_test9_decomposed()  {\n",
                        "        System.out.println(\"Compressing arrays with minimal header...\");\n",
                        "        int[] uncompressed1 = { 1, 2, 1, 3, 1 };\n",
                        "        int[] uncompressed2 = { 3, 2, 4, 6, 1 };\n",
                        "        int[] compressed = new int[uncompressed1.length + uncompressed2.length + 1024];\n",
                        "        SkippableIntegerCODEC codec = new SkippableComposition(new BinaryPacking(), new VariableByte());\n",
                        "        IntWrapper outPos = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper previous = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper.IntWrapper1();\n",
                        "        codec.headlessCompress(uncompressed1, IntWrapper.IntWrapper1(), uncompressed1.length, compressed, outPos);\n",
                        "        int length1 = outPos.get() - previous.get();\n",
                        "        previous = new IntWrapper(outPos.get());\n",
                        "        IntWrapper.IntWrapper1();\n",
                        "        codec.headlessCompress(uncompressed2, IntWrapper.IntWrapper1(), uncompressed2.length, compressed, outPos);\n",
                        "        int length2 = outPos.get() - previous.get();\n",
                        "        compressed = Arrays.copyOf(compressed, length1 + length2);\n",
                        "        System.out\n",
                        "\t\t\t\t.println(\"compressed unsorted integers from \" + uncompressed1.length * 4 + \"B to \" + length1 * 4 + \"B\");\n",
                        "        System.out\n",
                        "\t\t\t\t.println(\"compressed unsorted integers from \" + uncompressed2.length * 4 + \"B to \" + length2 * 4 + \"B\");\n",
                        "        System.out.println(\"Total compressed output \" + compressed.length);\n",
                        "        int[] recovered1 = new int[uncompressed1.length];\n",
                        "        int[] recovered2 = new int[uncompressed1.length];\n",
                        "        IntWrapper inPos = IntWrapper.IntWrapper1();\n",
                        "        System.out.println(\"Decoding first array starting at pos = \" + inPos);\n",
                        "        codec.headlessUncompress(compressed, inPos, compressed.length, recovered1, new IntWrapper(0),\n",
                        "\t\t\t\tuncompressed1.length);\n",
                        "        System.out.println(\"Decoding second array starting at pos = \" + inPos);\n",
                        "        codec.headlessUncompress(compressed, inPos, compressed.length, recovered2, new IntWrapper(0),\n",
                        "\t\t\t\tuncompressed2.length);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessDemo_test9_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                            "BinaryPacking",
                            "BinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                            "SkippableIntegerCODEC",
                            "44-46:headlessCompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                            "SkippableIntegerCODEC",
                            "66-68:headlessUncompress"
                        ]
                    ]
                },
                "877-904:headlessDemo_test8_decomposed": {
                    "start": 877,
                    "end": 904,
                    "body": [
                        "    public void headlessDemo_test8_decomposed()  {\n",
                        "        System.out.println(\"Compressing arrays with minimal header...\");\n",
                        "        int[] uncompressed1 = { 1, 2, 1, 3, 1 };\n",
                        "        int[] uncompressed2 = { 3, 2, 4, 6, 1 };\n",
                        "        int[] compressed = new int[uncompressed1.length + uncompressed2.length + 1024];\n",
                        "        SkippableIntegerCODEC codec = new SkippableComposition(new BinaryPacking(), new VariableByte());\n",
                        "        IntWrapper outPos = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper previous = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper.IntWrapper1();\n",
                        "        codec.headlessCompress(uncompressed1, IntWrapper.IntWrapper1(), uncompressed1.length, compressed, outPos);\n",
                        "        int length1 = outPos.get() - previous.get();\n",
                        "        previous = new IntWrapper(outPos.get());\n",
                        "        IntWrapper.IntWrapper1();\n",
                        "        codec.headlessCompress(uncompressed2, IntWrapper.IntWrapper1(), uncompressed2.length, compressed, outPos);\n",
                        "        int length2 = outPos.get() - previous.get();\n",
                        "        compressed = Arrays.copyOf(compressed, length1 + length2);\n",
                        "        System.out\n",
                        "\t\t\t\t.println(\"compressed unsorted integers from \" + uncompressed1.length * 4 + \"B to \" + length1 * 4 + \"B\");\n",
                        "        System.out\n",
                        "\t\t\t\t.println(\"compressed unsorted integers from \" + uncompressed2.length * 4 + \"B to \" + length2 * 4 + \"B\");\n",
                        "        System.out.println(\"Total compressed output \" + compressed.length);\n",
                        "        int[] recovered1 = new int[uncompressed1.length];\n",
                        "        int[] recovered2 = new int[uncompressed1.length];\n",
                        "        IntWrapper inPos = IntWrapper.IntWrapper1();\n",
                        "        System.out.println(\"Decoding first array starting at pos = \" + inPos);\n",
                        "        codec.headlessUncompress(compressed, inPos, compressed.length, recovered1, new IntWrapper(0),\n",
                        "\t\t\t\tuncompressed1.length);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessDemo_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                            "BinaryPacking",
                            "BinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                            "SkippableIntegerCODEC",
                            "44-46:headlessCompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                            "SkippableIntegerCODEC",
                            "66-68:headlessUncompress"
                        ]
                    ]
                },
                "850-874:headlessDemo_test7_decomposed": {
                    "start": 850,
                    "end": 874,
                    "body": [
                        "    public void headlessDemo_test7_decomposed()  {\n",
                        "        System.out.println(\"Compressing arrays with minimal header...\");\n",
                        "        int[] uncompressed1 = { 1, 2, 1, 3, 1 };\n",
                        "        int[] uncompressed2 = { 3, 2, 4, 6, 1 };\n",
                        "        int[] compressed = new int[uncompressed1.length + uncompressed2.length + 1024];\n",
                        "        SkippableIntegerCODEC codec = new SkippableComposition(new BinaryPacking(), new VariableByte());\n",
                        "        IntWrapper outPos = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper previous = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper.IntWrapper1();\n",
                        "        codec.headlessCompress(uncompressed1, IntWrapper.IntWrapper1(), uncompressed1.length, compressed, outPos);\n",
                        "        int length1 = outPos.get() - previous.get();\n",
                        "        previous = new IntWrapper(outPos.get());\n",
                        "        IntWrapper.IntWrapper1();\n",
                        "        codec.headlessCompress(uncompressed2, IntWrapper.IntWrapper1(), uncompressed2.length, compressed, outPos);\n",
                        "        int length2 = outPos.get() - previous.get();\n",
                        "        compressed = Arrays.copyOf(compressed, length1 + length2);\n",
                        "        System.out\n",
                        "\t\t\t\t.println(\"compressed unsorted integers from \" + uncompressed1.length * 4 + \"B to \" + length1 * 4 + \"B\");\n",
                        "        System.out\n",
                        "\t\t\t\t.println(\"compressed unsorted integers from \" + uncompressed2.length * 4 + \"B to \" + length2 * 4 + \"B\");\n",
                        "        System.out.println(\"Total compressed output \" + compressed.length);\n",
                        "        int[] recovered1 = new int[uncompressed1.length];\n",
                        "        int[] recovered2 = new int[uncompressed1.length];\n",
                        "        IntWrapper inPos = IntWrapper.IntWrapper1();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessDemo_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                            "BinaryPacking",
                            "BinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                            "SkippableIntegerCODEC",
                            "44-46:headlessCompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ]
                    ]
                },
                "832-847:headlessDemo_test6_decomposed": {
                    "start": 832,
                    "end": 847,
                    "body": [
                        "    public void headlessDemo_test6_decomposed()  {\n",
                        "        System.out.println(\"Compressing arrays with minimal header...\");\n",
                        "        int[] uncompressed1 = { 1, 2, 1, 3, 1 };\n",
                        "        int[] uncompressed2 = { 3, 2, 4, 6, 1 };\n",
                        "        int[] compressed = new int[uncompressed1.length + uncompressed2.length + 1024];\n",
                        "        SkippableIntegerCODEC codec = new SkippableComposition(new BinaryPacking(), new VariableByte());\n",
                        "        IntWrapper outPos = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper previous = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper.IntWrapper1();\n",
                        "        codec.headlessCompress(uncompressed1, IntWrapper.IntWrapper1(), uncompressed1.length, compressed, outPos);\n",
                        "        int length1 = outPos.get() - previous.get();\n",
                        "        previous = new IntWrapper(outPos.get());\n",
                        "        IntWrapper.IntWrapper1();\n",
                        "        codec.headlessCompress(uncompressed2, IntWrapper.IntWrapper1(), uncompressed2.length, compressed, outPos);\n",
                        "        int length2 = outPos.get() - previous.get();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessDemo_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                            "BinaryPacking",
                            "BinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                            "SkippableIntegerCODEC",
                            "44-46:headlessCompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ]
                    ]
                },
                "815-829:headlessDemo_test5_decomposed": {
                    "start": 815,
                    "end": 829,
                    "body": [
                        "    public void headlessDemo_test5_decomposed()  {\n",
                        "        System.out.println(\"Compressing arrays with minimal header...\");\n",
                        "        int[] uncompressed1 = { 1, 2, 1, 3, 1 };\n",
                        "        int[] uncompressed2 = { 3, 2, 4, 6, 1 };\n",
                        "        int[] compressed = new int[uncompressed1.length + uncompressed2.length + 1024];\n",
                        "        SkippableIntegerCODEC codec = new SkippableComposition(new BinaryPacking(), new VariableByte());\n",
                        "        IntWrapper outPos = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper previous = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper.IntWrapper1();\n",
                        "        codec.headlessCompress(uncompressed1, IntWrapper.IntWrapper1(), uncompressed1.length, compressed, outPos);\n",
                        "        int length1 = outPos.get() - previous.get();\n",
                        "        previous = new IntWrapper(outPos.get());\n",
                        "        IntWrapper.IntWrapper1();\n",
                        "        codec.headlessCompress(uncompressed2, IntWrapper.IntWrapper1(), uncompressed2.length, compressed, outPos);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessDemo_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                            "BinaryPacking",
                            "BinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                            "SkippableIntegerCODEC",
                            "44-46:headlessCompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ]
                    ]
                },
                "799-812:headlessDemo_test4_decomposed": {
                    "start": 799,
                    "end": 812,
                    "body": [
                        "    public void headlessDemo_test4_decomposed()  {\n",
                        "        System.out.println(\"Compressing arrays with minimal header...\");\n",
                        "        int[] uncompressed1 = { 1, 2, 1, 3, 1 };\n",
                        "        int[] uncompressed2 = { 3, 2, 4, 6, 1 };\n",
                        "        int[] compressed = new int[uncompressed1.length + uncompressed2.length + 1024];\n",
                        "        SkippableIntegerCODEC codec = new SkippableComposition(new BinaryPacking(), new VariableByte());\n",
                        "        IntWrapper outPos = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper previous = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper.IntWrapper1();\n",
                        "        codec.headlessCompress(uncompressed1, IntWrapper.IntWrapper1(), uncompressed1.length, compressed, outPos);\n",
                        "        int length1 = outPos.get() - previous.get();\n",
                        "        previous = new IntWrapper(outPos.get());\n",
                        "        IntWrapper.IntWrapper1();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessDemo_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                            "BinaryPacking",
                            "BinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                            "SkippableIntegerCODEC",
                            "44-46:headlessCompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ]
                    ]
                },
                "784-796:headlessDemo_test3_decomposed": {
                    "start": 784,
                    "end": 796,
                    "body": [
                        "    public void headlessDemo_test3_decomposed()  {\n",
                        "        System.out.println(\"Compressing arrays with minimal header...\");\n",
                        "        int[] uncompressed1 = { 1, 2, 1, 3, 1 };\n",
                        "        int[] uncompressed2 = { 3, 2, 4, 6, 1 };\n",
                        "        int[] compressed = new int[uncompressed1.length + uncompressed2.length + 1024];\n",
                        "        SkippableIntegerCODEC codec = new SkippableComposition(new BinaryPacking(), new VariableByte());\n",
                        "        IntWrapper outPos = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper previous = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper.IntWrapper1();\n",
                        "        codec.headlessCompress(uncompressed1, IntWrapper.IntWrapper1(), uncompressed1.length, compressed, outPos);\n",
                        "        int length1 = outPos.get() - previous.get();\n",
                        "        previous = new IntWrapper(outPos.get());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessDemo_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                            "BinaryPacking",
                            "BinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                            "SkippableIntegerCODEC",
                            "44-46:headlessCompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ]
                    ]
                },
                "771-781:headlessDemo_test2_decomposed": {
                    "start": 771,
                    "end": 781,
                    "body": [
                        "    public void headlessDemo_test2_decomposed()  {\n",
                        "        System.out.println(\"Compressing arrays with minimal header...\");\n",
                        "        int[] uncompressed1 = { 1, 2, 1, 3, 1 };\n",
                        "        int[] uncompressed2 = { 3, 2, 4, 6, 1 };\n",
                        "        int[] compressed = new int[uncompressed1.length + uncompressed2.length + 1024];\n",
                        "        SkippableIntegerCODEC codec = new SkippableComposition(new BinaryPacking(), new VariableByte());\n",
                        "        IntWrapper outPos = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper previous = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper.IntWrapper1();\n",
                        "        codec.headlessCompress(uncompressed1, IntWrapper.IntWrapper1(), uncompressed1.length, compressed, outPos);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessDemo_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                            "BinaryPacking",
                            "BinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                            "SkippableIntegerCODEC",
                            "44-46:headlessCompress"
                        ]
                    ]
                },
                "759-768:headlessDemo_test1_decomposed": {
                    "start": 759,
                    "end": 768,
                    "body": [
                        "    public void headlessDemo_test1_decomposed()  {\n",
                        "        System.out.println(\"Compressing arrays with minimal header...\");\n",
                        "        int[] uncompressed1 = { 1, 2, 1, 3, 1 };\n",
                        "        int[] uncompressed2 = { 3, 2, 4, 6, 1 };\n",
                        "        int[] compressed = new int[uncompressed1.length + uncompressed2.length + 1024];\n",
                        "        SkippableIntegerCODEC codec = new SkippableComposition(new BinaryPacking(), new VariableByte());\n",
                        "        IntWrapper outPos = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper previous = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper.IntWrapper1();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessDemo_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                            "BinaryPacking",
                            "BinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "750-756:headlessDemo_test0_decomposed": {
                    "start": 750,
                    "end": 756,
                    "body": [
                        "    public void headlessDemo_test0_decomposed()  {\n",
                        "        System.out.println(\"Compressing arrays with minimal header...\");\n",
                        "        int[] uncompressed1 = { 1, 2, 1, 3, 1 };\n",
                        "        int[] uncompressed2 = { 3, 2, 4, 6, 1 };\n",
                        "        int[] compressed = new int[uncompressed1.length + uncompressed2.length + 1024];\n",
                        "        SkippableIntegerCODEC codec = new SkippableComposition(new BinaryPacking(), new VariableByte());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessDemo_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                            "BinaryPacking",
                            "BinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "707-747:advancedExample_test9_decomposed": {
                    "start": 707,
                    "end": 747,
                    "body": [
                        "    public void advancedExample_test9_decomposed()  {\n",
                        "        int TotalSize = 2342351;\n",
                        "        int ChunkSize = 16384;\n",
                        "        System.out.println(\"Compressing \" + TotalSize + \" integers using chunks of \" + ChunkSize + \" integers (\"\n",
                        "\t\t\t\t+ ChunkSize * 4 / 1024 + \"KB)\");\n",
                        "        System.out.println(\"(It is often better for applications to work in chunks fitting in CPU cache.)\");\n",
                        "        int[] data = new int[TotalSize];\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        IntegratedIntegerCODEC regularcodec = new IntegratedBinaryPacking();\n",
                        "        IntegratedVariableByte ivb = new IntegratedVariableByte();\n",
                        "        IntegratedIntegerCODEC lastcodec = new IntegratedComposition(regularcodec, ivb);\n",
                        "        int[] compressed = new int[TotalSize + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "        for (int k = 0; k < TotalSize / ChunkSize; ++k)\n",
                        "\t\t\tregularcodec.compress0(data, inputoffset, ChunkSize, compressed, outputoffset);\n",
                        "        lastcodec.compress0(data, inputoffset, TotalSize % ChunkSize, compressed, outputoffset);\n",
                        "        System.out.println(\n",
                        "\t\t\t\t\"compressed from \" + data.length * 4 / 1024 + \"KB to \" + outputoffset.intValue() * 4 / 1024 + \"KB\");\n",
                        "        compressed = Arrays.copyOf(compressed, outputoffset.intValue());\n",
                        "        int[] recovered = new int[ChunkSize];\n",
                        "        IntWrapper compoff = new IntWrapper(0);\n",
                        "        IntWrapper recoffset;\n",
                        "        int currentpos = 0;\n",
                        "        while (compoff.get() < compressed.length) {\n",
                        "\t\t\trecoffset = new IntWrapper(0);\n",
                        "\t\t\tregularcodec.uncompress0(compressed, compoff, compressed.length - compoff.get(), recovered, recoffset);\n",
                        "\n",
                        "\t\t\tif (recoffset.get() < ChunkSize) {// last chunk detected\n",
                        "\t\t\t\tivb.uncompress0(compressed, compoff, compressed.length - compoff.get(), recovered, recoffset);\n",
                        "\t\t\t}\n",
                        "\t\t\tfor (int i = 0; i < recoffset.get(); ++i) {\n",
                        "\t\t\t\tif (data[currentpos + i] != recovered[i])\n",
                        "\t\t\t\t\tthrow new RuntimeException(\"bug\"); // could use assert\n",
                        "\t\t\t}\n",
                        "\t\t\tcurrentpos += recoffset.get();\n",
                        "\t\t}\n",
                        "        System.out.println(\"data is recovered without loss\");\n",
                        "        System.out.println();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "advancedExample_test9_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "57-59:uncompress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "115-141:uncompress0"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println()"
                        ]
                    ]
                },
                "666-704:advancedExample_test8_decomposed": {
                    "start": 666,
                    "end": 704,
                    "body": [
                        "    public void advancedExample_test8_decomposed()  {\n",
                        "        int TotalSize = 2342351;\n",
                        "        int ChunkSize = 16384;\n",
                        "        System.out.println(\"Compressing \" + TotalSize + \" integers using chunks of \" + ChunkSize + \" integers (\"\n",
                        "\t\t\t\t+ ChunkSize * 4 / 1024 + \"KB)\");\n",
                        "        System.out.println(\"(It is often better for applications to work in chunks fitting in CPU cache.)\");\n",
                        "        int[] data = new int[TotalSize];\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        IntegratedIntegerCODEC regularcodec = new IntegratedBinaryPacking();\n",
                        "        IntegratedVariableByte ivb = new IntegratedVariableByte();\n",
                        "        IntegratedIntegerCODEC lastcodec = new IntegratedComposition(regularcodec, ivb);\n",
                        "        int[] compressed = new int[TotalSize + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "        for (int k = 0; k < TotalSize / ChunkSize; ++k)\n",
                        "\t\t\tregularcodec.compress0(data, inputoffset, ChunkSize, compressed, outputoffset);\n",
                        "        lastcodec.compress0(data, inputoffset, TotalSize % ChunkSize, compressed, outputoffset);\n",
                        "        System.out.println(\n",
                        "\t\t\t\t\"compressed from \" + data.length * 4 / 1024 + \"KB to \" + outputoffset.intValue() * 4 / 1024 + \"KB\");\n",
                        "        compressed = Arrays.copyOf(compressed, outputoffset.intValue());\n",
                        "        int[] recovered = new int[ChunkSize];\n",
                        "        IntWrapper compoff = new IntWrapper(0);\n",
                        "        IntWrapper recoffset;\n",
                        "        int currentpos = 0;\n",
                        "        while (compoff.get() < compressed.length) {\n",
                        "\t\t\trecoffset = new IntWrapper(0);\n",
                        "\t\t\tregularcodec.uncompress0(compressed, compoff, compressed.length - compoff.get(), recovered, recoffset);\n",
                        "\n",
                        "\t\t\tif (recoffset.get() < ChunkSize) {// last chunk detected\n",
                        "\t\t\t\tivb.uncompress0(compressed, compoff, compressed.length - compoff.get(), recovered, recoffset);\n",
                        "\t\t\t}\n",
                        "\t\t\tfor (int i = 0; i < recoffset.get(); ++i) {\n",
                        "\t\t\t\tif (data[currentpos + i] != recovered[i])\n",
                        "\t\t\t\t\tthrow new RuntimeException(\"bug\"); // could use assert\n",
                        "\t\t\t}\n",
                        "\t\t\tcurrentpos += recoffset.get();\n",
                        "\t\t}\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "advancedExample_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "57-59:uncompress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "115-141:uncompress0"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ]
                    ]
                },
                "640-663:advancedExample_test7_decomposed": {
                    "start": 640,
                    "end": 663,
                    "body": [
                        "    public void advancedExample_test7_decomposed()  {\n",
                        "        int TotalSize = 2342351;\n",
                        "        int ChunkSize = 16384;\n",
                        "        System.out.println(\"Compressing \" + TotalSize + \" integers using chunks of \" + ChunkSize + \" integers (\"\n",
                        "\t\t\t\t+ ChunkSize * 4 / 1024 + \"KB)\");\n",
                        "        System.out.println(\"(It is often better for applications to work in chunks fitting in CPU cache.)\");\n",
                        "        int[] data = new int[TotalSize];\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        IntegratedIntegerCODEC regularcodec = new IntegratedBinaryPacking();\n",
                        "        IntegratedVariableByte ivb = new IntegratedVariableByte();\n",
                        "        IntegratedIntegerCODEC lastcodec = new IntegratedComposition(regularcodec, ivb);\n",
                        "        int[] compressed = new int[TotalSize + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "        for (int k = 0; k < TotalSize / ChunkSize; ++k)\n",
                        "\t\t\tregularcodec.compress0(data, inputoffset, ChunkSize, compressed, outputoffset);\n",
                        "        lastcodec.compress0(data, inputoffset, TotalSize % ChunkSize, compressed, outputoffset);\n",
                        "        System.out.println(\n",
                        "\t\t\t\t\"compressed from \" + data.length * 4 / 1024 + \"KB to \" + outputoffset.intValue() * 4 / 1024 + \"KB\");\n",
                        "        compressed = Arrays.copyOf(compressed, outputoffset.intValue());\n",
                        "        int[] recovered = new int[ChunkSize];\n",
                        "        IntWrapper compoff = new IntWrapper(0);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "advancedExample_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ]
                    ]
                },
                "616-637:advancedExample_test6_decomposed": {
                    "start": 616,
                    "end": 637,
                    "body": [
                        "    public void advancedExample_test6_decomposed()  {\n",
                        "        int TotalSize = 2342351;\n",
                        "        int ChunkSize = 16384;\n",
                        "        System.out.println(\"Compressing \" + TotalSize + \" integers using chunks of \" + ChunkSize + \" integers (\"\n",
                        "\t\t\t\t+ ChunkSize * 4 / 1024 + \"KB)\");\n",
                        "        System.out.println(\"(It is often better for applications to work in chunks fitting in CPU cache.)\");\n",
                        "        int[] data = new int[TotalSize];\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        IntegratedIntegerCODEC regularcodec = new IntegratedBinaryPacking();\n",
                        "        IntegratedVariableByte ivb = new IntegratedVariableByte();\n",
                        "        IntegratedIntegerCODEC lastcodec = new IntegratedComposition(regularcodec, ivb);\n",
                        "        int[] compressed = new int[TotalSize + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "        for (int k = 0; k < TotalSize / ChunkSize; ++k)\n",
                        "\t\t\tregularcodec.compress0(data, inputoffset, ChunkSize, compressed, outputoffset);\n",
                        "        lastcodec.compress0(data, inputoffset, TotalSize % ChunkSize, compressed, outputoffset);\n",
                        "        System.out.println(\n",
                        "\t\t\t\t\"compressed from \" + data.length * 4 / 1024 + \"KB to \" + outputoffset.intValue() * 4 / 1024 + \"KB\");\n",
                        "        compressed = Arrays.copyOf(compressed, outputoffset.intValue());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "advancedExample_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ]
                    ]
                },
                "595-613:advancedExample_test5_decomposed": {
                    "start": 595,
                    "end": 613,
                    "body": [
                        "    public void advancedExample_test5_decomposed()  {\n",
                        "        int TotalSize = 2342351;\n",
                        "        int ChunkSize = 16384;\n",
                        "        System.out.println(\"Compressing \" + TotalSize + \" integers using chunks of \" + ChunkSize + \" integers (\"\n",
                        "\t\t\t\t+ ChunkSize * 4 / 1024 + \"KB)\");\n",
                        "        System.out.println(\"(It is often better for applications to work in chunks fitting in CPU cache.)\");\n",
                        "        int[] data = new int[TotalSize];\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        IntegratedIntegerCODEC regularcodec = new IntegratedBinaryPacking();\n",
                        "        IntegratedVariableByte ivb = new IntegratedVariableByte();\n",
                        "        IntegratedIntegerCODEC lastcodec = new IntegratedComposition(regularcodec, ivb);\n",
                        "        int[] compressed = new int[TotalSize + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "        for (int k = 0; k < TotalSize / ChunkSize; ++k)\n",
                        "\t\t\tregularcodec.compress0(data, inputoffset, ChunkSize, compressed, outputoffset);\n",
                        "        lastcodec.compress0(data, inputoffset, TotalSize % ChunkSize, compressed, outputoffset);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "advancedExample_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ]
                    ]
                },
                "577-592:advancedExample_test4_decomposed": {
                    "start": 577,
                    "end": 592,
                    "body": [
                        "    public void advancedExample_test4_decomposed()  {\n",
                        "        int TotalSize = 2342351;\n",
                        "        int ChunkSize = 16384;\n",
                        "        System.out.println(\"Compressing \" + TotalSize + \" integers using chunks of \" + ChunkSize + \" integers (\"\n",
                        "\t\t\t\t+ ChunkSize * 4 / 1024 + \"KB)\");\n",
                        "        System.out.println(\"(It is often better for applications to work in chunks fitting in CPU cache.)\");\n",
                        "        int[] data = new int[TotalSize];\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        IntegratedIntegerCODEC regularcodec = new IntegratedBinaryPacking();\n",
                        "        IntegratedVariableByte ivb = new IntegratedVariableByte();\n",
                        "        IntegratedIntegerCODEC lastcodec = new IntegratedComposition(regularcodec, ivb);\n",
                        "        int[] compressed = new int[TotalSize + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "advancedExample_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "560-574:advancedExample_test3_decomposed": {
                    "start": 560,
                    "end": 574,
                    "body": [
                        "    public void advancedExample_test3_decomposed()  {\n",
                        "        int TotalSize = 2342351;\n",
                        "        int ChunkSize = 16384;\n",
                        "        System.out.println(\"Compressing \" + TotalSize + \" integers using chunks of \" + ChunkSize + \" integers (\"\n",
                        "\t\t\t\t+ ChunkSize * 4 / 1024 + \"KB)\");\n",
                        "        System.out.println(\"(It is often better for applications to work in chunks fitting in CPU cache.)\");\n",
                        "        int[] data = new int[TotalSize];\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        IntegratedIntegerCODEC regularcodec = new IntegratedBinaryPacking();\n",
                        "        IntegratedVariableByte ivb = new IntegratedVariableByte();\n",
                        "        IntegratedIntegerCODEC lastcodec = new IntegratedComposition(regularcodec, ivb);\n",
                        "        int[] compressed = new int[TotalSize + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "advancedExample_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "545-557:advancedExample_test2_decomposed": {
                    "start": 545,
                    "end": 557,
                    "body": [
                        "    public void advancedExample_test2_decomposed()  {\n",
                        "        int TotalSize = 2342351;\n",
                        "        int ChunkSize = 16384;\n",
                        "        System.out.println(\"Compressing \" + TotalSize + \" integers using chunks of \" + ChunkSize + \" integers (\"\n",
                        "\t\t\t\t+ ChunkSize * 4 / 1024 + \"KB)\");\n",
                        "        System.out.println(\"(It is often better for applications to work in chunks fitting in CPU cache.)\");\n",
                        "        int[] data = new int[TotalSize];\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        IntegratedIntegerCODEC regularcodec = new IntegratedBinaryPacking();\n",
                        "        IntegratedVariableByte ivb = new IntegratedVariableByte();\n",
                        "        IntegratedIntegerCODEC lastcodec = new IntegratedComposition(regularcodec, ivb);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "advancedExample_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "531-542:advancedExample_test1_decomposed": {
                    "start": 531,
                    "end": 542,
                    "body": [
                        "    public void advancedExample_test1_decomposed()  {\n",
                        "        int TotalSize = 2342351;\n",
                        "        int ChunkSize = 16384;\n",
                        "        System.out.println(\"Compressing \" + TotalSize + \" integers using chunks of \" + ChunkSize + \" integers (\"\n",
                        "\t\t\t\t+ ChunkSize * 4 / 1024 + \"KB)\");\n",
                        "        System.out.println(\"(It is often better for applications to work in chunks fitting in CPU cache.)\");\n",
                        "        int[] data = new int[TotalSize];\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        IntegratedIntegerCODEC regularcodec = new IntegratedBinaryPacking();\n",
                        "        IntegratedVariableByte ivb = new IntegratedVariableByte();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "advancedExample_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "518-528:advancedExample_test0_decomposed": {
                    "start": 518,
                    "end": 528,
                    "body": [
                        "    public void advancedExample_test0_decomposed()  {\n",
                        "        int TotalSize = 2342351;\n",
                        "        int ChunkSize = 16384;\n",
                        "        System.out.println(\"Compressing \" + TotalSize + \" integers using chunks of \" + ChunkSize + \" integers (\"\n",
                        "\t\t\t\t+ ChunkSize * 4 / 1024 + \"KB)\");\n",
                        "        System.out.println(\"(It is often better for applications to work in chunks fitting in CPU cache.)\");\n",
                        "        int[] data = new int[TotalSize];\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        IntegratedIntegerCODEC regularcodec = new IntegratedBinaryPacking();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "advancedExample_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "490-515:unsortedExample_test7_decomposed": {
                    "start": 490,
                    "end": 515,
                    "body": [
                        "    public void unsortedExample_test7_decomposed()  {\n",
                        "        final int N = 1333333;\n",
                        "        int[] data = new int[N];\n",
                        "        for (int k = 0; k < N; k += 1)\n",
                        "\t\t\tdata[k] = 3;\n",
                        "        for (int k = 0; k < N; k += 5)\n",
                        "\t\t\tdata[k] = 100;\n",
                        "        for (int k = 0; k < N; k += 533)\n",
                        "\t\t\tdata[k] = 10000;\n",
                        "        int[] compressed = new int[N + 1024];\n",
                        "        IntegerCODEC codec = new Composition(FastPFOR.FastPFOR1(), new VariableByte());\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "        codec.compress0(data, inputoffset, data.length, compressed, outputoffset);\n",
                        "        System.out.println(\"compressed unsorted integers from \" + data.length * 4 / 1024 + \"KB to \"\n",
                        "\t\t\t\t+ outputoffset.intValue() * 4 / 1024 + \"KB\");\n",
                        "        compressed = Arrays.copyOf(compressed, outputoffset.intValue());\n",
                        "        int[] recovered = new int[N];\n",
                        "        IntWrapper recoffset = new IntWrapper(0);\n",
                        "        codec.uncompress0(compressed, new IntWrapper(0), compressed.length, recovered, recoffset);\n",
                        "        if (Arrays.equals(data, recovered))\n",
                        "\t\t\tSystem.out.println(\"data is recovered without loss\");\n",
                        "\t\telse\n",
                        "\t\t\tthrow new RuntimeException(\"bug\");\n",
                        "        System.out.println();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "unsortedExample_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                            "FastPFOR",
                            "90-92:FastPFOR1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "57-59:uncompress0"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "equals(int[],int[])"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println()"
                        ]
                    ]
                },
                "467-487:unsortedExample_test6_decomposed": {
                    "start": 467,
                    "end": 487,
                    "body": [
                        "    public void unsortedExample_test6_decomposed()  {\n",
                        "        final int N = 1333333;\n",
                        "        int[] data = new int[N];\n",
                        "        for (int k = 0; k < N; k += 1)\n",
                        "\t\t\tdata[k] = 3;\n",
                        "        for (int k = 0; k < N; k += 5)\n",
                        "\t\t\tdata[k] = 100;\n",
                        "        for (int k = 0; k < N; k += 533)\n",
                        "\t\t\tdata[k] = 10000;\n",
                        "        int[] compressed = new int[N + 1024];\n",
                        "        IntegerCODEC codec = new Composition(FastPFOR.FastPFOR1(), new VariableByte());\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "        codec.compress0(data, inputoffset, data.length, compressed, outputoffset);\n",
                        "        System.out.println(\"compressed unsorted integers from \" + data.length * 4 / 1024 + \"KB to \"\n",
                        "\t\t\t\t+ outputoffset.intValue() * 4 / 1024 + \"KB\");\n",
                        "        compressed = Arrays.copyOf(compressed, outputoffset.intValue());\n",
                        "        int[] recovered = new int[N];\n",
                        "        IntWrapper recoffset = new IntWrapper(0);\n",
                        "        codec.uncompress0(compressed, new IntWrapper(0), compressed.length, recovered, recoffset);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "unsortedExample_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                            "FastPFOR",
                            "90-92:FastPFOR1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "57-59:uncompress0"
                        ]
                    ]
                },
                "445-464:unsortedExample_test5_decomposed": {
                    "start": 445,
                    "end": 464,
                    "body": [
                        "    public void unsortedExample_test5_decomposed()  {\n",
                        "        final int N = 1333333;\n",
                        "        int[] data = new int[N];\n",
                        "        for (int k = 0; k < N; k += 1)\n",
                        "\t\t\tdata[k] = 3;\n",
                        "        for (int k = 0; k < N; k += 5)\n",
                        "\t\t\tdata[k] = 100;\n",
                        "        for (int k = 0; k < N; k += 533)\n",
                        "\t\t\tdata[k] = 10000;\n",
                        "        int[] compressed = new int[N + 1024];\n",
                        "        IntegerCODEC codec = new Composition(FastPFOR.FastPFOR1(), new VariableByte());\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "        codec.compress0(data, inputoffset, data.length, compressed, outputoffset);\n",
                        "        System.out.println(\"compressed unsorted integers from \" + data.length * 4 / 1024 + \"KB to \"\n",
                        "\t\t\t\t+ outputoffset.intValue() * 4 / 1024 + \"KB\");\n",
                        "        compressed = Arrays.copyOf(compressed, outputoffset.intValue());\n",
                        "        int[] recovered = new int[N];\n",
                        "        IntWrapper recoffset = new IntWrapper(0);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "unsortedExample_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                            "FastPFOR",
                            "90-92:FastPFOR1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ]
                    ]
                },
                "425-442:unsortedExample_test4_decomposed": {
                    "start": 425,
                    "end": 442,
                    "body": [
                        "    public void unsortedExample_test4_decomposed()  {\n",
                        "        final int N = 1333333;\n",
                        "        int[] data = new int[N];\n",
                        "        for (int k = 0; k < N; k += 1)\n",
                        "\t\t\tdata[k] = 3;\n",
                        "        for (int k = 0; k < N; k += 5)\n",
                        "\t\t\tdata[k] = 100;\n",
                        "        for (int k = 0; k < N; k += 533)\n",
                        "\t\t\tdata[k] = 10000;\n",
                        "        int[] compressed = new int[N + 1024];\n",
                        "        IntegerCODEC codec = new Composition(FastPFOR.FastPFOR1(), new VariableByte());\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "        codec.compress0(data, inputoffset, data.length, compressed, outputoffset);\n",
                        "        System.out.println(\"compressed unsorted integers from \" + data.length * 4 / 1024 + \"KB to \"\n",
                        "\t\t\t\t+ outputoffset.intValue() * 4 / 1024 + \"KB\");\n",
                        "        compressed = Arrays.copyOf(compressed, outputoffset.intValue());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "unsortedExample_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                            "FastPFOR",
                            "90-92:FastPFOR1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ]
                    ]
                },
                "408-422:unsortedExample_test3_decomposed": {
                    "start": 408,
                    "end": 422,
                    "body": [
                        "    public void unsortedExample_test3_decomposed()  {\n",
                        "        final int N = 1333333;\n",
                        "        int[] data = new int[N];\n",
                        "        for (int k = 0; k < N; k += 1)\n",
                        "\t\t\tdata[k] = 3;\n",
                        "        for (int k = 0; k < N; k += 5)\n",
                        "\t\t\tdata[k] = 100;\n",
                        "        for (int k = 0; k < N; k += 533)\n",
                        "\t\t\tdata[k] = 10000;\n",
                        "        int[] compressed = new int[N + 1024];\n",
                        "        IntegerCODEC codec = new Composition(FastPFOR.FastPFOR1(), new VariableByte());\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "        codec.compress0(data, inputoffset, data.length, compressed, outputoffset);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "unsortedExample_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                            "FastPFOR",
                            "90-92:FastPFOR1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ]
                    ]
                },
                "392-405:unsortedExample_test2_decomposed": {
                    "start": 392,
                    "end": 405,
                    "body": [
                        "    public void unsortedExample_test2_decomposed()  {\n",
                        "        final int N = 1333333;\n",
                        "        int[] data = new int[N];\n",
                        "        for (int k = 0; k < N; k += 1)\n",
                        "\t\t\tdata[k] = 3;\n",
                        "        for (int k = 0; k < N; k += 5)\n",
                        "\t\t\tdata[k] = 100;\n",
                        "        for (int k = 0; k < N; k += 533)\n",
                        "\t\t\tdata[k] = 10000;\n",
                        "        int[] compressed = new int[N + 1024];\n",
                        "        IntegerCODEC codec = new Composition(FastPFOR.FastPFOR1(), new VariableByte());\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "unsortedExample_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                            "FastPFOR",
                            "90-92:FastPFOR1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ]
                    ]
                },
                "377-389:unsortedExample_test1_decomposed": {
                    "start": 377,
                    "end": 389,
                    "body": [
                        "    public void unsortedExample_test1_decomposed()  {\n",
                        "        final int N = 1333333;\n",
                        "        int[] data = new int[N];\n",
                        "        for (int k = 0; k < N; k += 1)\n",
                        "\t\t\tdata[k] = 3;\n",
                        "        for (int k = 0; k < N; k += 5)\n",
                        "\t\t\tdata[k] = 100;\n",
                        "        for (int k = 0; k < N; k += 533)\n",
                        "\t\t\tdata[k] = 10000;\n",
                        "        int[] compressed = new int[N + 1024];\n",
                        "        IntegerCODEC codec = new Composition(FastPFOR.FastPFOR1(), new VariableByte());\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "unsortedExample_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                            "FastPFOR",
                            "90-92:FastPFOR1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ]
                    ]
                },
                "363-374:unsortedExample_test0_decomposed": {
                    "start": 363,
                    "end": 374,
                    "body": [
                        "    public void unsortedExample_test0_decomposed()  {\n",
                        "        final int N = 1333333;\n",
                        "        int[] data = new int[N];\n",
                        "        for (int k = 0; k < N; k += 1)\n",
                        "\t\t\tdata[k] = 3;\n",
                        "        for (int k = 0; k < N; k += 5)\n",
                        "\t\t\tdata[k] = 100;\n",
                        "        for (int k = 0; k < N; k += 533)\n",
                        "\t\t\tdata[k] = 10000;\n",
                        "        int[] compressed = new int[N + 1024];\n",
                        "        IntegerCODEC codec = new Composition(FastPFOR.FastPFOR1(), new VariableByte());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "unsortedExample_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                            "FastPFOR",
                            "90-92:FastPFOR1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ]
                    ]
                },
                "336-360:basicExampleHeadless_test7_decomposed": {
                    "start": 336,
                    "end": 360,
                    "body": [
                        "    public void basicExampleHeadless_test7_decomposed()  {\n",
                        "        int[] data = new int[2342351];\n",
                        "        System.out.println(\"Compressing \" + data.length + \" integers in one go using the headless approach\");\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        SkippableIntegratedComposition codec = new SkippableIntegratedComposition(new IntegratedBinaryPacking(),\n",
                        "\t\t\t\tnew IntegratedVariableByte());\n",
                        "        int[] compressed = new int[data.length + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(1);\n",
                        "        compressed[0] = data.length;\n",
                        "        codec.headlessCompress(data, inputoffset, data.length, compressed, outputoffset, new IntWrapper(0));\n",
                        "        System.out.println(\n",
                        "\t\t\t\t\"compressed from \" + data.length * 4 / 1024 + \"KB to \" + outputoffset.intValue() * 4 / 1024 + \"KB\");\n",
                        "        compressed = Arrays.copyOf(compressed, outputoffset.intValue());\n",
                        "        int howmany = compressed[0];\n",
                        "        int[] recovered = new int[howmany];\n",
                        "        IntWrapper recoffset = new IntWrapper(0);\n",
                        "        codec.headlessUncompress(compressed, new IntWrapper(1), compressed.length, recovered, recoffset, howmany, new IntWrapper(0));\n",
                        "        if (Arrays.equals(data, recovered))\n",
                        "\t\t\tSystem.out.println(\"data is recovered without loss\");\n",
                        "\t\telse\n",
                        "\t\t\tthrow new RuntimeException(\"bug\");\n",
                        "        System.out.println();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "basicExampleHeadless_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "47-61:headlessCompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "64-77:headlessUncompress"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "equals(int[],int[])"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println()"
                        ]
                    ]
                },
                "314-333:basicExampleHeadless_test6_decomposed": {
                    "start": 314,
                    "end": 333,
                    "body": [
                        "    public void basicExampleHeadless_test6_decomposed()  {\n",
                        "        int[] data = new int[2342351];\n",
                        "        System.out.println(\"Compressing \" + data.length + \" integers in one go using the headless approach\");\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        SkippableIntegratedComposition codec = new SkippableIntegratedComposition(new IntegratedBinaryPacking(),\n",
                        "\t\t\t\tnew IntegratedVariableByte());\n",
                        "        int[] compressed = new int[data.length + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(1);\n",
                        "        compressed[0] = data.length;\n",
                        "        codec.headlessCompress(data, inputoffset, data.length, compressed, outputoffset, new IntWrapper(0));\n",
                        "        System.out.println(\n",
                        "\t\t\t\t\"compressed from \" + data.length * 4 / 1024 + \"KB to \" + outputoffset.intValue() * 4 / 1024 + \"KB\");\n",
                        "        compressed = Arrays.copyOf(compressed, outputoffset.intValue());\n",
                        "        int howmany = compressed[0];\n",
                        "        int[] recovered = new int[howmany];\n",
                        "        IntWrapper recoffset = new IntWrapper(0);\n",
                        "        codec.headlessUncompress(compressed, new IntWrapper(1), compressed.length, recovered, recoffset, howmany, new IntWrapper(0));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "basicExampleHeadless_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "47-61:headlessCompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "64-77:headlessUncompress"
                        ]
                    ]
                },
                "293-311:basicExampleHeadless_test5_decomposed": {
                    "start": 293,
                    "end": 311,
                    "body": [
                        "    public void basicExampleHeadless_test5_decomposed()  {\n",
                        "        int[] data = new int[2342351];\n",
                        "        System.out.println(\"Compressing \" + data.length + \" integers in one go using the headless approach\");\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        SkippableIntegratedComposition codec = new SkippableIntegratedComposition(new IntegratedBinaryPacking(),\n",
                        "\t\t\t\tnew IntegratedVariableByte());\n",
                        "        int[] compressed = new int[data.length + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(1);\n",
                        "        compressed[0] = data.length;\n",
                        "        codec.headlessCompress(data, inputoffset, data.length, compressed, outputoffset, new IntWrapper(0));\n",
                        "        System.out.println(\n",
                        "\t\t\t\t\"compressed from \" + data.length * 4 / 1024 + \"KB to \" + outputoffset.intValue() * 4 / 1024 + \"KB\");\n",
                        "        compressed = Arrays.copyOf(compressed, outputoffset.intValue());\n",
                        "        int howmany = compressed[0];\n",
                        "        int[] recovered = new int[howmany];\n",
                        "        IntWrapper recoffset = new IntWrapper(0);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "basicExampleHeadless_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "47-61:headlessCompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ]
                    ]
                },
                "275-290:basicExampleHeadless_test4_decomposed": {
                    "start": 275,
                    "end": 290,
                    "body": [
                        "    public void basicExampleHeadless_test4_decomposed()  {\n",
                        "        int[] data = new int[2342351];\n",
                        "        System.out.println(\"Compressing \" + data.length + \" integers in one go using the headless approach\");\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        SkippableIntegratedComposition codec = new SkippableIntegratedComposition(new IntegratedBinaryPacking(),\n",
                        "\t\t\t\tnew IntegratedVariableByte());\n",
                        "        int[] compressed = new int[data.length + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(1);\n",
                        "        compressed[0] = data.length;\n",
                        "        codec.headlessCompress(data, inputoffset, data.length, compressed, outputoffset, new IntWrapper(0));\n",
                        "        System.out.println(\n",
                        "\t\t\t\t\"compressed from \" + data.length * 4 / 1024 + \"KB to \" + outputoffset.intValue() * 4 / 1024 + \"KB\");\n",
                        "        compressed = Arrays.copyOf(compressed, outputoffset.intValue());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "basicExampleHeadless_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "47-61:headlessCompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ]
                    ]
                },
                "260-272:basicExampleHeadless_test3_decomposed": {
                    "start": 260,
                    "end": 272,
                    "body": [
                        "    public void basicExampleHeadless_test3_decomposed()  {\n",
                        "        int[] data = new int[2342351];\n",
                        "        System.out.println(\"Compressing \" + data.length + \" integers in one go using the headless approach\");\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        SkippableIntegratedComposition codec = new SkippableIntegratedComposition(new IntegratedBinaryPacking(),\n",
                        "\t\t\t\tnew IntegratedVariableByte());\n",
                        "        int[] compressed = new int[data.length + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(1);\n",
                        "        compressed[0] = data.length;\n",
                        "        codec.headlessCompress(data, inputoffset, data.length, compressed, outputoffset, new IntWrapper(0));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "basicExampleHeadless_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "47-61:headlessCompress"
                        ]
                    ]
                },
                "247-257:basicExampleHeadless_test2_decomposed": {
                    "start": 247,
                    "end": 257,
                    "body": [
                        "    public void basicExampleHeadless_test2_decomposed()  {\n",
                        "        int[] data = new int[2342351];\n",
                        "        System.out.println(\"Compressing \" + data.length + \" integers in one go using the headless approach\");\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        SkippableIntegratedComposition codec = new SkippableIntegratedComposition(new IntegratedBinaryPacking(),\n",
                        "\t\t\t\tnew IntegratedVariableByte());\n",
                        "        int[] compressed = new int[data.length + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(1);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "basicExampleHeadless_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "235-244:basicExampleHeadless_test1_decomposed": {
                    "start": 235,
                    "end": 244,
                    "body": [
                        "    public void basicExampleHeadless_test1_decomposed()  {\n",
                        "        int[] data = new int[2342351];\n",
                        "        System.out.println(\"Compressing \" + data.length + \" integers in one go using the headless approach\");\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        SkippableIntegratedComposition codec = new SkippableIntegratedComposition(new IntegratedBinaryPacking(),\n",
                        "\t\t\t\tnew IntegratedVariableByte());\n",
                        "        int[] compressed = new int[data.length + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "basicExampleHeadless_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "225-232:basicExampleHeadless_test0_decomposed": {
                    "start": 225,
                    "end": 232,
                    "body": [
                        "    public void basicExampleHeadless_test0_decomposed()  {\n",
                        "        int[] data = new int[2342351];\n",
                        "        System.out.println(\"Compressing \" + data.length + \" integers in one go using the headless approach\");\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        SkippableIntegratedComposition codec = new SkippableIntegratedComposition(new IntegratedBinaryPacking(),\n",
                        "\t\t\t\tnew IntegratedVariableByte());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "basicExampleHeadless_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "200-222:basicExample_test7_decomposed": {
                    "start": 200,
                    "end": 222,
                    "body": [
                        "    public void basicExample_test7_decomposed()  {\n",
                        "        int[] data = new int[2342351];\n",
                        "        System.out.println(\"Compressing \" + data.length + \" integers in one go\");\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        IntegratedIntegerCODEC codec = new IntegratedComposition(new IntegratedBinaryPacking(),\n",
                        "\t\t\t\tnew IntegratedVariableByte());\n",
                        "        int[] compressed = new int[data.length + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "        codec.compress0(data, inputoffset, data.length, compressed, outputoffset);\n",
                        "        System.out.println(\n",
                        "\t\t\t\t\"compressed from \" + data.length * 4 / 1024 + \"KB to \" + outputoffset.intValue() * 4 / 1024 + \"KB\");\n",
                        "        compressed = Arrays.copyOf(compressed, outputoffset.intValue());\n",
                        "        int[] recovered = new int[data.length];\n",
                        "        IntWrapper recoffset = new IntWrapper(0);\n",
                        "        codec.uncompress0(compressed, new IntWrapper(0), compressed.length, recovered, recoffset);\n",
                        "        if (Arrays.equals(data, recovered))\n",
                        "\t\t\tSystem.out.println(\"data is recovered without loss\");\n",
                        "\t\telse\n",
                        "\t\t\tthrow new RuntimeException(\"bug\");\n",
                        "        System.out.println();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "basicExample_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "57-59:uncompress0"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "equals(int[],int[])"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println()"
                        ]
                    ]
                },
                "180-197:basicExample_test6_decomposed": {
                    "start": 180,
                    "end": 197,
                    "body": [
                        "    public void basicExample_test6_decomposed()  {\n",
                        "        int[] data = new int[2342351];\n",
                        "        System.out.println(\"Compressing \" + data.length + \" integers in one go\");\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        IntegratedIntegerCODEC codec = new IntegratedComposition(new IntegratedBinaryPacking(),\n",
                        "\t\t\t\tnew IntegratedVariableByte());\n",
                        "        int[] compressed = new int[data.length + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "        codec.compress0(data, inputoffset, data.length, compressed, outputoffset);\n",
                        "        System.out.println(\n",
                        "\t\t\t\t\"compressed from \" + data.length * 4 / 1024 + \"KB to \" + outputoffset.intValue() * 4 / 1024 + \"KB\");\n",
                        "        compressed = Arrays.copyOf(compressed, outputoffset.intValue());\n",
                        "        int[] recovered = new int[data.length];\n",
                        "        IntWrapper recoffset = new IntWrapper(0);\n",
                        "        codec.uncompress0(compressed, new IntWrapper(0), compressed.length, recovered, recoffset);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "basicExample_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "57-59:uncompress0"
                        ]
                    ]
                },
                "161-177:basicExample_test5_decomposed": {
                    "start": 161,
                    "end": 177,
                    "body": [
                        "    public void basicExample_test5_decomposed()  {\n",
                        "        int[] data = new int[2342351];\n",
                        "        System.out.println(\"Compressing \" + data.length + \" integers in one go\");\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        IntegratedIntegerCODEC codec = new IntegratedComposition(new IntegratedBinaryPacking(),\n",
                        "\t\t\t\tnew IntegratedVariableByte());\n",
                        "        int[] compressed = new int[data.length + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "        codec.compress0(data, inputoffset, data.length, compressed, outputoffset);\n",
                        "        System.out.println(\n",
                        "\t\t\t\t\"compressed from \" + data.length * 4 / 1024 + \"KB to \" + outputoffset.intValue() * 4 / 1024 + \"KB\");\n",
                        "        compressed = Arrays.copyOf(compressed, outputoffset.intValue());\n",
                        "        int[] recovered = new int[data.length];\n",
                        "        IntWrapper recoffset = new IntWrapper(0);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "basicExample_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ]
                    ]
                },
                "144-158:basicExample_test4_decomposed": {
                    "start": 144,
                    "end": 158,
                    "body": [
                        "    public void basicExample_test4_decomposed()  {\n",
                        "        int[] data = new int[2342351];\n",
                        "        System.out.println(\"Compressing \" + data.length + \" integers in one go\");\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        IntegratedIntegerCODEC codec = new IntegratedComposition(new IntegratedBinaryPacking(),\n",
                        "\t\t\t\tnew IntegratedVariableByte());\n",
                        "        int[] compressed = new int[data.length + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "        codec.compress0(data, inputoffset, data.length, compressed, outputoffset);\n",
                        "        System.out.println(\n",
                        "\t\t\t\t\"compressed from \" + data.length * 4 / 1024 + \"KB to \" + outputoffset.intValue() * 4 / 1024 + \"KB\");\n",
                        "        compressed = Arrays.copyOf(compressed, outputoffset.intValue());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "basicExample_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ]
                    ]
                },
                "130-141:basicExample_test3_decomposed": {
                    "start": 130,
                    "end": 141,
                    "body": [
                        "    public void basicExample_test3_decomposed()  {\n",
                        "        int[] data = new int[2342351];\n",
                        "        System.out.println(\"Compressing \" + data.length + \" integers in one go\");\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        IntegratedIntegerCODEC codec = new IntegratedComposition(new IntegratedBinaryPacking(),\n",
                        "\t\t\t\tnew IntegratedVariableByte());\n",
                        "        int[] compressed = new int[data.length + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "        codec.compress0(data, inputoffset, data.length, compressed, outputoffset);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "basicExample_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ]
                    ]
                },
                "117-127:basicExample_test2_decomposed": {
                    "start": 117,
                    "end": 127,
                    "body": [
                        "    public void basicExample_test2_decomposed()  {\n",
                        "        int[] data = new int[2342351];\n",
                        "        System.out.println(\"Compressing \" + data.length + \" integers in one go\");\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        IntegratedIntegerCODEC codec = new IntegratedComposition(new IntegratedBinaryPacking(),\n",
                        "\t\t\t\tnew IntegratedVariableByte());\n",
                        "        int[] compressed = new int[data.length + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "basicExample_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "105-114:basicExample_test1_decomposed": {
                    "start": 105,
                    "end": 114,
                    "body": [
                        "    public void basicExample_test1_decomposed()  {\n",
                        "        int[] data = new int[2342351];\n",
                        "        System.out.println(\"Compressing \" + data.length + \" integers in one go\");\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        IntegratedIntegerCODEC codec = new IntegratedComposition(new IntegratedBinaryPacking(),\n",
                        "\t\t\t\tnew IntegratedVariableByte());\n",
                        "        int[] compressed = new int[data.length + 1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "basicExample_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "95-102:basicExample_test0_decomposed": {
                    "start": 95,
                    "end": 102,
                    "body": [
                        "    public void basicExample_test0_decomposed()  {\n",
                        "        int[] data = new int[2342351];\n",
                        "        System.out.println(\"Compressing \" + data.length + \" integers in one go\");\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        IntegratedIntegerCODEC codec = new IntegratedComposition(new IntegratedBinaryPacking(),\n",
                        "\t\t\t\tnew IntegratedVariableByte());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "basicExample_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "80-92:superSimpleExample_test3_decomposed": {
                    "start": 80,
                    "end": 92,
                    "body": [
                        "    public void superSimpleExample_test3_decomposed()  {\n",
                        "        IntegratedIntCompressor iic = new IntegratedIntCompressor(1, null);\n",
                        "        int[] data = new int[2342351];\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        System.out.println(\"Compressing \" + data.length + \" integers using friendly interface\");\n",
                        "        int[] compressed = iic.compress(data);\n",
                        "        int[] recov = iic.uncompress(compressed);\n",
                        "        System.out\n",
                        "\t\t\t\t.println(\"compressed from \" + data.length * 4 / 1024 + \"KB to \" + compressed.length * 4 / 1024 + \"KB\");\n",
                        "        if (!Arrays.equals(recov, data))\n",
                        "\t\t\tthrow new RuntimeException(\"bug\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "superSimpleExample_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "29-39:IntegratedIntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "52-65:compress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "73-81:uncompress"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "equals(int[],int[])"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ]
                    ]
                },
                "69-77:superSimpleExample_test2_decomposed": {
                    "start": 69,
                    "end": 77,
                    "body": [
                        "    public void superSimpleExample_test2_decomposed()  {\n",
                        "        IntegratedIntCompressor iic = new IntegratedIntCompressor(1, null);\n",
                        "        int[] data = new int[2342351];\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        System.out.println(\"Compressing \" + data.length + \" integers using friendly interface\");\n",
                        "        int[] compressed = iic.compress(data);\n",
                        "        int[] recov = iic.uncompress(compressed);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "superSimpleExample_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "29-39:IntegratedIntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "52-65:compress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "73-81:uncompress"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "59-66:superSimpleExample_test1_decomposed": {
                    "start": 59,
                    "end": 66,
                    "body": [
                        "    public void superSimpleExample_test1_decomposed()  {\n",
                        "        IntegratedIntCompressor iic = new IntegratedIntCompressor(1, null);\n",
                        "        int[] data = new int[2342351];\n",
                        "        for (int k = 0; k < data.length; ++k)\n",
                        "\t\t\tdata[k] = k;\n",
                        "        System.out.println(\"Compressing \" + data.length + \" integers using friendly interface\");\n",
                        "        int[] compressed = iic.compress(data);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "superSimpleExample_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "29-39:IntegratedIntCompressor"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "52-65:compress"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "54-56:superSimpleExample_test0_decomposed": {
                    "start": 54,
                    "end": 56,
                    "body": [
                        "    public void superSimpleExample_test0_decomposed()  {\n",
                        "        IntegratedIntCompressor iic = new IntegratedIntCompressor(1, null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "superSimpleExample_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                            "IntegratedIntCompressor",
                            "29-39:IntegratedIntCompressor"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}