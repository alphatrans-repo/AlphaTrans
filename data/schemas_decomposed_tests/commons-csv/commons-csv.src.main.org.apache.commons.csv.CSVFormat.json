{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-csv/src/main/java/org/apache/commons/csv/CSVFormat.java",
    "imports": {
        "34-34:import IOException": {
            "start": 34,
            "end": 34,
            "body": [
                "import java.io.IOException;\n"
            ]
        },
        "37-37:import Serializable": {
            "start": 37,
            "end": 37,
            "body": [
                "import java.io.Serializable;\n"
            ]
        },
        "36-36:import Reader": {
            "start": 36,
            "end": 36,
            "body": [
                "import java.io.Reader;\n"
            ]
        },
        "39-39:import Writer": {
            "start": 39,
            "end": 39,
            "body": [
                "import java.io.Writer;\n"
            ]
        },
        "40-40:import Charset": {
            "start": 40,
            "end": 40,
            "body": [
                "import java.nio.charset.Charset;\n"
            ]
        },
        "32-32:import File": {
            "start": 32,
            "end": 32,
            "body": [
                "import java.io.File;\n"
            ]
        },
        "42-42:import Path": {
            "start": 42,
            "end": 42,
            "body": [
                "import java.nio.file.Path;\n"
            ]
        },
        "33-33:import FileOutputStream": {
            "start": 33,
            "end": 33,
            "body": [
                "import java.io.FileOutputStream;\n"
            ]
        },
        "35-35:import OutputStreamWriter": {
            "start": 35,
            "end": 35,
            "body": [
                "import java.io.OutputStreamWriter;\n"
            ]
        },
        "38-38:import StringWriter": {
            "start": 38,
            "end": 38,
            "body": [
                "import java.io.StringWriter;\n"
            ]
        },
        "46-46:import Set": {
            "start": 46,
            "end": 46,
            "body": [
                "import java.util.Set;\n"
            ]
        },
        "41-41:import Files": {
            "start": 41,
            "end": 41,
            "body": [
                "import java.nio.file.Files;\n"
            ]
        },
        "43-43:import Arrays": {
            "start": 43,
            "end": 43,
            "body": [
                "import java.util.Arrays;\n"
            ]
        },
        "44-44:import HashSet": {
            "start": 44,
            "end": 44,
            "body": [
                "import java.util.HashSet;\n"
            ]
        },
        "45-45:import Objects": {
            "start": 45,
            "end": 45,
            "body": [
                "import java.util.Objects;\n"
            ]
        },
        "20-20:import static Constants.BACKSLASH": {
            "start": 20,
            "end": 20,
            "body": [
                "import static org.apache.commons.csv.Constants.BACKSLASH;\n"
            ]
        },
        "21-21:import static Constants.COMMA": {
            "start": 21,
            "end": 21,
            "body": [
                "import static org.apache.commons.csv.Constants.COMMA;\n"
            ]
        },
        "22-22:import static Constants.COMMENT": {
            "start": 22,
            "end": 22,
            "body": [
                "import static org.apache.commons.csv.Constants.COMMENT;\n"
            ]
        },
        "23-23:import static Constants.CR": {
            "start": 23,
            "end": 23,
            "body": [
                "import static org.apache.commons.csv.Constants.CR;\n"
            ]
        },
        "24-24:import static Constants.CRLF": {
            "start": 24,
            "end": 24,
            "body": [
                "import static org.apache.commons.csv.Constants.CRLF;\n"
            ]
        },
        "25-25:import static Constants.DOUBLE_QUOTE_CHAR": {
            "start": 25,
            "end": 25,
            "body": [
                "import static org.apache.commons.csv.Constants.DOUBLE_QUOTE_CHAR;\n"
            ]
        },
        "26-26:import static Constants.EMPTY": {
            "start": 26,
            "end": 26,
            "body": [
                "import static org.apache.commons.csv.Constants.EMPTY;\n"
            ]
        },
        "27-27:import static Constants.LF": {
            "start": 27,
            "end": 27,
            "body": [
                "import static org.apache.commons.csv.Constants.LF;\n"
            ]
        },
        "28-28:import static Constants.PIPE": {
            "start": 28,
            "end": 28,
            "body": [
                "import static org.apache.commons.csv.Constants.PIPE;\n"
            ]
        },
        "29-29:import static Constants.SP": {
            "start": 29,
            "end": 29,
            "body": [
                "import static org.apache.commons.csv.Constants.SP;\n"
            ]
        },
        "30-30:import static Constants.TAB": {
            "start": 30,
            "end": 30,
            "body": [
                "import static org.apache.commons.csv.Constants.TAB;\n"
            ]
        }
    },
    "classes": {
        "Builder": {
            "start": 164,
            "end": 164,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "CSVFormat",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "265-271:setAllowDuplicateHeaderNames": {
                    "start": 265,
                    "end": 271,
                    "body": [
                        "        public Builder setAllowDuplicateHeaderNames(final boolean allowDuplicateHeaderNames) {\n",
                        "            setDuplicateHeaderMode(\n",
                        "                    allowDuplicateHeaderNames\n",
                        "                            ? DuplicateHeaderMode.ALLOW_ALL\n",
                        "                            : DuplicateHeaderMode.ALLOW_EMPTY);\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setAllowDuplicateHeaderNames(boolean)",
                    "parameters": [
                        "allowDuplicateHeaderNames"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "365-369:setDuplicateHeaderMode"
                        ]
                    ]
                },
                "672-675:setTrim": {
                    "start": 672,
                    "end": 675,
                    "body": [
                        "        public Builder setTrim(final boolean trim) {\n",
                        "            this.trim = trim;\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setTrim(boolean)",
                    "parameters": [
                        "trim"
                    ],
                    "calls": []
                },
                "661-664:setTrailingDelimiter": {
                    "start": 661,
                    "end": 664,
                    "body": [
                        "        public Builder setTrailingDelimiter(final boolean trailingDelimiter) {\n",
                        "            this.trailingDelimiter = trailingDelimiter;\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setTrailingDelimiter(boolean)",
                    "parameters": [
                        "trailingDelimiter"
                    ],
                    "calls": []
                },
                "650-653:setSkipHeaderRecord": {
                    "start": 650,
                    "end": 653,
                    "body": [
                        "        public Builder setSkipHeaderRecord(final boolean skipHeaderRecord) {\n",
                        "            this.skipHeaderRecord = skipHeaderRecord;\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setSkipHeaderRecord(boolean)",
                    "parameters": [
                        "skipHeaderRecord"
                    ],
                    "calls": []
                },
                "639-642:setRecordSeparator1": {
                    "start": 639,
                    "end": 642,
                    "body": [
                        "        public Builder setRecordSeparator1(final String recordSeparator) {\n",
                        "            this.recordSeparator = recordSeparator;\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setRecordSeparator1(String)",
                    "parameters": [
                        "recordSeparator"
                    ],
                    "calls": []
                },
                "625-628:setRecordSeparator0": {
                    "start": 625,
                    "end": 628,
                    "body": [
                        "        public Builder setRecordSeparator0(final char recordSeparator) {\n",
                        "            this.recordSeparator = String.valueOf(recordSeparator);\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setRecordSeparator0(char)",
                    "parameters": [
                        "recordSeparator"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "valueOf(char)"
                        ]
                    ]
                },
                "611-614:setQuoteMode": {
                    "start": 611,
                    "end": 614,
                    "body": [
                        "        public Builder setQuoteMode(final QuoteMode quoteMode) {\n",
                        "            this.quoteMode = quoteMode;\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setQuoteMode(QuoteMode)",
                    "parameters": [
                        "quoteMode"
                    ],
                    "calls": []
                },
                "597-603:setQuote1": {
                    "start": 597,
                    "end": 603,
                    "body": [
                        "        public Builder setQuote1(final Character quoteCharacter) {\n",
                        "            if (isLineBreak1(quoteCharacter)) {\n",
                        "                throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n",
                        "            }\n",
                        "            this.quoteCharacter = quoteCharacter;\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setQuote1(Character)",
                    "parameters": [
                        "quoteCharacter"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1188-1190:isLineBreak1"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalArgumentException",
                            "IllegalArgumentException(java.lang.String)"
                        ]
                    ]
                },
                "586-589:setQuote0": {
                    "start": 586,
                    "end": 589,
                    "body": [
                        "        public Builder setQuote0(final char quoteCharacter) {\n",
                        "            setQuote1(Character.valueOf(quoteCharacter));\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setQuote0(char)",
                    "parameters": [
                        "quoteCharacter"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "597-603:setQuote1"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Character",
                            "valueOf(char)"
                        ]
                    ]
                },
                "574-578:setNullString": {
                    "start": 574,
                    "end": 578,
                    "body": [
                        "        public Builder setNullString(final String nullString) {\n",
                        "            this.nullString = nullString;\n",
                        "            this.quotedNullString = quoteCharacter + nullString + quoteCharacter;\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setNullString(String)",
                    "parameters": [
                        "nullString"
                    ],
                    "calls": []
                },
                "554-557:setIgnoreSurroundingSpaces": {
                    "start": 554,
                    "end": 557,
                    "body": [
                        "        public Builder setIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\n",
                        "            this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setIgnoreSurroundingSpaces(boolean)",
                    "parameters": [
                        "ignoreSurroundingSpaces"
                    ],
                    "calls": []
                },
                "541-544:setIgnoreHeaderCase": {
                    "start": 541,
                    "end": 544,
                    "body": [
                        "        public Builder setIgnoreHeaderCase(final boolean ignoreHeaderCase) {\n",
                        "            this.ignoreHeaderCase = ignoreHeaderCase;\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setIgnoreHeaderCase(boolean)",
                    "parameters": [
                        "ignoreHeaderCase"
                    ],
                    "calls": []
                },
                "528-531:setIgnoreEmptyLines": {
                    "start": 528,
                    "end": 531,
                    "body": [
                        "        public Builder setIgnoreEmptyLines(final boolean ignoreEmptyLines) {\n",
                        "            this.ignoreEmptyLines = ignoreEmptyLines;\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setIgnoreEmptyLines(boolean)",
                    "parameters": [
                        "ignoreEmptyLines"
                    ],
                    "calls": []
                },
                "514-517:setHeaderComments1": {
                    "start": 514,
                    "end": 517,
                    "body": [
                        "        public Builder setHeaderComments1(final String... headerComments) {\n",
                        "            this.headerComments = CSVFormat.clone(headerComments);\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setHeaderComments1(String[])",
                    "parameters": [
                        "headerComments"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1143-1145:clone"
                        ]
                    ]
                },
                "497-500:setHeaderComments0": {
                    "start": 497,
                    "end": 500,
                    "body": [
                        "        public Builder setHeaderComments0(final Object... headerComments) {\n",
                        "            this.headerComments = CSVFormat.clone(toStringArray(headerComments));\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setHeaderComments0(Object[])",
                    "parameters": [
                        "headerComments"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1143-1145:clone"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1241-1248:toStringArray"
                        ]
                    ]
                },
                "390-396:setEscape1": {
                    "start": 390,
                    "end": 396,
                    "body": [
                        "        public Builder setEscape1(final Character escapeCharacter) {\n",
                        "            if (isLineBreak1(escapeCharacter)) {\n",
                        "                throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n",
                        "            }\n",
                        "            this.escapeCharacter = escapeCharacter;\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setEscape1(Character)",
                    "parameters": [
                        "escapeCharacter"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1188-1190:isLineBreak1"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalArgumentException",
                            "IllegalArgumentException(java.lang.String)"
                        ]
                    ]
                },
                "378-381:setEscape0": {
                    "start": 378,
                    "end": 381,
                    "body": [
                        "        public Builder setEscape0(final char escapeCharacter) {\n",
                        "            setEscape1(Character.valueOf(escapeCharacter));\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setEscape0(char)",
                    "parameters": [
                        "escapeCharacter"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "390-396:setEscape1"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Character",
                            "valueOf(char)"
                        ]
                    ]
                },
                "365-369:setDuplicateHeaderMode": {
                    "start": 365,
                    "end": 369,
                    "body": [
                        "        public Builder setDuplicateHeaderMode(final DuplicateHeaderMode duplicateHeaderMode) {\n",
                        "            this.duplicateHeaderMode =\n",
                        "                    Objects.requireNonNull(duplicateHeaderMode, \"duplicateHeaderMode\");\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setDuplicateHeaderMode(DuplicateHeaderMode)",
                    "parameters": [
                        "duplicateHeaderMode"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Objects",
                            "requireNonNull(java.lang.Object,java.lang.String)"
                        ]
                    ]
                },
                "347-356:setDelimiter1": {
                    "start": 347,
                    "end": 356,
                    "body": [
                        "        public Builder setDelimiter1(final String delimiter) {\n",
                        "            if (containsLineBreak(delimiter)) {\n",
                        "                throw new IllegalArgumentException(\"The delimiter cannot be a line break\");\n",
                        "            }\n",
                        "            if (delimiter.isEmpty()) {\n",
                        "                throw new IllegalArgumentException(\"The delimiter cannot be empty\");\n",
                        "            }\n",
                        "            this.delimiter = delimiter;\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setDelimiter1(String)",
                    "parameters": [
                        "delimiter"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1164-1166:containsLineBreak"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalArgumentException",
                            "IllegalArgumentException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "isEmpty()"
                        ]
                    ]
                },
                "337-339:setDelimiter0": {
                    "start": 337,
                    "end": 339,
                    "body": [
                        "        public Builder setDelimiter0(final char delimiter) {\n",
                        "            return setDelimiter1(String.valueOf(delimiter));\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setDelimiter0(char)",
                    "parameters": [
                        "delimiter"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "347-356:setDelimiter1"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "valueOf(char)"
                        ]
                    ]
                },
                "322-329:setCommentMarker1": {
                    "start": 322,
                    "end": 329,
                    "body": [
                        "        public Builder setCommentMarker1(final Character commentMarker) {\n",
                        "            if (isLineBreak1(commentMarker)) {\n",
                        "                throw new IllegalArgumentException(\n",
                        "                        \"The comment start marker character cannot be a line break\");\n",
                        "            }\n",
                        "            this.commentMarker = commentMarker;\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setCommentMarker1(Character)",
                    "parameters": [
                        "commentMarker"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1188-1190:isLineBreak1"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalArgumentException",
                            "IllegalArgumentException(java.lang.String)"
                        ]
                    ]
                },
                "308-311:setCommentMarker0": {
                    "start": 308,
                    "end": 311,
                    "body": [
                        "        public Builder setCommentMarker0(final char commentMarker) {\n",
                        "            setCommentMarker1(Character.valueOf(commentMarker));\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setCommentMarker0(char)",
                    "parameters": [
                        "commentMarker"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "322-329:setCommentMarker1"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Character",
                            "valueOf(char)"
                        ]
                    ]
                },
                "294-297:setAutoFlush": {
                    "start": 294,
                    "end": 297,
                    "body": [
                        "        public Builder setAutoFlush(final boolean autoFlush) {\n",
                        "            this.autoFlush = autoFlush;\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setAutoFlush(boolean)",
                    "parameters": [
                        "autoFlush"
                    ],
                    "calls": []
                },
                "283-286:setAllowMissingColumnNames": {
                    "start": 283,
                    "end": 286,
                    "body": [
                        "        public Builder setAllowMissingColumnNames(final boolean allowMissingColumnNames) {\n",
                        "            this.allowMissingColumnNames = allowMissingColumnNames;\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "setAllowMissingColumnNames(boolean)",
                    "parameters": [
                        "allowMissingColumnNames"
                    ],
                    "calls": []
                },
                "250-254:build": {
                    "start": 250,
                    "end": 254,
                    "body": [
                        "        public CSVFormat build() {\n",
                        "            return new CSVFormat(\n",
                        "                    1, false, false, null, null, null, false, false, this, null, false, null, null,\n",
                        "                    false, null, null, false, false, null, null);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "build()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1317-1383:CSVFormat"
                        ]
                    ]
                },
                "181-183:create1": {
                    "start": 181,
                    "end": 183,
                    "body": [
                        "        public static Builder create1(final CSVFormat csvFormat) {\n",
                        "            return new Builder(csvFormat);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "create1(CSVFormat)",
                    "parameters": [
                        "csvFormat"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "223-243:Builder"
                        ]
                    ]
                },
                "171-173:create0": {
                    "start": 171,
                    "end": 173,
                    "body": [
                        "        public static Builder create0() {\n",
                        "            return new Builder(CSVFormat.DEFAULT);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "create0()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "223-243:Builder"
                        ]
                    ]
                },
                "223-243:Builder": {
                    "start": 223,
                    "end": 243,
                    "body": [
                        "        private Builder(final CSVFormat csvFormat) {\n",
                        "            this.delimiter = csvFormat.delimiter;\n",
                        "            this.quoteCharacter = csvFormat.quoteCharacter;\n",
                        "            this.quoteMode = csvFormat.quoteMode;\n",
                        "            this.commentMarker = csvFormat.commentMarker;\n",
                        "            this.escapeCharacter = csvFormat.escapeCharacter;\n",
                        "            this.ignoreSurroundingSpaces = csvFormat.ignoreSurroundingSpaces;\n",
                        "            this.allowMissingColumnNames = csvFormat.allowMissingColumnNames;\n",
                        "            this.ignoreEmptyLines = csvFormat.ignoreEmptyLines;\n",
                        "            this.recordSeparator = csvFormat.recordSeparator;\n",
                        "            this.nullString = csvFormat.nullString;\n",
                        "            this.headerComments = csvFormat.headerComments;\n",
                        "            this.headers = csvFormat.headers;\n",
                        "            this.skipHeaderRecord = csvFormat.skipHeaderRecord;\n",
                        "            this.ignoreHeaderCase = csvFormat.ignoreHeaderCase;\n",
                        "            this.trailingDelimiter = csvFormat.trailingDelimiter;\n",
                        "            this.trim = csvFormat.trim;\n",
                        "            this.autoFlush = csvFormat.autoFlush;\n",
                        "            this.quotedNullString = csvFormat.quotedNullString;\n",
                        "            this.duplicateHeaderMode = csvFormat.duplicateHeaderMode;\n",
                        "        }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "Builder(CSVFormat)",
                    "parameters": [
                        "csvFormat"
                    ],
                    "calls": []
                }
            },
            "fields": {
                "221-221:trim": {
                    "start": 221,
                    "end": 221,
                    "body": [
                        "        private boolean trim;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "219-219:trailingDelimiter": {
                    "start": 219,
                    "end": 219,
                    "body": [
                        "        private boolean trailingDelimiter;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "217-217:skipHeaderRecord": {
                    "start": 217,
                    "end": 217,
                    "body": [
                        "        private boolean skipHeaderRecord;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "215-215:recordSeparator": {
                    "start": 215,
                    "end": 215,
                    "body": [
                        "        private String recordSeparator;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "213-213:quoteMode": {
                    "start": 213,
                    "end": 213,
                    "body": [
                        "        private QuoteMode quoteMode;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "QuoteMode",
                            "QuoteMode"
                        ]
                    ]
                },
                "211-211:quotedNullString": {
                    "start": 211,
                    "end": 211,
                    "body": [
                        "        private String quotedNullString;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "209-209:quoteCharacter": {
                    "start": 209,
                    "end": 209,
                    "body": [
                        "        private Character quoteCharacter;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "Character",
                            "java.lang.Character"
                        ]
                    ]
                },
                "207-207:nullString": {
                    "start": 207,
                    "end": 207,
                    "body": [
                        "        private String nullString;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "205-205:ignoreSurroundingSpaces": {
                    "start": 205,
                    "end": 205,
                    "body": [
                        "        private boolean ignoreSurroundingSpaces;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "203-203:ignoreHeaderCase": {
                    "start": 203,
                    "end": 203,
                    "body": [
                        "        private boolean ignoreHeaderCase;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "201-201:ignoreEmptyLines": {
                    "start": 201,
                    "end": 201,
                    "body": [
                        "        private boolean ignoreEmptyLines;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "199-199:headers": {
                    "start": 199,
                    "end": 199,
                    "body": [
                        "        private String[] headers;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "String[]",
                            "java.lang.String[]"
                        ]
                    ]
                },
                "197-197:headerComments": {
                    "start": 197,
                    "end": 197,
                    "body": [
                        "        private String[] headerComments;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "String[]",
                            "java.lang.String[]"
                        ]
                    ]
                },
                "195-195:escapeCharacter": {
                    "start": 195,
                    "end": 195,
                    "body": [
                        "        private Character escapeCharacter;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "Character",
                            "java.lang.Character"
                        ]
                    ]
                },
                "193-193:duplicateHeaderMode": {
                    "start": 193,
                    "end": 193,
                    "body": [
                        "        private DuplicateHeaderMode duplicateHeaderMode;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "DuplicateHeaderMode",
                            "DuplicateHeaderMode"
                        ]
                    ]
                },
                "191-191:delimiter": {
                    "start": 191,
                    "end": 191,
                    "body": [
                        "        private String delimiter;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "189-189:commentMarker": {
                    "start": 189,
                    "end": 189,
                    "body": [
                        "        private Character commentMarker;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "Character",
                            "java.lang.Character"
                        ]
                    ]
                },
                "187-187:autoFlush": {
                    "start": 187,
                    "end": 187,
                    "body": [
                        "        private boolean autoFlush;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "185-185:allowMissingColumnNames": {
                    "start": 185,
                    "end": 185,
                    "body": [
                        "        private boolean allowMissingColumnNames;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                }
            }
        },
        "CSVFormat": {
            "start": 157,
            "end": 157,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "Builder",
                "Predefined",
                "new IntFunction<String>(...) { ... }"
            ],
            "implements": [
                "Serializable"
            ],
            "extends": [],
            "methods": {
                "2915-2917:withTrim1": {
                    "start": 2915,
                    "end": 2917,
                    "body": [
                        "    public CSVFormat withTrim1(final boolean trim) {\n",
                        "        return builder().setTrim(trim).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withTrim1(boolean)",
                    "parameters": [
                        "trim"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "672-675:setTrim"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2901-2903:withTrim0": {
                    "start": 2901,
                    "end": 2903,
                    "body": [
                        "    public CSVFormat withTrim0() {\n",
                        "        return builder().setTrim(true).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withTrim0()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "672-675:setTrim"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2888-2890:withTrailingDelimiter1": {
                    "start": 2888,
                    "end": 2890,
                    "body": [
                        "    public CSVFormat withTrailingDelimiter1(final boolean trailingDelimiter) {\n",
                        "        return builder().setTrailingDelimiter(trailingDelimiter).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withTrailingDelimiter1(boolean)",
                    "parameters": [
                        "trailingDelimiter"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "661-664:setTrailingDelimiter"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2874-2876:withTrailingDelimiter0": {
                    "start": 2874,
                    "end": 2876,
                    "body": [
                        "    public CSVFormat withTrailingDelimiter0() {\n",
                        "        return builder().setTrailingDelimiter(true).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withTrailingDelimiter0()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "661-664:setTrailingDelimiter"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2861-2863:withSystemRecordSeparator": {
                    "start": 2861,
                    "end": 2863,
                    "body": [
                        "    public CSVFormat withSystemRecordSeparator() {\n",
                        "        return builder().setRecordSeparator1(System.lineSeparator()).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withSystemRecordSeparator()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "639-642:setRecordSeparator1"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "lineSeparator()"
                        ]
                    ]
                },
                "2843-2845:withSkipHeaderRecord1": {
                    "start": 2843,
                    "end": 2845,
                    "body": [
                        "    public CSVFormat withSkipHeaderRecord1(final boolean skipHeaderRecord) {\n",
                        "        return builder().setSkipHeaderRecord(skipHeaderRecord).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withSkipHeaderRecord1(boolean)",
                    "parameters": [
                        "skipHeaderRecord"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "650-653:setSkipHeaderRecord"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2829-2831:withSkipHeaderRecord0": {
                    "start": 2829,
                    "end": 2831,
                    "body": [
                        "    public CSVFormat withSkipHeaderRecord0() {\n",
                        "        return builder().setSkipHeaderRecord(true).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withSkipHeaderRecord0()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "650-653:setSkipHeaderRecord"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2813-2815:withRecordSeparator1": {
                    "start": 2813,
                    "end": 2815,
                    "body": [
                        "    public CSVFormat withRecordSeparator1(final String recordSeparator) {\n",
                        "        return builder().setRecordSeparator1(recordSeparator).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withRecordSeparator1(String)",
                    "parameters": [
                        "recordSeparator"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "639-642:setRecordSeparator1"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2796-2798:withRecordSeparator0": {
                    "start": 2796,
                    "end": 2798,
                    "body": [
                        "    public CSVFormat withRecordSeparator0(final char recordSeparator) {\n",
                        "        return builder().setRecordSeparator0(recordSeparator).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withRecordSeparator0(char)",
                    "parameters": [
                        "recordSeparator"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "625-628:setRecordSeparator0"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2780-2782:withQuoteMode": {
                    "start": 2780,
                    "end": 2782,
                    "body": [
                        "    public CSVFormat withQuoteMode(final QuoteMode quoteMode) {\n",
                        "        return builder().setQuoteMode(quoteMode).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withQuoteMode(QuoteMode)",
                    "parameters": [
                        "quoteMode"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "611-614:setQuoteMode"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2767-2769:withQuote1": {
                    "start": 2767,
                    "end": 2769,
                    "body": [
                        "    public CSVFormat withQuote1(final Character quoteChar) {\n",
                        "        return builder().setQuote1(quoteChar).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withQuote1(Character)",
                    "parameters": [
                        "quoteChar"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "597-603:setQuote1"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2753-2755:withQuote0": {
                    "start": 2753,
                    "end": 2755,
                    "body": [
                        "    public CSVFormat withQuote0(final char quoteChar) {\n",
                        "        return builder().setQuote0(quoteChar).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withQuote0(char)",
                    "parameters": [
                        "quoteChar"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "586-589:setQuote0"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2739-2741:withNullString": {
                    "start": 2739,
                    "end": 2741,
                    "body": [
                        "    public CSVFormat withNullString(final String nullString) {\n",
                        "        return builder().setNullString(nullString).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withNullString(String)",
                    "parameters": [
                        "nullString"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "574-578:setNullString"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2718-2720:withIgnoreSurroundingSpaces1": {
                    "start": 2718,
                    "end": 2720,
                    "body": [
                        "    public CSVFormat withIgnoreSurroundingSpaces1(final boolean ignoreSurroundingSpaces) {\n",
                        "        return builder().setIgnoreSurroundingSpaces(ignoreSurroundingSpaces).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withIgnoreSurroundingSpaces1(boolean)",
                    "parameters": [
                        "ignoreSurroundingSpaces"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "554-557:setIgnoreSurroundingSpaces"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2704-2706:withIgnoreSurroundingSpaces0": {
                    "start": 2704,
                    "end": 2706,
                    "body": [
                        "    public CSVFormat withIgnoreSurroundingSpaces0() {\n",
                        "        return builder().setIgnoreSurroundingSpaces(true).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withIgnoreSurroundingSpaces0()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "554-557:setIgnoreSurroundingSpaces"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2688-2690:withIgnoreHeaderCase1": {
                    "start": 2688,
                    "end": 2690,
                    "body": [
                        "    public CSVFormat withIgnoreHeaderCase1(final boolean ignoreHeaderCase) {\n",
                        "        return builder().setIgnoreHeaderCase(ignoreHeaderCase).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withIgnoreHeaderCase1(boolean)",
                    "parameters": [
                        "ignoreHeaderCase"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "541-544:setIgnoreHeaderCase"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2674-2676:withIgnoreHeaderCase0": {
                    "start": 2674,
                    "end": 2676,
                    "body": [
                        "    public CSVFormat withIgnoreHeaderCase0() {\n",
                        "        return builder().setIgnoreHeaderCase(true).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withIgnoreHeaderCase0()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "541-544:setIgnoreHeaderCase"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2660-2662:withIgnoreEmptyLines1": {
                    "start": 2660,
                    "end": 2662,
                    "body": [
                        "    public CSVFormat withIgnoreEmptyLines1(final boolean ignoreEmptyLines) {\n",
                        "        return builder().setIgnoreEmptyLines(ignoreEmptyLines).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withIgnoreEmptyLines1(boolean)",
                    "parameters": [
                        "ignoreEmptyLines"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "528-531:setIgnoreEmptyLines"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2645-2647:withIgnoreEmptyLines0": {
                    "start": 2645,
                    "end": 2647,
                    "body": [
                        "    public CSVFormat withIgnoreEmptyLines0() {\n",
                        "        return builder().setIgnoreEmptyLines(true).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withIgnoreEmptyLines0()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "528-531:setIgnoreEmptyLines"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2629-2631:withHeaderComments": {
                    "start": 2629,
                    "end": 2631,
                    "body": [
                        "    public CSVFormat withHeaderComments(final Object... headerComments) {\n",
                        "        return builder().setHeaderComments0(headerComments).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withHeaderComments(Object[])",
                    "parameters": [
                        "headerComments"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "497-500:setHeaderComments0"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2494-2496:withEscape1": {
                    "start": 2494,
                    "end": 2496,
                    "body": [
                        "    public CSVFormat withEscape1(final Character escape) {\n",
                        "        return builder().setEscape1(escape).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withEscape1(Character)",
                    "parameters": [
                        "escape"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "390-396:setEscape1"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2479-2481:withEscape0": {
                    "start": 2479,
                    "end": 2481,
                    "body": [
                        "    public CSVFormat withEscape0(final char escape) {\n",
                        "        return builder().setEscape0(escape).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withEscape0(char)",
                    "parameters": [
                        "escape"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "378-381:setEscape0"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2464-2466:withDelimiter": {
                    "start": 2464,
                    "end": 2466,
                    "body": [
                        "    public CSVFormat withDelimiter(final char delimiter) {\n",
                        "        return builder().setDelimiter0(delimiter).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withDelimiter(char)",
                    "parameters": [
                        "delimiter"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "337-339:setDelimiter0"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2450-2452:withCommentMarker1": {
                    "start": 2450,
                    "end": 2452,
                    "body": [
                        "    public CSVFormat withCommentMarker1(final Character commentMarker) {\n",
                        "        return builder().setCommentMarker1(commentMarker).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withCommentMarker1(Character)",
                    "parameters": [
                        "commentMarker"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "322-329:setCommentMarker1"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2433-2435:withCommentMarker0": {
                    "start": 2433,
                    "end": 2435,
                    "body": [
                        "    public CSVFormat withCommentMarker0(final char commentMarker) {\n",
                        "        return builder().setCommentMarker0(commentMarker).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withCommentMarker0(char)",
                    "parameters": [
                        "commentMarker"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "308-311:setCommentMarker0"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2416-2418:withAutoFlush": {
                    "start": 2416,
                    "end": 2418,
                    "body": [
                        "    public CSVFormat withAutoFlush(final boolean autoFlush) {\n",
                        "        return builder().setAutoFlush(autoFlush).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withAutoFlush(boolean)",
                    "parameters": [
                        "autoFlush"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "294-297:setAutoFlush"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2403-2405:withAllowMissingColumnNames1": {
                    "start": 2403,
                    "end": 2405,
                    "body": [
                        "    public CSVFormat withAllowMissingColumnNames1(final boolean allowMissingColumnNames) {\n",
                        "        return builder().setAllowMissingColumnNames(allowMissingColumnNames).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withAllowMissingColumnNames1(boolean)",
                    "parameters": [
                        "allowMissingColumnNames"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "283-286:setAllowMissingColumnNames"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2387-2389:withAllowMissingColumnNames0": {
                    "start": 2387,
                    "end": 2389,
                    "body": [
                        "    public CSVFormat withAllowMissingColumnNames0() {\n",
                        "        return builder().setAllowMissingColumnNames(true).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withAllowMissingColumnNames0()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "283-286:setAllowMissingColumnNames"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2367-2373:withAllowDuplicateHeaderNames1": {
                    "start": 2367,
                    "end": 2373,
                    "body": [
                        "    public CSVFormat withAllowDuplicateHeaderNames1(final boolean allowDuplicateHeaderNames) {\n",
                        "        final DuplicateHeaderMode mode =\n",
                        "                allowDuplicateHeaderNames\n",
                        "                        ? DuplicateHeaderMode.ALLOW_ALL\n",
                        "                        : DuplicateHeaderMode.ALLOW_EMPTY;\n",
                        "        return builder().setDuplicateHeaderMode(mode).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withAllowDuplicateHeaderNames1(boolean)",
                    "parameters": [
                        "allowDuplicateHeaderNames"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "365-369:setDuplicateHeaderMode"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2353-2355:withAllowDuplicateHeaderNames0": {
                    "start": 2353,
                    "end": 2355,
                    "body": [
                        "    public CSVFormat withAllowDuplicateHeaderNames0() {\n",
                        "        return builder().setDuplicateHeaderMode(DuplicateHeaderMode.ALLOW_ALL).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "withAllowDuplicateHeaderNames0()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "365-369:setDuplicateHeaderMode"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "2218-2264:toString": {
                    "start": 2218,
                    "end": 2264,
                    "body": [
                        "    public String toString() {\n",
                        "        final StringBuilder sb = new StringBuilder();\n",
                        "        sb.append(\"Delimiter=<\").append(delimiter).append('>');\n",
                        "        if (isEscapeCharacterSet()) {\n",
                        "            sb.append(' ');\n",
                        "            sb.append(\"Escape=<\").append(escapeCharacter).append('>');\n",
                        "        }\n",
                        "        if (isQuoteCharacterSet()) {\n",
                        "            sb.append(' ');\n",
                        "            sb.append(\"QuoteChar=<\").append(quoteCharacter).append('>');\n",
                        "        }\n",
                        "        if (quoteMode != null) {\n",
                        "            sb.append(' ');\n",
                        "            sb.append(\"QuoteMode=<\").append(quoteMode).append('>');\n",
                        "        }\n",
                        "        if (isCommentMarkerSet()) {\n",
                        "            sb.append(' ');\n",
                        "            sb.append(\"CommentStart=<\").append(commentMarker).append('>');\n",
                        "        }\n",
                        "        if (isNullStringSet()) {\n",
                        "            sb.append(' ');\n",
                        "            sb.append(\"NullString=<\").append(nullString).append('>');\n",
                        "        }\n",
                        "        if (recordSeparator != null) {\n",
                        "            sb.append(' ');\n",
                        "            sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>');\n",
                        "        }\n",
                        "        if (getIgnoreEmptyLines()) {\n",
                        "            sb.append(\" EmptyLines:ignored\");\n",
                        "        }\n",
                        "        if (getIgnoreSurroundingSpaces()) {\n",
                        "            sb.append(\" SurroundingSpaces:ignored\");\n",
                        "        }\n",
                        "        if (getIgnoreHeaderCase()) {\n",
                        "            sb.append(\" IgnoreHeaderCase:ignored\");\n",
                        "        }\n",
                        "        sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord);\n",
                        "        if (headerComments != null) {\n",
                        "            sb.append(' ');\n",
                        "            sb.append(\"HeaderComments:\").append(Arrays.toString(headerComments));\n",
                        "        }\n",
                        "        if (headers != null) {\n",
                        "            sb.append(' ');\n",
                        "            sb.append(\"Header:\").append(Arrays.toString(headers));\n",
                        "        }\n",
                        "        return sb.toString();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "toString()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(char)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.String)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1767-1769:isEscapeCharacterSet"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.Object)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1785-1787:isQuoteCharacterSet"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1727-1729:isCommentMarkerSet"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1776-1778:isNullStringSet"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1595-1597:getIgnoreEmptyLines"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1616-1618:getIgnoreSurroundingSpaces"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1606-1608:getIgnoreHeaderCase"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "toString(java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ]
                    ]
                },
                "1899-1901:print4": {
                    "start": 1899,
                    "end": 1901,
                    "body": [
                        "    public CSVPrinter print4(final Path out, final Charset charset) throws IOException {\n",
                        "        return print0(Files.newBufferedWriter(out, charset));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "SuppressWarnings(\"resource\")"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVPrinter",
                            "CSVPrinter"
                        ]
                    ],
                    "signature": "print4(Path, Charset)",
                    "parameters": [
                        "out",
                        "charset"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1811-1813:print0"
                        ],
                        [
                            "library",
                            "java.base/java/nio/file/Files",
                            "newBufferedWriter(java.nio.file.Path,java.nio.charset.Charset,java.nio.file.OpenOption[])"
                        ]
                    ]
                },
                "1827-1829:print1": {
                    "start": 1827,
                    "end": 1829,
                    "body": [
                        "    public CSVPrinter print1(final File out, final Charset charset) throws IOException {\n",
                        "        return new CSVPrinter(new OutputStreamWriter(new FileOutputStream(out), charset), this);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "SuppressWarnings(\"resource\")"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVPrinter",
                            "CSVPrinter"
                        ]
                    ],
                    "signature": "print1(File, Charset)",
                    "parameters": [
                        "out",
                        "charset"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVPrinter",
                            "CSVPrinter",
                            "88-103:CSVPrinter"
                        ],
                        [
                            "library",
                            "java.base/java/io/OutputStreamWriter",
                            "OutputStreamWriter(java.io.OutputStream,java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "java.base/java/io/FileOutputStream",
                            "FileOutputStream(java.io.File)"
                        ]
                    ]
                },
                "1694-1718:hashCode": {
                    "start": 1694,
                    "end": 1718,
                    "body": [
                        "    public int hashCode() {\n",
                        "        final int prime = 31;\n",
                        "        int result = 1;\n",
                        "        result = prime * result + Arrays.hashCode(headers);\n",
                        "        result = prime * result + Arrays.hashCode(headerComments);\n",
                        "        return prime * result\n",
                        "                + Objects.hash(\n",
                        "                        duplicateHeaderMode,\n",
                        "                        allowMissingColumnNames,\n",
                        "                        autoFlush,\n",
                        "                        commentMarker,\n",
                        "                        delimiter,\n",
                        "                        escapeCharacter,\n",
                        "                        ignoreEmptyLines,\n",
                        "                        ignoreHeaderCase,\n",
                        "                        ignoreSurroundingSpaces,\n",
                        "                        nullString,\n",
                        "                        quoteCharacter,\n",
                        "                        quoteMode,\n",
                        "                        quotedNullString,\n",
                        "                        recordSeparator,\n",
                        "                        skipHeaderRecord,\n",
                        "                        trailingDelimiter,\n",
                        "                        trim);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "hashCode()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "hashCode(java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/util/Objects",
                            "hash(java.lang.Object[])"
                        ]
                    ]
                },
                "1537-1539:getDelimiter": {
                    "start": 1537,
                    "end": 1539,
                    "body": [
                        "    public char getDelimiter() {\n",
                        "        return delimiter.charAt(0);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "char",
                            "char"
                        ]
                    ],
                    "signature": "getDelimiter()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "charAt(int)"
                        ]
                    ]
                },
                "1497-1499:getAllowDuplicateHeaderNames": {
                    "start": 1497,
                    "end": 1499,
                    "body": [
                        "    public boolean getAllowDuplicateHeaderNames() {\n",
                        "        return duplicateHeaderMode == DuplicateHeaderMode.ALLOW_ALL;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "getAllowDuplicateHeaderNames()",
                    "parameters": [],
                    "calls": []
                },
                "1439-1466:equals": {
                    "start": 1439,
                    "end": 1466,
                    "body": [
                        "    public boolean equals(final Object obj) {\n",
                        "        if (this == obj) {\n",
                        "            return true;\n",
                        "        }\n",
                        "        if (obj == null || getClass() != obj.getClass()) {\n",
                        "            return false;\n",
                        "        }\n",
                        "        final CSVFormat other = (CSVFormat) obj;\n",
                        "        return duplicateHeaderMode == other.duplicateHeaderMode\n",
                        "                && allowMissingColumnNames == other.allowMissingColumnNames\n",
                        "                && autoFlush == other.autoFlush\n",
                        "                && Objects.equals(commentMarker, other.commentMarker)\n",
                        "                && Objects.equals(delimiter, other.delimiter)\n",
                        "                && Objects.equals(escapeCharacter, other.escapeCharacter)\n",
                        "                && Arrays.equals(headers, other.headers)\n",
                        "                && Arrays.equals(headerComments, other.headerComments)\n",
                        "                && ignoreEmptyLines == other.ignoreEmptyLines\n",
                        "                && ignoreHeaderCase == other.ignoreHeaderCase\n",
                        "                && ignoreSurroundingSpaces == other.ignoreSurroundingSpaces\n",
                        "                && Objects.equals(nullString, other.nullString)\n",
                        "                && Objects.equals(quoteCharacter, other.quoteCharacter)\n",
                        "                && quoteMode == other.quoteMode\n",
                        "                && Objects.equals(quotedNullString, other.quotedNullString)\n",
                        "                && Objects.equals(recordSeparator, other.recordSeparator)\n",
                        "                && skipHeaderRecord == other.skipHeaderRecord\n",
                        "                && trailingDelimiter == other.trailingDelimiter\n",
                        "                && trim == other.trim;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "equals(Object)",
                    "parameters": [
                        "obj"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "getClass()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Objects",
                            "equals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "equals(java.lang.Object[],java.lang.Object[])"
                        ]
                    ]
                },
                "1143-1145:clone": {
                    "start": 1143,
                    "end": 1145,
                    "body": [
                        "    static <T> T[] clone(final T... values) {\n",
                        "        return values == null ? null : values.clone();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "SafeVarargs"
                    ],
                    "modifiers": [
                        "static"
                    ],
                    "return_types": [
                        [
                            "T[]",
                            "T[]"
                        ]
                    ],
                    "signature": "clone(T[])",
                    "parameters": [
                        "values"
                    ],
                    "calls": []
                },
                "1961-1967:printRecord": {
                    "start": 1961,
                    "end": 1967,
                    "body": [
                        "    public synchronized void printRecord(final Appendable appendable, final Object... values)\n",
                        "            throws IOException {\n",
                        "        for (int i = 0; i < values.length; i++) {\n",
                        "            print2(values[i], appendable, i == 0);\n",
                        "        }\n",
                        "        println(appendable);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "synchronized"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "printRecord(Appendable, Object[])",
                    "parameters": [
                        "appendable",
                        "values"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1842-1863:print2"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1939-1946:println"
                        ]
                    ]
                },
                "1939-1946:println": {
                    "start": 1939,
                    "end": 1946,
                    "body": [
                        "    public synchronized void println(final Appendable appendable) throws IOException {\n",
                        "        if (getTrailingDelimiter()) {\n",
                        "            append1(getDelimiterString(), appendable);\n",
                        "        }\n",
                        "        if (recordSeparator != null) {\n",
                        "            append1(recordSeparator, appendable);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "synchronized"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "println(Appendable)",
                    "parameters": [
                        "appendable"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1679-1681:getTrailingDelimiter"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1416-1418:append1"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1547-1549:getDelimiterString"
                        ]
                    ]
                },
                "1928-1930:printer": {
                    "start": 1928,
                    "end": 1930,
                    "body": [
                        "    public CSVPrinter printer() throws IOException {\n",
                        "        return new CSVPrinter(System.out, this);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVPrinter",
                            "CSVPrinter"
                        ]
                    ],
                    "signature": "printer()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVPrinter",
                            "CSVPrinter",
                            "88-103:CSVPrinter"
                        ]
                    ]
                },
                "1842-1863:print2": {
                    "start": 1842,
                    "end": 1863,
                    "body": [
                        "    public synchronized void print2(\n",
                        "            final Object value, final Appendable out, final boolean newRecord) throws IOException {\n",
                        "        CharSequence charSequence;\n",
                        "        if (value == null) {\n",
                        "            if (null == nullString) {\n",
                        "                charSequence = EMPTY;\n",
                        "            } else if (QuoteMode.ALL == quoteMode) {\n",
                        "                charSequence = quotedNullString;\n",
                        "            } else {\n",
                        "                charSequence = nullString;\n",
                        "            }\n",
                        "        } else if (value instanceof CharSequence) {\n",
                        "            charSequence = (CharSequence) value;\n",
                        "        } else if (value instanceof Reader) {\n",
                        "            print5((Reader) value, out, newRecord);\n",
                        "            return;\n",
                        "        } else {\n",
                        "            charSequence = value.toString();\n",
                        "        }\n",
                        "        charSequence = getTrim() ? trim0(charSequence) : charSequence;\n",
                        "        print3(value, charSequence, out, newRecord);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "synchronized"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "print2(Object, Appendable, boolean)",
                    "parameters": [
                        "value",
                        "out",
                        "newRecord"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1903-1917:print5"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "toString()"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1689-1691:getTrim"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1250-1265:trim0"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1865-1885:print3"
                        ]
                    ]
                },
                "1811-1813:print0": {
                    "start": 1811,
                    "end": 1813,
                    "body": [
                        "    public CSVPrinter print0(final Appendable out) throws IOException {\n",
                        "        return new CSVPrinter(out, this);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVPrinter",
                            "CSVPrinter"
                        ]
                    ],
                    "signature": "print0(Appendable)",
                    "parameters": [
                        "out"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVPrinter",
                            "CSVPrinter",
                            "88-103:CSVPrinter"
                        ]
                    ]
                },
                "1798-1800:parse": {
                    "start": 1798,
                    "end": 1800,
                    "body": [
                        "    public CSVParser parse(final Reader reader) throws IOException {\n",
                        "        return CSVParser.CSVParser1(reader, this);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVParser",
                            "CSVParser"
                        ]
                    ],
                    "signature": "parse(Reader)",
                    "parameters": [
                        "reader"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "377-380:CSVParser1"
                        ]
                    ]
                },
                "1785-1787:isQuoteCharacterSet": {
                    "start": 1785,
                    "end": 1787,
                    "body": [
                        "    public boolean isQuoteCharacterSet() {\n",
                        "        return quoteCharacter != null;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isQuoteCharacterSet()",
                    "parameters": [],
                    "calls": []
                },
                "1776-1778:isNullStringSet": {
                    "start": 1776,
                    "end": 1778,
                    "body": [
                        "    public boolean isNullStringSet() {\n",
                        "        return nullString != null;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isNullStringSet()",
                    "parameters": [],
                    "calls": []
                },
                "1767-1769:isEscapeCharacterSet": {
                    "start": 1767,
                    "end": 1769,
                    "body": [
                        "    public boolean isEscapeCharacterSet() {\n",
                        "        return escapeCharacter != null;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isEscapeCharacterSet()",
                    "parameters": [],
                    "calls": []
                },
                "1727-1729:isCommentMarkerSet": {
                    "start": 1727,
                    "end": 1729,
                    "body": [
                        "    public boolean isCommentMarkerSet() {\n",
                        "        return commentMarker != null;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isCommentMarkerSet()",
                    "parameters": [],
                    "calls": []
                },
                "1689-1691:getTrim": {
                    "start": 1689,
                    "end": 1691,
                    "body": [
                        "    public boolean getTrim() {\n",
                        "        return trim;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "getTrim()",
                    "parameters": [],
                    "calls": []
                },
                "1679-1681:getTrailingDelimiter": {
                    "start": 1679,
                    "end": 1681,
                    "body": [
                        "    public boolean getTrailingDelimiter() {\n",
                        "        return trailingDelimiter;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "getTrailingDelimiter()",
                    "parameters": [],
                    "calls": []
                },
                "1669-1671:getSkipHeaderRecord": {
                    "start": 1669,
                    "end": 1671,
                    "body": [
                        "    public boolean getSkipHeaderRecord() {\n",
                        "        return skipHeaderRecord;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "getSkipHeaderRecord()",
                    "parameters": [],
                    "calls": []
                },
                "1660-1662:getRecordSeparator": {
                    "start": 1660,
                    "end": 1662,
                    "body": [
                        "    public String getRecordSeparator() {\n",
                        "        return recordSeparator;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "getRecordSeparator()",
                    "parameters": [],
                    "calls": []
                },
                "1651-1653:getQuoteMode": {
                    "start": 1651,
                    "end": 1653,
                    "body": [
                        "    public QuoteMode getQuoteMode() {\n",
                        "        return quoteMode;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "QuoteMode",
                            "QuoteMode"
                        ]
                    ],
                    "signature": "getQuoteMode()",
                    "parameters": [],
                    "calls": []
                },
                "1642-1644:getQuoteCharacter": {
                    "start": 1642,
                    "end": 1644,
                    "body": [
                        "    public Character getQuoteCharacter() {\n",
                        "        return quoteCharacter;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Character",
                            "java.lang.Character"
                        ]
                    ],
                    "signature": "getQuoteCharacter()",
                    "parameters": [],
                    "calls": []
                },
                "1633-1635:getNullString": {
                    "start": 1633,
                    "end": 1635,
                    "body": [
                        "    public String getNullString() {\n",
                        "        return nullString;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "getNullString()",
                    "parameters": [],
                    "calls": []
                },
                "1616-1618:getIgnoreSurroundingSpaces": {
                    "start": 1616,
                    "end": 1618,
                    "body": [
                        "    public boolean getIgnoreSurroundingSpaces() {\n",
                        "        return ignoreSurroundingSpaces;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "getIgnoreSurroundingSpaces()",
                    "parameters": [],
                    "calls": []
                },
                "1606-1608:getIgnoreHeaderCase": {
                    "start": 1606,
                    "end": 1608,
                    "body": [
                        "    public boolean getIgnoreHeaderCase() {\n",
                        "        return ignoreHeaderCase;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "getIgnoreHeaderCase()",
                    "parameters": [],
                    "calls": []
                },
                "1595-1597:getIgnoreEmptyLines": {
                    "start": 1595,
                    "end": 1597,
                    "body": [
                        "    public boolean getIgnoreEmptyLines() {\n",
                        "        return ignoreEmptyLines;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "getIgnoreEmptyLines()",
                    "parameters": [],
                    "calls": []
                },
                "1585-1587:getHeaderComments": {
                    "start": 1585,
                    "end": 1587,
                    "body": [
                        "    public String[] getHeaderComments() {\n",
                        "        return headerComments != null ? headerComments.clone() : null;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String[]",
                            "java.lang.String[]"
                        ]
                    ],
                    "signature": "getHeaderComments()",
                    "parameters": [],
                    "calls": []
                },
                "1576-1578:getHeader": {
                    "start": 1576,
                    "end": 1578,
                    "body": [
                        "    public String[] getHeader() {\n",
                        "        return headers != null ? headers.clone() : null;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String[]",
                            "java.lang.String[]"
                        ]
                    ],
                    "signature": "getHeader()",
                    "parameters": [],
                    "calls": []
                },
                "1566-1568:getEscapeCharacter": {
                    "start": 1566,
                    "end": 1568,
                    "body": [
                        "    public Character getEscapeCharacter() {\n",
                        "        return escapeCharacter;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Character",
                            "java.lang.Character"
                        ]
                    ],
                    "signature": "getEscapeCharacter()",
                    "parameters": [],
                    "calls": []
                },
                "1557-1559:getDuplicateHeaderMode": {
                    "start": 1557,
                    "end": 1559,
                    "body": [
                        "    public DuplicateHeaderMode getDuplicateHeaderMode() {\n",
                        "        return duplicateHeaderMode;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "DuplicateHeaderMode",
                            "DuplicateHeaderMode"
                        ]
                    ],
                    "signature": "getDuplicateHeaderMode()",
                    "parameters": [],
                    "calls": []
                },
                "1547-1549:getDelimiterString": {
                    "start": 1547,
                    "end": 1549,
                    "body": [
                        "    public String getDelimiterString() {\n",
                        "        return delimiter;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "getDelimiterString()",
                    "parameters": [],
                    "calls": []
                },
                "1526-1528:getCommentMarker": {
                    "start": 1526,
                    "end": 1528,
                    "body": [
                        "    public Character getCommentMarker() {\n",
                        "        return commentMarker;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Character",
                            "java.lang.Character"
                        ]
                    ],
                    "signature": "getCommentMarker()",
                    "parameters": [],
                    "calls": []
                },
                "1517-1519:getAutoFlush": {
                    "start": 1517,
                    "end": 1519,
                    "body": [
                        "    public boolean getAutoFlush() {\n",
                        "        return autoFlush;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "getAutoFlush()",
                    "parameters": [],
                    "calls": []
                },
                "1507-1509:getAllowMissingColumnNames": {
                    "start": 1507,
                    "end": 1509,
                    "body": [
                        "    public boolean getAllowMissingColumnNames() {\n",
                        "        return allowMissingColumnNames;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "getAllowMissingColumnNames()",
                    "parameters": [],
                    "calls": []
                },
                "1474-1487:format": {
                    "start": 1474,
                    "end": 1487,
                    "body": [
                        "    public String format(final Object... values) {\n",
                        "        final StringWriter out = new StringWriter();\n",
                        "        try (CSVPrinter csvPrinter = new CSVPrinter(out, this)) {\n",
                        "            csvPrinter.printRecord1(values);\n",
                        "            final String res = out.toString();\n",
                        "            final int len =\n",
                        "                    recordSeparator != null\n",
                        "                            ? res.length() - recordSeparator.length()\n",
                        "                            : res.length();\n",
                        "            return res.substring(0, len);\n",
                        "        } catch (final IOException e) {\n",
                        "            throw new IllegalStateException(e);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "format(Object[])",
                    "parameters": [
                        "values"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/StringWriter",
                            "StringWriter()"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVPrinter",
                            "CSVPrinter",
                            "88-103:CSVPrinter"
                        ],
                        [
                            "library",
                            "java.base/java/io/StringWriter",
                            "toString()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVPrinter",
                            "CSVPrinter",
                            "257-259:printRecord1"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "substring(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalStateException",
                            "IllegalStateException(java.lang.Throwable)"
                        ]
                    ]
                },
                "1425-1427:builder": {
                    "start": 1425,
                    "end": 1427,
                    "body": [
                        "    public Builder builder() {\n",
                        "        return Builder.create1(this);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Builder",
                            "Builder"
                        ]
                    ],
                    "signature": "builder()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "181-183:create1"
                        ]
                    ]
                },
                "1317-1383:CSVFormat": {
                    "start": 1317,
                    "end": 1383,
                    "body": [
                        "    public CSVFormat(\n",
                        "            int constructorId,\n",
                        "            final boolean autoFlush,\n",
                        "            final boolean skipHeaderRecord,\n",
                        "            final String delimiter,\n",
                        "            final String nullString,\n",
                        "            final Character escape,\n",
                        "            final boolean ignoreSurroundingSpaces,\n",
                        "            final boolean trim,\n",
                        "            final Builder builder,\n",
                        "            final Character commentStart,\n",
                        "            final boolean ignoreHeaderCase,\n",
                        "            final Character quoteChar,\n",
                        "            final QuoteMode quoteMode,\n",
                        "            final boolean ignoreEmptyLines,\n",
                        "            final DuplicateHeaderMode duplicateHeaderMode,\n",
                        "            final String[] header,\n",
                        "            final boolean allowMissingColumnNames,\n",
                        "            final boolean trailingDelimiter,\n",
                        "            final Object[] headerComments,\n",
                        "            final String recordSeparator) {\n",
                        "        if (constructorId == 0) {\n",
                        "\n",
                        "            this.delimiter = delimiter;\n",
                        "            this.quoteCharacter = quoteChar;\n",
                        "            this.quoteMode = quoteMode;\n",
                        "            this.commentMarker = commentStart;\n",
                        "            this.escapeCharacter = escape;\n",
                        "            this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\n",
                        "            this.allowMissingColumnNames = allowMissingColumnNames;\n",
                        "            this.ignoreEmptyLines = ignoreEmptyLines;\n",
                        "            this.recordSeparator = recordSeparator;\n",
                        "            this.nullString = nullString;\n",
                        "            this.headerComments = toStringArray(headerComments);\n",
                        "            this.headers = clone(header);\n",
                        "            this.skipHeaderRecord = skipHeaderRecord;\n",
                        "            this.ignoreHeaderCase = ignoreHeaderCase;\n",
                        "            this.trailingDelimiter = trailingDelimiter;\n",
                        "            this.trim = trim;\n",
                        "            this.autoFlush = autoFlush;\n",
                        "            this.quotedNullString = quoteCharacter + nullString + quoteCharacter;\n",
                        "            this.duplicateHeaderMode = duplicateHeaderMode;\n",
                        "            validate();\n",
                        "        } else {\n",
                        "\n",
                        "            this.delimiter = builder.delimiter;\n",
                        "            this.quoteCharacter = builder.quoteCharacter;\n",
                        "            this.quoteMode = builder.quoteMode;\n",
                        "            this.commentMarker = builder.commentMarker;\n",
                        "            this.escapeCharacter = builder.escapeCharacter;\n",
                        "            this.ignoreSurroundingSpaces = builder.ignoreSurroundingSpaces;\n",
                        "            this.allowMissingColumnNames = builder.allowMissingColumnNames;\n",
                        "            this.ignoreEmptyLines = builder.ignoreEmptyLines;\n",
                        "            this.recordSeparator = builder.recordSeparator;\n",
                        "            this.nullString = builder.nullString;\n",
                        "            this.headerComments = builder.headerComments;\n",
                        "            this.headers = builder.headers;\n",
                        "            this.skipHeaderRecord = builder.skipHeaderRecord;\n",
                        "            this.ignoreHeaderCase = builder.ignoreHeaderCase;\n",
                        "            this.trailingDelimiter = builder.trailingDelimiter;\n",
                        "            this.trim = builder.trim;\n",
                        "            this.autoFlush = builder.autoFlush;\n",
                        "            this.quotedNullString = builder.quotedNullString;\n",
                        "            this.duplicateHeaderMode = builder.duplicateHeaderMode;\n",
                        "            validate();\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "CSVFormat(int, boolean, boolean, String, String, Character, boolean, boolean, Builder, Character, boolean, Character, QuoteMode, boolean, DuplicateHeaderMode, String[], boolean, boolean, Object[], String)",
                    "parameters": [
                        "constructorId",
                        "autoFlush",
                        "skipHeaderRecord",
                        "delimiter",
                        "nullString",
                        "escape",
                        "ignoreSurroundingSpaces",
                        "trim",
                        "builder",
                        "commentStart",
                        "ignoreHeaderCase",
                        "quoteChar",
                        "quoteMode",
                        "ignoreEmptyLines",
                        "duplicateHeaderMode",
                        "header",
                        "allowMissingColumnNames",
                        "trailingDelimiter",
                        "headerComments",
                        "recordSeparator"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1241-1248:toStringArray"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1143-1145:clone"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "2281-2342:validate"
                        ]
                    ]
                },
                "1274-1276:valueOf": {
                    "start": 1274,
                    "end": 1276,
                    "body": [
                        "    public static CSVFormat valueOf(final String format) {\n",
                        "        return CSVFormat.Predefined.valueOf(format).getFormat();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "valueOf(String)",
                    "parameters": [
                        "format"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Predefined",
                            "761-763:getFormat"
                        ],
                        [
                            "library",
                            "org/apache/commons/csv/CSVFormat$Predefined",
                            "valueOf(java.lang.String)"
                        ]
                    ]
                },
                "1250-1265:trim0": {
                    "start": 1250,
                    "end": 1265,
                    "body": [
                        "    static CharSequence trim0(final CharSequence charSequence) {\n",
                        "        if (charSequence instanceof String) {\n",
                        "            return ((String) charSequence).trim();\n",
                        "        }\n",
                        "        final int count = charSequence.length();\n",
                        "        int len = count;\n",
                        "        int pos = 0;\n",
                        "\n",
                        "        while (pos < len && isTrimChar1(charSequence, pos)) {\n",
                        "            pos++;\n",
                        "        }\n",
                        "        while (pos < len && isTrimChar1(charSequence, len - 1)) {\n",
                        "            len--;\n",
                        "        }\n",
                        "        return pos > 0 || len < count ? charSequence.subSequence(pos, len) : charSequence;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static"
                    ],
                    "return_types": [
                        [
                            "CharSequence",
                            "java.lang.CharSequence"
                        ]
                    ],
                    "signature": "trim0(CharSequence)",
                    "parameters": [
                        "charSequence"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "trim()"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1198-1200:isTrimChar1"
                        ],
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "subSequence(int,int)"
                        ]
                    ]
                },
                "1241-1248:toStringArray": {
                    "start": 1241,
                    "end": 1248,
                    "body": [
                        "    static String[] toStringArray(final Object[] values) {\n",
                        "        if (values == null) {\n",
                        "            return null;\n",
                        "        }\n",
                        "        final String[] strings = new String[values.length];\n",
                        "        Arrays.setAll(strings, i -> Objects.toString(values[i], null));\n",
                        "        return strings;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static"
                    ],
                    "return_types": [
                        [
                            "String[]",
                            "java.lang.String[]"
                        ]
                    ],
                    "signature": "toStringArray(Object[])",
                    "parameters": [
                        "values"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "setAll(java.lang.Object[],java.util.function.IntFunction)"
                        ]
                    ]
                },
                "1217-1239:newFormat": {
                    "start": 1217,
                    "end": 1239,
                    "body": [
                        "    public static CSVFormat newFormat(final char delimiter) {\n",
                        "        return new CSVFormat(\n",
                        "                0,\n",
                        "                false,\n",
                        "                false,\n",
                        "                String.valueOf(delimiter),\n",
                        "                null,\n",
                        "                null,\n",
                        "                false,\n",
                        "                false,\n",
                        "                null,\n",
                        "                null,\n",
                        "                false,\n",
                        "                null,\n",
                        "                null,\n",
                        "                false,\n",
                        "                DuplicateHeaderMode.ALLOW_ALL,\n",
                        "                null,\n",
                        "                false,\n",
                        "                false,\n",
                        "                null,\n",
                        "                null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "newFormat(char)",
                    "parameters": [
                        "delimiter"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1317-1383:CSVFormat"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "valueOf(char)"
                        ]
                    ]
                },
                "1168-1170:isBlank": {
                    "start": 1168,
                    "end": 1170,
                    "body": [
                        "    static boolean isBlank(final String value) {\n",
                        "        return value == null || value.trim().isEmpty();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isBlank(String)",
                    "parameters": [
                        "value"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "isEmpty()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "trim()"
                        ]
                    ]
                },
                "2281-2342:validate": {
                    "start": 2281,
                    "end": 2342,
                    "body": [
                        "    private void validate() throws IllegalArgumentException {\n",
                        "        if (containsLineBreak(delimiter)) {\n",
                        "            throw new IllegalArgumentException(\"The delimiter cannot be a line break\");\n",
                        "        }\n",
                        "\n",
                        "        if (quoteCharacter != null && contains(delimiter, quoteCharacter.charValue())) {\n",
                        "            throw new IllegalArgumentException(\n",
                        "                    \"The quoteChar character and the delimiter cannot be the same ('\"\n",
                        "                            + quoteCharacter\n",
                        "                            + \"')\");\n",
                        "        }\n",
                        "\n",
                        "        if (escapeCharacter != null && contains(delimiter, escapeCharacter.charValue())) {\n",
                        "            throw new IllegalArgumentException(\n",
                        "                    \"The escape character and the delimiter cannot be the same ('\"\n",
                        "                            + escapeCharacter\n",
                        "                            + \"')\");\n",
                        "        }\n",
                        "\n",
                        "        if (commentMarker != null && contains(delimiter, commentMarker.charValue())) {\n",
                        "            throw new IllegalArgumentException(\n",
                        "                    \"The comment start character and the delimiter cannot be the same ('\"\n",
                        "                            + commentMarker\n",
                        "                            + \"')\");\n",
                        "        }\n",
                        "\n",
                        "        if (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {\n",
                        "            throw new IllegalArgumentException(\n",
                        "                    \"The comment start character and the quoteChar cannot be the same ('\"\n",
                        "                            + commentMarker\n",
                        "                            + \"')\");\n",
                        "        }\n",
                        "\n",
                        "        if (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {\n",
                        "            throw new IllegalArgumentException(\n",
                        "                    \"The comment start and the escape character cannot be the same ('\"\n",
                        "                            + commentMarker\n",
                        "                            + \"')\");\n",
                        "        }\n",
                        "\n",
                        "        if (escapeCharacter == null && quoteMode == QuoteMode.NONE) {\n",
                        "            throw new IllegalArgumentException(\"No quotes mode set but no escape character is set\");\n",
                        "        }\n",
                        "\n",
                        "        if (headers != null && duplicateHeaderMode != DuplicateHeaderMode.ALLOW_ALL) {\n",
                        "            final Set<String> dupCheckSet = new HashSet<>(headers.length);\n",
                        "            final boolean emptyDuplicatesAllowed =\n",
                        "                    duplicateHeaderMode == DuplicateHeaderMode.ALLOW_EMPTY;\n",
                        "            for (final String header : headers) {\n",
                        "                final boolean blank = isBlank(header);\n",
                        "                final boolean containsHeader = !dupCheckSet.add(blank ? \"\" : header);\n",
                        "                if (containsHeader && !(blank && emptyDuplicatesAllowed)) {\n",
                        "                    throw new IllegalArgumentException(\n",
                        "                            String.format(\n",
                        "                                    \"The header contains a duplicate name: \\\"%s\\\" in %s. If this is\"\n",
                        "                                            + \" valid then use\"\n",
                        "                                            + \" CSVFormat.Builder.setDuplicateHeaderMode().\",\n",
                        "                                    header, Arrays.toString(headers)));\n",
                        "                }\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "validate()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1164-1166:containsLineBreak"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalArgumentException",
                            "IllegalArgumentException(java.lang.String)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1154-1156:contains"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Character",
                            "charValue()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Character",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "HashSet<String>(int)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1168-1170:isBlank"
                        ],
                        [
                            "library",
                            "java.base/java/util/Set",
                            "add(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "toString(java.lang.Object[])"
                        ]
                    ]
                },
                "2179-2215:printWithQuotes1": {
                    "start": 2179,
                    "end": 2215,
                    "body": [
                        "    private void printWithQuotes1(final Reader reader, final Appendable appendable)\n",
                        "            throws IOException {\n",
                        "\n",
                        "        if (getQuoteMode() == QuoteMode.NONE) {\n",
                        "            printWithEscapes1(reader, appendable);\n",
                        "            return;\n",
                        "        }\n",
                        "\n",
                        "        int pos = 0;\n",
                        "\n",
                        "        final char quote = getQuoteCharacter().charValue();\n",
                        "        final StringBuilder builder = new StringBuilder(IOUtils.DEFAULT_BUFFER_SIZE);\n",
                        "\n",
                        "        append0(quote, appendable);\n",
                        "\n",
                        "        int c;\n",
                        "        while (-1 != (c = reader.read())) {\n",
                        "            builder.append((char) c);\n",
                        "            if (c == quote) {\n",
                        "                if (pos > 0) {\n",
                        "                    append1(builder.substring(0, pos), appendable);\n",
                        "                    append0(quote, appendable);\n",
                        "                    builder.setLength(0);\n",
                        "                    pos = -1;\n",
                        "                }\n",
                        "\n",
                        "                append0((char) c, appendable);\n",
                        "            }\n",
                        "            pos++;\n",
                        "        }\n",
                        "\n",
                        "        if (pos > 0) {\n",
                        "            append1(builder.substring(0, pos), appendable);\n",
                        "        }\n",
                        "\n",
                        "        append0(quote, appendable);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "printWithQuotes1(Reader, Appendable)",
                    "parameters": [
                        "reader",
                        "appendable"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Character",
                            "charValue()"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1642-1644:getQuoteCharacter"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder(int)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1651-1653:getQuoteMode"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "2017-2071:printWithEscapes1"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1412-1414:append0"
                        ],
                        [
                            "library",
                            "java.base/java/io/Reader",
                            "read()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(char)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1416-1418:append1"
                        ],
                        [
                            "library",
                            "java.base/java/lang/AbstractStringBuilder",
                            "substring(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/AbstractStringBuilder",
                            "setLength(int)"
                        ]
                    ]
                },
                "2076-2170:printWithQuotes0": {
                    "start": 2076,
                    "end": 2170,
                    "body": [
                        "    private void printWithQuotes0(\n",
                        "            final Object object,\n",
                        "            final CharSequence charSeq,\n",
                        "            final Appendable out,\n",
                        "            final boolean newRecord)\n",
                        "            throws IOException {\n",
                        "        boolean quote = false;\n",
                        "        int start = 0;\n",
                        "        int pos = 0;\n",
                        "        final int len = charSeq.length();\n",
                        "\n",
                        "        final char[] delim = getDelimiterString().toCharArray();\n",
                        "        final int delimLength = delim.length;\n",
                        "        final char quoteChar = getQuoteCharacter().charValue();\n",
                        "        final char escapeChar =\n",
                        "                isEscapeCharacterSet() ? getEscapeCharacter().charValue() : quoteChar;\n",
                        "\n",
                        "        QuoteMode quoteModePolicy = getQuoteMode();\n",
                        "        if (quoteModePolicy == null) {\n",
                        "            quoteModePolicy = QuoteMode.MINIMAL;\n",
                        "        }\n",
                        "        switch (quoteModePolicy) {\n",
                        "            case ALL:\n",
                        "            case ALL_NON_NULL:\n",
                        "                quote = true;\n",
                        "                break;\n",
                        "            case NON_NUMERIC:\n",
                        "                quote = !(object instanceof Number);\n",
                        "                break;\n",
                        "            case NONE:\n",
                        "                printWithEscapes0(charSeq, out);\n",
                        "                return;\n",
                        "            case MINIMAL:\n",
                        "                if (len <= 0) {\n",
                        "                    if (newRecord) {\n",
                        "                        quote = true;\n",
                        "                    }\n",
                        "                } else {\n",
                        "                    char c = charSeq.charAt(pos);\n",
                        "\n",
                        "                    if (c <= COMMENT) {\n",
                        "                        quote = true;\n",
                        "                    } else {\n",
                        "                        while (pos < len) {\n",
                        "                            c = charSeq.charAt(pos);\n",
                        "                            if (c == LF\n",
                        "                                    || c == CR\n",
                        "                                    || c == quoteChar\n",
                        "                                    || c == escapeChar\n",
                        "                                    || isDelimiter(c, charSeq, pos, delim, delimLength)) {\n",
                        "                                quote = true;\n",
                        "                                break;\n",
                        "                            }\n",
                        "                            pos++;\n",
                        "                        }\n",
                        "\n",
                        "                        if (!quote) {\n",
                        "                            pos = len - 1;\n",
                        "                            c = charSeq.charAt(pos);\n",
                        "                            if (isTrimChar0(c)) {\n",
                        "                                quote = true;\n",
                        "                            }\n",
                        "                        }\n",
                        "                    }\n",
                        "                }\n",
                        "\n",
                        "                if (!quote) {\n",
                        "                    out.append(charSeq, start, len);\n",
                        "                    return;\n",
                        "                }\n",
                        "                break;\n",
                        "            default:\n",
                        "                throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n",
                        "        }\n",
                        "\n",
                        "        if (!quote) {\n",
                        "            out.append(charSeq, start, len);\n",
                        "            return;\n",
                        "        }\n",
                        "\n",
                        "        out.append(quoteChar);\n",
                        "\n",
                        "        while (pos < len) {\n",
                        "            final char c = charSeq.charAt(pos);\n",
                        "            if (c == quoteChar || c == escapeChar) {\n",
                        "                out.append(charSeq, start, pos);\n",
                        "                out.append(escapeChar); // now output the escape\n",
                        "                start = pos; // and restart with the matched char\n",
                        "            }\n",
                        "            pos++;\n",
                        "        }\n",
                        "\n",
                        "        out.append(charSeq, start, pos);\n",
                        "        out.append(quoteChar);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "printWithQuotes0(Object, CharSequence, Appendable, boolean)",
                    "parameters": [
                        "object",
                        "charSeq",
                        "out",
                        "newRecord"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "toCharArray()"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1547-1549:getDelimiterString"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Character",
                            "charValue()"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1642-1644:getQuoteCharacter"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1767-1769:isEscapeCharacterSet"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1566-1568:getEscapeCharacter"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1651-1653:getQuoteMode"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1972-2015:printWithEscapes0"
                        ],
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "charAt(int)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1741-1760:isDelimiter"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1193-1195:isTrimChar0"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Appendable",
                            "append(java.lang.CharSequence,int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalStateException",
                            "IllegalStateException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Appendable",
                            "append(char)"
                        ]
                    ]
                },
                "2017-2071:printWithEscapes1": {
                    "start": 2017,
                    "end": 2071,
                    "body": [
                        "    private void printWithEscapes1(final Reader reader, final Appendable appendable)\n",
                        "            throws IOException {\n",
                        "        int start = 0;\n",
                        "        int pos = 0;\n",
                        "\n",
                        "        @SuppressWarnings(\"resource\") // Temp reader on input reader.\n",
                        "        final ExtendedBufferedReader bufferedReader = new ExtendedBufferedReader(reader);\n",
                        "        final char[] delim = getDelimiterString().toCharArray();\n",
                        "        final int delimLength = delim.length;\n",
                        "        final char escape = getEscapeCharacter().charValue();\n",
                        "        final StringBuilder builder = new StringBuilder(IOUtils.DEFAULT_BUFFER_SIZE);\n",
                        "\n",
                        "        int c;\n",
                        "        while (-1 != (c = bufferedReader.read0())) {\n",
                        "            builder.append((char) c);\n",
                        "            final boolean isDelimiterStart =\n",
                        "                    isDelimiter(\n",
                        "                            (char) c,\n",
                        "                            builder.toString()\n",
                        "                                    + new String(bufferedReader.lookAhead2(delimLength - 1)),\n",
                        "                            pos,\n",
                        "                            delim,\n",
                        "                            delimLength);\n",
                        "            if (c == CR || c == LF || c == escape || isDelimiterStart) {\n",
                        "                if (pos > start) {\n",
                        "                    append1(builder.substring(start, pos), appendable);\n",
                        "                    builder.setLength(0);\n",
                        "                    pos = -1;\n",
                        "                }\n",
                        "                if (c == LF) {\n",
                        "                    c = 'n';\n",
                        "                } else if (c == CR) {\n",
                        "                    c = 'r';\n",
                        "                }\n",
                        "\n",
                        "                append0(escape, appendable);\n",
                        "                append0((char) c, appendable);\n",
                        "\n",
                        "                if (isDelimiterStart) {\n",
                        "                    for (int i = 1; i < delimLength; i++) {\n",
                        "                        c = bufferedReader.read0();\n",
                        "                        append0(escape, appendable);\n",
                        "                        append0((char) c, appendable);\n",
                        "                    }\n",
                        "                }\n",
                        "\n",
                        "                start = pos + 1; // start on the current char after this one\n",
                        "            }\n",
                        "            pos++;\n",
                        "        }\n",
                        "\n",
                        "        if (pos > start) {\n",
                        "            append1(builder.substring(start, pos), appendable);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "printWithEscapes1(Reader, Appendable)",
                    "parameters": [
                        "reader",
                        "appendable"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.ExtendedBufferedReader",
                            "ExtendedBufferedReader",
                            "50-52:ExtendedBufferedReader"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "toCharArray()"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1547-1549:getDelimiterString"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Character",
                            "charValue()"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1566-1568:getEscapeCharacter"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder(int)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.ExtendedBufferedReader",
                            "ExtendedBufferedReader",
                            "155-168:read0"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1741-1760:isDelimiter"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(char[])"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.ExtendedBufferedReader",
                            "ExtendedBufferedReader",
                            "150-153:lookAhead2"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(char)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1416-1418:append1"
                        ],
                        [
                            "library",
                            "java.base/java/lang/AbstractStringBuilder",
                            "substring(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/AbstractStringBuilder",
                            "setLength(int)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1412-1414:append0"
                        ]
                    ]
                },
                "1972-2015:printWithEscapes0": {
                    "start": 1972,
                    "end": 2015,
                    "body": [
                        "    private void printWithEscapes0(final CharSequence charSeq, final Appendable appendable)\n",
                        "            throws IOException {\n",
                        "        int start = 0;\n",
                        "        int pos = 0;\n",
                        "        final int end = charSeq.length();\n",
                        "\n",
                        "        final char[] delim = getDelimiterString().toCharArray();\n",
                        "        final int delimLength = delim.length;\n",
                        "        final char escape = getEscapeCharacter().charValue();\n",
                        "\n",
                        "        while (pos < end) {\n",
                        "            char c = charSeq.charAt(pos);\n",
                        "            final boolean isDelimiterStart = isDelimiter(c, charSeq, pos, delim, delimLength);\n",
                        "            if (c == CR || c == LF || c == escape || isDelimiterStart) {\n",
                        "                if (pos > start) {\n",
                        "                    appendable.append(charSeq, start, pos);\n",
                        "                }\n",
                        "                if (c == LF) {\n",
                        "                    c = 'n';\n",
                        "                } else if (c == CR) {\n",
                        "                    c = 'r';\n",
                        "                }\n",
                        "\n",
                        "                appendable.append(escape);\n",
                        "                appendable.append(c);\n",
                        "\n",
                        "                if (isDelimiterStart) {\n",
                        "                    for (int i = 1; i < delimLength; i++) {\n",
                        "                        pos++;\n",
                        "                        c = charSeq.charAt(pos);\n",
                        "                        appendable.append(escape);\n",
                        "                        appendable.append(c);\n",
                        "                    }\n",
                        "                }\n",
                        "\n",
                        "                start = pos + 1; // start on the current char after this one\n",
                        "            }\n",
                        "            pos++;\n",
                        "        }\n",
                        "\n",
                        "        if (pos > start) {\n",
                        "            appendable.append(charSeq, start, pos);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "printWithEscapes0(CharSequence, Appendable)",
                    "parameters": [
                        "charSeq",
                        "appendable"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "toCharArray()"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1547-1549:getDelimiterString"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Character",
                            "charValue()"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1566-1568:getEscapeCharacter"
                        ],
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "charAt(int)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1741-1760:isDelimiter"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Appendable",
                            "append(java.lang.CharSequence,int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Appendable",
                            "append(char)"
                        ]
                    ]
                },
                "1903-1917:print5": {
                    "start": 1903,
                    "end": 1917,
                    "body": [
                        "    private void print5(final Reader reader, final Appendable out, final boolean newRecord)\n",
                        "            throws IOException {\n",
                        "        if (!newRecord) {\n",
                        "            append1(getDelimiterString(), out);\n",
                        "        }\n",
                        "        if (isQuoteCharacterSet()) {\n",
                        "            printWithQuotes1(reader, out);\n",
                        "        } else if (isEscapeCharacterSet()) {\n",
                        "            printWithEscapes1(reader, out);\n",
                        "        } else if (out instanceof Writer) {\n",
                        "            IOUtils.copyLarge0(reader, (Writer) out);\n",
                        "        } else {\n",
                        "            IOUtils.copy0(reader, out);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "print5(Reader, Appendable, boolean)",
                    "parameters": [
                        "reader",
                        "out",
                        "newRecord"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1416-1418:append1"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1547-1549:getDelimiterString"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1785-1787:isQuoteCharacterSet"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "2179-2215:printWithQuotes1"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1767-1769:isEscapeCharacterSet"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "2017-2071:printWithEscapes1"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.IOUtils",
                            "IOUtils",
                            "91-93:copyLarge0"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.IOUtils",
                            "IOUtils",
                            "47-49:copy0"
                        ]
                    ]
                },
                "1865-1885:print3": {
                    "start": 1865,
                    "end": 1885,
                    "body": [
                        "    private synchronized void print3(\n",
                        "            final Object object,\n",
                        "            final CharSequence value,\n",
                        "            final Appendable out,\n",
                        "            final boolean newRecord)\n",
                        "            throws IOException {\n",
                        "        final int offset = 0;\n",
                        "        final int len = value.length();\n",
                        "        if (!newRecord) {\n",
                        "            out.append(getDelimiterString());\n",
                        "        }\n",
                        "        if (object == null) {\n",
                        "            out.append(value);\n",
                        "        } else if (isQuoteCharacterSet()) {\n",
                        "            printWithQuotes0(object, value, out, newRecord);\n",
                        "        } else if (isEscapeCharacterSet()) {\n",
                        "            printWithEscapes0(value, out);\n",
                        "        } else {\n",
                        "            out.append(value, offset, len);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "synchronized",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "print3(Object, CharSequence, Appendable, boolean)",
                    "parameters": [
                        "object",
                        "value",
                        "out",
                        "newRecord"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Appendable",
                            "append(java.lang.CharSequence)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1547-1549:getDelimiterString"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1785-1787:isQuoteCharacterSet"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "2076-2170:printWithQuotes0"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1767-1769:isEscapeCharacterSet"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1972-2015:printWithEscapes0"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Appendable",
                            "append(java.lang.CharSequence,int,int)"
                        ]
                    ]
                },
                "1741-1760:isDelimiter": {
                    "start": 1741,
                    "end": 1760,
                    "body": [
                        "    private boolean isDelimiter(\n",
                        "            final char ch,\n",
                        "            final CharSequence charSeq,\n",
                        "            final int startIndex,\n",
                        "            final char[] delimiter,\n",
                        "            final int delimiterLength) {\n",
                        "        if (ch != delimiter[0]) {\n",
                        "            return false;\n",
                        "        }\n",
                        "        final int len = charSeq.length();\n",
                        "        if (startIndex + delimiterLength > len) {\n",
                        "            return false;\n",
                        "        }\n",
                        "        for (int i = 1; i < delimiterLength; i++) {\n",
                        "            if (charSeq.charAt(startIndex + i) != delimiter[i]) {\n",
                        "                return false;\n",
                        "            }\n",
                        "        }\n",
                        "        return true;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isDelimiter(char, CharSequence, int, char[], int)",
                    "parameters": [
                        "ch",
                        "charSeq",
                        "startIndex",
                        "delimiter",
                        "delimiterLength"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "charAt(int)"
                        ]
                    ]
                },
                "1416-1418:append1": {
                    "start": 1416,
                    "end": 1418,
                    "body": [
                        "    private void append1(final CharSequence csq, final Appendable appendable) throws IOException {\n",
                        "        appendable.append(csq);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "append1(CharSequence, Appendable)",
                    "parameters": [
                        "csq",
                        "appendable"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Appendable",
                            "append(java.lang.CharSequence)"
                        ]
                    ]
                },
                "1412-1414:append0": {
                    "start": 1412,
                    "end": 1414,
                    "body": [
                        "    private void append0(final char c, final Appendable appendable) throws IOException {\n",
                        "        appendable.append(c);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "append0(char, Appendable)",
                    "parameters": [
                        "c",
                        "appendable"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Appendable",
                            "append(char)"
                        ]
                    ]
                },
                "1198-1200:isTrimChar1": {
                    "start": 1198,
                    "end": 1200,
                    "body": [
                        "    private static boolean isTrimChar1(final CharSequence charSequence, final int pos) {\n",
                        "        return isTrimChar0(charSequence.charAt(pos));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isTrimChar1(CharSequence, int)",
                    "parameters": [
                        "charSequence",
                        "pos"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1193-1195:isTrimChar0"
                        ],
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "charAt(int)"
                        ]
                    ]
                },
                "1193-1195:isTrimChar0": {
                    "start": 1193,
                    "end": 1195,
                    "body": [
                        "    private static boolean isTrimChar0(final char ch) {\n",
                        "        return ch <= SP;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isTrimChar0(char)",
                    "parameters": [
                        "ch"
                    ],
                    "calls": []
                },
                "1188-1190:isLineBreak1": {
                    "start": 1188,
                    "end": 1190,
                    "body": [
                        "    private static boolean isLineBreak1(final Character c) {\n",
                        "        return c != null && isLineBreak0(c.charValue());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isLineBreak1(Character)",
                    "parameters": [
                        "c"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1178-1180:isLineBreak0"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Character",
                            "charValue()"
                        ]
                    ]
                },
                "1178-1180:isLineBreak0": {
                    "start": 1178,
                    "end": 1180,
                    "body": [
                        "    private static boolean isLineBreak0(final char c) {\n",
                        "        return c == LF || c == CR;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isLineBreak0(char)",
                    "parameters": [
                        "c"
                    ],
                    "calls": []
                },
                "1164-1166:containsLineBreak": {
                    "start": 1164,
                    "end": 1166,
                    "body": [
                        "    private static boolean containsLineBreak(final String source) {\n",
                        "        return contains(source, CR) || contains(source, LF);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "containsLineBreak(String)",
                    "parameters": [
                        "source"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1154-1156:contains"
                        ]
                    ]
                },
                "1154-1156:contains": {
                    "start": 1154,
                    "end": 1156,
                    "body": [
                        "    private static boolean contains(final String source, final char searchCh) {\n",
                        "        return Objects.requireNonNull(source, \"source\").indexOf(searchCh) >= 0;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "contains(String, char)",
                    "parameters": [
                        "source",
                        "searchCh"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "indexOf(int)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Objects",
                            "requireNonNull(java.lang.Object,java.lang.String)"
                        ]
                    ]
                },
                "2266-2268:trim1": {
                    "start": 2266,
                    "end": 2268,
                    "body": [
                        "    String trim1(final String value) {\n",
                        "        return getTrim() ? value.trim() : value;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "trim1(String)",
                    "parameters": [
                        "value"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1689-1691:getTrim"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "trim()"
                        ]
                    ]
                },
                "1434-1436:copy": {
                    "start": 1434,
                    "end": 1436,
                    "body": [
                        "    CSVFormat copy() {\n",
                        "        return builder().build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "copy()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                }
            },
            "fields": {
                "1132-1133:TDF": {
                    "start": 1132,
                    "end": 1133,
                    "body": [
                        "    public static final CSVFormat TDF =\n",
                        "            DEFAULT.builder().setDelimiter0(TAB).setIgnoreSurroundingSpaces(true).build();\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ]
                },
                "1114-1114:RFC4180": {
                    "start": 1114,
                    "end": 1114,
                    "body": [
                        "    public static final CSVFormat RFC4180 = DEFAULT.builder().setIgnoreEmptyLines(false).build();\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ]
                },
                "1088-1097:POSTGRESQL_TEXT": {
                    "start": 1088,
                    "end": 1097,
                    "body": [
                        "    public static final CSVFormat POSTGRESQL_TEXT =\n",
                        "            DEFAULT.builder()\n",
                        "                    .setDelimiter0(TAB)\n",
                        "                    .setEscape0(BACKSLASH)\n",
                        "                    .setIgnoreEmptyLines(false)\n",
                        "                    .setQuote1(null)\n",
                        "                    .setRecordSeparator0(LF)\n",
                        "                    .setNullString(Constants.SQL_NULL_STRING)\n",
                        "                    .setQuoteMode(QuoteMode.ALL_NON_NULL)\n",
                        "                    .build();\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ]
                },
                "1053-1062:POSTGRESQL_CSV": {
                    "start": 1053,
                    "end": 1062,
                    "body": [
                        "    public static final CSVFormat POSTGRESQL_CSV =\n",
                        "            DEFAULT.builder()\n",
                        "                    .setDelimiter1(COMMA)\n",
                        "                    .setEscape1(null)\n",
                        "                    .setIgnoreEmptyLines(false)\n",
                        "                    .setQuote1(DOUBLE_QUOTE_CHAR)\n",
                        "                    .setRecordSeparator0(LF)\n",
                        "                    .setNullString(EMPTY)\n",
                        "                    .setQuoteMode(QuoteMode.ALL_NON_NULL)\n",
                        "                    .build();\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ]
                },
                "1018-1028:ORACLE": {
                    "start": 1018,
                    "end": 1028,
                    "body": [
                        "    public static final CSVFormat ORACLE =\n",
                        "            DEFAULT.builder()\n",
                        "                    .setDelimiter1(COMMA)\n",
                        "                    .setEscape0(BACKSLASH)\n",
                        "                    .setIgnoreEmptyLines(false)\n",
                        "                    .setQuote1(DOUBLE_QUOTE_CHAR)\n",
                        "                    .setNullString(Constants.SQL_NULL_STRING)\n",
                        "                    .setTrim(true)\n",
                        "                    .setRecordSeparator1(System.lineSeparator())\n",
                        "                    .setQuoteMode(QuoteMode.MINIMAL)\n",
                        "                    .build();\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ]
                },
                "983-992:MYSQL": {
                    "start": 983,
                    "end": 992,
                    "body": [
                        "    public static final CSVFormat MYSQL =\n",
                        "            DEFAULT.builder()\n",
                        "                    .setDelimiter0(TAB)\n",
                        "                    .setEscape0(BACKSLASH)\n",
                        "                    .setIgnoreEmptyLines(false)\n",
                        "                    .setQuote1(null)\n",
                        "                    .setRecordSeparator0(LF)\n",
                        "                    .setNullString(Constants.SQL_NULL_STRING)\n",
                        "                    .setQuoteMode(QuoteMode.ALL_NON_NULL)\n",
                        "                    .build();\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ]
                },
                "950-957:MONGODB_TSV": {
                    "start": 950,
                    "end": 957,
                    "body": [
                        "    public static final CSVFormat MONGODB_TSV =\n",
                        "            DEFAULT.builder()\n",
                        "                    .setDelimiter0(TAB)\n",
                        "                    .setEscape1(DOUBLE_QUOTE_CHAR)\n",
                        "                    .setQuote1(DOUBLE_QUOTE_CHAR)\n",
                        "                    .setQuoteMode(QuoteMode.MINIMAL)\n",
                        "                    .setSkipHeaderRecord(false)\n",
                        "                    .build();\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ]
                },
                "918-925:MONGODB_CSV": {
                    "start": 918,
                    "end": 925,
                    "body": [
                        "    public static final CSVFormat MONGODB_CSV =\n",
                        "            DEFAULT.builder()\n",
                        "                    .setDelimiter1(COMMA)\n",
                        "                    .setEscape1(DOUBLE_QUOTE_CHAR)\n",
                        "                    .setQuote1(DOUBLE_QUOTE_CHAR)\n",
                        "                    .setQuoteMode(QuoteMode.MINIMAL)\n",
                        "                    .setSkipHeaderRecord(false)\n",
                        "                    .build();\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ]
                },
                "888-893:INFORMIX_UNLOAD_CSV": {
                    "start": 888,
                    "end": 893,
                    "body": [
                        "    public static final CSVFormat INFORMIX_UNLOAD_CSV =\n",
                        "            DEFAULT.builder()\n",
                        "                    .setDelimiter1(COMMA)\n",
                        "                    .setQuote1(DOUBLE_QUOTE_CHAR)\n",
                        "                    .setRecordSeparator0(LF)\n",
                        "                    .build();\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ]
                },
                "858-864:INFORMIX_UNLOAD": {
                    "start": 858,
                    "end": 864,
                    "body": [
                        "    public static final CSVFormat INFORMIX_UNLOAD =\n",
                        "            DEFAULT.builder()\n",
                        "                    .setDelimiter0(PIPE)\n",
                        "                    .setEscape0(BACKSLASH)\n",
                        "                    .setQuote1(DOUBLE_QUOTE_CHAR)\n",
                        "                    .setRecordSeparator0(LF)\n",
                        "                    .build();\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ]
                },
                "833-834:EXCEL": {
                    "start": 833,
                    "end": 834,
                    "body": [
                        "    public static final CSVFormat EXCEL =\n",
                        "            DEFAULT.builder().setIgnoreEmptyLines(false).setAllowMissingColumnNames(true).build();\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ]
                },
                "781-802:DEFAULT": {
                    "start": 781,
                    "end": 802,
                    "body": [
                        "    public static final CSVFormat DEFAULT =\n",
                        "            new CSVFormat(\n",
                        "                    0,\n",
                        "                    false,\n",
                        "                    false,\n",
                        "                    COMMA,\n",
                        "                    null,\n",
                        "                    null,\n",
                        "                    false,\n",
                        "                    false,\n",
                        "                    null,\n",
                        "                    null,\n",
                        "                    false,\n",
                        "                    DOUBLE_QUOTE_CHAR,\n",
                        "                    null,\n",
                        "                    true,\n",
                        "                    DuplicateHeaderMode.ALLOW_ALL,\n",
                        "                    null,\n",
                        "                    false,\n",
                        "                    false,\n",
                        "                    null,\n",
                        "                    CRLF);\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ]
                },
                "1315-1315:trim": {
                    "start": 1315,
                    "end": 1315,
                    "body": [
                        "    private final boolean trim;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "1313-1313:trailingDelimiter": {
                    "start": 1313,
                    "end": 1313,
                    "body": [
                        "    private final boolean trailingDelimiter;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "1311-1311:skipHeaderRecord": {
                    "start": 1311,
                    "end": 1311,
                    "body": [
                        "    private final boolean skipHeaderRecord;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "1309-1309:recordSeparator": {
                    "start": 1309,
                    "end": 1309,
                    "body": [
                        "    private final String recordSeparator; // for outputs\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "1307-1307:quoteMode": {
                    "start": 1307,
                    "end": 1307,
                    "body": [
                        "    private final QuoteMode quoteMode;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "QuoteMode",
                            "QuoteMode"
                        ]
                    ]
                },
                "1305-1305:quotedNullString": {
                    "start": 1305,
                    "end": 1305,
                    "body": [
                        "    private final String quotedNullString;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "1303-1303:quoteCharacter": {
                    "start": 1303,
                    "end": 1303,
                    "body": [
                        "    private final Character quoteCharacter; // null if quoting is disabled\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Character",
                            "java.lang.Character"
                        ]
                    ]
                },
                "1301-1301:nullString": {
                    "start": 1301,
                    "end": 1301,
                    "body": [
                        "    private final String nullString; // the string to be used for null values\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "1298-1299:ignoreSurroundingSpaces": {
                    "start": 1298,
                    "end": 1299,
                    "body": [
                        "    private final boolean\n",
                        "            ignoreSurroundingSpaces; // Should leading/trailing spaces be ignored around values?\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "1296-1296:ignoreHeaderCase": {
                    "start": 1296,
                    "end": 1296,
                    "body": [
                        "    private final boolean ignoreHeaderCase; // should ignore header names case\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "1294-1294:ignoreEmptyLines": {
                    "start": 1294,
                    "end": 1294,
                    "body": [
                        "    private final boolean ignoreEmptyLines;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "1292-1292:headerComments": {
                    "start": 1292,
                    "end": 1292,
                    "body": [
                        "    private final String[] headerComments; // array of header comment lines\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "String[]",
                            "java.lang.String[]"
                        ]
                    ]
                },
                "1290-1290:headers": {
                    "start": 1290,
                    "end": 1290,
                    "body": [
                        "    private final String[] headers; // array of header column names\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "String[]",
                            "java.lang.String[]"
                        ]
                    ]
                },
                "1288-1288:escapeCharacter": {
                    "start": 1288,
                    "end": 1288,
                    "body": [
                        "    private final Character escapeCharacter; // null if escaping is disabled\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Character",
                            "java.lang.Character"
                        ]
                    ]
                },
                "1286-1286:delimiter": {
                    "start": 1286,
                    "end": 1286,
                    "body": [
                        "    private final String delimiter;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "1284-1284:commentMarker": {
                    "start": 1284,
                    "end": 1284,
                    "body": [
                        "    private final Character commentMarker; // null if commenting is disabled\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Character",
                            "java.lang.Character"
                        ]
                    ]
                },
                "1282-1282:autoFlush": {
                    "start": 1282,
                    "end": 1282,
                    "body": [
                        "    private final boolean autoFlush;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "1280-1280:allowMissingColumnNames": {
                    "start": 1280,
                    "end": 1280,
                    "body": [
                        "    private final boolean allowMissingColumnNames;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "1278-1278:duplicateHeaderMode": {
                    "start": 1278,
                    "end": 1278,
                    "body": [
                        "    private final DuplicateHeaderMode duplicateHeaderMode;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "DuplicateHeaderMode",
                            "DuplicateHeaderMode"
                        ]
                    ]
                },
                "1116-1116:serialVersionUID": {
                    "start": 1116,
                    "end": 1116,
                    "body": [
                        "    private static final long serialVersionUID = 2L;\n"
                    ],
                    "modifiers": [
                        "static",
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "long",
                            "long"
                        ]
                    ]
                }
            }
        },
        "Predefined": {
            "start": 683,
            "end": 683,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "CSVFormat",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "761-763:getFormat": {
                    "start": 761,
                    "end": 763,
                    "body": [
                        "        public CSVFormat getFormat() {\n",
                        "            return format;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "signature": "getFormat()",
                    "parameters": [],
                    "calls": []
                },
                "752-754:Predefined": {
                    "start": 752,
                    "end": 754,
                    "body": [
                        "        Predefined(final CSVFormat format) {\n",
                        "            this.format = format;\n",
                        "        }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "Predefined(CSVFormat)",
                    "parameters": [
                        "format"
                    ],
                    "calls": []
                }
            },
            "fields": {
                "748-748:TDF": {
                    "start": 748,
                    "end": 748,
                    "body": [
                        "        TDF(CSVFormat.TDF);\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "Predefined",
                            "Predefined"
                        ]
                    ]
                },
                "743-743:RFC4180": {
                    "start": 743,
                    "end": 743,
                    "body": [
                        "        RFC4180(CSVFormat.RFC4180),\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "Predefined",
                            "Predefined"
                        ]
                    ]
                },
                "738-738:PostgreSQLText": {
                    "start": 738,
                    "end": 738,
                    "body": [
                        "        PostgreSQLText(CSVFormat.POSTGRESQL_TEXT),\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "Predefined",
                            "Predefined"
                        ]
                    ]
                },
                "733-733:PostgreSQLCsv": {
                    "start": 733,
                    "end": 733,
                    "body": [
                        "        PostgreSQLCsv(CSVFormat.POSTGRESQL_CSV),\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "Predefined",
                            "Predefined"
                        ]
                    ]
                },
                "727-727:Oracle": {
                    "start": 727,
                    "end": 727,
                    "body": [
                        "        Oracle(CSVFormat.ORACLE),\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "Predefined",
                            "Predefined"
                        ]
                    ]
                },
                "722-722:MySQL": {
                    "start": 722,
                    "end": 722,
                    "body": [
                        "        MySQL(CSVFormat.MYSQL),\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "Predefined",
                            "Predefined"
                        ]
                    ]
                },
                "717-717:MongoDBTsv": {
                    "start": 717,
                    "end": 717,
                    "body": [
                        "        MongoDBTsv(CSVFormat.MONGODB_TSV),\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "Predefined",
                            "Predefined"
                        ]
                    ]
                },
                "711-711:MongoDBCsv": {
                    "start": 711,
                    "end": 711,
                    "body": [
                        "        MongoDBCsv(CSVFormat.MONGODB_CSV),\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "Predefined",
                            "Predefined"
                        ]
                    ]
                },
                "705-705:InformixUnloadCsv": {
                    "start": 705,
                    "end": 705,
                    "body": [
                        "        InformixUnloadCsv(CSVFormat.INFORMIX_UNLOAD_CSV),\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "Predefined",
                            "Predefined"
                        ]
                    ]
                },
                "699-699:InformixUnload": {
                    "start": 699,
                    "end": 699,
                    "body": [
                        "        InformixUnload(CSVFormat.INFORMIX_UNLOAD),\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "Predefined",
                            "Predefined"
                        ]
                    ]
                },
                "693-693:Excel": {
                    "start": 693,
                    "end": 693,
                    "body": [
                        "        Excel(CSVFormat.EXCEL),\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "Predefined",
                            "Predefined"
                        ]
                    ]
                },
                "688-688:Default": {
                    "start": 688,
                    "end": 688,
                    "body": [
                        "        Default(CSVFormat.DEFAULT),\n"
                    ],
                    "modifiers": [
                        "public",
                        "static",
                        "final"
                    ],
                    "types": [
                        [
                            "Predefined",
                            "Predefined"
                        ]
                    ]
                },
                "750-750:format": {
                    "start": 750,
                    "end": 750,
                    "body": [
                        "        private final CSVFormat format;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ]
                }
            }
        },
        "new IntFunction<String>(...) { ... }": {
            "start": 1246,
            "end": 1246,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "CSVFormat",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "1246-1246:apply": {
                    "start": 1246,
                    "end": 1246,
                    "body": [
                        "        Arrays.setAll(strings, i -> Objects.toString(values[i], null));\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "apply(int)",
                    "parameters": [
                        "i"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Objects",
                            "toString"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}