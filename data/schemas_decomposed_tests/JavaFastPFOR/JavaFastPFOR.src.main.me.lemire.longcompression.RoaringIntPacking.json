{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/longcompression/RoaringIntPacking.java",
    "imports": {
        "7-7:import Comparator": {
            "start": 7,
            "end": 7,
            "body": [
                "import java.util.Comparator;\n"
            ]
        },
        "6-6:import BigInteger": {
            "start": 6,
            "end": 6,
            "body": [
                "import java.math.BigInteger;\n"
            ]
        }
    },
    "classes": {
        "new Comparator<Integer>(...) { ... }": {
            "start": 70,
            "end": 70,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "RoaringIntPacking",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "73-75:compare": {
                    "start": 73,
                    "end": 75,
                    "body": [
                        "      public int compare(Integer o1, Integer o2) {\n",
                        "        return compareUnsigned(o1, o2);\n",
                        "      }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "compare(Integer, Integer)",
                    "parameters": [
                        "o1",
                        "o2"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.RoaringIntPacking",
                            "RoaringIntPacking",
                            "88-91:compareUnsigned"
                        ]
                    ]
                },
                "70-70:": {
                    "start": 70,
                    "end": 70,
                    "body": [
                        "    return new Comparator<Integer>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": []
                }
            },
            "fields": {}
        },
        "RoaringIntPacking": {
            "start": 18,
            "end": 18,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "new Comparator<Integer>(...) { ... }"
            ],
            "implements": [],
            "extends": [],
            "methods": {
                "100-107:toUnsignedString": {
                    "start": 100,
                    "end": 107,
                    "body": [
                        "  // https://stackoverflow.com/questions/7031198/java-signed-long-to-unsigned-long-string\n",
                        "  static String toUnsignedString(long l) {\n",
                        "    BigInteger b = BigInteger.valueOf(l);\n",
                        "    if (b.signum() < 0) {\n",
                        "      b = b.add(TWO_64);\n",
                        "    }\n",
                        "    return b.toString();\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "toUnsignedString(long)",
                    "parameters": [
                        "l"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/math/BigInteger",
                            "valueOf(long)"
                        ],
                        [
                            "library",
                            "java.base/java/math/BigInteger",
                            "signum()"
                        ],
                        [
                            "library",
                            "java.base/java/math/BigInteger",
                            "add(java.math.BigInteger)"
                        ],
                        [
                            "library",
                            "java.base/java/math/BigInteger",
                            "toString()"
                        ]
                    ]
                },
                "88-91:compareUnsigned": {
                    "start": 88,
                    "end": 91,
                    "body": [
                        "  // Duplicated from jdk8 Integer.compareUnsigned\n",
                        "  public static int compareUnsigned(int x, int y) {\n",
                        "    return Integer.compare(x + Integer.MIN_VALUE, y + Integer.MIN_VALUE);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "compareUnsigned(int, int)",
                    "parameters": [
                        "x",
                        "y"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "compare(int,int)"
                        ]
                    ]
                },
                "69-77:unsignedComparator": {
                    "start": 69,
                    "end": 77,
                    "body": [
                        "  public static Comparator<Integer> unsignedComparator() {\n",
                        "    return new Comparator<Integer>() {\n",
                        "\n",
                        "      @Override\n",
                        "      public int compare(Integer o1, Integer o2) {\n",
                        "        return compareUnsigned(o1, o2);\n",
                        "      }\n",
                        "    };\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "Comparator<Integer>",
                            "java.util.Comparator<Integer>"
                        ]
                    ],
                    "signature": "unsignedComparator()",
                    "parameters": [],
                    "calls": []
                },
                "58-64:highestHigh": {
                    "start": 58,
                    "end": 64,
                    "body": [
                        "  public static int highestHigh(boolean signedLongs) {\n",
                        "    if (signedLongs) {\n",
                        "      return Integer.MAX_VALUE;\n",
                        "    } else {\n",
                        "      return -1;\n",
                        "    }\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "highestHigh(boolean)",
                    "parameters": [
                        "signedLongs"
                    ],
                    "calls": []
                },
                "45-48:pack": {
                    "start": 45,
                    "end": 48,
                    "body": [
                        "  // https://stackoverflow.com/questions/12772939/java-storing-two-ints-in-a-long\n",
                        "  public static long pack(int high, int low) {\n",
                        "    return (((long) high) << 32) | (low & 0xffffffffL);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "long",
                            "long"
                        ]
                    ],
                    "signature": "pack(int, int)",
                    "parameters": [
                        "high",
                        "low"
                    ],
                    "calls": []
                },
                "34-36:low": {
                    "start": 34,
                    "end": 36,
                    "body": [
                        "  public static int low(long id) {\n",
                        "    return (int) id;\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "low(long)",
                    "parameters": [
                        "id"
                    ],
                    "calls": []
                },
                "25-27:high": {
                    "start": 25,
                    "end": 27,
                    "body": [
                        "  public static int high(long id) {\n",
                        "    return (int) (id >> 32);\n",
                        "  }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "high(long)",
                    "parameters": [
                        "id"
                    ],
                    "calls": []
                }
            },
            "fields": {
                "94-94:TWO_64": {
                    "start": 94,
                    "end": 94,
                    "body": [
                        "  private static final BigInteger TWO_64 = BigInteger.ONE.shiftLeft(64);\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "BigInteger",
                            "java.math.BigInteger"
                        ]
                    ]
                }
            }
        }
    }
}