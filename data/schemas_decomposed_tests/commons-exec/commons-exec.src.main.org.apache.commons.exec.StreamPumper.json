{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-exec/src/main/java/org/apache/commons/exec/StreamPumper.java",
    "imports": {
        "20-20:import IOException": {
            "start": 20,
            "end": 20,
            "body": [
                "import java.io.IOException;\n"
            ]
        },
        "22-22:import OutputStream": {
            "start": 22,
            "end": 22,
            "body": [
                "import java.io.OutputStream;\n"
            ]
        },
        "21-21:import InputStream": {
            "start": 21,
            "end": 21,
            "body": [
                "import java.io.InputStream;\n"
            ]
        },
        "24-24:import DebugUtils": {
            "start": 24,
            "end": 24,
            "body": [
                "import org.apache.commons.exec.util.DebugUtils;\n"
            ]
        }
    },
    "classes": {
        "StreamPumper": {
            "start": 29,
            "end": 29,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [
                "Runnable"
            ],
            "extends": [],
            "methods": {
                "101-130:run": {
                    "start": 101,
                    "end": 130,
                    "body": [
                        "    public void run() {\n",
                        "        synchronized (this) {\n",
                        "            // Just in case this object is reused in the future\n",
                        "            finished = false;\n",
                        "        }\n",
                        "\n",
                        "        final byte[] buf = new byte[this.size];\n",
                        "\n",
                        "        int length;\n",
                        "        try {\n",
                        "            while ((length = is.read(buf)) > 0) {\n",
                        "                os.write(buf, 0, length);\n",
                        "            }\n",
                        "        } catch (final Exception ignored) {\n",
                        "            // nothing to do - happens quite often with watchdog\n",
                        "        } finally {\n",
                        "            if (closeWhenExhausted) {\n",
                        "                try {\n",
                        "                    os.close();\n",
                        "                } catch (final IOException e) {\n",
                        "                    final String msg = \"Got exception while closing exhausted output stream\";\n",
                        "                    DebugUtils.handleException(msg, e);\n",
                        "                }\n",
                        "            }\n",
                        "            synchronized (this) {\n",
                        "                finished = true;\n",
                        "                notifyAll();\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "run()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/InputStream",
                            "read(byte[])"
                        ],
                        [
                            "library",
                            "java.base/java/io/OutputStream",
                            "write(byte[],int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/io/OutputStream",
                            "close()"
                        ],
                        [
                            "commons-exec.src.main.org.apache.commons.exec.util.DebugUtils",
                            "DebugUtils",
                            "42-53:handleException"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "notifyAll()"
                        ]
                    ]
                },
                "138-142:waitFor": {
                    "start": 138,
                    "end": 142,
                    "body": [
                        "    public synchronized void waitFor() throws InterruptedException {\n",
                        "        while (!isFinished()) {\n",
                        "            wait();\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "synchronized"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "waitFor()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-exec.src.main.org.apache.commons.exec.StreamPumper",
                            "StreamPumper",
                            "93-95:isFinished"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "wait()"
                        ]
                    ]
                },
                "93-95:isFinished": {
                    "start": 93,
                    "end": 95,
                    "body": [
                        "    public synchronized boolean isFinished() {\n",
                        "        return finished;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "synchronized"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isFinished()",
                    "parameters": [],
                    "calls": []
                },
                "81-86:StreamPumper": {
                    "start": 81,
                    "end": 86,
                    "body": [
                        "    public StreamPumper(final InputStream is, final OutputStream os, final boolean closeWhenExhausted, final int size) {\n",
                        "        this.is = is;\n",
                        "        this.os = os;\n",
                        "        this.size = size > 0 ? size : DEFAULT_SIZE;\n",
                        "        this.closeWhenExhausted = closeWhenExhausted;\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "StreamPumper(InputStream, OutputStream, boolean, int)",
                    "parameters": [
                        "is",
                        "os",
                        "closeWhenExhausted",
                        "size"
                    ],
                    "calls": []
                },
                "55-57:StreamPumper0": {
                    "start": 55,
                    "end": 57,
                    "body": [
                        "    public static StreamPumper StreamPumper0(final InputStream is, final OutputStream os) {\n",
                        "        return new StreamPumper(is, os, false, -1);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "StreamPumper",
                            "StreamPumper"
                        ]
                    ],
                    "signature": "StreamPumper0(InputStream, OutputStream)",
                    "parameters": [
                        "is",
                        "os"
                    ],
                    "calls": [
                        [
                            "commons-exec.src.main.org.apache.commons.exec.StreamPumper",
                            "StreamPumper",
                            "81-86:StreamPumper"
                        ]
                    ]
                }
            },
            "fields": {
                "47-47:closeWhenExhausted": {
                    "start": 47,
                    "end": 47,
                    "body": [
                        "    private final boolean closeWhenExhausted;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "44-44:finished": {
                    "start": 44,
                    "end": 44,
                    "body": [
                        "    private boolean finished;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "41-41:size": {
                    "start": 41,
                    "end": 41,
                    "body": [
                        "    private final int size;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                },
                "38-38:os": {
                    "start": 38,
                    "end": 38,
                    "body": [
                        "    private final OutputStream os;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "OutputStream",
                            "java.io.OutputStream"
                        ]
                    ]
                },
                "35-35:is": {
                    "start": 35,
                    "end": 35,
                    "body": [
                        "    private final InputStream is;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "InputStream",
                            "java.io.InputStream"
                        ]
                    ]
                },
                "32-32:DEFAULT_SIZE": {
                    "start": 32,
                    "end": 32,
                    "body": [
                        "    private static final int DEFAULT_SIZE = 1024;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                }
            }
        }
    }
}