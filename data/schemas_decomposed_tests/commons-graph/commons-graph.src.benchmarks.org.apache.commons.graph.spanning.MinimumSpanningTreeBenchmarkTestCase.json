{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-graph/src/benchmarks/java/org/apache/commons/graph/spanning/MinimumSpanningTreeBenchmarkTestCase.java",
    "imports": {
        "42-42:import Random": {
            "start": 42,
            "end": 42,
            "body": [
                "import java.util.Random;\n"
            ]
        },
        "41-41:import List": {
            "start": 41,
            "end": 41,
            "body": [
                "import java.util.List;\n"
            ]
        },
        "40-40:import ArrayList": {
            "start": 40,
            "end": 40,
            "body": [
                "import java.util.ArrayList;\n"
            ]
        },
        "35-35:import UndirectedMutableGraph": {
            "start": 35,
            "end": 35,
            "body": [
                "import org.apache.commons.graph.model.UndirectedMutableGraph;\n"
            ]
        },
        "29-29:import GraphException": {
            "start": 29,
            "end": 29,
            "body": [
                "import org.apache.commons.graph.GraphException;\n"
            ]
        },
        "30-30:import Mapper": {
            "start": 30,
            "end": 30,
            "body": [
                "import org.apache.commons.graph.Mapper;\n"
            ]
        },
        "31-31:import SpanningTree": {
            "start": 31,
            "end": 31,
            "body": [
                "import org.apache.commons.graph.SpanningTree;\n"
            ]
        },
        "32-32:import AbstractGraphConnection": {
            "start": 32,
            "end": 32,
            "body": [
                "import org.apache.commons.graph.builder.AbstractGraphConnection;\n"
            ]
        },
        "38-38:import Test": {
            "start": 38,
            "end": 38,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "34-34:import BaseLabeledWeightedEdge": {
            "start": 34,
            "end": 34,
            "body": [
                "import org.apache.commons.graph.model.BaseLabeledWeightedEdge;\n"
            ]
        },
        "33-33:import BaseLabeledVertex": {
            "start": 33,
            "end": 33,
            "body": [
                "import org.apache.commons.graph.model.BaseLabeledVertex;\n"
            ]
        },
        "37-37:import BeforeClass": {
            "start": 37,
            "end": 37,
            "body": [
                "import org.junit.BeforeClass;\n"
            ]
        },
        "36-36:import DoubleWeightBaseOperations": {
            "start": 36,
            "end": 36,
            "body": [
                "import org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations;\n"
            ]
        },
        "26-26:import static String.format": {
            "start": 26,
            "end": 26,
            "body": [
                "import static java.lang.String.format;\n"
            ]
        },
        "27-27:import static String.valueOf": {
            "start": 27,
            "end": 27,
            "body": [
                "import static java.lang.String.valueOf;\n"
            ]
        },
        "22-22:import static CommonsGraph.minimumSpanningTree": {
            "start": 22,
            "end": 22,
            "body": [
                "import static org.apache.commons.graph.CommonsGraph.minimumSpanningTree;\n"
            ]
        },
        "23-23:import static CommonsGraph.newUndirectedMutableGraph": {
            "start": 23,
            "end": 23,
            "body": [
                "import static org.apache.commons.graph.CommonsGraph.newUndirectedMutableGraph;\n"
            ]
        },
        "24-24:import static Assert.assertTrue": {
            "start": 24,
            "end": 24,
            "body": [
                "import static org.junit.Assert.assertTrue;\n"
            ]
        }
    },
    "classes": {
        "MinimumSpanningTreeBenchmarkTestCase": {
            "start": 44,
            "end": 44,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "new Mapper<BaseLabeledWeightedEdge<Double>,Double>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>(...) { ... }"
            ],
            "implements": [],
            "extends": [],
            "methods": {
                "129-137:testPerformPrim": {
                    "start": 129,
                    "end": 137,
                    "body": [
                        "    public void testPerformPrim() {\n",
                        "        SpanningTree<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> actual =\n",
                        "                minimumSpanningTree(graph)\n",
                        "                        .whereEdgesHaveWeights(weightedEdges)\n",
                        "                        .fromArbitrarySource()\n",
                        "                        .applyingPrimAlgorithm(new DoubleWeightBaseOperations());\n",
                        "\n",
                        "        assertTrue(actual.getSize() > 0);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPerformPrim()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/spanning/SpanningTreeAlgorithmSelector",
                            "applyingPrimAlgorithm(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/SpanningTreeSourceSelector",
                            "fromArbitrarySource()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/SpanningWeightedEdgeMapperBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "172-176:minimumSpanningTree"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Graph",
                            "getSize()"
                        ]
                    ]
                },
                "118-126:testPerformKruskal": {
                    "start": 118,
                    "end": 126,
                    "body": [
                        "    public void testPerformKruskal() {\n",
                        "        SpanningTree<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> actual =\n",
                        "                minimumSpanningTree(graph)\n",
                        "                        .whereEdgesHaveWeights(weightedEdges)\n",
                        "                        .fromArbitrarySource()\n",
                        "                        .applyingKruskalAlgorithm(new DoubleWeightBaseOperations());\n",
                        "\n",
                        "        assertTrue(actual.getSize() > 0);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPerformKruskal()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/spanning/SpanningTreeAlgorithmSelector",
                            "applyingKruskalAlgorithm(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/SpanningTreeSourceSelector",
                            "fromArbitrarySource()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/SpanningWeightedEdgeMapperBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "172-176:minimumSpanningTree"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Graph",
                            "getSize()"
                        ]
                    ]
                },
                "107-115:testPerformBoruvka": {
                    "start": 107,
                    "end": 115,
                    "body": [
                        "    public void testPerformBoruvka() {\n",
                        "        SpanningTree<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> actual =\n",
                        "                minimumSpanningTree(graph)\n",
                        "                        .whereEdgesHaveWeights(weightedEdges)\n",
                        "                        .fromArbitrarySource()\n",
                        "                        .applyingBoruvkaAlgorithm(new DoubleWeightBaseOperations());\n",
                        "\n",
                        "        assertTrue(actual.getSize() > 0);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPerformBoruvka()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/spanning/SpanningTreeAlgorithmSelector",
                            "applyingBoruvkaAlgorithm(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/SpanningTreeSourceSelector",
                            "fromArbitrarySource()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/SpanningWeightedEdgeMapperBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "172-176:minimumSpanningTree"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Graph",
                            "getSize()"
                        ]
                    ]
                },
                "53-104:setUp": {
                    "start": 53,
                    "end": 104,
                    "body": [
                        "    public static void setUp() {\n",
                        "        weightedEdges =\n",
                        "                new Mapper<BaseLabeledWeightedEdge<Double>, Double>() {\n",
                        "\n",
                        "                    public Double map(BaseLabeledWeightedEdge<Double> input) {\n",
                        "                        return input.getWeight();\n",
                        "                    }\n",
                        "                };\n",
                        "\n",
                        "        graph =\n",
                        "                newUndirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>() {\n",
                        "                            Random r = new Random();\n",
                        "\n",
                        "                            private boolean addEdge(BaseLabeledVertex src, BaseLabeledVertex dst) {\n",
                        "                                try {\n",
                        "                                    addEdge(\n",
                        "                                                    new BaseLabeledWeightedEdge<Double>(\n",
                        "                                                            format(\"%s -> %s\", src, dst),\n",
                        "                                                            (double) r.nextInt(10)))\n",
                        "                                            .from(src)\n",
                        "                                            .to(dst);\n",
                        "                                    return true;\n",
                        "                                } catch (GraphException e) {\n",
                        "                                    return false;\n",
                        "                                }\n",
                        "                            }\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                List<BaseLabeledVertex> vertices =\n",
                        "                                        new ArrayList<BaseLabeledVertex>();\n",
                        "                                for (int i = 0; i < NODES; i++) {\n",
                        "                                    BaseLabeledVertex v = new BaseLabeledVertex(valueOf(i));\n",
                        "                                    addVertex(v);\n",
                        "                                    vertices.add(v);\n",
                        "                                }\n",
                        "\n",
                        "                                for (int i = 0; i < NODES - 1; i++) {\n",
                        "                                    addEdge(vertices.get(i), vertices.get(i + 1));\n",
                        "                                }\n",
                        "\n",
                        "                                addEdge(vertices.get(NODES - 1), vertices.get(0));\n",
                        "                                int maxEdges = Math.max(0, EDGES - NODES);\n",
                        "                                for (int i = 0; i < maxEdges; i++) {\n",
                        "                                    while (!addEdge(\n",
                        "                                            vertices.get(r.nextInt(NODES)),\n",
                        "                                            vertices.get(r.nextInt(NODES)))) {}\n",
                        "                                }\n",
                        "                            }\n",
                        "                        });\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "BeforeClass",
                        "BeforeClass"
                    ],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "setUp()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "201-204:newUndirectedMutableGraph"
                        ]
                    ]
                }
            },
            "fields": {
                "50-50:weightedEdges": {
                    "start": 50,
                    "end": 50,
                    "body": [
                        "    private static Mapper<BaseLabeledWeightedEdge<Double>, Double> weightedEdges;\n"
                    ],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "Mapper<BaseLabeledWeightedEdge<Double>,Double>",
                            "Mapper<BaseLabeledWeightedEdge<Double>,Double>"
                        ]
                    ]
                },
                "48-48:graph": {
                    "start": 48,
                    "end": 48,
                    "body": [
                        "    private static UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph;\n"
                    ],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>"
                        ]
                    ]
                },
                "46-46:EDGES": {
                    "start": 46,
                    "end": 46,
                    "body": [
                        "    private static final int EDGES = 6000;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                },
                "45-45:NODES": {
                    "start": 45,
                    "end": 45,
                    "body": [
                        "    private static final int NODES = 1000;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                }
            }
        },
        "new Mapper<BaseLabeledWeightedEdge<Double>,Double>(...) { ... }": {
            "start": 55,
            "end": 55,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "MinimumSpanningTreeBenchmarkTestCase",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "57-59:map": {
                    "start": 57,
                    "end": 59,
                    "body": [
                        "                    public Double map(BaseLabeledWeightedEdge<Double> input) {\n",
                        "                        return input.getWeight();\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "map(BaseLabeledWeightedEdge<Double>)",
                    "parameters": [
                        "input"
                    ],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "getWeight"
                        ]
                    ]
                },
                "54-55:": {
                    "start": 54,
                    "end": 55,
                    "body": [
                        "        weightedEdges =\n",
                        "                new Mapper<BaseLabeledWeightedEdge<Double>, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": []
                }
            },
            "fields": {}
        },
        "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>(...) { ... }": {
            "start": 64,
            "end": 65,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "MinimumSpanningTreeBenchmarkTestCase",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "82-102:connect0": {
                    "start": 82,
                    "end": 102,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                List<BaseLabeledVertex> vertices =\n",
                        "                                        new ArrayList<BaseLabeledVertex>();\n",
                        "                                for (int i = 0; i < NODES; i++) {\n",
                        "                                    BaseLabeledVertex v = new BaseLabeledVertex(valueOf(i));\n",
                        "                                    addVertex(v);\n",
                        "                                    vertices.add(v);\n",
                        "                                }\n",
                        "\n",
                        "                                for (int i = 0; i < NODES - 1; i++) {\n",
                        "                                    addEdge(vertices.get(i), vertices.get(i + 1));\n",
                        "                                }\n",
                        "\n",
                        "                                addEdge(vertices.get(NODES - 1), vertices.get(0));\n",
                        "                                int maxEdges = Math.max(0, EDGES - NODES);\n",
                        "                                for (int i = 0; i < maxEdges; i++) {\n",
                        "                                    while (!addEdge(\n",
                        "                                            vertices.get(r.nextInt(NODES)),\n",
                        "                                            vertices.get(r.nextInt(NODES)))) {}\n",
                        "                                }\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/ArrayList",
                            "ArrayList<BaseLabeledVertex>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Math",
                            "max"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "valueOf"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "add"
                        ],
                        [
                            "commons-graph.src.benchmarks.org.apache.commons.graph.spanning.MinimumSpanningTreeBenchmarkTestCase",
                            "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>(...) { ... }",
                            "68-80:addEdge"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "get"
                        ],
                        [
                            "library",
                            "java.base/java/util/Random",
                            "nextInt"
                        ]
                    ]
                },
                "68-80:addEdge": {
                    "start": 68,
                    "end": 80,
                    "body": [
                        "                            private boolean addEdge(BaseLabeledVertex src, BaseLabeledVertex dst) {\n",
                        "                                try {\n",
                        "                                    addEdge(\n",
                        "                                                    new BaseLabeledWeightedEdge<Double>(\n",
                        "                                                            format(\"%s -> %s\", src, dst),\n",
                        "                                                            (double) r.nextInt(10)))\n",
                        "                                            .from(src)\n",
                        "                                            .to(dst);\n",
                        "                                    return true;\n",
                        "                                } catch (GraphException e) {\n",
                        "                                    return false;\n",
                        "                                }\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "addEdge(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "src",
                        "dst"
                    ],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format"
                        ],
                        [
                            "library",
                            "java.base/java/util/Random",
                            "nextInt"
                        ]
                    ]
                },
                "62-65:": {
                    "start": 62,
                    "end": 65,
                    "body": [
                        "        graph =\n",
                        "                newUndirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": []
                }
            },
            "fields": {
                "66-66:r": {
                    "start": 66,
                    "end": 66,
                    "body": [
                        "                            Random r = new Random();\n"
                    ],
                    "modifiers": [],
                    "types": [
                        [
                            "Random",
                            "java.util.Random"
                        ]
                    ]
                }
            }
        }
    }
}