{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/longcompression/synth/LongUniformDataGenerator.java",
    "imports": {
        "13-13:import Set": {
            "start": 13,
            "end": 13,
            "body": [
                "import java.util.Set;\n"
            ]
        },
        "11-11:import Iterator": {
            "start": 11,
            "end": 11,
            "body": [
                "import java.util.Iterator;\n"
            ]
        },
        "12-12:import Random": {
            "start": 12,
            "end": 12,
            "body": [
                "import java.util.Random;\n"
            ]
        },
        "9-9:import Arrays": {
            "start": 9,
            "end": 9,
            "body": [
                "import java.util.Arrays;\n"
            ]
        },
        "10-10:import HashSet": {
            "start": 10,
            "end": 10,
            "body": [
                "import java.util.HashSet;\n"
            ]
        },
        "16-16:import UniformDataGenerator": {
            "start": 16,
            "end": 16,
            "body": [
                "import me.lemire.integercompression.synth.UniformDataGenerator;\n"
            ]
        }
    },
    "classes": {
        "LongUniformDataGenerator": {
            "start": 24,
            "end": 24,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "70-84:negate": {
                    "start": 70,
                    "end": 84,
                    "body": [
                        "        static long[] negate(long[] x, long Max) {\n",
                        "        \tint newLength = saturatedCast(Max - x.length);\n",
                        "        \tlong[] ans = new long[newLength];\n",
                        "                int i = 0;\n",
                        "                int c = 0;\n",
                        "                for (int j = 0; j < x.length; ++j) {\n",
                        "                \tlong v = x[j];\n",
                        "                        for (; i < v; ++i)\n",
                        "                                ans[c++] = i;\n",
                        "                        ++i;\n",
                        "                }\n",
                        "                while (c < ans.length)\n",
                        "                        ans[c++] = i++;\n",
                        "                return ans;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static"
                    ],
                    "return_types": [
                        [
                            "long[]",
                            "long[]"
                        ]
                    ],
                    "signature": "negate(long[], long)",
                    "parameters": [
                        "x",
                        "Max"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.synth.LongUniformDataGenerator",
                            "LongUniformDataGenerator",
                            "86-92:saturatedCast"
                        ]
                    ]
                },
                "28-37:LongUniformDataGenerator": {
                    "start": 28,
                    "end": 37,
                    "body": [
                        "public LongUniformDataGenerator(int constructorId, final int seed) {\n",
                        "    if (constructorId == 0) {\n",
                        "\n",
                        "                this.rand = new Random(seed);\n",
                        "            }\n",
                        "    else {\n",
                        "\n",
                        "                this.rand = new Random();\n",
                        "            }\n",
                        "}\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "LongUniformDataGenerator(int, int)",
                    "parameters": [
                        "constructorId",
                        "seed"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Random",
                            "Random(long)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Random",
                            "Random()"
                        ]
                    ]
                },
                "86-92:saturatedCast": {
                    "start": 86,
                    "end": 92,
                    "body": [
                        "\t\tprivate static int saturatedCast(long toInt) {\n",
                        "        \tif (toInt > Integer.MAX_VALUE) {\n",
                        "        \t\treturn Integer.MAX_VALUE;\n",
                        "        \t} else {\n",
                        "        \t\treturn (int) toInt;\n",
                        "        \t}\n",
                        "\t\t}\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "saturatedCast(long)",
                    "parameters": [
                        "toInt"
                    ],
                    "calls": []
                },
                "53-65:generateUniformHash": {
                    "start": 53,
                    "end": 65,
                    "body": [
                        "        long[] generateUniformHash(int N, long Max) {\n",
                        "                if (N > Max)\n",
                        "                        throw new RuntimeException(\"not possible\");\n",
                        "                long[] ans = new long[N];\n",
                        "                Set<Long> s = new HashSet<>();\n",
                        "                while (s.size() < N)\n",
                        "                        s.add((long) (this.rand.nextDouble() * Max));\n",
                        "                Iterator<Long> i = s.iterator();\n",
                        "                for (int k = 0; k < N; ++k)\n",
                        "                        ans[k] = i.next().longValue();\n",
                        "                Arrays.sort(ans);\n",
                        "                return ans;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "long[]",
                            "long[]"
                        ]
                    ],
                    "signature": "generateUniformHash(int, long)",
                    "parameters": [
                        "N",
                        "Max"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "HashSet<Long>()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Set",
                            "iterator()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Set",
                            "size()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Set",
                            "add(java.lang.Long)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Random",
                            "nextDouble()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Long",
                            "longValue()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Iterator",
                            "next()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "sort(long[])"
                        ]
                    ]
                }
            },
            "fields": {
                "108-108:rand": {
                    "start": 108,
                    "end": 108,
                    "body": [
                        "        Random rand = new Random();\n"
                    ],
                    "modifiers": [],
                    "types": [
                        [
                            "Random",
                            "java.util.Random"
                        ]
                    ]
                }
            }
        }
    }
}