{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/differential/IntegratedComposition.java",
    "imports": {
        "9-9:import IntWrapper": {
            "start": 9,
            "end": 9,
            "body": [
                "import me.lemire.integercompression.IntWrapper;\n"
            ]
        }
    },
    "classes": {
        "IntegratedComposition": {
            "start": 16,
            "end": 16,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [
                "IntegratedIntegerCODEC"
            ],
            "extends": [],
            "methods": {
                "69-71:toString": {
                    "start": 69,
                    "end": 71,
                    "body": [
                        "        public String toString() {\n",
                        "                return F1.toString() + \" + \" + F2.toString();\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "toString()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "toString()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def toString(self) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "58-66:uncompress0": {
                    "start": 58,
                    "end": 66,
                    "body": [
                        "        public void uncompress0(int[] in, IntWrapper inpos, int inlength,\n",
                        "                                int[] out, IntWrapper outpos) {\n",
                        "                if (inlength == 0)\n",
                        "                        return;\n",
                        "                int init = inpos.get();\n",
                        "                F1.uncompress0(in, inpos, inlength, out, outpos);\n",
                        "                inlength -= inpos.get() - init;\n",
                        "                F2.uncompress0(in, inpos, inlength, out, outpos);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "uncompress0(int[], IntWrapper, int, int[], IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "57-59:uncompress0"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def uncompress0(self, in_: typing.List[int], inpos: IntWrapper, inlength: int, out: typing.List[int], outpos: IntWrapper) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "41-55:compress0": {
                    "start": 41,
                    "end": 55,
                    "body": [
                        "        public void compress0(int[] in, IntWrapper inpos, int inlength,\n",
                        "                              int[] out, IntWrapper outpos) {\n",
                        "            if (inlength == 0) {\n",
                        "                return;\n",
                        "            }\n",
                        "            int inposInit = inpos.get();\n",
                        "            int outposInit = outpos.get();\n",
                        "            F1.compress0(in, inpos, inlength, out, outpos);\n",
                        "            if (outpos.get() == outposInit) {\n",
                        "                out[outposInit] = 0;\n",
                        "                outpos.increment();\n",
                        "            }\n",
                        "            inlength -= inpos.get() - inposInit;\n",
                        "            F2.compress0(in, inpos, inlength, out, outpos);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "compress0(int[], IntWrapper, int, int[], IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "69-71:increment"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def compress0(self, in_: typing.List[int], inpos: IntWrapper, inlength: int, out: typing.List[int], outpos: IntWrapper) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "33-37:IntegratedComposition": {
                    "start": 33,
                    "end": 37,
                    "body": [
                        "        public IntegratedComposition(IntegratedIntegerCODEC f1,\n",
                        "                IntegratedIntegerCODEC f2) {\n",
                        "                F1 = f1;\n",
                        "                F2 = f2;\n",
                        "        }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "IntegratedComposition(IntegratedIntegerCODEC, IntegratedIntegerCODEC)",
                    "parameters": [
                        "f1",
                        "f2"
                    ],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __init__(self, f1: IntegratedIntegerCODEC, f2: IntegratedIntegerCODEC) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                }
            },
            "fields": {
                "17-17:F2": {
                    "start": 17,
                    "end": 17,
                    "body": [
                        "        IntegratedIntegerCODEC F1, F2;\n"
                    ],
                    "modifiers": [],
                    "types": [
                        [
                            "IntegratedIntegerCODEC",
                            "IntegratedIntegerCODEC"
                        ]
                    ],
                    "partial_translation": [
                        "    F2: IntegratedIntegerCODEC = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "17-17:F1": {
                    "start": 17,
                    "end": 17,
                    "body": [
                        "        IntegratedIntegerCODEC F1, F2;\n"
                    ],
                    "modifiers": [],
                    "types": [
                        [
                            "IntegratedIntegerCODEC",
                            "IntegratedIntegerCODEC"
                        ]
                    ],
                    "partial_translation": [
                        "    F1: IntegratedIntegerCODEC = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class IntegratedComposition(IntegratedIntegerCODEC):\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import io",
        "import typing\nfrom typing import *",
        "import os",
        "from src.main.me.lemire.integercompression.IntWrapper import *",
        "from src.main.me.lemire.integercompression.differential.IntegratedIntegerCODEC import *"
    ]
}