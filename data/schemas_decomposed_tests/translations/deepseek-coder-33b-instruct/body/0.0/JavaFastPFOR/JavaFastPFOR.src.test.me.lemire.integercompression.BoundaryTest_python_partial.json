{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/integercompression/BoundaryTest.java",
    "imports": {
        "10-10:import Arrays": {
            "start": 10,
            "end": 10,
            "body": [
                "import java.util.Arrays;\n"
            ]
        },
        "16-16:import Test": {
            "start": 16,
            "end": 16,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "12-12:import IntegratedBinaryPacking": {
            "start": 12,
            "end": 12,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedBinaryPacking;\n"
            ]
        },
        "13-13:import IntegratedComposition": {
            "start": 13,
            "end": 13,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedComposition;\n"
            ]
        },
        "14-14:import IntegratedVariableByte": {
            "start": 14,
            "end": 14,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedVariableByte;\n"
            ]
        },
        "18-18:import static Assert.*": {
            "start": 18,
            "end": 18,
            "body": [
                "import static org.junit.Assert.*;\n"
            ]
        }
    },
    "classes": {
        "BoundaryTest": {
            "start": 25,
            "end": 25,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "108-111:testComposition_test1_decomposed": {
                    "start": 108,
                    "end": 111,
                    "body": [
                        "    public void testComposition_test1_decomposed()  {\n",
                        "        Composition c = new Composition(new BinaryPacking(), new VariableByte());\n",
                        "        testBoundary(c);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testComposition_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                            "BinaryPacking",
                            "BinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.integercompression.BoundaryTest",
                            "BoundaryTest",
                            "75-79:testBoundary"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testComposition_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "103-105:testComposition_test0_decomposed": {
                    "start": 103,
                    "end": 105,
                    "body": [
                        "    public void testComposition_test0_decomposed()  {\n",
                        "        Composition c = new Composition(new BinaryPacking(), new VariableByte());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testComposition_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                            "BinaryPacking",
                            "BinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testComposition_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "96-100:testIntegratedComposition_test1_decomposed": {
                    "start": 96,
                    "end": 100,
                    "body": [
                        "    public void testIntegratedComposition_test1_decomposed()  {\n",
                        "        IntegratedComposition c = new IntegratedComposition(\n",
                        "                new IntegratedBinaryPacking(), new IntegratedVariableByte());\n",
                        "        testBoundary(c);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIntegratedComposition_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.integercompression.BoundaryTest",
                            "BoundaryTest",
                            "75-79:testBoundary"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testIntegratedComposition_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "90-93:testIntegratedComposition_test0_decomposed": {
                    "start": 90,
                    "end": 93,
                    "body": [
                        "    public void testIntegratedComposition_test0_decomposed()  {\n",
                        "        IntegratedComposition c = new IntegratedComposition(\n",
                        "                new IntegratedBinaryPacking(), new IntegratedVariableByte());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIntegratedComposition_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testIntegratedComposition_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "75-79:testBoundary": {
                    "start": 75,
                    "end": 79,
                    "body": [
                        "    private static void testBoundary(IntegerCODEC c) {\n",
                        "        around32(c);\n",
                        "        around128(c);\n",
                        "        around256(c);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testBoundary(IntegerCODEC)",
                    "parameters": [
                        "c"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.test.me.lemire.integercompression.BoundaryTest",
                            "BoundaryTest",
                            "56-60:around32"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.integercompression.BoundaryTest",
                            "BoundaryTest",
                            "63-67:around128"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.integercompression.BoundaryTest",
                            "BoundaryTest",
                            "69-73:around256"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __testBoundary(c: IntegerCODEC) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "69-73:around256": {
                    "start": 69,
                    "end": 73,
                    "body": [
                        "    private static void around256(IntegerCODEC c) {\n",
                        "        compressAndUncompress(255, c);\n",
                        "        compressAndUncompress(256, c);\n",
                        "        compressAndUncompress(257, c);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "around256(IntegerCODEC)",
                    "parameters": [
                        "c"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.test.me.lemire.integercompression.BoundaryTest",
                            "BoundaryTest",
                            "26-55:compressAndUncompress"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __around256(c: IntegerCODEC) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "63-67:around128": {
                    "start": 63,
                    "end": 67,
                    "body": [
                        "    private static void around128(IntegerCODEC c) {\n",
                        "        compressAndUncompress(127, c);\n",
                        "        compressAndUncompress(128, c);\n",
                        "        compressAndUncompress(129, c);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "around128(IntegerCODEC)",
                    "parameters": [
                        "c"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.test.me.lemire.integercompression.BoundaryTest",
                            "BoundaryTest",
                            "26-55:compressAndUncompress"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __around128(c: IntegerCODEC) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "56-60:around32": {
                    "start": 56,
                    "end": 60,
                    "body": [
                        "    private static void around32(IntegerCODEC c) {\n",
                        "        compressAndUncompress(31, c);\n",
                        "        compressAndUncompress(32, c);\n",
                        "        compressAndUncompress(33, c);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "around32(IntegerCODEC)",
                    "parameters": [
                        "c"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.test.me.lemire.integercompression.BoundaryTest",
                            "BoundaryTest",
                            "26-55:compressAndUncompress"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __around32(c: IntegerCODEC) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "26-55:compressAndUncompress": {
                    "start": 26,
                    "end": 55,
                    "body": [
                        "    private static void compressAndUncompress(int length, IntegerCODEC c) {\n",
                        "        // Initialize array.\n",
                        "        int[] source = new int[length];\n",
                        "        for (int i = 0; i < source.length; ++i) {\n",
                        "            source[i] = i;\n",
                        "        }\n",
                        "\n",
                        "        // Compress an array.\n",
                        "        int[] compressed = new int[length];\n",
                        "        IntWrapper c_inpos = new IntWrapper(0);\n",
                        "        IntWrapper c_outpos = new IntWrapper(0);\n",
                        "        c.compress0(source, c_inpos, source.length, compressed, c_outpos);\n",
                        "        assertTrue(c_outpos.get() <= length);\n",
                        "\n",
                        "        // Uncompress an array.\n",
                        "        int[] uncompressed = new int[length];\n",
                        "        IntWrapper u_inpos = new IntWrapper(0);\n",
                        "        IntWrapper u_outpos = new IntWrapper(0);\n",
                        "        c.uncompress0(compressed, u_inpos, c_outpos.get(), uncompressed,\n",
                        "                u_outpos);\n",
                        "\n",
                        "        // Compare between uncompressed and original arrays.\n",
                        "        int[] target = Arrays.copyOf(uncompressed, u_outpos.get());\n",
                        "        if (!Arrays.equals(source, target)) {\n",
                        "            System.out.println(\"problem with length = \" + length + \" and \" + c);\n",
                        "            System.out.println(Arrays.toString(source));\n",
                        "            System.out.println(Arrays.toString(target));\n",
                        "        }\n",
                        "        assertArrayEquals(source, target);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "compressAndUncompress(int, IntegerCODEC)",
                    "parameters": [
                        "length",
                        "c"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "57-59:uncompress0"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "equals(int[],int[])"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "toString(int[])"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(int[],int[])"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __compressAndUncompress(length: int, c: IntegerCODEC) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {},
            "is_enum": false,
            "python_class_declaration": "class BoundaryTest(unittest.TestCase):\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import unittest",
        "import pytest",
        "import io",
        "import os",
        "import unittest",
        "from src.main.me.lemire.integercompression.BinaryPacking import *",
        "from src.main.me.lemire.integercompression.Composition import *",
        "from src.main.me.lemire.integercompression.IntWrapper import *",
        "from src.main.me.lemire.integercompression.IntegerCODEC import *",
        "from src.main.me.lemire.integercompression.VariableByte import *",
        "from src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking import *",
        "from src.main.me.lemire.integercompression.differential.IntegratedComposition import *",
        "from src.main.me.lemire.integercompression.differential.IntegratedIntegerCODEC import *",
        "from src.main.me.lemire.integercompression.differential.IntegratedVariableByte import *"
    ]
}