{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-csv/src/main/java/org/apache/commons/csv/CSVParser.java",
    "imports": {
        "24-24:import IOException": {
            "start": 24,
            "end": 24,
            "body": [
                "import java.io.IOException;\n"
            ]
        },
        "25-25:import InputStream": {
            "start": 25,
            "end": 25,
            "body": [
                "import java.io.InputStream;\n"
            ]
        },
        "27-27:import Reader": {
            "start": 27,
            "end": 27,
            "body": [
                "import java.io.Reader;\n"
            ]
        },
        "47-47:import Stream": {
            "start": 47,
            "end": 47,
            "body": [
                "import java.util.stream.Stream;\n"
            ]
        },
        "31-31:import Charset": {
            "start": 31,
            "end": 31,
            "body": [
                "import java.nio.charset.Charset;\n"
            ]
        },
        "22-22:import Closeable": {
            "start": 22,
            "end": 22,
            "body": [
                "import java.io.Closeable;\n"
            ]
        },
        "23-23:import File": {
            "start": 23,
            "end": 23,
            "body": [
                "import java.io.File;\n"
            ]
        },
        "33-33:import Path": {
            "start": 33,
            "end": 33,
            "body": [
                "import java.nio.file.Path;\n"
            ]
        },
        "30-30:import URL": {
            "start": 30,
            "end": 30,
            "body": [
                "import java.net.URL;\n"
            ]
        },
        "26-26:import InputStreamReader": {
            "start": 26,
            "end": 26,
            "body": [
                "import java.io.InputStreamReader;\n"
            ]
        },
        "28-28:import StringReader": {
            "start": 28,
            "end": 28,
            "body": [
                "import java.io.StringReader;\n"
            ]
        },
        "29-29:import UncheckedIOException": {
            "start": 29,
            "end": 29,
            "body": [
                "import java.io.UncheckedIOException;\n"
            ]
        },
        "40-40:import Map": {
            "start": 40,
            "end": 40,
            "body": [
                "import java.util.Map;\n"
            ]
        },
        "39-39:import List": {
            "start": 39,
            "end": 39,
            "body": [
                "import java.util.List;\n"
            ]
        },
        "43-43:import Spliterator": {
            "start": 43,
            "end": 43,
            "body": [
                "import java.util.Spliterator;\n"
            ]
        },
        "37-37:import Iterator": {
            "start": 37,
            "end": 37,
            "body": [
                "import java.util.Iterator;\n"
            ]
        },
        "32-32:import Files": {
            "start": 32,
            "end": 32,
            "body": [
                "import java.nio.file.Files;\n"
            ]
        },
        "34-34:import ArrayList": {
            "start": 34,
            "end": 34,
            "body": [
                "import java.util.ArrayList;\n"
            ]
        },
        "35-35:import Arrays": {
            "start": 35,
            "end": 35,
            "body": [
                "import java.util.Arrays;\n"
            ]
        },
        "36-36:import Collections": {
            "start": 36,
            "end": 36,
            "body": [
                "import java.util.Collections;\n"
            ]
        },
        "38-38:import LinkedHashMap": {
            "start": 38,
            "end": 38,
            "body": [
                "import java.util.LinkedHashMap;\n"
            ]
        },
        "41-41:import NoSuchElementException": {
            "start": 41,
            "end": 41,
            "body": [
                "import java.util.NoSuchElementException;\n"
            ]
        },
        "42-42:import Objects": {
            "start": 42,
            "end": 42,
            "body": [
                "import java.util.Objects;\n"
            ]
        },
        "44-44:import Spliterators": {
            "start": 44,
            "end": 44,
            "body": [
                "import java.util.Spliterators;\n"
            ]
        },
        "45-45:import TreeMap": {
            "start": 45,
            "end": 45,
            "body": [
                "import java.util.TreeMap;\n"
            ]
        },
        "46-46:import Collectors": {
            "start": 46,
            "end": 46,
            "body": [
                "import java.util.stream.Collectors;\n"
            ]
        },
        "48-48:import StreamSupport": {
            "start": 48,
            "end": 48,
            "body": [
                "import java.util.stream.StreamSupport;\n"
            ]
        },
        "20-20:import static Type.TOKEN": {
            "start": 20,
            "end": 20,
            "body": [
                "import static org.apache.commons.csv.Token.Type.TOKEN;\n"
            ]
        }
    },
    "classes": {
        "CSVParser": {
            "start": 137,
            "end": 137,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "CSVRecordIterator",
                "Headers"
            ],
            "implements": [],
            "extends": [],
            "methods": {
                "689-691:iterator": {
                    "start": 689,
                    "end": 691,
                    "body": [
                        "    public Iterator<CSVRecord> iterator() {\n",
                        "        return csvRecordIterator;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Iterator<CSVRecord>",
                            "java.util.Iterator<CSVRecord>"
                        ]
                    ],
                    "signature": "iterator()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def iterator(self) -> typing.Iterator[CSVRecord]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "413-417:close": {
                    "start": 413,
                    "end": 417,
                    "body": [
                        "    public void close() throws IOException {\n",
                        "        if (this.lexer != null) {\n",
                        "            this.lexer.close();\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "close()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.Lexer",
                            "Lexer",
                            "85-87:close"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def close(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "313-320:parse5": {
                    "start": 313,
                    "end": 320,
                    "body": [
                        "    public static CSVParser parse5(final URL url, final Charset charset, final CSVFormat format)\n",
                        "            throws IOException {\n",
                        "        Objects.requireNonNull(url, \"url\");\n",
                        "        Objects.requireNonNull(charset, \"charset\");\n",
                        "        Objects.requireNonNull(format, \"format\");\n",
                        "\n",
                        "        return CSVParser.CSVParser1(new InputStreamReader(url.openStream(), charset), format);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "SuppressWarnings(\"resource\")",
                        "SuppressWarnings(\"resource\")"
                    ],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "CSVParser",
                            "CSVParser"
                        ]
                    ],
                    "signature": "parse5(URL, Charset, CSVFormat)",
                    "parameters": [
                        "url",
                        "charset",
                        "format"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Objects",
                            "requireNonNull(java.lang.Object,java.lang.String)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "377-380:CSVParser1"
                        ],
                        [
                            "library",
                            "java.base/java/io/InputStreamReader",
                            "InputStreamReader(java.io.InputStream,java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "java.base/java/net/URL",
                            "openStream()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def parse5(url: typing.Union[urllib.parse.ParseResult, urllib.parse.SplitResult, urllib.parse.DefragResult, str], charset: str, format_: CSVFormat) -> CSVParser:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "256-261:parse2": {
                    "start": 256,
                    "end": 261,
                    "body": [
                        "    public static CSVParser parse2(final Path path, final Charset charset, final CSVFormat format)\n",
                        "            throws IOException {\n",
                        "        Objects.requireNonNull(path, \"path\");\n",
                        "        Objects.requireNonNull(format, \"format\");\n",
                        "        return parse1(Files.newInputStream(path), charset, format);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "SuppressWarnings(\"resource\")",
                        "SuppressWarnings(\"resource\")"
                    ],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "CSVParser",
                            "CSVParser"
                        ]
                    ],
                    "signature": "parse2(Path, Charset, CSVFormat)",
                    "parameters": [
                        "path",
                        "charset",
                        "format"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Objects",
                            "requireNonNull(java.lang.Object,java.lang.String)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "235-241:parse1"
                        ],
                        [
                            "library",
                            "java.base/java/nio/file/Files",
                            "newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def parse2(path: Path, charset: str, format_: CSVFormat) -> CSVParser:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "235-241:parse1": {
                    "start": 235,
                    "end": 241,
                    "body": [
                        "    public static CSVParser parse1(\n",
                        "            final InputStream inputStream, final Charset charset, final CSVFormat format)\n",
                        "            throws IOException {\n",
                        "        Objects.requireNonNull(inputStream, \"inputStream\");\n",
                        "        Objects.requireNonNull(format, \"format\");\n",
                        "        return parse3(new InputStreamReader(inputStream, charset), format);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "SuppressWarnings(\"resource\")",
                        "SuppressWarnings(\"resource\")"
                    ],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "CSVParser",
                            "CSVParser"
                        ]
                    ],
                    "signature": "parse1(InputStream, Charset, CSVFormat)",
                    "parameters": [
                        "inputStream",
                        "charset",
                        "format"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Objects",
                            "requireNonNull(java.lang.Object,java.lang.String)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "277-279:parse3"
                        ],
                        [
                            "library",
                            "java.base/java/io/InputStreamReader",
                            "InputStreamReader(java.io.InputStream,java.nio.charset.Charset)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def parse1(inputStream: typing.Union[io.BytesIO, io.StringIO, io.BufferedReader], charset: str, format_: CSVFormat) -> CSVParser:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "399-405:addRecordValue": {
                    "start": 399,
                    "end": 405,
                    "body": [
                        "    private void addRecordValue(final boolean lastRecord) {\n",
                        "        final String input = this.format.trim1(this.reusableToken.content.toString());\n",
                        "        if (lastRecord && input.isEmpty() && this.format.getTrailingDelimiter()) {\n",
                        "            return;\n",
                        "        }\n",
                        "        this.recordList.add(handleNull(input));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "SuppressWarnings(\"resource\")"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "addRecordValue(boolean)",
                    "parameters": [
                        "lastRecord"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "2266-2268:trim1"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1679-1681:getTrailingDelimiter"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "isEmpty()"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "add(java.lang.String)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "617-625:handleNull"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __addRecordValue(self, lastRecord: bool) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "763-766:stream": {
                    "start": 763,
                    "end": 766,
                    "body": [
                        "    public Stream<CSVRecord> stream() {\n",
                        "        return StreamSupport.stream(\n",
                        "                Spliterators.spliteratorUnknownSize(iterator(), Spliterator.ORDERED), false);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Stream<CSVRecord>",
                            "java.util.stream.Stream<CSVRecord>"
                        ]
                    ],
                    "signature": "stream()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/stream/StreamSupport",
                            "stream(java.util.Spliterator,boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Spliterators",
                            "spliteratorUnknownSize(java.util.Iterator,int)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "689-691:iterator"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def stream(self) -> typing.Iterable[CSVRecord]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "658-660:isClosed": {
                    "start": 658,
                    "end": 660,
                    "body": [
                        "    public boolean isClosed() {\n",
                        "        return this.lexer.isClosed();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isClosed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.Lexer",
                            "Lexer",
                            "111-113:isClosed"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def isClosed(self) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "649-651:hasTrailerComment": {
                    "start": 649,
                    "end": 651,
                    "body": [
                        "    public boolean hasTrailerComment() {\n",
                        "        return trailerComment != null;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "hasTrailerComment()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def hasTrailerComment(self) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "637-639:hasHeaderComment": {
                    "start": 637,
                    "end": 639,
                    "body": [
                        "    public boolean hasHeaderComment() {\n",
                        "        return headerComment != null;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "hasHeaderComment()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def hasHeaderComment(self) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "607-609:getTrailerComment": {
                    "start": 607,
                    "end": 609,
                    "body": [
                        "    public String getTrailerComment() {\n",
                        "        return trailerComment;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "getTrailerComment()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getTrailerComment(self) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "596-598:getRecords": {
                    "start": 596,
                    "end": 598,
                    "body": [
                        "    public List<CSVRecord> getRecords() {\n",
                        "        return stream().collect(Collectors.toList());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "List<CSVRecord>",
                            "java.util.List<CSVRecord>"
                        ]
                    ],
                    "signature": "getRecords()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/stream/Stream",
                            "collect(java.util.stream.Collector)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "763-766:stream"
                        ],
                        [
                            "library",
                            "java.base/java/util/stream/Collectors",
                            "toList()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getRecords(self) -> typing.List[CSVRecord]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "583-585:getRecordNumber": {
                    "start": 583,
                    "end": 585,
                    "body": [
                        "    public long getRecordNumber() {\n",
                        "        return this.recordNumber;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "long",
                            "long"
                        ]
                    ],
                    "signature": "getRecordNumber()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getRecordNumber(self) -> int:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "571-573:getHeaderNames": {
                    "start": 571,
                    "end": 573,
                    "body": [
                        "    public List<String> getHeaderNames() {\n",
                        "        return Collections.unmodifiableList(headers.headerNames);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "List<String>",
                            "java.util.List<String>"
                        ]
                    ],
                    "signature": "getHeaderNames()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Collections",
                            "unmodifiableList(java.util.List)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getHeaderNames(self) -> typing.List[str]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "542-549:getHeaderMap": {
                    "start": 542,
                    "end": 549,
                    "body": [
                        "    public Map<String, Integer> getHeaderMap() {\n",
                        "        if (this.headers.headerMap == null) {\n",
                        "            return null;\n",
                        "        }\n",
                        "        final Map<String, Integer> map = createEmptyHeaderMap();\n",
                        "        map.putAll(this.headers.headerMap);\n",
                        "        return map;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Map<String,Integer>",
                            "java.util.Map<String,Integer>"
                        ]
                    ],
                    "signature": "getHeaderMap()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "419-423:createEmptyHeaderMap"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "putAll(java.util.Map)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getHeaderMap(self) -> typing.Dict[str, int]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "528-530:getHeaderComment": {
                    "start": 528,
                    "end": 530,
                    "body": [
                        "    public String getHeaderComment() {\n",
                        "        return headerComment;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "getHeaderComment()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getHeaderComment(self) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "518-520:getFirstEndOfLine": {
                    "start": 518,
                    "end": 520,
                    "body": [
                        "    public String getFirstEndOfLine() {\n",
                        "        return lexer.getFirstEol();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "getFirstEndOfLine()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.Lexer",
                            "Lexer",
                            "107-109:getFirstEol"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getFirstEndOfLine(self) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "508-510:getCurrentLineNumber": {
                    "start": 508,
                    "end": 510,
                    "body": [
                        "    public long getCurrentLineNumber() {\n",
                        "        return this.lexer.getCurrentLineNumber();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "long",
                            "long"
                        ]
                    ],
                    "signature": "getCurrentLineNumber()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.Lexer",
                            "Lexer",
                            "103-105:getCurrentLineNumber"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getCurrentLineNumber(self) -> int:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "377-380:CSVParser1": {
                    "start": 377,
                    "end": 380,
                    "body": [
                        "    public static CSVParser CSVParser1(final Reader reader, final CSVFormat format)\n",
                        "            throws IOException {\n",
                        "        return new CSVParser(reader, format, 0, 1);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "CSVParser",
                            "CSVParser"
                        ]
                    ],
                    "signature": "CSVParser1(Reader, CSVFormat)",
                    "parameters": [
                        "reader",
                        "format"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "360-375:CSVParser"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def CSVParser1(reader: typing.Union[io.TextIOWrapper, io.BufferedReader, io.TextIOBase], format_: CSVFormat) -> CSVParser:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "360-375:CSVParser": {
                    "start": 360,
                    "end": 375,
                    "body": [
                        "    public CSVParser(\n",
                        "            final Reader reader,\n",
                        "            final CSVFormat format,\n",
                        "            final long characterOffset,\n",
                        "            final long recordNumber)\n",
                        "            throws IOException {\n",
                        "        Objects.requireNonNull(reader, \"reader\");\n",
                        "        Objects.requireNonNull(format, \"format\");\n",
                        "\n",
                        "        this.format = format.copy();\n",
                        "        this.lexer = new Lexer(format, new ExtendedBufferedReader(reader));\n",
                        "        this.csvRecordIterator = new CSVRecordIterator();\n",
                        "        this.headers = createHeaders();\n",
                        "        this.characterOffset = characterOffset;\n",
                        "        this.recordNumber = recordNumber - 1;\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "CSVParser(Reader, CSVFormat, long, long)",
                    "parameters": [
                        "reader",
                        "format",
                        "characterOffset",
                        "recordNumber"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Objects",
                            "requireNonNull(java.lang.Object,java.lang.String)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1434-1436:copy"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.Lexer",
                            "Lexer",
                            "67-77:Lexer"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.ExtendedBufferedReader",
                            "ExtendedBufferedReader",
                            "50-52:ExtendedBufferedReader"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVRecordIterator",
                            "CSVRecordIterator"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "431-498:createHeaders"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __init__(self, reader: typing.Union[io.TextIOWrapper, io.BufferedReader, io.TextIOBase], format_: CSVFormat, characterOffset: int, recordNumber: int) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "291-296:parse4": {
                    "start": 291,
                    "end": 296,
                    "body": [
                        "    public static CSVParser parse4(final String string, final CSVFormat format) throws IOException {\n",
                        "        Objects.requireNonNull(string, \"string\");\n",
                        "        Objects.requireNonNull(format, \"format\");\n",
                        "\n",
                        "        return CSVParser.CSVParser1(new StringReader(string), format);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "CSVParser",
                            "CSVParser"
                        ]
                    ],
                    "signature": "parse4(String, CSVFormat)",
                    "parameters": [
                        "string",
                        "format"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Objects",
                            "requireNonNull(java.lang.Object,java.lang.String)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "377-380:CSVParser1"
                        ],
                        [
                            "library",
                            "java.base/java/io/StringReader",
                            "StringReader(java.lang.String)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def parse4(string: str, format_: CSVFormat) -> CSVParser:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "277-279:parse3": {
                    "start": 277,
                    "end": 279,
                    "body": [
                        "    public static CSVParser parse3(final Reader reader, final CSVFormat format) throws IOException {\n",
                        "        return CSVParser.CSVParser1(reader, format);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "CSVParser",
                            "CSVParser"
                        ]
                    ],
                    "signature": "parse3(Reader, CSVFormat)",
                    "parameters": [
                        "reader",
                        "format"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "377-380:CSVParser1"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def parse3(reader: typing.Union[io.TextIOWrapper, io.BufferedReader, io.TextIOBase], format_: CSVFormat) -> CSVParser:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "213-217:parse0": {
                    "start": 213,
                    "end": 217,
                    "body": [
                        "    public static CSVParser parse0(final File file, final Charset charset, final CSVFormat format)\n",
                        "            throws IOException {\n",
                        "        Objects.requireNonNull(file, \"file\");\n",
                        "        return parse2(file.toPath(), charset, format);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "CSVParser",
                            "CSVParser"
                        ]
                    ],
                    "signature": "parse0(File, Charset, CSVFormat)",
                    "parameters": [
                        "file",
                        "charset",
                        "format"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Objects",
                            "requireNonNull(java.lang.Object,java.lang.String)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "256-261:parse2"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "toPath()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def parse0(file: pathlib.Path, charset: str, format_: CSVFormat) -> CSVParser:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "669-672:isStrictQuoteMode": {
                    "start": 669,
                    "end": 672,
                    "body": [
                        "    private boolean isStrictQuoteMode() {\n",
                        "        return this.format.getQuoteMode() == QuoteMode.ALL_NON_NULL\n",
                        "                || this.format.getQuoteMode() == QuoteMode.NON_NUMERIC;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isStrictQuoteMode()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1651-1653:getQuoteMode"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __isStrictQuoteMode(self) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "617-625:handleNull": {
                    "start": 617,
                    "end": 625,
                    "body": [
                        "    private String handleNull(final String input) {\n",
                        "        final boolean isQuoted = this.reusableToken.isQuoted;\n",
                        "        final String nullString = format.getNullString();\n",
                        "        final boolean strictQuoteMode = isStrictQuoteMode();\n",
                        "        if (input.equals(nullString)) {\n",
                        "            return strictQuoteMode && isQuoted ? input : null;\n",
                        "        }\n",
                        "        return strictQuoteMode && nullString == null && input.isEmpty() && !isQuoted ? null : input;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "handleNull(String)",
                    "parameters": [
                        "input"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1633-1635:getNullString"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "669-672:isStrictQuoteMode"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "isEmpty()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __handleNull(self, input_: str) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "431-498:createHeaders": {
                    "start": 431,
                    "end": 498,
                    "body": [
                        "    private Headers createHeaders() throws IOException {\n",
                        "        Map<String, Integer> hdrMap = null;\n",
                        "        List<String> headerNames = null;\n",
                        "        final String[] formatHeader = this.format.getHeader();\n",
                        "        if (formatHeader != null) {\n",
                        "            hdrMap = createEmptyHeaderMap();\n",
                        "            String[] headerRecord = null;\n",
                        "            if (formatHeader.length == 0) {\n",
                        "                final CSVRecord nextRecord = this.nextRecord();\n",
                        "                if (nextRecord != null) {\n",
                        "                    headerRecord = nextRecord.values();\n",
                        "                    headerComment = nextRecord.getComment();\n",
                        "                }\n",
                        "            } else {\n",
                        "                if (this.format.getSkipHeaderRecord()) {\n",
                        "                    final CSVRecord nextRecord = this.nextRecord();\n",
                        "                    if (nextRecord != null) {\n",
                        "                        headerComment = nextRecord.getComment();\n",
                        "                    }\n",
                        "                }\n",
                        "                headerRecord = formatHeader;\n",
                        "            }\n",
                        "\n",
                        "            if (headerRecord != null) {\n",
                        "                boolean observedMissing = false;\n",
                        "                for (int i = 0; i < headerRecord.length; i++) {\n",
                        "                    final String header = headerRecord[i];\n",
                        "                    final boolean blankHeader = CSVFormat.isBlank(header);\n",
                        "                    if (blankHeader && !this.format.getAllowMissingColumnNames()) {\n",
                        "                        throw new IllegalArgumentException(\n",
                        "                                \"A header name is missing in \" + Arrays.toString(headerRecord));\n",
                        "                    }\n",
                        "\n",
                        "                    final boolean containsHeader =\n",
                        "                            blankHeader ? observedMissing : hdrMap.containsKey(header);\n",
                        "                    final DuplicateHeaderMode headerMode = this.format.getDuplicateHeaderMode();\n",
                        "                    final boolean duplicatesAllowed = headerMode == DuplicateHeaderMode.ALLOW_ALL;\n",
                        "                    final boolean emptyDuplicatesAllowed =\n",
                        "                            headerMode == DuplicateHeaderMode.ALLOW_EMPTY;\n",
                        "\n",
                        "                    if (containsHeader\n",
                        "                            && !duplicatesAllowed\n",
                        "                            && !(blankHeader && emptyDuplicatesAllowed)) {\n",
                        "                        throw new IllegalArgumentException(\n",
                        "                                String.format(\n",
                        "                                        \"The header contains a duplicate name: \\\"%s\\\" in %s. If\"\n",
                        "                                                + \" this is valid then use\"\n",
                        "                                                + \" CSVFormat.Builder.setDuplicateHeaderMode().\",\n",
                        "                                        header, Arrays.toString(headerRecord)));\n",
                        "                    }\n",
                        "                    observedMissing |= blankHeader;\n",
                        "                    if (header != null) {\n",
                        "                        hdrMap.put(header, Integer.valueOf(i));\n",
                        "                        if (headerNames == null) {\n",
                        "                            headerNames = new ArrayList<>(headerRecord.length);\n",
                        "                        }\n",
                        "                        headerNames.add(header);\n",
                        "                    }\n",
                        "                }\n",
                        "            }\n",
                        "        }\n",
                        "        if (headerNames == null) {\n",
                        "            headerNames = Collections.emptyList(); // immutable\n",
                        "        } else {\n",
                        "            headerNames = Collections.unmodifiableList(headerNames);\n",
                        "        }\n",
                        "        return new Headers(hdrMap, headerNames);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "Headers",
                            "Headers"
                        ]
                    ],
                    "signature": "createHeaders()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1576-1578:getHeader"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "419-423:createEmptyHeaderMap"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "700-752:nextRecord"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVRecord",
                            "CSVRecord",
                            "337-339:values"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVRecord",
                            "CSVRecord",
                            "149-151:getComment"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1669-1671:getSkipHeaderRecord"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1168-1170:isBlank"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "containsKey(java.lang.Object)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1557-1559:getDuplicateHeaderMode"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1507-1509:getAllowMissingColumnNames"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalArgumentException",
                            "IllegalArgumentException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "toString(java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(java.lang.String,java.lang.Integer)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "valueOf(int)"
                        ],
                        [
                            "library",
                            "java.base/java/util/ArrayList",
                            "ArrayList<String>(int)"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "add(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Collections",
                            "emptyList()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Collections",
                            "unmodifiableList(java.util.List)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "Headers",
                            "196-199:Headers"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __createHeaders(self) -> Headers:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "419-423:createEmptyHeaderMap": {
                    "start": 419,
                    "end": 423,
                    "body": [
                        "    private Map<String, Integer> createEmptyHeaderMap() {\n",
                        "        return this.format.getIgnoreHeaderCase()\n",
                        "                ? new TreeMap<>(String.CASE_INSENSITIVE_ORDER)\n",
                        "                : new LinkedHashMap<>();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "Map<String,Integer>",
                            "java.util.Map<String,Integer>"
                        ]
                    ],
                    "signature": "createEmptyHeaderMap()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1606-1608:getIgnoreHeaderCase"
                        ],
                        [
                            "library",
                            "java.base/java/util/TreeMap",
                            "TreeMap<String,Integer>(java.util.Comparator)"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedHashMap",
                            "LinkedHashMap<String,Integer>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __createEmptyHeaderMap(self) -> typing.Dict[str, int]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "700-752:nextRecord": {
                    "start": 700,
                    "end": 752,
                    "body": [
                        "    CSVRecord nextRecord() throws IOException {\n",
                        "        CSVRecord result = null;\n",
                        "        this.recordList.clear();\n",
                        "        StringBuilder sb = null;\n",
                        "        final long startCharPosition = lexer.getCharacterPosition() + this.characterOffset;\n",
                        "        do {\n",
                        "            this.reusableToken.reset();\n",
                        "            this.lexer.nextToken(this.reusableToken);\n",
                        "            switch (this.reusableToken.type) {\n",
                        "                case TOKEN:\n",
                        "                    this.addRecordValue(false);\n",
                        "                    break;\n",
                        "                case EORECORD:\n",
                        "                    this.addRecordValue(true);\n",
                        "                    break;\n",
                        "                case EOF:\n",
                        "                    if (this.reusableToken.isReady) {\n",
                        "                        this.addRecordValue(true);\n",
                        "                    } else if (sb != null) {\n",
                        "                        trailerComment = sb.toString();\n",
                        "                    }\n",
                        "                    break;\n",
                        "                case INVALID:\n",
                        "                    throw new IOException(\n",
                        "                            \"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\n",
                        "                case COMMENT: // Ignored currently\n",
                        "                    if (sb == null) { // first comment for this record\n",
                        "                        sb = new StringBuilder();\n",
                        "                    } else {\n",
                        "                        sb.append(Constants.LF);\n",
                        "                    }\n",
                        "                    sb.append(this.reusableToken.content);\n",
                        "                    this.reusableToken.type = TOKEN; // Read another token\n",
                        "                    break;\n",
                        "                default:\n",
                        "                    throw new IllegalStateException(\n",
                        "                            \"Unexpected Token type: \" + this.reusableToken.type);\n",
                        "            }\n",
                        "        } while (this.reusableToken.type == TOKEN);\n",
                        "\n",
                        "        if (!this.recordList.isEmpty()) {\n",
                        "            this.recordNumber++;\n",
                        "            final String comment = sb == null ? null : sb.toString();\n",
                        "            result =\n",
                        "                    new CSVRecord(\n",
                        "                            this,\n",
                        "                            this.recordList.toArray(Constants.EMPTY_STRING_ARRAY),\n",
                        "                            comment,\n",
                        "                            this.recordNumber,\n",
                        "                            startCharPosition);\n",
                        "        }\n",
                        "        return result;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "CSVRecord",
                            "CSVRecord"
                        ]
                    ],
                    "signature": "nextRecord()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.Lexer",
                            "Lexer",
                            "94-96:getCharacterPosition"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "clear()"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.Token",
                            "Token",
                            "60-65:reset"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.Lexer",
                            "Lexer",
                            "223-285:nextToken"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "399-405:addRecordValue"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ],
                        [
                            "library",
                            "java.base/java/io/IOException",
                            "IOException(java.lang.String)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "508-510:getCurrentLineNumber"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(char)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.CharSequence)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalStateException",
                            "IllegalStateException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "isEmpty()"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVRecord",
                            "CSVRecord",
                            "57-68:CSVRecord"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "toArray(java.lang.Object[])"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def nextRecord(self) -> CSVRecord:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "556-558:getHeaderMapRaw": {
                    "start": 556,
                    "end": 558,
                    "body": [
                        "    Map<String, Integer> getHeaderMapRaw() {\n",
                        "        return this.headers.headerMap;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "Map<String,Integer>",
                            "java.util.Map<String,Integer>"
                        ]
                    ],
                    "signature": "getHeaderMapRaw()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getHeaderMapRaw(self) -> typing.Dict[str, int]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {
                "346-346:reusableToken": {
                    "start": 346,
                    "end": 346,
                    "body": [
                        "    private final Token reusableToken = new Token();\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Token",
                            "Token"
                        ]
                    ],
                    "partial_translation": [
                        "    __reusableToken: Token = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "344-344:characterOffset": {
                    "start": 344,
                    "end": 344,
                    "body": [
                        "    private final long characterOffset;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "long",
                            "long"
                        ]
                    ],
                    "partial_translation": [
                        "    __characterOffset: int = 0",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "338-338:recordNumber": {
                    "start": 338,
                    "end": 338,
                    "body": [
                        "    private long recordNumber;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "long",
                            "long"
                        ]
                    ],
                    "partial_translation": [
                        "    __recordNumber: int = 0",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "335-335:recordList": {
                    "start": 335,
                    "end": 335,
                    "body": [
                        "    private final List<String> recordList = new ArrayList<>();\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "List<String>",
                            "java.util.List<String>"
                        ]
                    ],
                    "partial_translation": [
                        "    __recordList: typing.List[str] = []",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "332-332:csvRecordIterator": {
                    "start": 332,
                    "end": 332,
                    "body": [
                        "    private final CSVRecordIterator csvRecordIterator;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "CSVRecordIterator",
                            "CSVRecordIterator"
                        ]
                    ],
                    "partial_translation": [
                        "    __csvRecordIterator: CSVRecordIterator = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "330-330:lexer": {
                    "start": 330,
                    "end": 330,
                    "body": [
                        "    private final Lexer lexer;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Lexer",
                            "Lexer"
                        ]
                    ],
                    "partial_translation": [
                        "    __lexer: Lexer = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "328-328:headers": {
                    "start": 328,
                    "end": 328,
                    "body": [
                        "    private final Headers headers;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Headers",
                            "Headers"
                        ]
                    ],
                    "partial_translation": [
                        "    __headers: Headers = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "326-326:format": {
                    "start": 326,
                    "end": 326,
                    "body": [
                        "    private final CSVFormat format;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ],
                    "partial_translation": [
                        "    __format: CSVFormat = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "324-324:trailerComment": {
                    "start": 324,
                    "end": 324,
                    "body": [
                        "    private String trailerComment;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "partial_translation": [
                        "    __trailerComment: str = ''",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "322-322:headerComment": {
                    "start": 322,
                    "end": 322,
                    "body": [
                        "    private String headerComment;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "partial_translation": [
                        "    __headerComment: str = ''",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class CSVParser():\n\n"
        },
        "CSVRecordIterator": {
            "start": 139,
            "end": 139,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "CSVParser",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "182-184:remove": {
                    "start": 182,
                    "end": 184,
                    "body": [
                        "        public void remove() {\n",
                        "            throw new UnsupportedOperationException();\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "remove()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/UnsupportedOperationException",
                            "UnsupportedOperationException()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def remove(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "164-179:next": {
                    "start": 164,
                    "end": 179,
                    "body": [
                        "        public CSVRecord next() {\n",
                        "            if (CSVParser.this.isClosed()) {\n",
                        "                throw new NoSuchElementException(\"CSVParser has been closed\");\n",
                        "            }\n",
                        "            CSVRecord next = this.current;\n",
                        "            this.current = null;\n",
                        "\n",
                        "            if (next == null) {\n",
                        "                next = this.getNextRecord();\n",
                        "                if (next == null) {\n",
                        "                    throw new NoSuchElementException(\"No more CSV records available\");\n",
                        "                }\n",
                        "            }\n",
                        "\n",
                        "            return next;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CSVRecord",
                            "CSVRecord"
                        ]
                    ],
                    "signature": "next()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "658-660:isClosed"
                        ],
                        [
                            "library",
                            "java.base/java/util/NoSuchElementException",
                            "NoSuchElementException(java.lang.String)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVRecordIterator",
                            "142-149:getNextRecord"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def next_(self) -> CSVRecord:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "152-161:hasNext": {
                    "start": 152,
                    "end": 161,
                    "body": [
                        "        public boolean hasNext() {\n",
                        "            if (CSVParser.this.isClosed()) {\n",
                        "                return false;\n",
                        "            }\n",
                        "            if (this.current == null) {\n",
                        "                this.current = this.getNextRecord();\n",
                        "            }\n",
                        "\n",
                        "            return this.current != null;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "hasNext()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "658-660:isClosed"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVRecordIterator",
                            "142-149:getNextRecord"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def hasNext(self) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "142-149:getNextRecord": {
                    "start": 142,
                    "end": 149,
                    "body": [
                        "        private CSVRecord getNextRecord() {\n",
                        "            try {\n",
                        "                return CSVParser.this.nextRecord();\n",
                        "            } catch (final IOException e) {\n",
                        "                throw new UncheckedIOException(\n",
                        "                        e.getClass().getSimpleName() + \" reading next record: \" + e.toString(), e);\n",
                        "            }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "CSVRecord",
                            "CSVRecord"
                        ]
                    ],
                    "signature": "getNextRecord()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "700-752:nextRecord"
                        ],
                        [
                            "library",
                            "java.base/java/io/UncheckedIOException",
                            "UncheckedIOException(java.lang.String,java.io.IOException)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "toString()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "getSimpleName()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "getClass()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __getNextRecord(self) -> CSVRecord:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {
                "140-140:current": {
                    "start": 140,
                    "end": 140,
                    "body": [
                        "        private CSVRecord current;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "CSVRecord",
                            "CSVRecord"
                        ]
                    ],
                    "partial_translation": [
                        "    __current: CSVRecord = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class CSVRecordIterator():\n\n"
        },
        "Headers": {
            "start": 188,
            "end": 188,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "CSVParser",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "196-199:Headers": {
                    "start": 196,
                    "end": 199,
                    "body": [
                        "        Headers(final Map<String, Integer> headerMap, final List<String> headerNames) {\n",
                        "            this.headerMap = headerMap;\n",
                        "            this.headerNames = headerNames;\n",
                        "        }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "Headers(Map<String,Integer>, List<String>)",
                    "parameters": [
                        "headerMap",
                        "headerNames"
                    ],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __init__(self, headerMap: typing.Dict[str, int], headerNames: typing.List[str]) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {
                "194-194:headerNames": {
                    "start": 194,
                    "end": 194,
                    "body": [
                        "        final List<String> headerNames;\n"
                    ],
                    "modifiers": [
                        "final"
                    ],
                    "types": [
                        [
                            "List<String>",
                            "java.util.List<String>"
                        ]
                    ],
                    "partial_translation": [
                        "    headerNames: typing.List[str] = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "191-191:headerMap": {
                    "start": 191,
                    "end": 191,
                    "body": [
                        "        final Map<String, Integer> headerMap;\n"
                    ],
                    "modifiers": [
                        "final"
                    ],
                    "types": [
                        [
                            "Map<String,Integer>",
                            "java.util.Map<String,Integer>"
                        ]
                    ],
                    "partial_translation": [
                        "    headerMap: typing.Dict[str, int] = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class Headers:\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import pathlib",
        "from io import IOBase",
        "from io import StringIO",
        "import io",
        "from io import BytesIO",
        "import numbers",
        "import typing\nfrom typing import *",
        "import os",
        "import urllib",
        "from src.main.org.apache.commons.csv.CSVFormat import *",
        "from src.main.org.apache.commons.csv.CSVRecord import *",
        "from src.main.org.apache.commons.csv.Constants import *",
        "from src.main.org.apache.commons.csv.DuplicateHeaderMode import *",
        "from src.main.org.apache.commons.csv.ExtendedBufferedReader import *",
        "from src.main.org.apache.commons.csv.Lexer import *",
        "from src.main.org.apache.commons.csv.QuoteMode import *",
        "from src.main.org.apache.commons.csv.Token import *"
    ]
}