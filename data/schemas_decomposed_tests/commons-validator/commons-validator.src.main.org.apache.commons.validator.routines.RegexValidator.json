{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-validator/src/main/java/org/apache/commons/validator/routines/RegexValidator.java",
    "imports": {
        "19-19:import Serializable": {
            "start": 19,
            "end": 19,
            "body": [
                "import java.io.Serializable;\n"
            ]
        },
        "20-20:import Matcher": {
            "start": 20,
            "end": 20,
            "body": [
                "import java.util.regex.Matcher;\n"
            ]
        },
        "21-21:import Pattern": {
            "start": 21,
            "end": 21,
            "body": [
                "import java.util.regex.Pattern;\n"
            ]
        }
    },
    "classes": {
        "RegexValidator": {
            "start": 64,
            "end": 64,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [
                "Serializable"
            ],
            "extends": [],
            "methods": {
                "207-218:toString": {
                    "start": 207,
                    "end": 218,
                    "body": [
                        "    public String toString() {\n",
                        "        StringBuilder buffer = new StringBuilder();\n",
                        "        buffer.append(\"RegexValidator{\");\n",
                        "        for (int i = 0; i < patterns.length; i++) {\n",
                        "            if (i > 0) {\n",
                        "                buffer.append(\",\");\n",
                        "            }\n",
                        "            buffer.append(patterns[i].pattern());\n",
                        "        }\n",
                        "        buffer.append(\"}\");\n",
                        "        return buffer.toString();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "toString()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "pattern()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ]
                    ]
                },
                "177-199:validate": {
                    "start": 177,
                    "end": 199,
                    "body": [
                        "    public String validate(String value) {\n",
                        "        if (value == null) {\n",
                        "            return null;\n",
                        "        }\n",
                        "        for (int i = 0; i < patterns.length; i++) {\n",
                        "            Matcher matcher = patterns[i].matcher(value);\n",
                        "            if (matcher.matches()) {\n",
                        "                int count = matcher.groupCount();\n",
                        "                if (count == 1) {\n",
                        "                    return matcher.group(1);\n",
                        "                }\n",
                        "                StringBuilder buffer = new StringBuilder();\n",
                        "                for (int j = 0; j < count; j++) {\n",
                        "                    String component = matcher.group(j + 1);\n",
                        "                    if (component != null) {\n",
                        "                        buffer.append(component);\n",
                        "                    }\n",
                        "                }\n",
                        "                return buffer.toString();\n",
                        "            }\n",
                        "        }\n",
                        "        return null;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "validate(String)",
                    "parameters": [
                        "value"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "matcher(java.lang.CharSequence)"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Matcher",
                            "matches()"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Matcher",
                            "groupCount()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder()"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Matcher",
                            "group(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ]
                    ]
                },
                "151-167:match": {
                    "start": 151,
                    "end": 167,
                    "body": [
                        "    public String[] match(String value) {\n",
                        "        if (value == null) {\n",
                        "            return null;\n",
                        "        }\n",
                        "        for (int i = 0; i < patterns.length; i++) {\n",
                        "            Matcher matcher = patterns[i].matcher(value);\n",
                        "            if (matcher.matches()) {\n",
                        "                int count = matcher.groupCount();\n",
                        "                String[] groups = new String[count];\n",
                        "                for (int j = 0; j < count; j++) {\n",
                        "                    groups[j] = matcher.group(j + 1);\n",
                        "                }\n",
                        "                return groups;\n",
                        "            }\n",
                        "        }\n",
                        "        return null;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String[]",
                            "java.lang.String[]"
                        ]
                    ],
                    "signature": "match(String)",
                    "parameters": [
                        "value"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "matcher(java.lang.CharSequence)"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Matcher",
                            "matches()"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Matcher",
                            "groupCount()"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Matcher",
                            "group(int)"
                        ]
                    ]
                },
                "132-142:isValid": {
                    "start": 132,
                    "end": 142,
                    "body": [
                        "    public boolean isValid(String value) {\n",
                        "        if (value == null) {\n",
                        "            return false;\n",
                        "        }\n",
                        "        for (int i = 0; i < patterns.length; i++) {\n",
                        "            if (patterns[i].matcher(value).matches()) {\n",
                        "                return true;\n",
                        "            }\n",
                        "        }\n",
                        "        return false;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isValid(String)",
                    "parameters": [
                        "value"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/regex/Matcher",
                            "matches()"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "matcher(java.lang.CharSequence)"
                        ]
                    ]
                },
                "98-100:RegexValidator3": {
                    "start": 98,
                    "end": 100,
                    "body": [
                        "    public static RegexValidator RegexValidator3(String regex) {\n",
                        "        return RegexValidator.RegexValidator2(regex, true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "RegexValidator",
                            "RegexValidator"
                        ]
                    ],
                    "signature": "RegexValidator3(String)",
                    "parameters": [
                        "regex"
                    ],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "94-96:RegexValidator2"
                        ]
                    ]
                },
                "94-96:RegexValidator2": {
                    "start": 94,
                    "end": 96,
                    "body": [
                        "    public static RegexValidator RegexValidator2(String regex, boolean caseSensitive) {\n",
                        "        return new RegexValidator(new String[] {regex}, caseSensitive);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "RegexValidator",
                            "RegexValidator"
                        ]
                    ],
                    "signature": "RegexValidator2(String, boolean)",
                    "parameters": [
                        "regex",
                        "caseSensitive"
                    ],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "75-88:RegexValidator"
                        ]
                    ]
                },
                "90-92:RegexValidator1": {
                    "start": 90,
                    "end": 92,
                    "body": [
                        "    public static RegexValidator RegexValidator1(String[] regexs) {\n",
                        "        return new RegexValidator(regexs, true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "RegexValidator",
                            "RegexValidator"
                        ]
                    ],
                    "signature": "RegexValidator1(String[])",
                    "parameters": [
                        "regexs"
                    ],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.RegexValidator",
                            "RegexValidator",
                            "75-88:RegexValidator"
                        ]
                    ]
                },
                "75-88:RegexValidator": {
                    "start": 75,
                    "end": 88,
                    "body": [
                        "    public RegexValidator(String[] regexs, boolean caseSensitive) {\n",
                        "\n",
                        "        if (regexs == null || regexs.length == 0) {\n",
                        "            throw new IllegalArgumentException(\"Regular expressions are missing\");\n",
                        "        }\n",
                        "        patterns = new Pattern[regexs.length];\n",
                        "        int flags = (caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);\n",
                        "        for (int i = 0; i < regexs.length; i++) {\n",
                        "            if (regexs[i] == null || regexs[i].length() == 0) {\n",
                        "                throw new IllegalArgumentException(\"Regular expression[\" + i + \"] is missing\");\n",
                        "            }\n",
                        "            patterns[i] = Pattern.compile(regexs[i], flags);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "RegexValidator(String[], boolean)",
                    "parameters": [
                        "regexs",
                        "caseSensitive"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/IllegalArgumentException",
                            "IllegalArgumentException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "compile(java.lang.String,int)"
                        ]
                    ]
                }
            },
            "fields": {
                "68-68:patterns": {
                    "start": 68,
                    "end": 68,
                    "body": [
                        "    private final Pattern[] patterns;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Pattern[]",
                            "java.util.regex.Pattern[]"
                        ]
                    ]
                },
                "66-66:serialVersionUID": {
                    "start": 66,
                    "end": 66,
                    "body": [
                        "    private static final long serialVersionUID = -8832409930574867162L;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "long",
                            "long"
                        ]
                    ]
                }
            }
        }
    }
}