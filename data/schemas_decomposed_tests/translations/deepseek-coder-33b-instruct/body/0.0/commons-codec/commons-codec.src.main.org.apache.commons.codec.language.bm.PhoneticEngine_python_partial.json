{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-codec/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
    "imports": {
        "31-31:import Locale": {
            "start": 31,
            "end": 31,
            "body": [
                "import java.util.Locale;\n"
            ]
        },
        "32-32:import Map": {
            "start": 32,
            "end": 32,
            "body": [
                "import java.util.Map;\n"
            ]
        },
        "30-30:import List": {
            "start": 30,
            "end": 30,
            "body": [
                "import java.util.List;\n"
            ]
        },
        "34-34:import Set": {
            "start": 34,
            "end": 34,
            "body": [
                "import java.util.Set;\n"
            ]
        },
        "28-28:import Iterator": {
            "start": 28,
            "end": 28,
            "body": [
                "import java.util.Iterator;\n"
            ]
        },
        "23-23:import ArrayList": {
            "start": 23,
            "end": 23,
            "body": [
                "import java.util.ArrayList;\n"
            ]
        },
        "24-24:import Arrays": {
            "start": 24,
            "end": 24,
            "body": [
                "import java.util.Arrays;\n"
            ]
        },
        "25-25:import Collections": {
            "start": 25,
            "end": 25,
            "body": [
                "import java.util.Collections;\n"
            ]
        },
        "26-26:import EnumMap": {
            "start": 26,
            "end": 26,
            "body": [
                "import java.util.EnumMap;\n"
            ]
        },
        "27-27:import HashSet": {
            "start": 27,
            "end": 27,
            "body": [
                "import java.util.HashSet;\n"
            ]
        },
        "29-29:import LinkedHashSet": {
            "start": 29,
            "end": 29,
            "body": [
                "import java.util.LinkedHashSet;\n"
            ]
        },
        "33-33:import Objects": {
            "start": 33,
            "end": 33,
            "body": [
                "import java.util.Objects;\n"
            ]
        },
        "35-35:import TreeMap": {
            "start": 35,
            "end": 35,
            "body": [
                "import java.util.TreeMap;\n"
            ]
        },
        "20-20:import LanguageSet": {
            "start": 20,
            "end": 20,
            "body": [
                "import org.apache.commons.codec.language.bm.Languages.LanguageSet;\n"
            ]
        },
        "21-21:import Phoneme": {
            "start": 21,
            "end": 21,
            "body": [
                "import org.apache.commons.codec.language.bm.Rule.Phoneme;\n"
            ]
        }
    },
    "classes": {
        "PhonemeBuilder": {
            "start": 60,
            "end": 60,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "PhoneticEngine",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "147-158:makeString": {
                    "start": 147,
                    "end": 158,
                    "body": [
                        "        public String makeString() {\n",
                        "            final StringBuilder sb = new StringBuilder();\n",
                        "\n",
                        "            for (final Rule.Phoneme ph : this.phonemes) {\n",
                        "                if (sb.length() > 0) {\n",
                        "                    sb.append(\"|\");\n",
                        "                }\n",
                        "                sb.append(ph.getPhonemeText());\n",
                        "            }\n",
                        "\n",
                        "            return sb.toString();\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "makeString()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/AbstractStringBuilder",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.CharSequence)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Phoneme",
                            "161-163:getPhonemeText"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def makeString(self) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "136-138:getPhonemes": {
                    "start": 136,
                    "end": 138,
                    "body": [
                        "        public Set<Rule.Phoneme> getPhonemes() {\n",
                        "            return this.phonemes;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Set<Phoneme>",
                            "java.util.Set<Phoneme>"
                        ]
                    ],
                    "signature": "getPhonemes()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getPhonemes(self) -> typing.Set[Phoneme]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "107-129:apply": {
                    "start": 107,
                    "end": 129,
                    "body": [
                        "        public void apply(final Rule.PhonemeExpr phonemeExpr, final int maxPhonemes) {\n",
                        "            final Set<Rule.Phoneme> newPhonemes = new LinkedHashSet<>(maxPhonemes);\n",
                        "\n",
                        "            EXPR:\n",
                        "            for (final Rule.Phoneme left : this.phonemes) {\n",
                        "                for (final Rule.Phoneme right : phonemeExpr.getPhonemes()) {\n",
                        "                    final LanguageSet languages =\n",
                        "                            left.getLanguages().restrictTo(right.getLanguages());\n",
                        "                    if (!languages.isEmpty()) {\n",
                        "                        final Rule.Phoneme join = Phoneme.Phoneme1(left, right, languages);\n",
                        "                        if (newPhonemes.size() < maxPhonemes) {\n",
                        "                            newPhonemes.add(join);\n",
                        "                            if (newPhonemes.size() >= maxPhonemes) {\n",
                        "                                break EXPR;\n",
                        "                            }\n",
                        "                        }\n",
                        "                    }\n",
                        "                }\n",
                        "            }\n",
                        "\n",
                        "            this.phonemes.clear();\n",
                        "            this.phonemes.addAll(newPhonemes);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "apply(PhonemeExpr, int)",
                    "parameters": [
                        "phonemeExpr",
                        "maxPhonemes"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Phoneme>(int)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "PhonemeExpr",
                            "199-199:getPhonemes"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Languages",
                            "LanguageSet",
                            "76-76:restrictTo"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Phoneme",
                            "152-154:getLanguages"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Languages",
                            "LanguageSet",
                            "72-72:isEmpty"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Phoneme",
                            "140-145:Phoneme1"
                        ],
                        [
                            "library",
                            "java.base/java/util/Set",
                            "size()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Set",
                            "add(org.apache.commons.codec.language.bm.Rule.Phoneme)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Set",
                            "clear()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Set",
                            "addAll(java.util.Collection)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def apply(self, phonemeExpr: PhonemeExpr, maxPhonemes: int) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "92-96:append": {
                    "start": 92,
                    "end": 96,
                    "body": [
                        "        public void append(final CharSequence str) {\n",
                        "            for (final Rule.Phoneme ph : this.phonemes) {\n",
                        "                ph.append(str);\n",
                        "            }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "append(CharSequence)",
                    "parameters": [
                        "str"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Phoneme",
                            "147-150:append"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def append(self, str_: str) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "76-84:PhonemeBuilder": {
                    "start": 76,
                    "end": 84,
                    "body": [
                        "        public PhonemeBuilder(\n",
                        "                int constructorId, final Set<Rule.Phoneme> phonemes, final Rule.Phoneme phoneme) {\n",
                        "            if (constructorId == 0) {\n",
                        "                this.phonemes = phonemes;\n",
                        "            } else {\n",
                        "                this.phonemes = new LinkedHashSet<>();\n",
                        "                this.phonemes.add(phoneme);\n",
                        "            }\n",
                        "        }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "PhonemeBuilder(int, Set<Phoneme>, Phoneme)",
                    "parameters": [
                        "constructorId",
                        "phonemes",
                        "phoneme"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedHashSet",
                            "LinkedHashSet<Phoneme>()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Set",
                            "add(org.apache.commons.codec.language.bm.Rule.Phoneme)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __init__(self, constructorId: int, phonemes: typing.Set[Phoneme], phoneme: Phoneme) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "70-72:empty": {
                    "start": 70,
                    "end": 72,
                    "body": [
                        "        public static PhonemeBuilder empty(final Languages.LanguageSet languages) {\n",
                        "            return new PhonemeBuilder(3, null, new Rule.Phoneme(2, \"\", languages, null));\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "PhonemeBuilder",
                            "PhonemeBuilder"
                        ]
                    ],
                    "signature": "empty(LanguageSet)",
                    "parameters": [
                        "languages"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "PhonemeBuilder",
                            "76-84:PhonemeBuilder"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Phoneme",
                            "117-134:Phoneme"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def empty(languages: LanguageSet) -> PhonemeBuilder:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {
                "74-74:phonemes": {
                    "start": 74,
                    "end": 74,
                    "body": [
                        "        private final Set<Rule.Phoneme> phonemes;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Set<Phoneme>",
                            "java.util.Set<Phoneme>"
                        ]
                    ],
                    "partial_translation": [
                        "    __phonemes: typing.Set[Phoneme] = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class PhonemeBuilder:\n\n"
        },
        "PhoneticEngine": {
            "start": 52,
            "end": 52,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "PhonemeBuilder",
                "RulesApplication"
            ],
            "implements": [],
            "extends": [],
            "methods": {
                "523-525:getMaxPhonemes": {
                    "start": 523,
                    "end": 525,
                    "body": [
                        "    public int getMaxPhonemes() {\n",
                        "        return this.maxPhonemes;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "getMaxPhonemes()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getMaxPhonemes(self) -> int:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "513-515:isConcat": {
                    "start": 513,
                    "end": 515,
                    "body": [
                        "    public boolean isConcat() {\n",
                        "        return this.concat;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isConcat()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def isConcat(self) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "504-506:getRuleType": {
                    "start": 504,
                    "end": 506,
                    "body": [
                        "    public RuleType getRuleType() {\n",
                        "        return this.ruleType;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "RuleType",
                            "RuleType"
                        ]
                    ],
                    "signature": "getRuleType()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getRuleType(self) -> RuleType:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "495-497:getNameType": {
                    "start": 495,
                    "end": 497,
                    "body": [
                        "    public NameType getNameType() {\n",
                        "        return this.nameType;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "NameType",
                            "NameType"
                        ]
                    ],
                    "signature": "getNameType()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getNameType(self) -> NameType:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "486-488:getLang": {
                    "start": 486,
                    "end": 488,
                    "body": [
                        "    public Lang getLang() {\n",
                        "        return this.lang;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Lang",
                            "Lang"
                        ]
                    ],
                    "signature": "getLang()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getLang(self) -> Lang:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "405-479:encode1": {
                    "start": 405,
                    "end": 479,
                    "body": [
                        "    public String encode1(String input, final Languages.LanguageSet languageSet) {\n",
                        "        final Map<String, List<Rule>> rules =\n",
                        "                Rule.getInstanceMap0(this.nameType, RuleType.RULES, languageSet);\n",
                        "        final Map<String, List<Rule>> finalRules1 =\n",
                        "                Rule.getInstanceMap1(this.nameType, this.ruleType, \"common\");\n",
                        "        final Map<String, List<Rule>> finalRules2 =\n",
                        "                Rule.getInstanceMap0(this.nameType, this.ruleType, languageSet);\n",
                        "\n",
                        "        input = input.toLowerCase(Locale.ENGLISH).replace('-', ' ').trim();\n",
                        "\n",
                        "        if (this.nameType == NameType.GENERIC) {\n",
                        "            if (input.length() >= 2 && input.substring(0, 2).equals(\"d'\")) { // check for d'\n",
                        "                final String remainder = input.substring(2);\n",
                        "                final String combined = \"d\" + remainder;\n",
                        "                return \"(\" + encode0(remainder) + \")-(\" + encode0(combined) + \")\";\n",
                        "            }\n",
                        "            for (final String l : NAME_PREFIXES.get(this.nameType)) {\n",
                        "                if (input.startsWith(l + \" \")) {\n",
                        "                    final String remainder =\n",
                        "                            input.substring(l.length() + 1); // input without the prefix\n",
                        "                    final String combined = l + remainder; // input with prefix without space\n",
                        "                    return \"(\" + encode0(remainder) + \")-(\" + encode0(combined) + \")\";\n",
                        "                }\n",
                        "            }\n",
                        "        }\n",
                        "\n",
                        "        final List<String> words = Arrays.asList(input.split(\"\\\\s+\"));\n",
                        "        final List<String> words2 = new ArrayList<>();\n",
                        "\n",
                        "        switch (this.nameType) {\n",
                        "            case SEPHARDIC:\n",
                        "                for (final String aWord : words) {\n",
                        "                    final String[] parts = aWord.split(\"'\");\n",
                        "                    final String lastPart = parts[parts.length - 1];\n",
                        "                    words2.add(lastPart);\n",
                        "                }\n",
                        "                words2.removeAll(NAME_PREFIXES.get(this.nameType));\n",
                        "                break;\n",
                        "            case ASHKENAZI:\n",
                        "                words2.addAll(words);\n",
                        "                words2.removeAll(NAME_PREFIXES.get(this.nameType));\n",
                        "                break;\n",
                        "            case GENERIC:\n",
                        "                words2.addAll(words);\n",
                        "                break;\n",
                        "            default:\n",
                        "                throw new IllegalStateException(\"Unreachable case: \" + this.nameType);\n",
                        "        }\n",
                        "\n",
                        "        if (this.concat) {\n",
                        "            input = join(words2, \" \");\n",
                        "        } else if (words2.size() == 1) {\n",
                        "            input = words.iterator().next();\n",
                        "        } else {\n",
                        "            final StringBuilder result = new StringBuilder();\n",
                        "            for (final String word : words2) {\n",
                        "                result.append(\"-\").append(encode0(word));\n",
                        "            }\n",
                        "            return result.substring(1);\n",
                        "        }\n",
                        "\n",
                        "        PhonemeBuilder phonemeBuilder = PhonemeBuilder.empty(languageSet);\n",
                        "\n",
                        "        for (int i = 0; i < input.length(); ) {\n",
                        "            final RulesApplication rulesApplication =\n",
                        "                    new RulesApplication(rules, input, phonemeBuilder, i, maxPhonemes).invoke();\n",
                        "            i = rulesApplication.getI();\n",
                        "            phonemeBuilder = rulesApplication.getPhonemeBuilder();\n",
                        "        }\n",
                        "\n",
                        "        phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1);\n",
                        "        phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules2);\n",
                        "\n",
                        "        return phonemeBuilder.makeString();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "encode1(String, LanguageSet)",
                    "parameters": [
                        "input",
                        "languageSet"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "354-359:getInstanceMap0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "371-383:getInstanceMap1"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "asList(java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "split(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/ArrayList",
                            "ArrayList<String>()"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "PhonemeBuilder",
                            "70-72:empty"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "trim()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "replace(char,char)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "toLowerCase(java.util.Locale)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "substring(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "substring(int)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "PhoneticEngine",
                            "391-394:encode0"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "startsWith(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "add(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "removeAll(java.util.Collection)"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "addAll(java.util.Collection)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalStateException",
                            "IllegalStateException(java.lang.String)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "PhoneticEngine",
                            "274-285:join"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "size()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Iterator",
                            "next()"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "iterator()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/AbstractStringBuilder",
                            "substring(int)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "RulesApplication",
                            "214-236:invoke"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "RulesApplication",
                            "184-196:RulesApplication"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "RulesApplication",
                            "198-200:getI"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "RulesApplication",
                            "202-204:getPhonemeBuilder"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "PhoneticEngine",
                            "343-383:applyFinalRules"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "PhonemeBuilder",
                            "147-158:makeString"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def encode1(self, input_: str, languageSet: LanguageSet) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "391-394:encode0": {
                    "start": 391,
                    "end": 394,
                    "body": [
                        "    public String encode0(final String input) {\n",
                        "        final Languages.LanguageSet languageSet = this.lang.guessLanguages(input);\n",
                        "        return encode1(input, languageSet);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "encode0(String)",
                    "parameters": [
                        "input"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Lang",
                            "Lang",
                            "211-227:guessLanguages"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "PhoneticEngine",
                            "405-479:encode1"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def encode0(self, input_: str) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "320-333:PhoneticEngine": {
                    "start": 320,
                    "end": 333,
                    "body": [
                        "    public PhoneticEngine(\n",
                        "            final NameType nameType,\n",
                        "            final RuleType ruleType,\n",
                        "            final boolean concat,\n",
                        "            final int maxPhonemes) {\n",
                        "        if (ruleType == RuleType.RULES) {\n",
                        "            throw new IllegalArgumentException(\"ruleType must not be \" + RuleType.RULES);\n",
                        "        }\n",
                        "        this.nameType = nameType;\n",
                        "        this.ruleType = ruleType;\n",
                        "        this.concat = concat;\n",
                        "        this.lang = Lang.instance(nameType);\n",
                        "        this.maxPhonemes = maxPhonemes;\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "PhoneticEngine(NameType, RuleType, boolean, int)",
                    "parameters": [
                        "nameType",
                        "ruleType",
                        "concat",
                        "maxPhonemes"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/IllegalArgumentException",
                            "IllegalArgumentException(java.lang.String)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Lang",
                            "Lang",
                            "119-121:instance"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __init__(self, nameType: NameType, ruleType: RuleType, concat: bool, maxPhonemes: int) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "306-309:PhoneticEngine0": {
                    "start": 306,
                    "end": 309,
                    "body": [
                        "    public static PhoneticEngine PhoneticEngine0(\n",
                        "            final NameType nameType, final RuleType ruleType, final boolean concat) {\n",
                        "        return new PhoneticEngine(nameType, ruleType, concat, DEFAULT_MAX_PHONEMES);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "PhoneticEngine",
                            "PhoneticEngine"
                        ]
                    ],
                    "signature": "PhoneticEngine0(NameType, RuleType, boolean)",
                    "parameters": [
                        "nameType",
                        "ruleType",
                        "concat"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "PhoneticEngine",
                            "320-333:PhoneticEngine"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def PhoneticEngine0(nameType: NameType, ruleType: RuleType, concat: bool) -> PhoneticEngine:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "343-383:applyFinalRules": {
                    "start": 343,
                    "end": 383,
                    "body": [
                        "    private PhonemeBuilder applyFinalRules(\n",
                        "            final PhonemeBuilder phonemeBuilder, final Map<String, List<Rule>> finalRules) {\n",
                        "        Objects.requireNonNull(finalRules, \"finalRules\");\n",
                        "        if (finalRules.isEmpty()) {\n",
                        "            return phonemeBuilder;\n",
                        "        }\n",
                        "\n",
                        "        final Map<Rule.Phoneme, Rule.Phoneme> phonemes = new TreeMap<>(Rule.Phoneme.COMPARATOR);\n",
                        "\n",
                        "        for (final Rule.Phoneme phoneme : phonemeBuilder.getPhonemes()) {\n",
                        "            PhonemeBuilder subBuilder = PhonemeBuilder.empty(phoneme.getLanguages());\n",
                        "            final String phonemeText = phoneme.getPhonemeText().toString();\n",
                        "\n",
                        "            for (int i = 0; i < phonemeText.length(); ) {\n",
                        "                final RulesApplication rulesApplication =\n",
                        "                        new RulesApplication(finalRules, phonemeText, subBuilder, i, maxPhonemes)\n",
                        "                                .invoke();\n",
                        "                final boolean found = rulesApplication.isFound();\n",
                        "                subBuilder = rulesApplication.getPhonemeBuilder();\n",
                        "\n",
                        "                if (!found) {\n",
                        "                    subBuilder.append(phonemeText.subSequence(i, i + 1));\n",
                        "                }\n",
                        "\n",
                        "                i = rulesApplication.getI();\n",
                        "            }\n",
                        "\n",
                        "            for (final Rule.Phoneme newPhoneme : subBuilder.getPhonemes()) {\n",
                        "                if (phonemes.containsKey(newPhoneme)) {\n",
                        "                    final Rule.Phoneme oldPhoneme = phonemes.remove(newPhoneme);\n",
                        "                    final Rule.Phoneme mergedPhoneme =\n",
                        "                            oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n",
                        "                    phonemes.put(mergedPhoneme, mergedPhoneme);\n",
                        "                } else {\n",
                        "                    phonemes.put(newPhoneme, newPhoneme);\n",
                        "                }\n",
                        "            }\n",
                        "        }\n",
                        "\n",
                        "        return new PhonemeBuilder(0, phonemes.keySet(), null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "PhonemeBuilder",
                            "PhonemeBuilder"
                        ]
                    ],
                    "signature": "applyFinalRules(PhonemeBuilder, Map<String,List<Rule>>)",
                    "parameters": [
                        "phonemeBuilder",
                        "finalRules"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/TreeMap",
                            "TreeMap<Phoneme,Phoneme>(java.util.Comparator)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Objects",
                            "requireNonNull(java.lang.Object,java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "isEmpty()"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "PhonemeBuilder",
                            "136-138:getPhonemes"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "PhonemeBuilder",
                            "70-72:empty"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Phoneme",
                            "152-154:getLanguages"
                        ],
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "toString()"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Phoneme",
                            "161-163:getPhonemeText"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "RulesApplication",
                            "214-236:invoke"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "RulesApplication",
                            "184-196:RulesApplication"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "RulesApplication",
                            "238-240:isFound"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "RulesApplication",
                            "202-204:getPhonemeBuilder"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "PhonemeBuilder",
                            "92-96:append"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "subSequence(int,int)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "RulesApplication",
                            "198-200:getI"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "containsKey(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "remove(java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Phoneme",
                            "188-190:mergeWithLanguage"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(org.apache.commons.codec.language.bm.Rule.Phoneme,org.apache.commons.codec.language.bm.Rule.Phoneme)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "PhonemeBuilder",
                            "76-84:PhonemeBuilder"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "keySet()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __applyFinalRules(self, phonemeBuilder: PhonemeBuilder, finalRules: typing.Dict[str, typing.List[Rule]]) -> PhonemeBuilder:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "274-285:join": {
                    "start": 274,
                    "end": 285,
                    "body": [
                        "    private static String join(final Iterable<String> strings, final String sep) {\n",
                        "        final StringBuilder sb = new StringBuilder();\n",
                        "        final Iterator<String> si = strings.iterator();\n",
                        "        if (si.hasNext()) {\n",
                        "            sb.append(si.next());\n",
                        "        }\n",
                        "        while (si.hasNext()) {\n",
                        "            sb.append(sep).append(si.next());\n",
                        "        }\n",
                        "\n",
                        "        return sb.toString();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "join(Iterable<String>, String)",
                    "parameters": [
                        "strings",
                        "sep"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Iterable",
                            "iterator()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Iterator",
                            "hasNext()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Iterator",
                            "next()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __join(strings: typing.Iterable[str], sep: str) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {
                "297-297:maxPhonemes": {
                    "start": 297,
                    "end": 297,
                    "body": [
                        "    private final int maxPhonemes;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "partial_translation": [
                        "    __maxPhonemes: int = 0",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "295-295:concat": {
                    "start": 295,
                    "end": 295,
                    "body": [
                        "    private final boolean concat;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "partial_translation": [
                        "    __concat: bool = False",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "293-293:ruleType": {
                    "start": 293,
                    "end": 293,
                    "body": [
                        "    private final RuleType ruleType;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "RuleType",
                            "RuleType"
                        ]
                    ],
                    "partial_translation": [
                        "    __ruleType: RuleType = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "291-291:nameType": {
                    "start": 291,
                    "end": 291,
                    "body": [
                        "    private final NameType nameType;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "NameType",
                            "NameType"
                        ]
                    ],
                    "partial_translation": [
                        "    __nameType: NameType = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "289-289:lang": {
                    "start": 289,
                    "end": 289,
                    "body": [
                        "    private final Lang lang;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Lang",
                            "Lang"
                        ]
                    ],
                    "partial_translation": [
                        "    __lang: Lang = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "287-287:DEFAULT_MAX_PHONEMES": {
                    "start": 287,
                    "end": 287,
                    "body": [
                        "    private static final int DEFAULT_MAX_PHONEMES = 20;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "partial_translation": [
                        "    __DEFAULT_MAX_PHONEMES: int = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "243-243:NAME_PREFIXES": {
                    "start": 243,
                    "end": 243,
                    "body": [
                        "    private static final Map<NameType, Set<String>> NAME_PREFIXES = new EnumMap<>(NameType.class);\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "Map<NameType,Set<String>>",
                            "java.util.Map<NameType,Set<String>>"
                        ]
                    ],
                    "partial_translation": [
                        "    __NAME_PREFIXES: typing.Dict[NameType, typing.Set[str]] = {}",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "static_initializers": {
                "245-264:run_static_init": {
                    "start": 245,
                    "end": 264,
                    "body": [
                        "    static {\n",
                        "        NAME_PREFIXES.put(\n",
                        "                NameType.ASHKENAZI,\n",
                        "                Collections.unmodifiableSet(\n",
                        "                        new HashSet<>(Arrays.asList(\"bar\", \"ben\", \"da\", \"de\", \"van\", \"von\"))));\n",
                        "        NAME_PREFIXES.put(\n",
                        "                NameType.SEPHARDIC,\n",
                        "                Collections.unmodifiableSet(\n",
                        "                        new HashSet<>(\n",
                        "                                Arrays.asList(\n",
                        "                                        \"al\", \"el\", \"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\",\n",
                        "                                        \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))));\n",
                        "        NAME_PREFIXES.put(\n",
                        "                NameType.GENERIC,\n",
                        "                Collections.unmodifiableSet(\n",
                        "                        new HashSet<>(\n",
                        "                                Arrays.asList(\n",
                        "                                        \"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\", \"della\", \"des\",\n",
                        "                                        \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))));\n",
                        "    }\n"
                    ],
                    "partial_translation": [],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class PhoneticEngine:\n\n"
        },
        "RulesApplication": {
            "start": 175,
            "end": 175,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "PhoneticEngine",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "238-240:isFound": {
                    "start": 238,
                    "end": 240,
                    "body": [
                        "        public boolean isFound() {\n",
                        "            return this.found;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isFound()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def isFound(self) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "214-236:invoke": {
                    "start": 214,
                    "end": 236,
                    "body": [
                        "        public RulesApplication invoke() {\n",
                        "            this.found = false;\n",
                        "            int patternLength = 1;\n",
                        "            final List<Rule> rules = this.finalRules.get(input.subSequence(i, i + patternLength));\n",
                        "            if (rules != null) {\n",
                        "                for (final Rule rule : rules) {\n",
                        "                    final String pattern = rule.getPattern();\n",
                        "                    patternLength = pattern.length();\n",
                        "                    if (rule.patternAndContextMatches(this.input, this.i)) {\n",
                        "                        this.phonemeBuilder.apply(rule.getPhoneme(), maxPhonemes);\n",
                        "                        this.found = true;\n",
                        "                        break;\n",
                        "                    }\n",
                        "                }\n",
                        "            }\n",
                        "\n",
                        "            if (!this.found) {\n",
                        "                patternLength = 1;\n",
                        "            }\n",
                        "\n",
                        "            this.i += patternLength;\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "RulesApplication",
                            "RulesApplication"
                        ]
                    ],
                    "signature": "invoke()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "subSequence(int,int)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "660-662:getPattern"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "693-712:patternAndContextMatches"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.PhoneticEngine",
                            "PhonemeBuilder",
                            "107-129:apply"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "669-671:getPhoneme"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def invoke(self) -> RulesApplication:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "202-204:getPhonemeBuilder": {
                    "start": 202,
                    "end": 204,
                    "body": [
                        "        public PhonemeBuilder getPhonemeBuilder() {\n",
                        "            return this.phonemeBuilder;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "PhonemeBuilder",
                            "PhonemeBuilder"
                        ]
                    ],
                    "signature": "getPhonemeBuilder()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getPhonemeBuilder(self) -> PhonemeBuilder:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "198-200:getI": {
                    "start": 198,
                    "end": 200,
                    "body": [
                        "        public int getI() {\n",
                        "            return this.i;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "getI()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getI(self) -> int:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "184-196:RulesApplication": {
                    "start": 184,
                    "end": 196,
                    "body": [
                        "        public RulesApplication(\n",
                        "                final Map<String, List<Rule>> finalRules,\n",
                        "                final CharSequence input,\n",
                        "                final PhonemeBuilder phonemeBuilder,\n",
                        "                final int i,\n",
                        "                final int maxPhonemes) {\n",
                        "            Objects.requireNonNull(finalRules, \"finalRules\");\n",
                        "            this.finalRules = finalRules;\n",
                        "            this.phonemeBuilder = phonemeBuilder;\n",
                        "            this.input = input;\n",
                        "            this.i = i;\n",
                        "            this.maxPhonemes = maxPhonemes;\n",
                        "        }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "RulesApplication(Map<String,List<Rule>>, CharSequence, PhonemeBuilder, int, int)",
                    "parameters": [
                        "finalRules",
                        "input",
                        "phonemeBuilder",
                        "i",
                        "maxPhonemes"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Objects",
                            "requireNonNull(java.lang.Object,java.lang.String)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __init__(self, finalRules: typing.Dict[str, typing.List[Rule]], input_: str, phonemeBuilder: PhonemeBuilder, i: int, maxPhonemes: int) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {
                "182-182:found": {
                    "start": 182,
                    "end": 182,
                    "body": [
                        "        private boolean found;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "partial_translation": [
                        "    __found: bool = False",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "181-181:maxPhonemes": {
                    "start": 181,
                    "end": 181,
                    "body": [
                        "        private final int maxPhonemes;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "partial_translation": [
                        "    __maxPhonemes: int = 0",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "180-180:i": {
                    "start": 180,
                    "end": 180,
                    "body": [
                        "        private int i;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "partial_translation": [
                        "    __i: int = 0",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "179-179:phonemeBuilder": {
                    "start": 179,
                    "end": 179,
                    "body": [
                        "        private final PhonemeBuilder phonemeBuilder;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "PhonemeBuilder",
                            "PhonemeBuilder"
                        ]
                    ],
                    "partial_translation": [
                        "    __phonemeBuilder: PhonemeBuilder = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "177-177:input": {
                    "start": 177,
                    "end": 177,
                    "body": [
                        "        private final CharSequence input;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "CharSequence",
                            "java.lang.CharSequence"
                        ]
                    ],
                    "partial_translation": [
                        "    __input: str = ''",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "176-176:finalRules": {
                    "start": 176,
                    "end": 176,
                    "body": [
                        "        private final Map<String, List<Rule>> finalRules;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Map<String,List<Rule>>",
                            "java.util.Map<String,List<Rule>>"
                        ]
                    ],
                    "partial_translation": [
                        "    __finalRules: typing.Dict[str, typing.List[Rule]] = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class RulesApplication:\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import io",
        "import typing\nfrom typing import *",
        "from src.main.org.apache.commons.codec.language.bm.Lang import *",
        "from src.main.org.apache.commons.codec.language.bm.Languages import *",
        "from src.main.org.apache.commons.codec.language.bm.NameType import *",
        "from src.main.org.apache.commons.codec.language.bm.Rule import *",
        "from src.main.org.apache.commons.codec.language.bm.RuleType import *"
    ]
}