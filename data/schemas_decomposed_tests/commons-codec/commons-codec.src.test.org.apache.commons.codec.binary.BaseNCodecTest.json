{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-codec/src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
    "imports": {
        "29-29:import Test": {
            "start": 29,
            "end": 29,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "25-25:import Context": {
            "start": 25,
            "end": 25,
            "body": [
                "import org.apache.commons.codec.binary.BaseNCodec.Context;\n"
            ]
        },
        "28-28:import Before": {
            "start": 28,
            "end": 28,
            "body": [
                "import org.junit.Before;\n"
            ]
        },
        "26-26:import Assert": {
            "start": 26,
            "end": 26,
            "body": [
                "import org.junit.Assert;\n"
            ]
        },
        "27-27:import Assume": {
            "start": 27,
            "end": 27,
            "body": [
                "import org.junit.Assume;\n"
            ]
        },
        "20-20:import static Assert.assertEquals": {
            "start": 20,
            "end": 20,
            "body": [
                "import static org.junit.Assert.assertEquals;\n"
            ]
        },
        "21-21:import static Assert.assertFalse": {
            "start": 21,
            "end": 21,
            "body": [
                "import static org.junit.Assert.assertFalse;\n"
            ]
        },
        "23-23:import static Assert.assertTrue": {
            "start": 23,
            "end": 23,
            "body": [
                "import static org.junit.Assert.assertTrue;\n"
            ]
        },
        "22-22:import static Assert.assertNotNull": {
            "start": 22,
            "end": 22,
            "body": [
                "import static org.junit.Assert.assertNotNull;\n"
            ]
        }
    },
    "classes": {
        "NoOpBaseNCodec": {
            "start": 164,
            "end": 164,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "BaseNCodecTest",
            "nests": [],
            "implements": [],
            "extends": [
                "BaseNCodec"
            ],
            "methods": {
                "176-178:isInAlphabet0": {
                    "start": 176,
                    "end": 178,
                    "body": [
                        "        protected boolean isInAlphabet0(final byte value) {\n",
                        "            return false;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isInAlphabet0(byte)",
                    "parameters": [
                        "value"
                    ],
                    "calls": []
                },
                "173-173:decode1": {
                    "start": 173,
                    "end": 173,
                    "body": [
                        "        void decode1(final byte[] pArray, final int i, final int length, final Context context) {}\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "decode1(byte[], int, int, Context)",
                    "parameters": [
                        "pArray",
                        "i",
                        "length",
                        "context"
                    ],
                    "calls": []
                },
                "170-170:encode2": {
                    "start": 170,
                    "end": 170,
                    "body": [
                        "        void encode2(final byte[] pArray, final int i, final int length, final Context context) {}\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "encode2(byte[], int, int, Context)",
                    "parameters": [
                        "pArray",
                        "i",
                        "length",
                        "context"
                    ],
                    "calls": []
                },
                "165-167:NoOpBaseNCodec": {
                    "start": 165,
                    "end": 167,
                    "body": [
                        "        NoOpBaseNCodec() {\n",
                        "            super(0, 0, 0, 0, 0, (byte) 0, null);\n",
                        "        }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "NoOpBaseNCodec()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "333-357:BaseNCodec"
                        ]
                    ]
                }
            },
            "fields": {}
        },
        "BaseNCodecTest": {
            "start": 31,
            "end": 31,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "NoOpBaseNCodec",
                "new BaseNCodec(...) { ... }",
                "new BaseNCodec(...) { ... }",
                "new BaseNCodec(...) { ... }"
            ],
            "implements": [],
            "extends": [],
            "methods": {
                "595-603:testEnsureBufferSizeThrowsOnOverflow_test2_decomposed": {
                    "start": 595,
                    "end": 603,
                    "body": [
                        "    public void testEnsureBufferSizeThrowsOnOverflow_test2_decomposed()  {\n",
                        "        final BaseNCodec ncodec = new NoOpBaseNCodec();\n",
                        "        final Context context = new Context();\n",
                        "        final int length = 10;\n",
                        "        context.buffer = new byte[length];\n",
                        "        context.pos = length;\n",
                        "        final int extra = Integer.MAX_VALUE;\n",
                        "        ncodec.ensureBufferSize(extra, context);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = OutOfMemoryError.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEnsureBufferSizeThrowsOnOverflow_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.BaseNCodecTest",
                            "NoOpBaseNCodec",
                            "165-167:NoOpBaseNCodec"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "545-555:ensureBufferSize"
                        ]
                    ]
                },
                "589-592:testEnsureBufferSizeThrowsOnOverflow_test1_decomposed": {
                    "start": 589,
                    "end": 592,
                    "body": [
                        "    public void testEnsureBufferSizeThrowsOnOverflow_test1_decomposed()  {\n",
                        "        final BaseNCodec ncodec = new NoOpBaseNCodec();\n",
                        "        final Context context = new Context();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEnsureBufferSizeThrowsOnOverflow_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.BaseNCodecTest",
                            "NoOpBaseNCodec",
                            "165-167:NoOpBaseNCodec"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ]
                    ]
                },
                "584-586:testEnsureBufferSizeThrowsOnOverflow_test0_decomposed": {
                    "start": 584,
                    "end": 586,
                    "body": [
                        "    public void testEnsureBufferSizeThrowsOnOverflow_test0_decomposed()  {\n",
                        "        final BaseNCodec ncodec = new NoOpBaseNCodec();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEnsureBufferSizeThrowsOnOverflow_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.BaseNCodecTest",
                            "NoOpBaseNCodec",
                            "165-167:NoOpBaseNCodec"
                        ]
                    ]
                },
                "579-581:testEnsureBufferSizeExpandsToBeyondMaxBufferSize_test0_decomposed": {
                    "start": 579,
                    "end": 581,
                    "body": [
                        "    public void testEnsureBufferSizeExpandsToBeyondMaxBufferSize_test0_decomposed()  {\n",
                        "        assertEnsureBufferSizeExpandsToMaxBufferSize(true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEnsureBufferSizeExpandsToBeyondMaxBufferSize_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.BaseNCodecTest",
                            "BaseNCodecTest",
                            "93-121:assertEnsureBufferSizeExpandsToMaxBufferSize"
                        ]
                    ]
                },
                "574-576:testEnsureBufferSizeExpandsToMaxBufferSize_test0_decomposed": {
                    "start": 574,
                    "end": 576,
                    "body": [
                        "    public void testEnsureBufferSizeExpandsToMaxBufferSize_test0_decomposed()  {\n",
                        "        assertEnsureBufferSizeExpandsToMaxBufferSize(false);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEnsureBufferSizeExpandsToMaxBufferSize_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.BaseNCodecTest",
                            "BaseNCodecTest",
                            "93-121:assertEnsureBufferSizeExpandsToMaxBufferSize"
                        ]
                    ]
                },
                "540-571:testEnsureBufferSize_test9_decomposed": {
                    "start": 540,
                    "end": 571,
                    "body": [
                        "    public void testEnsureBufferSize_test9_decomposed()  {\n",
                        "        final BaseNCodec ncodec = new NoOpBaseNCodec();\n",
                        "        final Context context = new Context();\n",
                        "        Assert.assertNull(\"Initial buffer should be null\", context.buffer);\n",
                        "        context.pos = 76979;\n",
                        "        context.readPos = 273;\n",
                        "        ncodec.ensureBufferSize(0, context);\n",
                        "        Assert.assertNotNull(\"buffer should be initialized\", context.buffer);\n",
                        "        Assert.assertEquals(\n",
                        "                \"buffer should be initialized to default size\",\n",
                        "                ncodec.getDefaultBufferSize(),\n",
                        "                context.buffer.length);\n",
                        "        Assert.assertEquals(\"context position\", 0, context.pos);\n",
                        "        Assert.assertEquals(\"context read position\", 0, context.readPos);\n",
                        "        ncodec.ensureBufferSize(1, context);\n",
                        "        Assert.assertEquals(\n",
                        "                \"buffer should not expand unless required\",\n",
                        "                ncodec.getDefaultBufferSize(),\n",
                        "                context.buffer.length);\n",
                        "        int length = context.buffer.length;\n",
                        "        context.pos = length;\n",
                        "        int extra = 1;\n",
                        "        ncodec.ensureBufferSize(extra, context);\n",
                        "        Assert.assertTrue(\"buffer should expand\", context.buffer.length >= length + extra);\n",
                        "        length = context.buffer.length;\n",
                        "        context.pos = length;\n",
                        "        extra = length * 10;\n",
                        "        ncodec.ensureBufferSize(extra, context);\n",
                        "        Assert.assertTrue(\n",
                        "                \"buffer should expand beyond double capacity\",\n",
                        "                context.buffer.length >= length + extra);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEnsureBufferSize_test9_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.BaseNCodecTest",
                            "NoOpBaseNCodec",
                            "165-167:NoOpBaseNCodec"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "545-555:ensureBufferSize"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "576-578:getDefaultBufferSize"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(java.lang.String,boolean)"
                        ]
                    ]
                },
                "509-537:testEnsureBufferSize_test8_decomposed": {
                    "start": 509,
                    "end": 537,
                    "body": [
                        "    public void testEnsureBufferSize_test8_decomposed()  {\n",
                        "        final BaseNCodec ncodec = new NoOpBaseNCodec();\n",
                        "        final Context context = new Context();\n",
                        "        Assert.assertNull(\"Initial buffer should be null\", context.buffer);\n",
                        "        context.pos = 76979;\n",
                        "        context.readPos = 273;\n",
                        "        ncodec.ensureBufferSize(0, context);\n",
                        "        Assert.assertNotNull(\"buffer should be initialized\", context.buffer);\n",
                        "        Assert.assertEquals(\n",
                        "                \"buffer should be initialized to default size\",\n",
                        "                ncodec.getDefaultBufferSize(),\n",
                        "                context.buffer.length);\n",
                        "        Assert.assertEquals(\"context position\", 0, context.pos);\n",
                        "        Assert.assertEquals(\"context read position\", 0, context.readPos);\n",
                        "        ncodec.ensureBufferSize(1, context);\n",
                        "        Assert.assertEquals(\n",
                        "                \"buffer should not expand unless required\",\n",
                        "                ncodec.getDefaultBufferSize(),\n",
                        "                context.buffer.length);\n",
                        "        int length = context.buffer.length;\n",
                        "        context.pos = length;\n",
                        "        int extra = 1;\n",
                        "        ncodec.ensureBufferSize(extra, context);\n",
                        "        Assert.assertTrue(\"buffer should expand\", context.buffer.length >= length + extra);\n",
                        "        length = context.buffer.length;\n",
                        "        context.pos = length;\n",
                        "        extra = length * 10;\n",
                        "        ncodec.ensureBufferSize(extra, context);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEnsureBufferSize_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.BaseNCodecTest",
                            "NoOpBaseNCodec",
                            "165-167:NoOpBaseNCodec"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "545-555:ensureBufferSize"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "576-578:getDefaultBufferSize"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(java.lang.String,boolean)"
                        ]
                    ]
                },
                "483-506:testEnsureBufferSize_test7_decomposed": {
                    "start": 483,
                    "end": 506,
                    "body": [
                        "    public void testEnsureBufferSize_test7_decomposed()  {\n",
                        "        final BaseNCodec ncodec = new NoOpBaseNCodec();\n",
                        "        final Context context = new Context();\n",
                        "        Assert.assertNull(\"Initial buffer should be null\", context.buffer);\n",
                        "        context.pos = 76979;\n",
                        "        context.readPos = 273;\n",
                        "        ncodec.ensureBufferSize(0, context);\n",
                        "        Assert.assertNotNull(\"buffer should be initialized\", context.buffer);\n",
                        "        Assert.assertEquals(\n",
                        "                \"buffer should be initialized to default size\",\n",
                        "                ncodec.getDefaultBufferSize(),\n",
                        "                context.buffer.length);\n",
                        "        Assert.assertEquals(\"context position\", 0, context.pos);\n",
                        "        Assert.assertEquals(\"context read position\", 0, context.readPos);\n",
                        "        ncodec.ensureBufferSize(1, context);\n",
                        "        Assert.assertEquals(\n",
                        "                \"buffer should not expand unless required\",\n",
                        "                ncodec.getDefaultBufferSize(),\n",
                        "                context.buffer.length);\n",
                        "        int length = context.buffer.length;\n",
                        "        context.pos = length;\n",
                        "        int extra = 1;\n",
                        "        ncodec.ensureBufferSize(extra, context);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEnsureBufferSize_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.BaseNCodecTest",
                            "NoOpBaseNCodec",
                            "165-167:NoOpBaseNCodec"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "545-555:ensureBufferSize"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "576-578:getDefaultBufferSize"
                        ]
                    ]
                },
                "461-480:testEnsureBufferSize_test6_decomposed": {
                    "start": 461,
                    "end": 480,
                    "body": [
                        "    public void testEnsureBufferSize_test6_decomposed()  {\n",
                        "        final BaseNCodec ncodec = new NoOpBaseNCodec();\n",
                        "        final Context context = new Context();\n",
                        "        Assert.assertNull(\"Initial buffer should be null\", context.buffer);\n",
                        "        context.pos = 76979;\n",
                        "        context.readPos = 273;\n",
                        "        ncodec.ensureBufferSize(0, context);\n",
                        "        Assert.assertNotNull(\"buffer should be initialized\", context.buffer);\n",
                        "        Assert.assertEquals(\n",
                        "                \"buffer should be initialized to default size\",\n",
                        "                ncodec.getDefaultBufferSize(),\n",
                        "                context.buffer.length);\n",
                        "        Assert.assertEquals(\"context position\", 0, context.pos);\n",
                        "        Assert.assertEquals(\"context read position\", 0, context.readPos);\n",
                        "        ncodec.ensureBufferSize(1, context);\n",
                        "        Assert.assertEquals(\n",
                        "                \"buffer should not expand unless required\",\n",
                        "                ncodec.getDefaultBufferSize(),\n",
                        "                context.buffer.length);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEnsureBufferSize_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.BaseNCodecTest",
                            "NoOpBaseNCodec",
                            "165-167:NoOpBaseNCodec"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "545-555:ensureBufferSize"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "576-578:getDefaultBufferSize"
                        ]
                    ]
                },
                "443-458:testEnsureBufferSize_test5_decomposed": {
                    "start": 443,
                    "end": 458,
                    "body": [
                        "    public void testEnsureBufferSize_test5_decomposed()  {\n",
                        "        final BaseNCodec ncodec = new NoOpBaseNCodec();\n",
                        "        final Context context = new Context();\n",
                        "        Assert.assertNull(\"Initial buffer should be null\", context.buffer);\n",
                        "        context.pos = 76979;\n",
                        "        context.readPos = 273;\n",
                        "        ncodec.ensureBufferSize(0, context);\n",
                        "        Assert.assertNotNull(\"buffer should be initialized\", context.buffer);\n",
                        "        Assert.assertEquals(\n",
                        "                \"buffer should be initialized to default size\",\n",
                        "                ncodec.getDefaultBufferSize(),\n",
                        "                context.buffer.length);\n",
                        "        Assert.assertEquals(\"context position\", 0, context.pos);\n",
                        "        Assert.assertEquals(\"context read position\", 0, context.readPos);\n",
                        "        ncodec.ensureBufferSize(1, context);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEnsureBufferSize_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.BaseNCodecTest",
                            "NoOpBaseNCodec",
                            "165-167:NoOpBaseNCodec"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "545-555:ensureBufferSize"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "576-578:getDefaultBufferSize"
                        ]
                    ]
                },
                "426-440:testEnsureBufferSize_test4_decomposed": {
                    "start": 426,
                    "end": 440,
                    "body": [
                        "    public void testEnsureBufferSize_test4_decomposed()  {\n",
                        "        final BaseNCodec ncodec = new NoOpBaseNCodec();\n",
                        "        final Context context = new Context();\n",
                        "        Assert.assertNull(\"Initial buffer should be null\", context.buffer);\n",
                        "        context.pos = 76979;\n",
                        "        context.readPos = 273;\n",
                        "        ncodec.ensureBufferSize(0, context);\n",
                        "        Assert.assertNotNull(\"buffer should be initialized\", context.buffer);\n",
                        "        Assert.assertEquals(\n",
                        "                \"buffer should be initialized to default size\",\n",
                        "                ncodec.getDefaultBufferSize(),\n",
                        "                context.buffer.length);\n",
                        "        Assert.assertEquals(\"context position\", 0, context.pos);\n",
                        "        Assert.assertEquals(\"context read position\", 0, context.readPos);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEnsureBufferSize_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.BaseNCodecTest",
                            "NoOpBaseNCodec",
                            "165-167:NoOpBaseNCodec"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "545-555:ensureBufferSize"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "576-578:getDefaultBufferSize"
                        ]
                    ]
                },
                "411-423:testEnsureBufferSize_test3_decomposed": {
                    "start": 411,
                    "end": 423,
                    "body": [
                        "    public void testEnsureBufferSize_test3_decomposed()  {\n",
                        "        final BaseNCodec ncodec = new NoOpBaseNCodec();\n",
                        "        final Context context = new Context();\n",
                        "        Assert.assertNull(\"Initial buffer should be null\", context.buffer);\n",
                        "        context.pos = 76979;\n",
                        "        context.readPos = 273;\n",
                        "        ncodec.ensureBufferSize(0, context);\n",
                        "        Assert.assertNotNull(\"buffer should be initialized\", context.buffer);\n",
                        "        Assert.assertEquals(\n",
                        "                \"buffer should be initialized to default size\",\n",
                        "                ncodec.getDefaultBufferSize(),\n",
                        "                context.buffer.length);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEnsureBufferSize_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.BaseNCodecTest",
                            "NoOpBaseNCodec",
                            "165-167:NoOpBaseNCodec"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "545-555:ensureBufferSize"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "576-578:getDefaultBufferSize"
                        ]
                    ]
                },
                "401-408:testEnsureBufferSize_test2_decomposed": {
                    "start": 401,
                    "end": 408,
                    "body": [
                        "    public void testEnsureBufferSize_test2_decomposed()  {\n",
                        "        final BaseNCodec ncodec = new NoOpBaseNCodec();\n",
                        "        final Context context = new Context();\n",
                        "        Assert.assertNull(\"Initial buffer should be null\", context.buffer);\n",
                        "        context.pos = 76979;\n",
                        "        context.readPos = 273;\n",
                        "        ncodec.ensureBufferSize(0, context);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEnsureBufferSize_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.BaseNCodecTest",
                            "NoOpBaseNCodec",
                            "165-167:NoOpBaseNCodec"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "545-555:ensureBufferSize"
                        ]
                    ]
                },
                "395-398:testEnsureBufferSize_test1_decomposed": {
                    "start": 395,
                    "end": 398,
                    "body": [
                        "    public void testEnsureBufferSize_test1_decomposed()  {\n",
                        "        final BaseNCodec ncodec = new NoOpBaseNCodec();\n",
                        "        final Context context = new Context();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEnsureBufferSize_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.BaseNCodecTest",
                            "NoOpBaseNCodec",
                            "165-167:NoOpBaseNCodec"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ]
                    ]
                },
                "390-392:testEnsureBufferSize_test0_decomposed": {
                    "start": 390,
                    "end": 392,
                    "body": [
                        "    public void testEnsureBufferSize_test0_decomposed()  {\n",
                        "        final BaseNCodec ncodec = new NoOpBaseNCodec();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEnsureBufferSize_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.BaseNCodecTest",
                            "NoOpBaseNCodec",
                            "165-167:NoOpBaseNCodec"
                        ]
                    ]
                },
                "363-387:testProvidePaddingByte_test1_decomposed": {
                    "start": 363,
                    "end": 387,
                    "body": [
                        "    public void testProvidePaddingByte_test1_decomposed()  {\n",
                        "        codec =\n",
                        "                new BaseNCodec(1, 0, 0, 0, 0, (byte) 0x25, null) {\n",
                        "                    @Override\n",
                        "                    protected boolean isInAlphabet0(final byte b) {\n",
                        "                        return b == 'O' || b == 'K'; // allow OK\n",
                        "                    }\n",
                        "\n",
                        "                    @Override\n",
                        "                    void encode2(\n",
                        "                            final byte[] pArray,\n",
                        "                            final int i,\n",
                        "                            final int length,\n",
                        "                            final Context context) {}\n",
                        "\n",
                        "                    @Override\n",
                        "                    void decode1(\n",
                        "                            final byte[] pArray,\n",
                        "                            final int i,\n",
                        "                            final int length,\n",
                        "                            final Context context) {}\n",
                        "                };\n",
                        "        final byte actualPaddingByte = codec.pad;\n",
                        "        assertEquals(0x25, actualPaddingByte);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testProvidePaddingByte_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ]
                    ]
                },
                "338-360:testProvidePaddingByte_test0_decomposed": {
                    "start": 338,
                    "end": 360,
                    "body": [
                        "    public void testProvidePaddingByte_test0_decomposed()  {\n",
                        "        codec =\n",
                        "                new BaseNCodec(1, 0, 0, 0, 0, (byte) 0x25, null) {\n",
                        "                    @Override\n",
                        "                    protected boolean isInAlphabet0(final byte b) {\n",
                        "                        return b == 'O' || b == 'K'; // allow OK\n",
                        "                    }\n",
                        "\n",
                        "                    @Override\n",
                        "                    void encode2(\n",
                        "                            final byte[] pArray,\n",
                        "                            final int i,\n",
                        "                            final int length,\n",
                        "                            final Context context) {}\n",
                        "\n",
                        "                    @Override\n",
                        "                    void decode1(\n",
                        "                            final byte[] pArray,\n",
                        "                            final int i,\n",
                        "                            final int length,\n",
                        "                            final Context context) {}\n",
                        "                };\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testProvidePaddingByte_test0_decomposed()",
                    "parameters": [],
                    "calls": []
                },
                "325-335:testContainsAlphabetOrPad_test7_decomposed": {
                    "start": 325,
                    "end": 335,
                    "body": [
                        "    public void testContainsAlphabetOrPad_test7_decomposed()  {\n",
                        "        assertFalse(codec.containsAlphabetOrPad(null));\n",
                        "        assertFalse(codec.containsAlphabetOrPad(new byte[] {}));\n",
                        "        \"OK\".getBytes();\n",
                        "        assertTrue(codec.containsAlphabetOrPad(\"OK\".getBytes()));\n",
                        "        \"OK \".getBytes();\n",
                        "        assertTrue(codec.containsAlphabetOrPad(\"OK \".getBytes()));\n",
                        "        \"ok \".getBytes();\n",
                        "        assertFalse(codec.containsAlphabetOrPad(\"ok \".getBytes()));\n",
                        "        assertTrue(codec.containsAlphabetOrPad(new byte[] {codec.pad}));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testContainsAlphabetOrPad_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertFalse(boolean)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "378-388:containsAlphabetOrPad"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes()"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ]
                    ]
                },
                "313-322:testContainsAlphabetOrPad_test6_decomposed": {
                    "start": 313,
                    "end": 322,
                    "body": [
                        "    public void testContainsAlphabetOrPad_test6_decomposed()  {\n",
                        "        assertFalse(codec.containsAlphabetOrPad(null));\n",
                        "        assertFalse(codec.containsAlphabetOrPad(new byte[] {}));\n",
                        "        \"OK\".getBytes();\n",
                        "        assertTrue(codec.containsAlphabetOrPad(\"OK\".getBytes()));\n",
                        "        \"OK \".getBytes();\n",
                        "        assertTrue(codec.containsAlphabetOrPad(\"OK \".getBytes()));\n",
                        "        \"ok \".getBytes();\n",
                        "        assertFalse(codec.containsAlphabetOrPad(\"ok \".getBytes()));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testContainsAlphabetOrPad_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertFalse(boolean)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "378-388:containsAlphabetOrPad"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes()"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ]
                    ]
                },
                "302-310:testContainsAlphabetOrPad_test5_decomposed": {
                    "start": 302,
                    "end": 310,
                    "body": [
                        "    public void testContainsAlphabetOrPad_test5_decomposed()  {\n",
                        "        assertFalse(codec.containsAlphabetOrPad(null));\n",
                        "        assertFalse(codec.containsAlphabetOrPad(new byte[] {}));\n",
                        "        \"OK\".getBytes();\n",
                        "        assertTrue(codec.containsAlphabetOrPad(\"OK\".getBytes()));\n",
                        "        \"OK \".getBytes();\n",
                        "        assertTrue(codec.containsAlphabetOrPad(\"OK \".getBytes()));\n",
                        "        \"ok \".getBytes();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testContainsAlphabetOrPad_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertFalse(boolean)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "378-388:containsAlphabetOrPad"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes()"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ]
                    ]
                },
                "292-299:testContainsAlphabetOrPad_test4_decomposed": {
                    "start": 292,
                    "end": 299,
                    "body": [
                        "    public void testContainsAlphabetOrPad_test4_decomposed()  {\n",
                        "        assertFalse(codec.containsAlphabetOrPad(null));\n",
                        "        assertFalse(codec.containsAlphabetOrPad(new byte[] {}));\n",
                        "        \"OK\".getBytes();\n",
                        "        assertTrue(codec.containsAlphabetOrPad(\"OK\".getBytes()));\n",
                        "        \"OK \".getBytes();\n",
                        "        assertTrue(codec.containsAlphabetOrPad(\"OK \".getBytes()));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testContainsAlphabetOrPad_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertFalse(boolean)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "378-388:containsAlphabetOrPad"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes()"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ]
                    ]
                },
                "283-289:testContainsAlphabetOrPad_test3_decomposed": {
                    "start": 283,
                    "end": 289,
                    "body": [
                        "    public void testContainsAlphabetOrPad_test3_decomposed()  {\n",
                        "        assertFalse(codec.containsAlphabetOrPad(null));\n",
                        "        assertFalse(codec.containsAlphabetOrPad(new byte[] {}));\n",
                        "        \"OK\".getBytes();\n",
                        "        assertTrue(codec.containsAlphabetOrPad(\"OK\".getBytes()));\n",
                        "        \"OK \".getBytes();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testContainsAlphabetOrPad_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertFalse(boolean)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "378-388:containsAlphabetOrPad"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes()"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ]
                    ]
                },
                "275-280:testContainsAlphabetOrPad_test2_decomposed": {
                    "start": 275,
                    "end": 280,
                    "body": [
                        "    public void testContainsAlphabetOrPad_test2_decomposed()  {\n",
                        "        assertFalse(codec.containsAlphabetOrPad(null));\n",
                        "        assertFalse(codec.containsAlphabetOrPad(new byte[] {}));\n",
                        "        \"OK\".getBytes();\n",
                        "        assertTrue(codec.containsAlphabetOrPad(\"OK\".getBytes()));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testContainsAlphabetOrPad_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertFalse(boolean)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "378-388:containsAlphabetOrPad"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes()"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ]
                    ]
                },
                "268-272:testContainsAlphabetOrPad_test1_decomposed": {
                    "start": 268,
                    "end": 272,
                    "body": [
                        "    public void testContainsAlphabetOrPad_test1_decomposed()  {\n",
                        "        assertFalse(codec.containsAlphabetOrPad(null));\n",
                        "        assertFalse(codec.containsAlphabetOrPad(new byte[] {}));\n",
                        "        \"OK\".getBytes();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testContainsAlphabetOrPad_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertFalse(boolean)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "378-388:containsAlphabetOrPad"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes()"
                        ]
                    ]
                },
                "262-265:testContainsAlphabetOrPad_test0_decomposed": {
                    "start": 262,
                    "end": 265,
                    "body": [
                        "    public void testContainsAlphabetOrPad_test0_decomposed()  {\n",
                        "        assertFalse(codec.containsAlphabetOrPad(null));\n",
                        "        assertFalse(codec.containsAlphabetOrPad(new byte[] {}));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testContainsAlphabetOrPad_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertFalse(boolean)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "378-388:containsAlphabetOrPad"
                        ]
                    ]
                },
                "256-259:testIsInAlphabetString_test0_decomposed": {
                    "start": 256,
                    "end": 259,
                    "body": [
                        "    public void testIsInAlphabetString_test0_decomposed()  {\n",
                        "        assertTrue(codec.isInAlphabet2(\"OK\"));\n",
                        "        assertTrue(codec.isInAlphabet2(\"O=K= \\t\\n\\r\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsInAlphabetString_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "644-646:isInAlphabet2"
                        ]
                    ]
                },
                "244-253:testIsInAlphabetByteArrayBoolean_test0_decomposed": {
                    "start": 244,
                    "end": 253,
                    "body": [
                        "    public void testIsInAlphabetByteArrayBoolean_test0_decomposed()  {\n",
                        "        assertTrue(codec.isInAlphabet1(new byte[] {}, false));\n",
                        "        assertTrue(codec.isInAlphabet1(new byte[] {'O'}, false));\n",
                        "        assertFalse(codec.isInAlphabet1(new byte[] {'O', ' '}, false));\n",
                        "        assertFalse(codec.isInAlphabet1(new byte[] {' '}, false));\n",
                        "        assertTrue(codec.isInAlphabet1(new byte[] {}, true));\n",
                        "        assertTrue(codec.isInAlphabet1(new byte[] {'O'}, true));\n",
                        "        assertTrue(codec.isInAlphabet1(new byte[] {'O', ' '}, true));\n",
                        "        assertTrue(codec.isInAlphabet1(new byte[] {' '}, true));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsInAlphabetByteArrayBoolean_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "626-633:isInAlphabet1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse(boolean)"
                        ]
                    ]
                },
                "236-241:testIsInAlphabetByte_test0_decomposed": {
                    "start": 236,
                    "end": 241,
                    "body": [
                        "    public void testIsInAlphabetByte_test0_decomposed()  {\n",
                        "        assertFalse(codec.isInAlphabet0((byte) 0));\n",
                        "        assertFalse(codec.isInAlphabet0((byte) 'a'));\n",
                        "        assertTrue(codec.isInAlphabet0((byte) 'O'));\n",
                        "        assertTrue(codec.isInAlphabet0((byte) 'K'));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsInAlphabetByte_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertFalse(boolean)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "615-615:isInAlphabet0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ]
                    ]
                },
                "228-233:testIsWhiteSpace_test0_decomposed": {
                    "start": 228,
                    "end": 233,
                    "body": [
                        "    public void testIsWhiteSpace_test0_decomposed()  {\n",
                        "        assertTrue(BaseNCodec.isWhiteSpace((byte) ' '));\n",
                        "        assertTrue(BaseNCodec.isWhiteSpace((byte) '\\n'));\n",
                        "        assertTrue(BaseNCodec.isWhiteSpace((byte) '\\r'));\n",
                        "        assertTrue(BaseNCodec.isWhiteSpace((byte) '\\t'));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsWhiteSpace_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "242-252:isWhiteSpace"
                        ]
                    ]
                },
                "223-225:testBaseNCodec_test0_decomposed": {
                    "start": 223,
                    "end": 225,
                    "body": [
                        "    public void testBaseNCodec_test0_decomposed()  {\n",
                        "        assertNotNull(codec);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testBaseNCodec_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertNotNull(java.lang.Object)"
                        ]
                    ]
                },
                "201-220:testContextToString_test2_decomposed": {
                    "start": 201,
                    "end": 220,
                    "body": [
                        "    public void testContextToString_test2_decomposed()  {\n",
                        "        final Context context = new Context();\n",
                        "        context.buffer = new byte[3];\n",
                        "        context.currentLinePos = 13;\n",
                        "        context.eof = true;\n",
                        "        context.ibitWorkArea = 777;\n",
                        "        context.lbitWorkArea = 999;\n",
                        "        context.modulus = 5;\n",
                        "        context.pos = 42;\n",
                        "        context.readPos = 981;\n",
                        "        final String text = context.toString();\n",
                        "        Assert.assertTrue(text.contains(\"[0, 0, 0]\"));\n",
                        "        Assert.assertTrue(text.contains(\"13\"));\n",
                        "        Assert.assertTrue(text.contains(\"true\"));\n",
                        "        Assert.assertTrue(text.contains(\"777\"));\n",
                        "        Assert.assertTrue(text.contains(\"999\"));\n",
                        "        Assert.assertTrue(text.contains(\"5\"));\n",
                        "        Assert.assertTrue(text.contains(\"42\"));\n",
                        "        Assert.assertTrue(text.contains(\"981\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testContextToString_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "108-121:toString"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "contains(java.lang.CharSequence)"
                        ]
                    ]
                },
                "187-198:testContextToString_test1_decomposed": {
                    "start": 187,
                    "end": 198,
                    "body": [
                        "    public void testContextToString_test1_decomposed()  {\n",
                        "        final Context context = new Context();\n",
                        "        context.buffer = new byte[3];\n",
                        "        context.currentLinePos = 13;\n",
                        "        context.eof = true;\n",
                        "        context.ibitWorkArea = 777;\n",
                        "        context.lbitWorkArea = 999;\n",
                        "        context.modulus = 5;\n",
                        "        context.pos = 42;\n",
                        "        context.readPos = 981;\n",
                        "        final String text = context.toString();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testContextToString_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "108-121:toString"
                        ]
                    ]
                },
                "182-184:testContextToString_test0_decomposed": {
                    "start": 182,
                    "end": 184,
                    "body": [
                        "    public void testContextToString_test0_decomposed()  {\n",
                        "        final Context context = new Context();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testContextToString_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ]
                    ]
                },
                "36-58:setUp": {
                    "start": 36,
                    "end": 58,
                    "body": [
                        "    public void setUp() {\n",
                        "        codec =\n",
                        "                new BaseNCodec(0, 0, 0, 0, 0, (byte) 0, null) {\n",
                        "                    @Override\n",
                        "                    protected boolean isInAlphabet0(final byte b) {\n",
                        "                        return b == 'O' || b == 'K'; // allow OK\n",
                        "                    }\n",
                        "\n",
                        "                    @Override\n",
                        "                    void encode2(\n",
                        "                            final byte[] pArray,\n",
                        "                            final int i,\n",
                        "                            final int length,\n",
                        "                            final Context context) {}\n",
                        "\n",
                        "                    @Override\n",
                        "                    void decode1(\n",
                        "                            final byte[] pArray,\n",
                        "                            final int i,\n",
                        "                            final int length,\n",
                        "                            final Context context) {}\n",
                        "                };\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Before"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "setUp()",
                    "parameters": [],
                    "calls": []
                },
                "151-156:getPresumableFreeMemory": {
                    "start": 151,
                    "end": 156,
                    "body": [
                        "    static long getPresumableFreeMemory() {\n",
                        "        System.gc();\n",
                        "        final long allocatedMemory =\n",
                        "                Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();\n",
                        "        return Runtime.getRuntime().maxMemory() - allocatedMemory;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static"
                    ],
                    "return_types": [
                        [
                            "long",
                            "long"
                        ]
                    ],
                    "signature": "getPresumableFreeMemory()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Runtime",
                            "totalMemory()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Runtime",
                            "freeMemory()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Runtime",
                            "getRuntime()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "gc()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Runtime",
                            "maxMemory()"
                        ]
                    ]
                },
                "124-131:assumeCanAllocateBufferSize": {
                    "start": 124,
                    "end": 131,
                    "body": [
                        "    private static void assumeCanAllocateBufferSize(final int size) {\n",
                        "        byte[] bytes = null;\n",
                        "        try {\n",
                        "            bytes = new byte[size];\n",
                        "        } catch (final OutOfMemoryError ignore) {\n",
                        "        }\n",
                        "        Assume.assumeTrue(\"Cannot allocate array of size: \" + size, bytes != null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "assumeCanAllocateBufferSize(int)",
                    "parameters": [
                        "size"
                    ],
                    "calls": [
                        [
                            "library",
                            "Assume",
                            "assumeTrue(java.lang.String,boolean)"
                        ]
                    ]
                },
                "93-121:assertEnsureBufferSizeExpandsToMaxBufferSize": {
                    "start": 93,
                    "end": 121,
                    "body": [
                        "    private static void assertEnsureBufferSizeExpandsToMaxBufferSize(\n",
                        "            final boolean exceedMaxBufferSize) {\n",
                        "\n",
                        "        final int length = 0;\n",
                        "\n",
                        "        final long presumableFreeMemory = getPresumableFreeMemory();\n",
                        "        final long estimatedMemory = (1L << 31) + 32 * 1024 + length;\n",
                        "        Assume.assumeTrue(\n",
                        "                \"Not enough free memory for the test\", presumableFreeMemory > estimatedMemory);\n",
                        "\n",
                        "        final int max = Integer.MAX_VALUE - 8;\n",
                        "\n",
                        "        if (exceedMaxBufferSize) {\n",
                        "            assumeCanAllocateBufferSize(max + 1);\n",
                        "            System.gc();\n",
                        "        }\n",
                        "\n",
                        "        final BaseNCodec ncodec = new NoOpBaseNCodec();\n",
                        "        final Context context = new Context();\n",
                        "\n",
                        "        context.buffer = new byte[length];\n",
                        "        context.pos = length;\n",
                        "        int extra = max - length;\n",
                        "        if (exceedMaxBufferSize) {\n",
                        "            extra++;\n",
                        "        }\n",
                        "        ncodec.ensureBufferSize(extra, context);\n",
                        "        Assert.assertTrue(context.buffer.length >= length + extra);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "assertEnsureBufferSizeExpandsToMaxBufferSize(boolean)",
                    "parameters": [
                        "exceedMaxBufferSize"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.BaseNCodecTest",
                            "BaseNCodecTest",
                            "151-156:getPresumableFreeMemory"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.BaseNCodecTest",
                            "NoOpBaseNCodec",
                            "165-167:NoOpBaseNCodec"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "library",
                            "Assume",
                            "assumeTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.BaseNCodecTest",
                            "BaseNCodecTest",
                            "124-131:assumeCanAllocateBufferSize"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "gc()"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "545-555:ensureBufferSize"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ]
                    ]
                }
            },
            "fields": {
                "33-33:codec": {
                    "start": 33,
                    "end": 33,
                    "body": [
                        "    BaseNCodec codec;\n"
                    ],
                    "modifiers": [],
                    "types": [
                        [
                            "BaseNCodec",
                            "BaseNCodec"
                        ]
                    ]
                }
            }
        },
        "new BaseNCodec(...) { ... }": {
            "start": 38,
            "end": 38,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "BaseNCodecTest",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "40-42:isInAlphabet0": {
                    "start": 40,
                    "end": 42,
                    "body": [
                        "                    protected boolean isInAlphabet0(final byte b) {\n",
                        "                        return b == 'O' || b == 'K'; // allow OK\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isInAlphabet0(byte)",
                    "parameters": [
                        "b"
                    ],
                    "calls": []
                },
                "342-344:isInAlphabet0": {
                    "start": 342,
                    "end": 344,
                    "body": [
                        "                    protected boolean isInAlphabet0(final byte b) {\n",
                        "                        return b == 'O' || b == 'K'; // allow OK\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isInAlphabet0(byte)",
                    "parameters": [
                        "b"
                    ],
                    "calls": []
                },
                "367-369:isInAlphabet0": {
                    "start": 367,
                    "end": 369,
                    "body": [
                        "                    protected boolean isInAlphabet0(final byte b) {\n",
                        "                        return b == 'O' || b == 'K'; // allow OK\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isInAlphabet0(byte)",
                    "parameters": [
                        "b"
                    ],
                    "calls": []
                },
                "52-56:decode1": {
                    "start": 52,
                    "end": 56,
                    "body": [
                        "                    void decode1(\n",
                        "                            final byte[] pArray,\n",
                        "                            final int i,\n",
                        "                            final int length,\n",
                        "                            final Context context) {}\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "decode1(byte[], int, int, Context)",
                    "parameters": [
                        "pArray",
                        "i",
                        "length",
                        "context"
                    ],
                    "calls": []
                },
                "45-49:encode2": {
                    "start": 45,
                    "end": 49,
                    "body": [
                        "                    void encode2(\n",
                        "                            final byte[] pArray,\n",
                        "                            final int i,\n",
                        "                            final int length,\n",
                        "                            final Context context) {}\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "encode2(byte[], int, int, Context)",
                    "parameters": [
                        "pArray",
                        "i",
                        "length",
                        "context"
                    ],
                    "calls": []
                },
                "37-38:": {
                    "start": 37,
                    "end": 38,
                    "body": [
                        "        codec =\n",
                        "                new BaseNCodec(0, 0, 0, 0, 0, (byte) 0, null) {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "(int, int, int, int, int, byte, CodecPolicy)",
                    "parameters": [
                        "constructorId",
                        "unencodedBlockSize",
                        "encodedBlockSize",
                        "lineLength",
                        "chunkSeparatorLength",
                        "pad",
                        "decodingPolicy"
                    ],
                    "calls": []
                },
                "354-358:decode1": {
                    "start": 354,
                    "end": 358,
                    "body": [
                        "                    void decode1(\n",
                        "                            final byte[] pArray,\n",
                        "                            final int i,\n",
                        "                            final int length,\n",
                        "                            final Context context) {}\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "decode1(byte[], int, int, Context)",
                    "parameters": [
                        "pArray",
                        "i",
                        "length",
                        "context"
                    ],
                    "calls": []
                },
                "347-351:encode2": {
                    "start": 347,
                    "end": 351,
                    "body": [
                        "                    void encode2(\n",
                        "                            final byte[] pArray,\n",
                        "                            final int i,\n",
                        "                            final int length,\n",
                        "                            final Context context) {}\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "encode2(byte[], int, int, Context)",
                    "parameters": [
                        "pArray",
                        "i",
                        "length",
                        "context"
                    ],
                    "calls": []
                },
                "339-340:": {
                    "start": 339,
                    "end": 340,
                    "body": [
                        "        codec =\n",
                        "                new BaseNCodec(1, 0, 0, 0, 0, (byte) 0x25, null) {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "(int, int, int, int, int, byte, CodecPolicy)",
                    "parameters": [
                        "constructorId",
                        "unencodedBlockSize",
                        "encodedBlockSize",
                        "lineLength",
                        "chunkSeparatorLength",
                        "pad",
                        "decodingPolicy"
                    ],
                    "calls": []
                },
                "379-383:decode1": {
                    "start": 379,
                    "end": 383,
                    "body": [
                        "                    void decode1(\n",
                        "                            final byte[] pArray,\n",
                        "                            final int i,\n",
                        "                            final int length,\n",
                        "                            final Context context) {}\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "decode1(byte[], int, int, Context)",
                    "parameters": [
                        "pArray",
                        "i",
                        "length",
                        "context"
                    ],
                    "calls": []
                },
                "372-376:encode2": {
                    "start": 372,
                    "end": 376,
                    "body": [
                        "                    void encode2(\n",
                        "                            final byte[] pArray,\n",
                        "                            final int i,\n",
                        "                            final int length,\n",
                        "                            final Context context) {}\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "encode2(byte[], int, int, Context)",
                    "parameters": [
                        "pArray",
                        "i",
                        "length",
                        "context"
                    ],
                    "calls": []
                },
                "364-365:": {
                    "start": 364,
                    "end": 365,
                    "body": [
                        "        codec =\n",
                        "                new BaseNCodec(1, 0, 0, 0, 0, (byte) 0x25, null) {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "(int, int, int, int, int, byte, CodecPolicy)",
                    "parameters": [
                        "constructorId",
                        "unencodedBlockSize",
                        "encodedBlockSize",
                        "lineLength",
                        "chunkSeparatorLength",
                        "pad",
                        "decodingPolicy"
                    ],
                    "calls": []
                }
            },
            "fields": {}
        }
    }
}