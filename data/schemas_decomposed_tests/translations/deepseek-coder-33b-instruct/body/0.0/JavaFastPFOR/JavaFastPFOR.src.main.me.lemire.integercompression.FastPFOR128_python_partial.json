{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/FastPFOR128.java",
    "imports": {
        "9-9:import ByteBuffer": {
            "start": 9,
            "end": 9,
            "body": [
                "import java.nio.ByteBuffer;\n"
            ]
        },
        "10-10:import ByteOrder": {
            "start": 10,
            "end": 10,
            "body": [
                "import java.nio.ByteOrder;\n"
            ]
        },
        "11-11:import Arrays": {
            "start": 11,
            "end": 11,
            "body": [
                "import java.util.Arrays;\n"
            ]
        }
    },
    "classes": {
        "FastPFOR128": {
            "start": 24,
            "end": 24,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [
                "IntegerCODEC",
                "SkippableIntegerCODEC"
            ],
            "extends": [],
            "methods": {
                "322-324:toString": {
                    "start": 322,
                    "end": 324,
                    "body": [
                        "        public String toString() {\n",
                        "                return this.getClass().getSimpleName();\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "toString()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "getSimpleName()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "getClass()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def toString(self) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "312-319:uncompress0": {
                    "start": 312,
                    "end": 319,
                    "body": [
                        "        public void uncompress0(int[] in, IntWrapper inpos, int inlength, int[] out,\n",
                        "                                IntWrapper outpos) {\n",
                        "            if (inlength == 0)\n",
                        "                return;\n",
                        "            final int outlength = in[inpos.get()];\n",
                        "            inpos.increment();\n",
                        "            headlessUncompress(in, inpos, inlength, out, outpos, outlength);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "uncompress0(int[], IntWrapper, int, int[], IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "69-71:increment"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "211-222:headlessUncompress"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def uncompress0(self, in_: typing.List[int], inpos: IntWrapper, inlength: int, out: typing.List[int], outpos: IntWrapper) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "301-309:compress0": {
                    "start": 301,
                    "end": 309,
                    "body": [
                        "        public void compress0(int[] in, IntWrapper inpos, int inlength, int[] out,\n",
                        "                              IntWrapper outpos) {\n",
                        "            inlength = Util.greatestMultiple(inlength,  BLOCK_SIZE);\n",
                        "            if (inlength == 0)\n",
                        "                    return;\n",
                        "            out[outpos.get()] = inlength;\n",
                        "            outpos.increment();\n",
                        "            headlessCompress(in, inpos, inlength, out, outpos);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "compress0(int[], IntWrapper, int, int[], IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                            "Util",
                            "207-209:greatestMultiple"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "69-71:increment"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "85-94:headlessCompress"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def compress0(self, in_: typing.List[int], inpos: IntWrapper, inlength: int, out: typing.List[int], outpos: IntWrapper) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "211-222:headlessUncompress": {
                    "start": 211,
                    "end": 222,
                    "body": [
                        "        public void headlessUncompress(int[] in, IntWrapper inpos, int inlength,\n",
                        "                int[] out, IntWrapper outpos, int mynvalue) {\n",
                        "                if (inlength == 0)\n",
                        "                        return;\n",
                        "                mynvalue = Util.greatestMultiple(mynvalue, BLOCK_SIZE);\n",
                        "                int finalout = outpos.get() + mynvalue;\n",
                        "                while (outpos.get() != finalout) {\n",
                        "                        int thissize = Math.min(pageSize,\n",
                        "                                finalout - outpos.get());\n",
                        "                        decodePage(in, inpos, out, outpos, thissize);\n",
                        "                }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessUncompress(int[], IntWrapper, int, int[], IntWrapper, int)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos",
                        "mynvalue"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                            "Util",
                            "207-209:greatestMultiple"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Math",
                            "min(int,int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "224-298:decodePage"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def headlessUncompress(self, in_: typing.List[int], inpos: IntWrapper, inlength: int, out: typing.List[int], outpos: IntWrapper, mynvalue: int) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "85-94:headlessCompress": {
                    "start": 85,
                    "end": 94,
                    "body": [
                        "        public void headlessCompress(int[] in, IntWrapper inpos, int inlength,\n",
                        "                int[] out, IntWrapper outpos) {\n",
                        "                inlength = Util.greatestMultiple(inlength, BLOCK_SIZE);\n",
                        "                final int finalinpos = inpos.get() + inlength;\n",
                        "                while (inpos.get() != finalinpos) {\n",
                        "                        int thissize = Math.min(pageSize,\n",
                        "                                finalinpos - inpos.get());\n",
                        "                        encodePage(in, inpos, thissize, out, outpos);\n",
                        "                }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessCompress(int[], IntWrapper, int, int[], IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                            "Util",
                            "207-209:greatestMultiple"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Math",
                            "min(int,int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "125-201:encodePage"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def headlessCompress(self, in_: typing.List[int], inpos: IntWrapper, inlength: int, out: typing.List[int], outpos: IntWrapper) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "333-335:makeBuffer": {
                    "start": 333,
                    "end": 335,
                    "body": [
                        "        protected ByteBuffer makeBuffer(int sizeInBytes) {\n",
                        "            return ByteBuffer.allocateDirect(sizeInBytes);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "ByteBuffer",
                            "java.nio.ByteBuffer"
                        ]
                    ],
                    "signature": "makeBuffer(int)",
                    "parameters": [
                        "sizeInBytes"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "allocateDirect(int)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def _makeBuffer(self, sizeInBytes: int) -> typing.Union[bytearray, memoryview]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "71-73:FastPFOR1281": {
                    "start": 71,
                    "end": 73,
                    "body": [
                        "        public static FastPFOR128 FastPFOR1281() {\n",
                        "                return new FastPFOR128(DEFAULT_PAGE_SIZE);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "FastPFOR128",
                            "FastPFOR128"
                        ]
                    ],
                    "signature": "FastPFOR1281()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "62-70:FastPFOR128"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def FastPFOR1281() -> FastPFOR128:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "62-70:FastPFOR128": {
                    "start": 62,
                    "end": 70,
                    "body": [
                        "        public FastPFOR128(int pagesize) {\n",
                        "            pageSize = pagesize;\n",
                        "            // Initiate arrrays.\n",
                        "            byteContainer = makeBuffer(3 * pageSize\n",
                        "                    / BLOCK_SIZE + pageSize);\n",
                        "            byteContainer.order(ByteOrder.LITTLE_ENDIAN);\n",
                        "            for (int k = 1; k < dataTobePacked.length; ++k)\n",
                        "                dataTobePacked[k] = new int[pageSize / 32 * 4]; // heuristic\n",
                        "        }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "FastPFOR128(int)",
                    "parameters": [
                        "pagesize"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "333-335:makeBuffer"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "order(java.nio.ByteOrder)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __init__(self, pagesize: int) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "224-298:decodePage": {
                    "start": 224,
                    "end": 298,
                    "body": [
                        "        private void decodePage(int[] in, IntWrapper inpos, int[] out,\n",
                        "                IntWrapper outpos, int thissize) {\n",
                        "                final int initpos = inpos.get();\n",
                        "                final int wheremeta = in[inpos.get()];\n",
                        "                inpos.increment();\n",
                        "                int inexcept = initpos + wheremeta;\n",
                        "                final int bytesize = in[inexcept++];\n",
                        "                byteContainer.clear();\n",
                        "                byteContainer.asIntBuffer().put(in, inexcept, (bytesize + 3) / 4);\n",
                        "                inexcept += (bytesize + 3)/ 4;\n",
                        "\n",
                        "                final int bitmap = in[inexcept++];\n",
                        "                for (int k = 2; k <= 32; ++k) {\n",
                        "                        if ((bitmap & (1 << (k - 1))) != 0) {\n",
                        "                                int size = in[inexcept++];\n",
                        "                                int roundedup = Util\n",
                        "                                .greatestMultiple(size + 31, 32);\n",
                        "                                if (dataTobePacked[k].length < roundedup)\n",
                        "                                        dataTobePacked[k] = new int[roundedup];\n",
                        "                                if(inexcept + roundedup/32*k <= in.length) {\n",
                        "                                    int j = 0;\n",
                        "                                    for (; j < size; j += 32) {\n",
                        "                                        BitPacking.fastunpack(in, inexcept,\n",
                        "                                                dataTobePacked[k], j, k);\n",
                        "                                        inexcept += k;\n",
                        "                                    }\n",
                        "                                    int overflow = j - size;\n",
                        "                                    inexcept -= overflow * k / 32;\n",
                        "                                } else {\n",
                        "                                    int j = 0;\n",
                        "                                    int[] buf = new int[roundedup/32*k];\n",
                        "                                    int initinexcept = inexcept;\n",
                        "                                    System.arraycopy(in, inexcept, buf, 0, in.length - inexcept);\n",
                        "                                    for (; j < size; j += 32) {\n",
                        "                                        BitPacking.fastunpack(buf, inexcept-initinexcept,\n",
                        "                                                dataTobePacked[k], j, k);\n",
                        "                                        inexcept += k;\n",
                        "                                    }\n",
                        "                                    int overflow = j - size;\n",
                        "                                    inexcept -= overflow * k / 32;\n",
                        "                                }\n",
                        "                        }\n",
                        "                }\n",
                        "                Arrays.fill(dataPointers, 0);\n",
                        "                int tmpoutpos = outpos.get();\n",
                        "                int tmpinpos = inpos.get();\n",
                        "\n",
                        "                for (int run = 0, run_end = thissize / BLOCK_SIZE; run < run_end; ++run, tmpoutpos += BLOCK_SIZE) {\n",
                        "                        final int b = byteContainer.get();\n",
                        "                        final int cexcept = byteContainer.get() & 0xFF;\n",
                        "                        for (int k = 0; k < BLOCK_SIZE; k += 32) {\n",
                        "                                BitPacking.fastunpack(in, tmpinpos, out,\n",
                        "                                        tmpoutpos + k, b);\n",
                        "                                tmpinpos += b;\n",
                        "                        }\n",
                        "                        if (cexcept > 0) {\n",
                        "                            final int maxbits = byteContainer.get();\n",
                        "                            final int index = maxbits - b;\n",
                        "                            if(index == 1) {\n",
                        "                                for (int k = 0; k < cexcept; ++k) {\n",
                        "                                    final int pos = byteContainer.get() &0xFF;\n",
                        "                                    out[pos + tmpoutpos] |= 1 << b;\n",
                        "                                }\n",
                        "                            } else {\n",
                        "                                for (int k = 0; k < cexcept; ++k) {\n",
                        "                                    final int pos = byteContainer.get() &0xFF;\n",
                        "                                    final int exceptvalue = dataTobePacked[index][dataPointers[index]++];\n",
                        "                                    out[pos + tmpoutpos] |= exceptvalue << b;\n",
                        "                                }\n",
                        "                            }\n",
                        "                        }\n",
                        "                }\n",
                        "                outpos.set(tmpoutpos);\n",
                        "                inpos.set(inexcept);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "decodePage(int[], IntWrapper, int[], IntWrapper, int)",
                    "parameters": [
                        "in",
                        "inpos",
                        "out",
                        "outpos",
                        "thissize"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "69-71:increment"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "clear()"
                        ],
                        [
                            "library",
                            "java.base/java/nio/IntBuffer",
                            "put(int[],int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "asIntBuffer()"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                            "Util",
                            "207-209:greatestMultiple"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                            "BitPacking",
                            "3021-3127:fastunpack"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "fill(int[],int)"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "get()"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "89-91:set"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __decodePage(self, in_: typing.List[int], inpos: IntWrapper, out: typing.List[int], outpos: IntWrapper, thissize: int) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "125-201:encodePage": {
                    "start": 125,
                    "end": 201,
                    "body": [
                        "        private void encodePage(int[] in, IntWrapper inpos, int thissize,\n",
                        "                int[] out, IntWrapper outpos) {\n",
                        "                final int headerpos = outpos.get();\n",
                        "                outpos.increment();\n",
                        "                int tmpoutpos = outpos.get();\n",
                        "\n",
                        "                // Clear working area.\n",
                        "                Arrays.fill(dataPointers, 0);\n",
                        "                byteContainer.clear();\n",
                        "\n",
                        "                int tmpinpos = inpos.get();\n",
                        "                for (final int finalinpos = tmpinpos + thissize - BLOCK_SIZE; tmpinpos <= finalinpos; tmpinpos += BLOCK_SIZE) {\n",
                        "                    getBestBFromData(in, tmpinpos);\n",
                        "                        final int tmpbestb = bestbbestcexceptmaxb[0];\n",
                        "                        byteContainer.put((byte)bestbbestcexceptmaxb[0]);\n",
                        "                        byteContainer.put((byte)bestbbestcexceptmaxb[1]);\n",
                        "                        if (bestbbestcexceptmaxb[1] > 0) {\n",
                        "                                byteContainer.put((byte)bestbbestcexceptmaxb[2]);\n",
                        "                                final int index = bestbbestcexceptmaxb[2]\n",
                        "                                        - bestbbestcexceptmaxb[0];\n",
                        "                                if (dataPointers[index]\n",
                        "                                        + bestbbestcexceptmaxb[1] >= dataTobePacked[index].length) {\n",
                        "                                        int newsize = 2 * (dataPointers[index] + bestbbestcexceptmaxb[1]);\n",
                        "                                        // make sure it is a multiple of 32\n",
                        "                                        newsize = Util\n",
                        "                                                .greatestMultiple(newsize + 31, 32);\n",
                        "                                        dataTobePacked[index] = Arrays.copyOf(\n",
                        "                                                dataTobePacked[index], newsize);\n",
                        "                                }\n",
                        "                                for (int k = 0; k < BLOCK_SIZE; ++k) {\n",
                        "                                        if ((in[k + tmpinpos] >>> bestbbestcexceptmaxb[0]) != 0) {\n",
                        "                                                // we have an exception\n",
                        "                                                byteContainer.put((byte) k);\n",
                        "                                                dataTobePacked[index][dataPointers[index]++] = in[k\n",
                        "                                                        + tmpinpos] >>> tmpbestb;\n",
                        "                                        }\n",
                        "                                }\n",
                        "\n",
                        "                        }\n",
                        "                        for (int k = 0; k < BLOCK_SIZE; k += 32) {\n",
                        "                                BitPacking.fastpack(in, tmpinpos + k, out,\n",
                        "                                        tmpoutpos, tmpbestb);\n",
                        "                                tmpoutpos += tmpbestb;\n",
                        "                        }\n",
                        "                }\n",
                        "                inpos.set(tmpinpos);\n",
                        "                out[headerpos] = tmpoutpos - headerpos;\n",
                        "                final int bytesize = byteContainer.position();\n",
                        "                while ((byteContainer.position() & 3) != 0)\n",
                        "                        byteContainer.put((byte) 0);\n",
                        "                out[tmpoutpos++] = bytesize;\n",
                        "                final int howmanyints = byteContainer.position() / 4;\n",
                        "                byteContainer.flip();\n",
                        "                byteContainer.asIntBuffer().get(out, tmpoutpos, howmanyints);\n",
                        "                tmpoutpos += howmanyints;\n",
                        "                int bitmap = 0;\n",
                        "                for (int k = 2; k <= 32; ++k) {\n",
                        "                        if (dataPointers[k] != 0)\n",
                        "                                bitmap |= (1 << (k - 1));\n",
                        "                }\n",
                        "                out[tmpoutpos++] = bitmap;\n",
                        "\n",
                        "                for (int k = 2; k <= 32; ++k) {\n",
                        "                        if (dataPointers[k] != 0) {\n",
                        "                                out[tmpoutpos++] = dataPointers[k];// size\n",
                        "                                int j = 0;\n",
                        "                                for (; j < dataPointers[k]; j += 32) {\n",
                        "                                        BitPacking.fastpack(dataTobePacked[k],\n",
                        "                                                j, out, tmpoutpos, k);\n",
                        "                                        tmpoutpos += k;\n",
                        "                                }\n",
                        "                                int overflow = j - dataPointers[k];\n",
                        "                                tmpoutpos -= overflow * k / 32;\n",
                        "                        }\n",
                        "                }\n",
                        "                outpos.set(tmpoutpos);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "encodePage(int[], IntWrapper, int, int[], IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "thissize",
                        "out",
                        "outpos"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "library",
                            "java.base/java/nio/Buffer",
                            "position()"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "69-71:increment"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "fill(int[],int)"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "clear()"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "96-123:getBestBFromData"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "put(byte)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                            "Util",
                            "207-209:greatestMultiple"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                            "BitPacking",
                            "42-148:fastpack"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "89-91:set"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "flip()"
                        ],
                        [
                            "library",
                            "java.base/java/nio/IntBuffer",
                            "get(int[],int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "asIntBuffer()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __encodePage(self, in_: typing.List[int], inpos: IntWrapper, thissize: int, out: typing.List[int], outpos: IntWrapper) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "96-123:getBestBFromData": {
                    "start": 96,
                    "end": 123,
                    "body": [
                        "        private void getBestBFromData(int[] in, int pos) {\n",
                        "                Arrays.fill(freqs, 0);\n",
                        "                for (int k = pos, k_end = pos + BLOCK_SIZE; k < k_end; ++k) {\n",
                        "                        freqs[Util.bits(in[k])]++;\n",
                        "                }\n",
                        "                bestbbestcexceptmaxb[0] = 32;\n",
                        "                while (freqs[bestbbestcexceptmaxb[0]] == 0)\n",
                        "                        bestbbestcexceptmaxb[0]--;\n",
                        "                bestbbestcexceptmaxb[2] = bestbbestcexceptmaxb[0];\n",
                        "                int bestcost = bestbbestcexceptmaxb[0] * BLOCK_SIZE;\n",
                        "                int cexcept = 0;\n",
                        "                bestbbestcexceptmaxb[1] = cexcept;\n",
                        "                for (int b = bestbbestcexceptmaxb[0] - 1; b >= 0; --b) {\n",
                        "                        cexcept += freqs[b + 1];\n",
                        "                        if (cexcept == BLOCK_SIZE)\n",
                        "                                break;\n",
                        "                        // the extra 8 is the cost of storing maxbits\n",
                        "                        int thiscost = cexcept * OVERHEAD_OF_EACH_EXCEPT\n",
                        "                                + cexcept * (bestbbestcexceptmaxb[2] - b) + b\n",
                        "                                * BLOCK_SIZE + 8;\n",
                        "                        if(bestbbestcexceptmaxb[2] - b == 1) thiscost -= cexcept;\n",
                        "                        if (thiscost < bestcost) {\n",
                        "                                bestcost = thiscost;\n",
                        "                                bestbbestcexceptmaxb[0] = b;\n",
                        "                                bestbbestcexceptmaxb[1] = cexcept;\n",
                        "                        }\n",
                        "                }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "getBestBFromData(int[], int)",
                    "parameters": [
                        "in",
                        "pos"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "fill(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                            "Util",
                            "109-111:bits"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __getBestBFromData(self, in_: typing.List[int], pos: int) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {
                "42-42:bestbbestcexceptmaxb": {
                    "start": 42,
                    "end": 42,
                    "body": [
                        "        final int[] bestbbestcexceptmaxb = new int[3];\n"
                    ],
                    "modifiers": [
                        "final"
                    ],
                    "types": [
                        [
                            "int[]",
                            "int[]"
                        ]
                    ],
                    "partial_translation": [
                        "    bestbbestcexceptmaxb: typing.List[int] = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "41-41:freqs": {
                    "start": 41,
                    "end": 41,
                    "body": [
                        "        final int[] freqs = new int[33];\n"
                    ],
                    "modifiers": [
                        "final"
                    ],
                    "types": [
                        [
                            "int[]",
                            "int[]"
                        ]
                    ],
                    "partial_translation": [
                        "    freqs: typing.List[int] = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "40-40:dataPointers": {
                    "start": 40,
                    "end": 40,
                    "body": [
                        "        final int[] dataPointers = new int[33];\n"
                    ],
                    "modifiers": [
                        "final"
                    ],
                    "types": [
                        [
                            "int[]",
                            "int[]"
                        ]
                    ],
                    "partial_translation": [
                        "    dataPointers: typing.List[int] = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "37-37:byteContainer": {
                    "start": 37,
                    "end": 37,
                    "body": [
                        "        final ByteBuffer byteContainer;\n"
                    ],
                    "modifiers": [
                        "final"
                    ],
                    "types": [
                        [
                            "ByteBuffer",
                            "java.nio.ByteBuffer"
                        ]
                    ],
                    "partial_translation": [
                        "    byteContainer: typing.Union[bytearray, memoryview] = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "36-36:dataTobePacked": {
                    "start": 36,
                    "end": 36,
                    "body": [
                        "        final int[][] dataTobePacked = new int[33][];\n"
                    ],
                    "modifiers": [
                        "final"
                    ],
                    "types": [
                        [
                            "int[][]",
                            "int[][]"
                        ]
                    ],
                    "partial_translation": [
                        "    dataTobePacked: typing.List[typing.List[int]] = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "35-35:pageSize": {
                    "start": 35,
                    "end": 35,
                    "body": [
                        "        final int pageSize;\n"
                    ],
                    "modifiers": [
                        "final"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "partial_translation": [
                        "    pageSize: int = 0",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "33-33:BLOCK_SIZE": {
                    "start": 33,
                    "end": 33,
                    "body": [
                        "        public final static int BLOCK_SIZE = 128;\n"
                    ],
                    "modifiers": [
                        "public",
                        "final",
                        "static"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "partial_translation": [
                        "    BLOCK_SIZE: int = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "29-29:DEFAULT_PAGE_SIZE": {
                    "start": 29,
                    "end": 29,
                    "body": [
                        "        public final static int DEFAULT_PAGE_SIZE = 65536;\n"
                    ],
                    "modifiers": [
                        "public",
                        "final",
                        "static"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "partial_translation": [
                        "    DEFAULT_PAGE_SIZE: int = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "25-25:OVERHEAD_OF_EACH_EXCEPT": {
                    "start": 25,
                    "end": 25,
                    "body": [
                        "        final static int OVERHEAD_OF_EACH_EXCEPT = 8;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "partial_translation": [
                        "    OVERHEAD_OF_EACH_EXCEPT: int = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class FastPFOR128(IntegerCODEC, SkippableIntegerCODEC):\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import io",
        "import typing\nfrom typing import *",
        "import os",
        "from src.main.me.lemire.integercompression.BitPacking import *",
        "from src.main.me.lemire.integercompression.IntWrapper import *",
        "from src.main.me.lemire.integercompression.IntegerCODEC import *",
        "from src.main.me.lemire.integercompression.SkippableIntegerCODEC import *",
        "from src.main.me.lemire.integercompression.Util import *"
    ]
}