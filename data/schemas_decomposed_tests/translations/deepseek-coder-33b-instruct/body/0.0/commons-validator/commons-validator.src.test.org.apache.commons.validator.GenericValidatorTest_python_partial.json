{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-validator/src/test/java/org/apache/commons/validator/GenericValidatorTest.java",
    "imports": {
        "20-20:import TestCase": {
            "start": 20,
            "end": 20,
            "body": [
                "import junit.framework.TestCase;\n"
            ]
        },
        "18-18:import Test": {
            "start": 18,
            "end": 18,
            "body": [
                "import org.junit.Test;\n"
            ]
        }
    },
    "classes": {
        "GenericValidatorTest": {
            "start": 27,
            "end": 27,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "unittest.TestCase"
            ],
            "methods": {
                "51-64:testMaxLength_test0_decomposed": {
                    "start": 51,
                    "end": 64,
                    "body": [
                        "    public void testMaxLength_test0_decomposed()  {\n",
                        "        assertFalse(\"Max=4 End=0\", GenericValidator.maxLength1(\"12345\\n\\r\", 4, 0));\n",
                        "        assertTrue(\"Max=5 End=0\", GenericValidator.maxLength1(\"12345\\n\\r\", 5, 0));\n",
                        "        assertTrue(\"Max=6 End=0\", GenericValidator.maxLength1(\"12345\\n\\r\", 6, 0));\n",
                        "        assertTrue(\"Max=7 End=0\", GenericValidator.maxLength1(\"12345\\n\\r\", 7, 0));\n",
                        "        assertFalse(\"Max=4 End=1\", GenericValidator.maxLength1(\"12345\\n\\r\", 4, 1));\n",
                        "        assertFalse(\"Max=5 End=1\", GenericValidator.maxLength1(\"12345\\n\\r\", 5, 1));\n",
                        "        assertTrue(\"Max=6 End=1\", GenericValidator.maxLength1(\"12345\\n\\r\", 6, 1));\n",
                        "        assertTrue(\"Max=7 End=1\", GenericValidator.maxLength1(\"12345\\n\\r\", 7, 1));\n",
                        "        assertFalse(\"Max=4 End=2\", GenericValidator.maxLength1(\"12345\\n\\r\", 4, 2));\n",
                        "        assertFalse(\"Max=5 End=2\", GenericValidator.maxLength1(\"12345\\n\\r\", 5, 2));\n",
                        "        assertFalse(\"Max=6 End=2\", GenericValidator.maxLength1(\"12345\\n\\r\", 6, 2));\n",
                        "        assertTrue(\"Max=7 End=2\", GenericValidator.maxLength1(\"12345\\n\\r\", 7, 2));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMaxLength_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.GenericValidator",
                            "GenericValidator",
                            "280-283:maxLength1"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testMaxLength_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "35-48:testMinLength_test0_decomposed": {
                    "start": 35,
                    "end": 48,
                    "body": [
                        "    public void testMinLength_test0_decomposed()  {\n",
                        "        assertTrue(\"Min=5 End=0\", GenericValidator.minLength1(\"12345\\n\\r\", 5, 0));\n",
                        "        assertFalse(\"Min=6 End=0\", GenericValidator.minLength1(\"12345\\n\\r\", 6, 0));\n",
                        "        assertFalse(\"Min=7 End=0\", GenericValidator.minLength1(\"12345\\n\\r\", 7, 0));\n",
                        "        assertFalse(\"Min=8 End=0\", GenericValidator.minLength1(\"12345\\n\\r\", 8, 0));\n",
                        "        assertTrue(\"Min=5 End=1\", GenericValidator.minLength1(\"12345\\n\\r\", 5, 1));\n",
                        "        assertTrue(\"Min=6 End=1\", GenericValidator.minLength1(\"12345\\n\\r\", 6, 1));\n",
                        "        assertFalse(\"Min=7 End=1\", GenericValidator.minLength1(\"12345\\n\\r\", 7, 1));\n",
                        "        assertFalse(\"Min=8 End=1\", GenericValidator.minLength1(\"12345\\n\\r\", 8, 1));\n",
                        "        assertTrue(\"Min=5 End=2\", GenericValidator.minLength1(\"12345\\n\\r\", 5, 2));\n",
                        "        assertTrue(\"Min=6 End=2\", GenericValidator.minLength1(\"12345\\n\\r\", 6, 2));\n",
                        "        assertTrue(\"Min=7 End=2\", GenericValidator.minLength1(\"12345\\n\\r\", 7, 2));\n",
                        "        assertFalse(\"Min=8 End=2\", GenericValidator.minLength1(\"12345\\n\\r\", 8, 2));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testMinLength_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.GenericValidator",
                            "GenericValidator",
                            "304-307:minLength1"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testMinLength_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "30-32:GenericValidatorTest": {
                    "start": 30,
                    "end": 32,
                    "body": [
                        "    public GenericValidatorTest(String name) {\n",
                        "        super(name);\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "GenericValidatorTest(String)",
                    "parameters": [
                        "name"
                    ],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "TestCase(java.lang.String)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __init__(self, name: str) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {},
            "is_enum": false,
            "python_class_declaration": "class GenericValidatorTest(unittest.TestCase):\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import unittest",
        "import pytest",
        "import io",
        "import os",
        "import unittest",
        "from src.main.org.apache.commons.validator.GenericValidator import *"
    ]
}