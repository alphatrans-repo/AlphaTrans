{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-pool/src/main/java/org/apache/commons/pool2/impl/InterruptibleReentrantLock.java",
    "imports": {
        "19-19:import Condition": {
            "start": 19,
            "end": 19,
            "body": [
                "import java.util.concurrent.locks.Condition;\n"
            ]
        },
        "20-20:import ReentrantLock": {
            "start": 20,
            "end": 20,
            "body": [
                "import java.util.concurrent.locks.ReentrantLock;\n"
            ]
        }
    },
    "classes": {
        "InterruptibleReentrantLock": {
            "start": 30,
            "end": 30,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "new Consumer<Thread>(...) { ... }"
            ],
            "implements": [],
            "extends": [],
            "methods": {
                "49-51:interruptWaiters": {
                    "start": 49,
                    "end": 51,
                    "body": [
                        "    public void interruptWaiters(final Condition condition) {\n",
                        "        getWaitingThreads(condition).forEach(Thread::interrupt);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "interruptWaiters(Condition)",
                    "parameters": [
                        "condition"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Iterable",
                            "forEach(java.util.function.Consumer)"
                        ],
                        [
                            "library",
                            "java.base/java/util/concurrent/locks/ReentrantLock",
                            "getWaitingThreads(java.util.concurrent.locks.Condition)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def interruptWaiters(self, condition: threading.Condition) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "40-42:InterruptibleReentrantLock": {
                    "start": 40,
                    "end": 42,
                    "body": [
                        "    public InterruptibleReentrantLock(final boolean fairness) {\n",
                        "        super(fairness);\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "InterruptibleReentrantLock(boolean)",
                    "parameters": [
                        "fairness"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/concurrent/locks/ReentrantLock",
                            "ReentrantLock(boolean)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __init__(self, fairness: bool) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                }
            },
            "fields": {
                "32-32:serialVersionUID": {
                    "start": 32,
                    "end": 32,
                    "body": [
                        "    private static final long serialVersionUID = 1L;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "long",
                            "long"
                        ]
                    ],
                    "partial_translation": [
                        "    __serialVersionUID: int = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class InterruptibleReentrantLock():\n\n"
        },
        "new Consumer<Thread>(...) { ... }": {
            "start": 50,
            "end": 50,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "InterruptibleReentrantLock",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "50-50:accept": {
                    "start": 50,
                    "end": 50,
                    "body": [
                        "        getWaitingThreads(condition).forEach(Thread::interrupt);\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "accept(Thread)",
                    "parameters": [
                        "p0"
                    ],
                    "calls": [],
                    "is_overload": false
                }
            },
            "fields": {}
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import io",
        "import threading"
    ]
}