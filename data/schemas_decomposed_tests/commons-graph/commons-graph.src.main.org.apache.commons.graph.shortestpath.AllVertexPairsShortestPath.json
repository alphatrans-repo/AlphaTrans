{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-graph/src/main/java/org/apache/commons/graph/shortestpath/AllVertexPairsShortestPath.java",
    "imports": {
        "29-29:import Map": {
            "start": 29,
            "end": 29,
            "body": [
                "import java.util.Map;\n"
            ]
        },
        "28-28:import HashMap": {
            "start": 28,
            "end": 28,
            "body": [
                "import java.util.HashMap;\n"
            ]
        },
        "24-24:import VertexPair": {
            "start": 24,
            "end": 24,
            "body": [
                "import org.apache.commons.graph.VertexPair;\n"
            ]
        },
        "25-25:import WeightedPath": {
            "start": 25,
            "end": 25,
            "body": [
                "import org.apache.commons.graph.WeightedPath;\n"
            ]
        },
        "26-26:import OrderedMonoid": {
            "start": 26,
            "end": 26,
            "body": [
                "import org.apache.commons.graph.weight.OrderedMonoid;\n"
            ]
        },
        "22-22:import static Assertions.checkNotNull": {
            "start": 22,
            "end": 22,
            "body": [
                "import static org.apache.commons.graph.utils.Assertions.checkNotNull;\n"
            ]
        }
    },
    "classes": {
        "AllVertexPairsShortestPath": {
            "start": 39,
            "end": 39,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "142-144:toString": {
                    "start": 142,
                    "end": 144,
                    "body": [
                        "    public String toString() {\n",
                        "        return shortestDistances.toString();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "toString()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "toString()"
                        ]
                    ]
                },
                "91-102:findShortestPath": {
                    "start": 91,
                    "end": 102,
                    "body": [
                        "    public WeightedPath<V, WE, W> findShortestPath(V source, V target) {\n",
                        "        source = checkNotNull(source, \"Impossible to add a shortest path from a null source\");\n",
                        "        target = checkNotNull(target, \"Impossible to add a shortest path to a null target\");\n",
                        "\n",
                        "        WeightedPath<V, WE, W> path = paths.get(new VertexPair<V>(source, target));\n",
                        "\n",
                        "        if (path == null) {\n",
                        "            throw new PathNotFoundException(\"Path from '%s' to '%s' doesn't exist\", source, target);\n",
                        "        }\n",
                        "\n",
                        "        return path;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "WeightedPath<V,WE,W>",
                            "WeightedPath<V,WE,W>"
                        ]
                    ],
                    "signature": "findShortestPath(V, V)",
                    "parameters": [
                        "source",
                        "target"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get(java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/VertexPair",
                            "VertexPair<V>(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.utils.Assertions",
                            "Assertions",
                            "64-70:checkNotNull"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.shortestpath.PathNotFoundException",
                            "PathNotFoundException",
                            "28-30:PathNotFoundException"
                        ]
                    ]
                },
                "130-139:hasShortestDistance": {
                    "start": 130,
                    "end": 139,
                    "body": [
                        "    boolean hasShortestDistance(V source, V target) {\n",
                        "        source = checkNotNull(source, \"Impossible to add a shortest path from a null source\");\n",
                        "        target = checkNotNull(target, \"Impossible to add a shortest path to a null target\");\n",
                        "\n",
                        "        if (source.equals(target)) {\n",
                        "            return true;\n",
                        "        }\n",
                        "\n",
                        "        return shortestDistances.containsKey(new VertexPair<V>(source, target));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "hasShortestDistance(V, V)",
                    "parameters": [
                        "source",
                        "target"
                    ],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.utils.Assertions",
                            "Assertions",
                            "64-70:checkNotNull"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "containsKey(java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/VertexPair",
                            "VertexPair<V>(java.lang.Object,java.lang.Object)"
                        ]
                    ]
                },
                "111-120:getShortestDistance": {
                    "start": 111,
                    "end": 120,
                    "body": [
                        "    W getShortestDistance(V source, V target) {\n",
                        "        source = checkNotNull(source, \"Impossible to add a shortest path from a null source\");\n",
                        "        target = checkNotNull(target, \"Impossible to add a shortest path to a null target\");\n",
                        "\n",
                        "        if (source.equals(target)) {\n",
                        "            return weightOperations.identity();\n",
                        "        }\n",
                        "\n",
                        "        return shortestDistances.get(new VertexPair<V>(source, target));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "W",
                            "W"
                        ]
                    ],
                    "signature": "getShortestDistance(V, V)",
                    "parameters": [
                        "source",
                        "target"
                    ],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.utils.Assertions",
                            "Assertions",
                            "64-70:checkNotNull"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get(java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/VertexPair",
                            "VertexPair<V>(java.lang.Object,java.lang.Object)"
                        ]
                    ]
                },
                "73-82:addShortestPath": {
                    "start": 73,
                    "end": 82,
                    "body": [
                        "    void addShortestPath(V source, V target, WeightedPath<V, WE, W> weightedPath) {\n",
                        "        source = checkNotNull(source, \"Impossible to add a shortest path from a null source\");\n",
                        "        target = checkNotNull(target, \"Impossible to add a shortest path to a null target\");\n",
                        "        weightedPath =\n",
                        "                checkNotNull(\n",
                        "                        weightedPath,\n",
                        "                        \"Impossible to add a null weightedPath path to a null target\");\n",
                        "\n",
                        "        paths.put(new VertexPair<V>(source, target), weightedPath);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "addShortestPath(V, V, WeightedPath<V,WE,W>)",
                    "parameters": [
                        "source",
                        "target",
                        "weightedPath"
                    ],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.utils.Assertions",
                            "Assertions",
                            "64-70:checkNotNull"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(org.apache.commons.graph.VertexPair,org.apache.commons.graph.WeightedPath)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/VertexPair",
                            "VertexPair<V>(java.lang.Object,java.lang.Object)"
                        ]
                    ]
                },
                "58-66:addShortestDistance": {
                    "start": 58,
                    "end": 66,
                    "body": [
                        "    void addShortestDistance(V source, V target, W distance) {\n",
                        "        source = checkNotNull(source, \"Impossible to add a shortest path from a null source\");\n",
                        "        target = checkNotNull(target, \"Impossible to add a shortest path to a null target\");\n",
                        "        distance =\n",
                        "                checkNotNull(\n",
                        "                        distance, \"Impossible to add a shortest distance with a null distance\");\n",
                        "\n",
                        "        shortestDistances.put(new VertexPair<V>(source, target), distance);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "addShortestDistance(V, V, W)",
                    "parameters": [
                        "source",
                        "target",
                        "distance"
                    ],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.utils.Assertions",
                            "Assertions",
                            "64-70:checkNotNull"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(org.apache.commons.graph.VertexPair,java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/VertexPair",
                            "VertexPair<V>(java.lang.Object,java.lang.Object)"
                        ]
                    ]
                },
                "49-51:AllVertexPairsShortestPath": {
                    "start": 49,
                    "end": 51,
                    "body": [
                        "    AllVertexPairsShortestPath(OrderedMonoid<W> weightOperations) {\n",
                        "        this.weightOperations = weightOperations;\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "AllVertexPairsShortestPath(OrderedMonoid<W>)",
                    "parameters": [
                        "weightOperations"
                    ],
                    "calls": []
                }
            },
            "fields": {
                "46-46:weightOperations": {
                    "start": 46,
                    "end": 46,
                    "body": [
                        "    private final OrderedMonoid<W> weightOperations;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "OrderedMonoid<W>",
                            "OrderedMonoid<W>"
                        ]
                    ]
                },
                "44-44:shortestDistances": {
                    "start": 44,
                    "end": 44,
                    "body": [
                        "    private final Map<VertexPair<V>, W> shortestDistances = new HashMap<VertexPair<V>, W>();\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Map<VertexPair<V>,W>",
                            "java.util.Map<VertexPair<V>,W>"
                        ]
                    ]
                },
                "41-42:paths": {
                    "start": 41,
                    "end": 42,
                    "body": [
                        "    private final Map<VertexPair<V>, WeightedPath<V, WE, W>> paths =\n",
                        "            new HashMap<VertexPair<V>, WeightedPath<V, WE, W>>();\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Map<VertexPair<V>,WeightedPath<V,WE,W>>",
                            "java.util.Map<VertexPair<V>,WeightedPath<V,WE,W>>"
                        ]
                    ]
                }
            }
        }
    }
}