{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-graph/src/main/java/org/apache/commons/graph/utils/Assertions.java",
    "imports": {
        "22-22:import static String.format": {
            "start": 22,
            "end": 22,
            "body": [
                "import static java.lang.String.format;\n"
            ]
        }
    },
    "classes": {
        "Assertions": {
            "start": 25,
            "end": 25,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "87-92:checkState": {
                    "start": 87,
                    "end": 92,
                    "body": [
                        "    public static void checkState(\n",
                        "            boolean expression, String errorMessageTemplate, Object... errorMessageArgs) {\n",
                        "        if (!expression) {\n",
                        "            throw new IllegalStateException(format(errorMessageTemplate, errorMessageArgs));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "checkState(boolean, String, Object[])",
                    "parameters": [
                        "expression",
                        "errorMessageTemplate",
                        "errorMessageArgs"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/IllegalStateException",
                            "IllegalStateException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ]
                    ]
                },
                "64-70:checkNotNull": {
                    "start": 64,
                    "end": 70,
                    "body": [
                        "    public static <T> T checkNotNull(\n",
                        "            T reference, String errorMessageTemplate, Object... errorMessageArgs) {\n",
                        "        if (reference == null) {\n",
                        "            throw new NullPointerException(format(errorMessageTemplate, errorMessageArgs));\n",
                        "        }\n",
                        "        return reference;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "T",
                            "T"
                        ]
                    ],
                    "signature": "checkNotNull(T, String, Object[])",
                    "parameters": [
                        "reference",
                        "errorMessageTemplate",
                        "errorMessageArgs"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/NullPointerException",
                            "NullPointerException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ]
                    ]
                },
                "42-47:checkArgument": {
                    "start": 42,
                    "end": 47,
                    "body": [
                        "    public static void checkArgument(\n",
                        "            boolean expression, String errorMessageTemplate, Object... errorMessageArgs) {\n",
                        "        if (!expression) {\n",
                        "            throw new IllegalArgumentException(format(errorMessageTemplate, errorMessageArgs));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "checkArgument(boolean, String, Object[])",
                    "parameters": [
                        "expression",
                        "errorMessageTemplate",
                        "errorMessageArgs"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/IllegalArgumentException",
                            "IllegalArgumentException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ]
                    ]
                },
                "94-94:Assertions": {
                    "start": 94,
                    "end": 94,
                    "body": [
                        "    private Assertions() {}\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "Assertions()",
                    "parameters": [],
                    "calls": []
                }
            },
            "fields": {}
        }
    }
}