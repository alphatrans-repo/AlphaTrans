{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/longcompression/LongComposition.java",
    "imports": {
        "9-9:import IntWrapper": {
            "start": 9,
            "end": 9,
            "body": [
                "import me.lemire.integercompression.IntWrapper;\n"
            ]
        }
    },
    "classes": {
        "LongComposition": {
            "start": 16,
            "end": 16,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [
                "LongCODEC"
            ],
            "extends": [],
            "methods": {
                "67-69:toString": {
                    "start": 67,
                    "end": 69,
                    "body": [
                        "        public String toString() {\n",
                        "                return F1.toString() + \" + \" + F2.toString();\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "toString()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "toString()"
                        ]
                    ]
                },
                "56-64:uncompress1": {
                    "start": 56,
                    "end": 64,
                    "body": [
                        "        public void uncompress1(long[] in, IntWrapper inpos, int inlength,\n",
                        "                                long[] out, IntWrapper outpos) {\n",
                        "                if (inlength == 0)\n",
                        "                        return;\n",
                        "                final int init = inpos.get();\n",
                        "                F1.uncompress1(in, inpos, inlength, out, outpos);\n",
                        "                inlength -= inpos.get() - init;\n",
                        "                F2.uncompress1(in, inpos, inlength, out, outpos);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "uncompress1(long[], IntWrapper, int, long[], IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                            "LongCODEC",
                            "59-61:uncompress1"
                        ]
                    ]
                },
                "39-53:compress0": {
                    "start": 39,
                    "end": 53,
                    "body": [
                        "        public void compress0(long[] in, IntWrapper inpos, int inlength,\n",
                        "                              long[] out, IntWrapper outpos) {\n",
                        "            if (inlength == 0) {\n",
                        "                return;\n",
                        "            }\n",
                        "            int inposInit = inpos.get();\n",
                        "            int outposInit = outpos.get();\n",
                        "            F1.compress0(in, inpos, inlength, out, outpos);\n",
                        "            if (outpos.get() == outposInit) {\n",
                        "                out[outposInit] = 0;\n",
                        "                outpos.increment();\n",
                        "            }\n",
                        "            inlength -= inpos.get() - inposInit;\n",
                        "            F2.compress0(in, inpos, inlength, out, outpos);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "compress0(long[], IntWrapper, int, long[], IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                            "LongCODEC",
                            "38-40:compress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "69-71:increment"
                        ]
                    ]
                },
                "33-36:LongComposition": {
                    "start": 33,
                    "end": 36,
                    "body": [
                        "        public LongComposition(LongCODEC f1, LongCODEC f2) {\n",
                        "                F1 = f1;\n",
                        "                F2 = f2;\n",
                        "        }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "LongComposition(LongCODEC, LongCODEC)",
                    "parameters": [
                        "f1",
                        "f2"
                    ],
                    "calls": []
                }
            },
            "fields": {
                "17-17:F2": {
                    "start": 17,
                    "end": 17,
                    "body": [
                        "        LongCODEC F1, F2;\n"
                    ],
                    "modifiers": [],
                    "types": [
                        [
                            "LongCODEC",
                            "LongCODEC"
                        ]
                    ]
                },
                "17-17:F1": {
                    "start": 17,
                    "end": 17,
                    "body": [
                        "        LongCODEC F1, F2;\n"
                    ],
                    "modifiers": [],
                    "types": [
                        [
                            "LongCODEC",
                            "LongCODEC"
                        ]
                    ]
                }
            }
        }
    }
}