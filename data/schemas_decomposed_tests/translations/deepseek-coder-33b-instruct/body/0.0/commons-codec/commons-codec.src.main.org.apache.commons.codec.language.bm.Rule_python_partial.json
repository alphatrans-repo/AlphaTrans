{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-codec/src/main/java/org/apache/commons/codec/language/bm/Rule.java",
    "imports": {
        "31-31:import Map": {
            "start": 31,
            "end": 31,
            "body": [
                "import java.util.Map;\n"
            ]
        },
        "30-30:import List": {
            "start": 30,
            "end": 30,
            "body": [
                "import java.util.List;\n"
            ]
        },
        "33-33:import Set": {
            "start": 33,
            "end": 33,
            "body": [
                "import java.util.Set;\n"
            ]
        },
        "26-26:import Comparator": {
            "start": 26,
            "end": 26,
            "body": [
                "import java.util.Comparator;\n"
            ]
        },
        "23-23:import ArrayList": {
            "start": 23,
            "end": 23,
            "body": [
                "import java.util.ArrayList;\n"
            ]
        },
        "24-24:import Arrays": {
            "start": 24,
            "end": 24,
            "body": [
                "import java.util.Arrays;\n"
            ]
        },
        "25-25:import Collections": {
            "start": 25,
            "end": 25,
            "body": [
                "import java.util.Collections;\n"
            ]
        },
        "27-27:import EnumMap": {
            "start": 27,
            "end": 27,
            "body": [
                "import java.util.EnumMap;\n"
            ]
        },
        "28-28:import HashMap": {
            "start": 28,
            "end": 28,
            "body": [
                "import java.util.HashMap;\n"
            ]
        },
        "29-29:import HashSet": {
            "start": 29,
            "end": 29,
            "body": [
                "import java.util.HashSet;\n"
            ]
        },
        "32-32:import Scanner": {
            "start": 32,
            "end": 32,
            "body": [
                "import java.util.Scanner;\n"
            ]
        },
        "35-35:import Pattern": {
            "start": 35,
            "end": 35,
            "body": [
                "import java.util.regex.Pattern;\n"
            ]
        },
        "34-34:import Matcher": {
            "start": 34,
            "end": 34,
            "body": [
                "import java.util.regex.Matcher;\n"
            ]
        },
        "20-20:import Resources": {
            "start": 20,
            "end": 20,
            "body": [
                "import org.apache.commons.codec.Resources;\n"
            ]
        },
        "21-21:import LanguageSet": {
            "start": 21,
            "end": 21,
            "body": [
                "import org.apache.commons.codec.language.bm.Languages.LanguageSet;\n"
            ]
        }
    },
    "classes": {
        "Phoneme": {
            "start": 89,
            "end": 89,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "Rule",
            "nests": [
                "new Comparator<Phoneme>(...) { ... }"
            ],
            "implements": [
                "PhonemeExpr"
            ],
            "extends": [],
            "methods": {
                "193-195:toString": {
                    "start": 193,
                    "end": 195,
                    "body": [
                        "        public String toString() {\n",
                        "            return phonemeText.toString() + \"[\" + languages + \"]\";\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "toString()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def toString(self) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "173-179:join": {
                    "start": 173,
                    "end": 179,
                    "body": [
                        "        public Phoneme join(final Phoneme right) {\n",
                        "            return new Phoneme(\n",
                        "                    2,\n",
                        "                    this.phonemeText.toString() + right.phonemeText.toString(),\n",
                        "                    this.languages.restrictTo(right.languages),\n",
                        "                    null);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Deprecated"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Phoneme",
                            "Phoneme"
                        ]
                    ],
                    "signature": "join(Phoneme)",
                    "parameters": [
                        "right"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Phoneme",
                            "117-134:Phoneme"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Languages",
                            "LanguageSet",
                            "76-76:restrictTo"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def join(self, right: Phoneme) -> Phoneme:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "157-159:getPhonemes": {
                    "start": 157,
                    "end": 159,
                    "body": [
                        "        public Iterable<Phoneme> getPhonemes() {\n",
                        "            return Collections.singleton(this);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Iterable<Phoneme>",
                            "java.lang.Iterable<Phoneme>"
                        ]
                    ],
                    "signature": "getPhonemes()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Collections",
                            "singleton(java.lang.Object)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getPhonemes(self) -> typing.Iterable[Phoneme]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "188-190:mergeWithLanguage": {
                    "start": 188,
                    "end": 190,
                    "body": [
                        "        public Phoneme mergeWithLanguage(final LanguageSet lang) {\n",
                        "            return new Phoneme(2, this.phonemeText.toString(), this.languages.merge(lang), null);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Phoneme",
                            "Phoneme"
                        ]
                    ],
                    "signature": "mergeWithLanguage(LanguageSet)",
                    "parameters": [
                        "lang"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Phoneme",
                            "117-134:Phoneme"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Languages",
                            "LanguageSet",
                            "78-78:merge"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def mergeWithLanguage(self, lang: LanguageSet) -> Phoneme:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "161-163:getPhonemeText": {
                    "start": 161,
                    "end": 163,
                    "body": [
                        "        public CharSequence getPhonemeText() {\n",
                        "            return this.phonemeText;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "CharSequence",
                            "java.lang.CharSequence"
                        ]
                    ],
                    "signature": "getPhonemeText()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getPhonemeText(self) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "152-154:getLanguages": {
                    "start": 152,
                    "end": 154,
                    "body": [
                        "        public Languages.LanguageSet getLanguages() {\n",
                        "            return this.languages;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "LanguageSet",
                            "LanguageSet"
                        ]
                    ],
                    "signature": "getLanguages()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getLanguages(self) -> LanguageSet:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "147-150:append": {
                    "start": 147,
                    "end": 150,
                    "body": [
                        "        public Phoneme append(final CharSequence str) {\n",
                        "            this.phonemeText.append(str);\n",
                        "            return this;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Phoneme",
                            "Phoneme"
                        ]
                    ],
                    "signature": "append(CharSequence)",
                    "parameters": [
                        "str"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.CharSequence)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def append(self, str_: str) -> Phoneme:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "140-145:Phoneme1": {
                    "start": 140,
                    "end": 145,
                    "body": [
                        "        public static Phoneme Phoneme1(\n",
                        "                final Phoneme phonemeLeft,\n",
                        "                final Phoneme phonemeRight,\n",
                        "                final Languages.LanguageSet languages) {\n",
                        "            return new Phoneme(1, phonemeLeft.phonemeText, languages, phonemeRight);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "Phoneme",
                            "Phoneme"
                        ]
                    ],
                    "signature": "Phoneme1(Phoneme, Phoneme, LanguageSet)",
                    "parameters": [
                        "phonemeLeft",
                        "phonemeRight",
                        "languages"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Phoneme",
                            "117-134:Phoneme"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def Phoneme1(phonemeLeft: Phoneme, phonemeRight: Phoneme, languages: LanguageSet) -> Phoneme:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "136-138:Phoneme0": {
                    "start": 136,
                    "end": 138,
                    "body": [
                        "        public static Phoneme Phoneme0(final Phoneme phonemeLeft, final Phoneme phonemeRight) {\n",
                        "            return new Phoneme(0, phonemeLeft.phonemeText, phonemeLeft.languages, phonemeRight);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "Phoneme",
                            "Phoneme"
                        ]
                    ],
                    "signature": "Phoneme0(Phoneme, Phoneme)",
                    "parameters": [
                        "phonemeLeft",
                        "phonemeRight"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Phoneme",
                            "117-134:Phoneme"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def Phoneme0(phonemeLeft: Phoneme, phonemeRight: Phoneme) -> Phoneme:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "117-134:Phoneme": {
                    "start": 117,
                    "end": 134,
                    "body": [
                        "        public Phoneme(\n",
                        "                int constructorId,\n",
                        "                final CharSequence phonemeText,\n",
                        "                final Languages.LanguageSet languages,\n",
                        "                final Phoneme phonemeRight) {\n",
                        "            if (constructorId == 0) {\n",
                        "                this.languages = languages;\n",
                        "                this.phonemeText = new StringBuilder(phonemeText);\n",
                        "                this.phonemeText.append(phonemeRight.phonemeText);\n",
                        "            } else if (constructorId == 1) {\n",
                        "                this.languages = languages;\n",
                        "                this.phonemeText = new StringBuilder(phonemeText);\n",
                        "                this.phonemeText.append(phonemeRight.phonemeText);\n",
                        "            } else {\n",
                        "                this.phonemeText = new StringBuilder(phonemeText);\n",
                        "                this.languages = languages;\n",
                        "            }\n",
                        "        }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "Phoneme(int, CharSequence, LanguageSet, Phoneme)",
                    "parameters": [
                        "constructorId",
                        "phonemeText",
                        "languages",
                        "phonemeRight"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder(java.lang.CharSequence)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.CharSequence)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __init__(self, constructorId: int, phonemeText: str, languages: LanguageSet, phonemeRight: Phoneme) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {
                "90-112:COMPARATOR": {
                    "start": 90,
                    "end": 112,
                    "body": [
                        "        public static final Comparator<Phoneme> COMPARATOR =\n",
                        "                new Comparator<Phoneme>() {\n",
                        "                    @Override\n",
                        "                    public int compare(final Phoneme o1, final Phoneme o2) {\n",
                        "                        final int o1Length = o1.phonemeText.length();\n",
                        "                        final int o2Length = o2.phonemeText.length();\n",
                        "                        for (int i = 0; i < o1Length; i++) {\n",
                        "                            if (i >= o2Length) {\n",
                        "                                return +1;\n",
                        "                            }\n",
                        "                            final int c = o1.phonemeText.charAt(i) - o2.phonemeText.charAt(i);\n",
                        "                            if (c != 0) {\n",
                        "                                return c;\n",
                        "                            }\n",
                        "                        }\n",
                        "\n",
                        "                        if (o1Length < o2Length) {\n",
                        "                            return -1;\n",
                        "                        }\n",
                        "\n",
                        "                        return 0;\n",
                        "                    }\n",
                        "                };\n"
                    ],
                    "modifiers": [
                        "public",
                        "final",
                        "static"
                    ],
                    "types": [
                        [
                            "Comparator<Phoneme>",
                            "java.util.Comparator<Phoneme>"
                        ]
                    ],
                    "partial_translation": [
                        "    COMPARATOR: typing.Callable[[Phoneme, Phoneme], int] = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "115-115:languages": {
                    "start": 115,
                    "end": 115,
                    "body": [
                        "        private final Languages.LanguageSet languages;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "LanguageSet",
                            "LanguageSet"
                        ]
                    ],
                    "partial_translation": [
                        "    __languages: LanguageSet = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "114-114:phonemeText": {
                    "start": 114,
                    "end": 114,
                    "body": [
                        "        private final StringBuilder phonemeText;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "StringBuilder",
                            "java.lang.StringBuilder"
                        ]
                    ],
                    "partial_translation": [
                        "    __phonemeText: typing.Union[typing.List[str], io.StringIO] = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class Phoneme(PhonemeExpr):\n\n"
        },
        "PhonemeList": {
            "start": 202,
            "end": 202,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "Rule",
            "nests": [],
            "implements": [
                "PhonemeExpr"
            ],
            "extends": [],
            "methods": {
                "210-212:getPhonemes": {
                    "start": 210,
                    "end": 212,
                    "body": [
                        "        public List<Phoneme> getPhonemes() {\n",
                        "            return this.phonemes;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "List<Phoneme>",
                            "java.util.List<Phoneme>"
                        ]
                    ],
                    "signature": "getPhonemes()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getPhonemes(self) -> typing.List[Phoneme]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "205-207:PhonemeList": {
                    "start": 205,
                    "end": 207,
                    "body": [
                        "        public PhonemeList(final List<Phoneme> phonemes) {\n",
                        "            this.phonemes = phonemes;\n",
                        "        }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "PhonemeList(List<Phoneme>)",
                    "parameters": [
                        "phonemes"
                    ],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __init__(self, phonemes: typing.List[Phoneme]) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {
                "203-203:phonemes": {
                    "start": 203,
                    "end": 203,
                    "body": [
                        "        private final List<Phoneme> phonemes;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "List<Phoneme>",
                            "java.util.List<Phoneme>"
                        ]
                    ],
                    "partial_translation": [
                        "    __phonemes: typing.List[Phoneme] = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class PhonemeList(PhonemeExpr):\n\n"
        },
        "new Comparator<Phoneme>(...) { ... }": {
            "start": 91,
            "end": 91,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "Phoneme",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "93-111:compare": {
                    "start": 93,
                    "end": 111,
                    "body": [
                        "                    public int compare(final Phoneme o1, final Phoneme o2) {\n",
                        "                        final int o1Length = o1.phonemeText.length();\n",
                        "                        final int o2Length = o2.phonemeText.length();\n",
                        "                        for (int i = 0; i < o1Length; i++) {\n",
                        "                            if (i >= o2Length) {\n",
                        "                                return +1;\n",
                        "                            }\n",
                        "                            final int c = o1.phonemeText.charAt(i) - o2.phonemeText.charAt(i);\n",
                        "                            if (c != 0) {\n",
                        "                                return c;\n",
                        "                            }\n",
                        "                        }\n",
                        "\n",
                        "                        if (o1Length < o2Length) {\n",
                        "                            return -1;\n",
                        "                        }\n",
                        "\n",
                        "                        return 0;\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "compare(Phoneme, Phoneme)",
                    "parameters": [
                        "o1",
                        "o2"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/AbstractStringBuilder",
                            "length"
                        ],
                        [
                            "library",
                            "java.base/java/lang/AbstractStringBuilder",
                            "charAt"
                        ]
                    ],
                    "is_overload": false
                },
                "90-91:": {
                    "start": 90,
                    "end": 91,
                    "body": [
                        "        public static final Comparator<Phoneme> COMPARATOR =\n",
                        "                new Comparator<Phoneme>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false
                }
            },
            "fields": {}
        },
        "Rule": {
            "start": 87,
            "end": 87,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "Phoneme",
                "PhonemeList",
                "new RPattern(...) { ... }",
                "new RPattern(...) { ... }",
                "new RPattern(...) { ... }",
                "new RPattern(...) { ... }",
                "new RPattern(...) { ... }",
                "new RPattern(...) { ... }",
                "new RPattern(...) { ... }",
                "new RPattern(...) { ... }",
                "new RPattern(...) { ... }",
                "PhonemeExpr",
                "RPattern"
            ],
            "implements": [],
            "extends": [],
            "methods": {
                "693-712:patternAndContextMatches": {
                    "start": 693,
                    "end": 712,
                    "body": [
                        "    public boolean patternAndContextMatches(final CharSequence input, final int i) {\n",
                        "        if (i < 0) {\n",
                        "            throw new IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n",
                        "        }\n",
                        "\n",
                        "        final int patternLength = this.pattern.length();\n",
                        "        final int ipl = i + patternLength;\n",
                        "\n",
                        "        if (ipl > input.length()) {\n",
                        "            return false;\n",
                        "        }\n",
                        "\n",
                        "        if (!input.subSequence(i, ipl).equals(this.pattern)) {\n",
                        "            return false;\n",
                        "        }\n",
                        "        if (!this.rContext.isMatch(input.subSequence(ipl, input.length()))) {\n",
                        "            return false;\n",
                        "        }\n",
                        "        return this.lContext.isMatch(input.subSequence(0, i));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "patternAndContextMatches(CharSequence, int)",
                    "parameters": [
                        "input",
                        "i"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IndexOutOfBoundsException",
                            "IndexOutOfBoundsException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "subSequence(int,int)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "RPattern",
                            "220-220:isMatch"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def patternAndContextMatches(self, input_: str, i: int) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "679-681:getRContext": {
                    "start": 679,
                    "end": 681,
                    "body": [
                        "    public RPattern getRContext() {\n",
                        "        return this.rContext;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "RPattern",
                            "RPattern"
                        ]
                    ],
                    "signature": "getRContext()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getRContext(self) -> RPattern:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "669-671:getPhoneme": {
                    "start": 669,
                    "end": 671,
                    "body": [
                        "    public PhonemeExpr getPhoneme() {\n",
                        "        return this.phoneme;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "PhonemeExpr",
                            "PhonemeExpr"
                        ]
                    ],
                    "signature": "getPhoneme()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getPhoneme(self) -> PhonemeExpr:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "660-662:getPattern": {
                    "start": 660,
                    "end": 662,
                    "body": [
                        "    public String getPattern() {\n",
                        "        return this.pattern;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "getPattern()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getPattern(self) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "651-653:getLContext": {
                    "start": 651,
                    "end": 653,
                    "body": [
                        "    public RPattern getLContext() {\n",
                        "        return this.lContext;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "RPattern",
                            "RPattern"
                        ]
                    ],
                    "signature": "getLContext()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getLContext(self) -> RPattern:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "634-643:Rule": {
                    "start": 634,
                    "end": 643,
                    "body": [
                        "    public Rule(\n",
                        "            final String pattern,\n",
                        "            final String lContext,\n",
                        "            final String rContext,\n",
                        "            final PhonemeExpr phoneme) {\n",
                        "        this.pattern = pattern;\n",
                        "        this.lContext = pattern(lContext + \"$\");\n",
                        "        this.rContext = pattern(\"^\" + rContext);\n",
                        "        this.phoneme = phoneme;\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "Rule(String, String, String, PhonemeExpr)",
                    "parameters": [
                        "pattern",
                        "lContext",
                        "rContext",
                        "phoneme"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "502-592:pattern"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __init__(self, pattern: str, lContext: str, rContext: str, phoneme: PhonemeExpr) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "371-383:getInstanceMap1": {
                    "start": 371,
                    "end": 383,
                    "body": [
                        "    public static Map<String, List<Rule>> getInstanceMap1(\n",
                        "            final NameType nameType, final RuleType rt, final String lang) {\n",
                        "        final Map<String, List<Rule>> rules = RULES.get(nameType).get(rt).get(lang);\n",
                        "\n",
                        "        if (rules == null) {\n",
                        "            throw new IllegalArgumentException(\n",
                        "                    String.format(\n",
                        "                            \"No rules found for %s, %s, %s.\",\n",
                        "                            nameType.getName(), rt.getName(), lang));\n",
                        "        }\n",
                        "\n",
                        "        return rules;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "Map<String,List<Rule>>",
                            "java.util.Map<String,List<Rule>>"
                        ]
                    ],
                    "signature": "getInstanceMap1(NameType, RuleType, String)",
                    "parameters": [
                        "nameType",
                        "rt",
                        "lang"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalArgumentException",
                            "IllegalArgumentException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.NameType",
                            "NameType",
                            "49-51:getName"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.RuleType",
                            "RuleType",
                            "45-47:getName"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def getInstanceMap1(nameType: NameType, rt: RuleType, lang: str) -> typing.Dict[str, typing.List[Rule]]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "354-359:getInstanceMap0": {
                    "start": 354,
                    "end": 359,
                    "body": [
                        "    public static Map<String, List<Rule>> getInstanceMap0(\n",
                        "            final NameType nameType, final RuleType rt, final Languages.LanguageSet langs) {\n",
                        "        return langs.isSingleton()\n",
                        "                ? getInstanceMap1(nameType, rt, langs.getAny())\n",
                        "                : getInstanceMap1(nameType, rt, Languages.ANY);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "Map<String,List<Rule>>",
                            "java.util.Map<String,List<Rule>>"
                        ]
                    ],
                    "signature": "getInstanceMap0(NameType, RuleType, LanguageSet)",
                    "parameters": [
                        "nameType",
                        "rt",
                        "langs"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Languages",
                            "LanguageSet",
                            "74-74:isSingleton"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "371-383:getInstanceMap1"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Languages",
                            "LanguageSet",
                            "70-70:getAny"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def getInstanceMap0(nameType: NameType, rt: RuleType, langs: LanguageSet) -> typing.Dict[str, typing.List[Rule]]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "339-342:getInstance1": {
                    "start": 339,
                    "end": 342,
                    "body": [
                        "    public static List<Rule> getInstance1(\n",
                        "            final NameType nameType, final RuleType rt, final String lang) {\n",
                        "        return getInstance0(nameType, rt, LanguageSet.from(new HashSet<>(Arrays.asList(lang))));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "List<Rule>",
                            "java.util.List<Rule>"
                        ]
                    ],
                    "signature": "getInstance1(NameType, RuleType, String)",
                    "parameters": [
                        "nameType",
                        "rt",
                        "lang"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "321-329:getInstance0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Languages",
                            "LanguageSet",
                            "64-66:from"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "HashSet<String>(java.util.Collection)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "asList(java.lang.Object[])"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def getInstance1(nameType: NameType, rt: RuleType, lang: str) -> typing.List[Rule]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "321-329:getInstance0": {
                    "start": 321,
                    "end": 329,
                    "body": [
                        "    public static List<Rule> getInstance0(\n",
                        "            final NameType nameType, final RuleType rt, final Languages.LanguageSet langs) {\n",
                        "        final Map<String, List<Rule>> ruleMap = getInstanceMap0(nameType, rt, langs);\n",
                        "        final List<Rule> allRules = new ArrayList<>();\n",
                        "        for (final List<Rule> rules : ruleMap.values()) {\n",
                        "            allRules.addAll(rules);\n",
                        "        }\n",
                        "        return allRules;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "List<Rule>",
                            "java.util.List<Rule>"
                        ]
                    ],
                    "signature": "getInstance0(NameType, RuleType, LanguageSet)",
                    "parameters": [
                        "nameType",
                        "rt",
                        "langs"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "354-359:getInstanceMap0"
                        ],
                        [
                            "library",
                            "java.base/java/util/ArrayList",
                            "ArrayList<Rule>()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "values()"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "addAll(java.util.Collection)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def getInstance0(nameType: NameType, rt: RuleType, langs: LanguageSet) -> typing.List[Rule]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "606-616:stripQuotes": {
                    "start": 606,
                    "end": 616,
                    "body": [
                        "    private static String stripQuotes(String str) {\n",
                        "        if (str.startsWith(DOUBLE_QUOTE)) {\n",
                        "            str = str.substring(1);\n",
                        "        }\n",
                        "\n",
                        "        if (str.endsWith(DOUBLE_QUOTE)) {\n",
                        "            str = str.substring(0, str.length() - 1);\n",
                        "        }\n",
                        "\n",
                        "        return str;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "stripQuotes(String)",
                    "parameters": [
                        "str"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "startsWith(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "substring(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "endsWith(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "substring(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __stripQuotes(str_: str) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "594-604:startsWith": {
                    "start": 594,
                    "end": 604,
                    "body": [
                        "    private static boolean startsWith(final CharSequence input, final CharSequence prefix) {\n",
                        "        if (prefix.length() > input.length()) {\n",
                        "            return false;\n",
                        "        }\n",
                        "        for (int i = 0; i < prefix.length(); i++) {\n",
                        "            if (input.charAt(i) != prefix.charAt(i)) {\n",
                        "                return false;\n",
                        "            }\n",
                        "        }\n",
                        "        return true;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "startsWith(CharSequence, CharSequence)",
                    "parameters": [
                        "input",
                        "prefix"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "charAt(int)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __startsWith(input_: str, prefix: str) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "502-592:pattern": {
                    "start": 502,
                    "end": 592,
                    "body": [
                        "    private static RPattern pattern(final String regex) {\n",
                        "        final boolean startsWith = regex.startsWith(\"^\");\n",
                        "        final boolean endsWith = regex.endsWith(\"$\");\n",
                        "        final String content =\n",
                        "                regex.substring(startsWith ? 1 : 0, endsWith ? regex.length() - 1 : regex.length());\n",
                        "        final boolean boxes = content.contains(\"[\");\n",
                        "\n",
                        "        if (!boxes) {\n",
                        "            if (startsWith && endsWith) {\n",
                        "                if (content.isEmpty()) {\n",
                        "                    return new RPattern() {\n",
                        "                        public boolean isMatch(final CharSequence input) {\n",
                        "                            return input.length() == 0;\n",
                        "                        }\n",
                        "                    };\n",
                        "                }\n",
                        "                return new RPattern() {\n",
                        "                    public boolean isMatch(final CharSequence input) {\n",
                        "                        return input.equals(content);\n",
                        "                    }\n",
                        "                };\n",
                        "            }\n",
                        "            if ((startsWith || endsWith) && content.isEmpty()) {\n",
                        "                return ALL_STRINGS_RMATCHER;\n",
                        "            }\n",
                        "            if (startsWith) {\n",
                        "                return new RPattern() {\n",
                        "                    public boolean isMatch(final CharSequence input) {\n",
                        "                        return startsWith(input, content);\n",
                        "                    }\n",
                        "                };\n",
                        "            }\n",
                        "            if (endsWith) {\n",
                        "                return new RPattern() {\n",
                        "                    public boolean isMatch(final CharSequence input) {\n",
                        "                        return endsWith(input, content);\n",
                        "                    }\n",
                        "                };\n",
                        "            }\n",
                        "        } else {\n",
                        "            final boolean startsWithBox = content.startsWith(\"[\");\n",
                        "            final boolean endsWithBox = content.endsWith(\"]\");\n",
                        "\n",
                        "            if (startsWithBox && endsWithBox) {\n",
                        "                String boxContent = content.substring(1, content.length() - 1);\n",
                        "                if (!boxContent.contains(\"[\")) {\n",
                        "                    final boolean negate = boxContent.startsWith(\"^\");\n",
                        "                    if (negate) {\n",
                        "                        boxContent = boxContent.substring(1);\n",
                        "                    }\n",
                        "                    final String bContent = boxContent;\n",
                        "                    final boolean shouldMatch = !negate;\n",
                        "\n",
                        "                    if (startsWith && endsWith) {\n",
                        "                        return new RPattern() {\n",
                        "                            public boolean isMatch(final CharSequence input) {\n",
                        "                                return input.length() == 1\n",
                        "                                        && contains(bContent, input.charAt(0)) == shouldMatch;\n",
                        "                            }\n",
                        "                        };\n",
                        "                    }\n",
                        "                    if (startsWith) {\n",
                        "                        return new RPattern() {\n",
                        "                            public boolean isMatch(final CharSequence input) {\n",
                        "                                return input.length() > 0\n",
                        "                                        && contains(bContent, input.charAt(0)) == shouldMatch;\n",
                        "                            }\n",
                        "                        };\n",
                        "                    }\n",
                        "                    if (endsWith) {\n",
                        "                        return new RPattern() {\n",
                        "                            public boolean isMatch(final CharSequence input) {\n",
                        "                                return input.length() > 0\n",
                        "                                        && contains(bContent, input.charAt(input.length() - 1))\n",
                        "                                                == shouldMatch;\n",
                        "                            }\n",
                        "                        };\n",
                        "                    }\n",
                        "                }\n",
                        "            }\n",
                        "        }\n",
                        "\n",
                        "        return new RPattern() {\n",
                        "            final Pattern pattern = Pattern.compile(regex);\n",
                        "\n",
                        "            public boolean isMatch(final CharSequence input) {\n",
                        "                final Matcher matcher = pattern.matcher(input);\n",
                        "                return matcher.find();\n",
                        "            }\n",
                        "        };\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "RPattern",
                            "RPattern"
                        ]
                    ],
                    "signature": "pattern(String)",
                    "parameters": [
                        "regex"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "startsWith(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "endsWith(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "substring(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "contains(java.lang.CharSequence)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "isEmpty()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "substring(int)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __pattern(regex: str) -> RPattern:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "421-493:parseRules": {
                    "start": 421,
                    "end": 493,
                    "body": [
                        "    private static Map<String, List<Rule>> parseRules(\n",
                        "            final Scanner scanner, final String location) {\n",
                        "        final Map<String, List<Rule>> lines = new HashMap<>();\n",
                        "        int currentLine = 0;\n",
                        "\n",
                        "        boolean inMultilineComment = false;\n",
                        "        while (scanner.hasNextLine()) {\n",
                        "            currentLine++;\n",
                        "            final String rawLine = scanner.nextLine();\n",
                        "            String line = rawLine;\n",
                        "\n",
                        "            if (inMultilineComment) {\n",
                        "                if (line.endsWith(ResourceConstants.EXT_CMT_END)) {\n",
                        "                    inMultilineComment = false;\n",
                        "                }\n",
                        "            } else if (line.startsWith(ResourceConstants.EXT_CMT_START)) {\n",
                        "                inMultilineComment = true;\n",
                        "            } else {\n",
                        "                final int cmtI = line.indexOf(ResourceConstants.CMT);\n",
                        "                if (cmtI >= 0) {\n",
                        "                    line = line.substring(0, cmtI);\n",
                        "                }\n",
                        "\n",
                        "                line = line.trim();\n",
                        "\n",
                        "                if (line.isEmpty()) {\n",
                        "                    continue; // empty lines can be safely skipped\n",
                        "                }\n",
                        "\n",
                        "                if (line.startsWith(HASH_INCLUDE)) {\n",
                        "                    final String incl = line.substring(HASH_INCLUDE_LENGTH).trim();\n",
                        "                    if (incl.contains(\" \")) {\n",
                        "                        throw new IllegalArgumentException(\n",
                        "                                \"Malformed import statement '\" + rawLine + \"' in \" + location);\n",
                        "                    }\n",
                        "                    try (final Scanner hashIncludeScanner = createScanner1(incl)) {\n",
                        "                        lines.putAll(parseRules(hashIncludeScanner, location + \"->\" + incl));\n",
                        "                    }\n",
                        "                } else {\n",
                        "                    final String[] parts = line.split(\"\\\\s+\");\n",
                        "                    if (parts.length != 4) {\n",
                        "                        throw new IllegalArgumentException(\n",
                        "                                \"Malformed rule statement split into \"\n",
                        "                                        + parts.length\n",
                        "                                        + \" parts: \"\n",
                        "                                        + rawLine\n",
                        "                                        + \" in \"\n",
                        "                                        + location);\n",
                        "                    }\n",
                        "                    try {\n",
                        "                        final String pat = stripQuotes(parts[0]);\n",
                        "                        final String lCon = stripQuotes(parts[1]);\n",
                        "                        final String rCon = stripQuotes(parts[2]);\n",
                        "                        final PhonemeExpr ph = parsePhonemeExpr(stripQuotes(parts[3]));\n",
                        "                        final int cLine = currentLine;\n",
                        "                        final Rule r = new Rule1(pat, lCon, rCon, ph, cLine, location);\n",
                        "                        final String patternKey = r.pattern.substring(0, 1);\n",
                        "                        List<Rule> rules = lines.get(patternKey);\n",
                        "                        if (rules == null) {\n",
                        "                            rules = new ArrayList<>();\n",
                        "                            lines.put(patternKey, rules);\n",
                        "                        }\n",
                        "                        rules.add(r);\n",
                        "                    } catch (final IllegalArgumentException e) {\n",
                        "                        throw new IllegalStateException(\n",
                        "                                \"Problem parsing line '\" + currentLine + \"' in \" + location, e);\n",
                        "                    }\n",
                        "                }\n",
                        "            }\n",
                        "        }\n",
                        "\n",
                        "        return lines;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "Map<String,List<Rule>>",
                            "java.util.Map<String,List<Rule>>"
                        ]
                    ],
                    "signature": "parseRules(Scanner, String)",
                    "parameters": [
                        "scanner",
                        "location"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<String,List<Rule>>()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Scanner",
                            "hasNextLine()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Scanner",
                            "nextLine()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "endsWith(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "startsWith(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "indexOf(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "substring(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "trim()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "isEmpty()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "substring(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "contains(java.lang.CharSequence)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalArgumentException",
                            "IllegalArgumentException(java.lang.String)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "293-296:createScanner1"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "putAll(java.util.Map)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "421-493:parseRules"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "split(java.lang.String)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "606-616:stripQuotes"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "401-419:parsePhonemeExpr"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule1",
                            "Rule1",
                            "28-36:Rule1"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/util/ArrayList",
                            "ArrayList<Rule>()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(java.lang.String,java.util.List)"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "add(org.apache.commons.codec.language.bm.Rule)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalStateException",
                            "IllegalStateException(java.lang.String,java.lang.Throwable)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __parseRules(scanner: typing.Any, location: str) -> typing.Dict[str, typing.List[Rule]]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "401-419:parsePhonemeExpr": {
                    "start": 401,
                    "end": 419,
                    "body": [
                        "    private static PhonemeExpr parsePhonemeExpr(final String ph) {\n",
                        "        if (ph.startsWith(\"(\")) { // we have a bracketed list of options\n",
                        "            if (!ph.endsWith(\")\")) {\n",
                        "                throw new IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n",
                        "            }\n",
                        "\n",
                        "            final List<Phoneme> phs = new ArrayList<>();\n",
                        "            final String body = ph.substring(1, ph.length() - 1);\n",
                        "            for (final String part : body.split(\"[|]\")) {\n",
                        "                phs.add(parsePhoneme(part));\n",
                        "            }\n",
                        "            if (body.startsWith(\"|\") || body.endsWith(\"|\")) {\n",
                        "                phs.add(new Phoneme(2, \"\", Languages.ANY_LANGUAGE, null));\n",
                        "            }\n",
                        "\n",
                        "            return new PhonemeList(phs);\n",
                        "        }\n",
                        "        return parsePhoneme(ph);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "PhonemeExpr",
                            "PhonemeExpr"
                        ]
                    ],
                    "signature": "parsePhonemeExpr(String)",
                    "parameters": [
                        "ph"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "startsWith(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/ArrayList",
                            "ArrayList<Phoneme>()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "substring(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "endsWith(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalArgumentException",
                            "IllegalArgumentException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "split(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "add(org.apache.commons.codec.language.bm.Rule.Phoneme)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "385-399:parsePhoneme"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Phoneme",
                            "117-134:Phoneme"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "PhonemeList",
                            "205-207:PhonemeList"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __parsePhonemeExpr(ph: str) -> PhonemeExpr:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "385-399:parsePhoneme": {
                    "start": 385,
                    "end": 399,
                    "body": [
                        "    private static Phoneme parsePhoneme(final String ph) {\n",
                        "        final int open = ph.indexOf(\"[\");\n",
                        "        if (open >= 0) {\n",
                        "            if (!ph.endsWith(\"]\")) {\n",
                        "                throw new IllegalArgumentException(\n",
                        "                        \"Phoneme expression contains a '[' but does not end in ']'\");\n",
                        "            }\n",
                        "            final String before = ph.substring(0, open);\n",
                        "            final String in = ph.substring(open + 1, ph.length() - 1);\n",
                        "            final Set<String> langs = new HashSet<>(Arrays.asList(in.split(\"[+]\")));\n",
                        "\n",
                        "            return new Phoneme(2, before, Languages.LanguageSet.from(langs), null);\n",
                        "        }\n",
                        "        return new Phoneme(2, ph, Languages.ANY_LANGUAGE, null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "Phoneme",
                            "Phoneme"
                        ]
                    ],
                    "signature": "parsePhoneme(String)",
                    "parameters": [
                        "ph"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "indexOf(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "substring(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "HashSet<String>(java.util.Collection)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "asList(java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "split(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "endsWith(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalArgumentException",
                            "IllegalArgumentException(java.lang.String)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Phoneme",
                            "117-134:Phoneme"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Languages",
                            "LanguageSet",
                            "64-66:from"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __parsePhoneme(ph: str) -> Phoneme:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "298-311:endsWith": {
                    "start": 298,
                    "end": 311,
                    "body": [
                        "    private static boolean endsWith(final CharSequence input, final CharSequence suffix) {\n",
                        "        final int suffixLength = suffix.length();\n",
                        "        final int inputLength = input.length();\n",
                        "\n",
                        "        if (suffixLength > inputLength) {\n",
                        "            return false;\n",
                        "        }\n",
                        "        for (int i = inputLength - 1, j = suffixLength - 1; j >= 0; i--, j--) {\n",
                        "            if (input.charAt(i) != suffix.charAt(j)) {\n",
                        "                return false;\n",
                        "            }\n",
                        "        }\n",
                        "        return true;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "endsWith(CharSequence, CharSequence)",
                    "parameters": [
                        "input",
                        "suffix"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "charAt(int)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __endsWith(input_: str, suffix: str) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "293-296:createScanner1": {
                    "start": 293,
                    "end": 296,
                    "body": [
                        "    private static Scanner createScanner1(final String lang) {\n",
                        "        final String resName = String.format(\"org/apache/commons/codec/language/bm/%s.txt\", lang);\n",
                        "        return new Scanner(Resources.getInputStream(resName), ResourceConstants.ENCODING);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "Scanner",
                            "java.util.Scanner"
                        ]
                    ],
                    "signature": "createScanner1(String)",
                    "parameters": [
                        "lang"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/util/Scanner",
                            "Scanner(java.io.InputStream,java.lang.String)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.Resources",
                            "Resources",
                            "35-41:getInputStream"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __createScanner1(lang: str) -> typing.Any:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "287-291:createScanner0": {
                    "start": 287,
                    "end": 291,
                    "body": [
                        "    private static Scanner createScanner0(\n",
                        "            final NameType nameType, final RuleType rt, final String lang) {\n",
                        "        final String resName = createResourceName(nameType, rt, lang);\n",
                        "        return new Scanner(Resources.getInputStream(resName), ResourceConstants.ENCODING);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "Scanner",
                            "java.util.Scanner"
                        ]
                    ],
                    "signature": "createScanner0(NameType, RuleType, String)",
                    "parameters": [
                        "nameType",
                        "rt",
                        "lang"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "280-285:createResourceName"
                        ],
                        [
                            "library",
                            "java.base/java/util/Scanner",
                            "Scanner(java.io.InputStream,java.lang.String)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.Resources",
                            "Resources",
                            "35-41:getInputStream"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __createScanner0(nameType: NameType, rt: RuleType, lang: str) -> typing.Any:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "280-285:createResourceName": {
                    "start": 280,
                    "end": 285,
                    "body": [
                        "    private static String createResourceName(\n",
                        "            final NameType nameType, final RuleType rt, final String lang) {\n",
                        "        return String.format(\n",
                        "                \"org/apache/commons/codec/language/bm/%s_%s_%s.txt\",\n",
                        "                nameType.getName(), rt.getName(), lang);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "createResourceName(NameType, RuleType, String)",
                    "parameters": [
                        "nameType",
                        "rt",
                        "lang"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.NameType",
                            "NameType",
                            "49-51:getName"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.RuleType",
                            "RuleType",
                            "45-47:getName"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __createResourceName(nameType: NameType, rt: RuleType, lang: str) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "271-278:contains": {
                    "start": 271,
                    "end": 278,
                    "body": [
                        "    private static boolean contains(final CharSequence chars, final char input) {\n",
                        "        for (int i = 0; i < chars.length(); i++) {\n",
                        "            if (chars.charAt(i) == input) {\n",
                        "                return true;\n",
                        "            }\n",
                        "        }\n",
                        "        return false;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "contains(CharSequence, char)",
                    "parameters": [
                        "chars",
                        "input"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "charAt(int)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __contains(chars: str, input_: str) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {
                "230-230:ALL": {
                    "start": 230,
                    "end": 230,
                    "body": [
                        "    public static final String ALL = \"ALL\";\n"
                    ],
                    "modifiers": [
                        "public",
                        "final",
                        "static"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "partial_translation": [
                        "    ALL: str = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "223-228:ALL_STRINGS_RMATCHER": {
                    "start": 223,
                    "end": 228,
                    "body": [
                        "    public static final RPattern ALL_STRINGS_RMATCHER =\n",
                        "            new RPattern() {\n",
                        "                public boolean isMatch(final CharSequence input) {\n",
                        "                    return true;\n",
                        "                }\n",
                        "            };\n"
                    ],
                    "modifiers": [
                        "public",
                        "final",
                        "static"
                    ],
                    "types": [
                        [
                            "RPattern",
                            "RPattern"
                        ]
                    ],
                    "partial_translation": [
                        "    ALL_STRINGS_RMATCHER: RPattern = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "624-624:rContext": {
                    "start": 624,
                    "end": 624,
                    "body": [
                        "    private final RPattern rContext;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "RPattern",
                            "RPattern"
                        ]
                    ],
                    "partial_translation": [
                        "    __rContext: RPattern = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "622-622:phoneme": {
                    "start": 622,
                    "end": 622,
                    "body": [
                        "    private final PhonemeExpr phoneme;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "PhonemeExpr",
                            "PhonemeExpr"
                        ]
                    ],
                    "partial_translation": [
                        "    __phoneme: PhonemeExpr = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "620-620:pattern": {
                    "start": 620,
                    "end": 620,
                    "body": [
                        "    private final String pattern;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "partial_translation": [
                        "    __pattern: str = ''",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "618-618:lContext": {
                    "start": 618,
                    "end": 618,
                    "body": [
                        "    private final RPattern lContext;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "RPattern",
                            "RPattern"
                        ]
                    ],
                    "partial_translation": [
                        "    __lContext: RPattern = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "238-239:RULES": {
                    "start": 238,
                    "end": 239,
                    "body": [
                        "    private static final Map<NameType, Map<RuleType, Map<String, Map<String, List<Rule>>>>> RULES =\n",
                        "            new EnumMap<>(NameType.class);\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "Map<NameType,Map<RuleType,Map<String,Map<String,List<Rule>>>>>",
                            "java.util.Map<NameType,Map<RuleType,Map<String,Map<String,List<Rule>>>>>"
                        ]
                    ],
                    "partial_translation": [
                        "    __RULES: typing.Dict[NameType, typing.Dict[RuleType, typing.Dict[str, typing.Dict[str, typing.List[Rule]]]]] = {}",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "236-236:HASH_INCLUDE_LENGTH": {
                    "start": 236,
                    "end": 236,
                    "body": [
                        "    private static final int HASH_INCLUDE_LENGTH = HASH_INCLUDE.length();\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "partial_translation": [
                        "    __HASH_INCLUDE_LENGTH: int = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "234-234:HASH_INCLUDE": {
                    "start": 234,
                    "end": 234,
                    "body": [
                        "    private static final String HASH_INCLUDE = \"#include\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "partial_translation": [
                        "    __HASH_INCLUDE: str = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "232-232:DOUBLE_QUOTE": {
                    "start": 232,
                    "end": 232,
                    "body": [
                        "    private static final String DOUBLE_QUOTE = \"\\\"\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "partial_translation": [
                        "    __DOUBLE_QUOTE: str = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "static_initializers": {
                "241-269:run_static_init": {
                    "start": 241,
                    "end": 269,
                    "body": [
                        "    static {\n",
                        "        for (final NameType s : NameType.values()) {\n",
                        "            final Map<RuleType, Map<String, Map<String, List<Rule>>>> rts =\n",
                        "                    new EnumMap<>(RuleType.class);\n",
                        "\n",
                        "            for (final RuleType rt : RuleType.values()) {\n",
                        "                final Map<String, Map<String, List<Rule>>> rs = new HashMap<>();\n",
                        "\n",
                        "                final Languages ls = Languages.getInstance0(s);\n",
                        "                for (final String l : ls.getLanguages()) {\n",
                        "                    try (final Scanner scanner = createScanner0(s, rt, l)) {\n",
                        "                        rs.put(l, parseRules(scanner, createResourceName(s, rt, l)));\n",
                        "                    } catch (final IllegalStateException e) {\n",
                        "                        throw new IllegalStateException(\n",
                        "                                \"Problem processing \" + createResourceName(s, rt, l), e);\n",
                        "                    }\n",
                        "                }\n",
                        "                if (!rt.equals(RuleType.RULES)) {\n",
                        "                    try (final Scanner scanner = createScanner0(s, rt, \"common\")) {\n",
                        "                        rs.put(\"common\", parseRules(scanner, createResourceName(s, rt, \"common\")));\n",
                        "                    }\n",
                        "                }\n",
                        "\n",
                        "                rts.put(rt, Collections.unmodifiableMap(rs));\n",
                        "            }\n",
                        "\n",
                        "            RULES.put(s, Collections.unmodifiableMap(rts));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "partial_translation": [],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class Rule:\n\n"
        },
        "new RPattern(...) { ... }": {
            "start": 224,
            "end": 224,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "Rule",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "225-227:isMatch": {
                    "start": 225,
                    "end": 227,
                    "body": [
                        "                public boolean isMatch(final CharSequence input) {\n",
                        "                    return true;\n",
                        "                }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isMatch(CharSequence)",
                    "parameters": [
                        "input"
                    ],
                    "calls": [],
                    "is_overload": true
                },
                "513-515:isMatch": {
                    "start": 513,
                    "end": 515,
                    "body": [
                        "                        public boolean isMatch(final CharSequence input) {\n",
                        "                            return input.length() == 0;\n",
                        "                        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isMatch(CharSequence)",
                    "parameters": [
                        "input"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "length"
                        ]
                    ],
                    "is_overload": true
                },
                "519-521:isMatch": {
                    "start": 519,
                    "end": 521,
                    "body": [
                        "                    public boolean isMatch(final CharSequence input) {\n",
                        "                        return input.equals(content);\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isMatch(CharSequence)",
                    "parameters": [
                        "input"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals"
                        ]
                    ],
                    "is_overload": true
                },
                "529-531:isMatch": {
                    "start": 529,
                    "end": 531,
                    "body": [
                        "                    public boolean isMatch(final CharSequence input) {\n",
                        "                        return startsWith(input, content);\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isMatch(CharSequence)",
                    "parameters": [
                        "input"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "594-604:startsWith"
                        ]
                    ],
                    "is_overload": true
                },
                "536-538:isMatch": {
                    "start": 536,
                    "end": 538,
                    "body": [
                        "                    public boolean isMatch(final CharSequence input) {\n",
                        "                        return endsWith(input, content);\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isMatch(CharSequence)",
                    "parameters": [
                        "input"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "298-311:endsWith"
                        ]
                    ],
                    "is_overload": true
                },
                "557-560:isMatch": {
                    "start": 557,
                    "end": 560,
                    "body": [
                        "                            public boolean isMatch(final CharSequence input) {\n",
                        "                                return input.length() == 1\n",
                        "                                        && contains(bContent, input.charAt(0)) == shouldMatch;\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isMatch(CharSequence)",
                    "parameters": [
                        "input"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "length"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "271-278:contains"
                        ],
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "charAt"
                        ]
                    ],
                    "is_overload": true
                },
                "565-568:isMatch": {
                    "start": 565,
                    "end": 568,
                    "body": [
                        "                            public boolean isMatch(final CharSequence input) {\n",
                        "                                return input.length() > 0\n",
                        "                                        && contains(bContent, input.charAt(0)) == shouldMatch;\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isMatch(CharSequence)",
                    "parameters": [
                        "input"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "length"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "271-278:contains"
                        ],
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "charAt"
                        ]
                    ],
                    "is_overload": true
                },
                "573-577:isMatch": {
                    "start": 573,
                    "end": 577,
                    "body": [
                        "                            public boolean isMatch(final CharSequence input) {\n",
                        "                                return input.length() > 0\n",
                        "                                        && contains(bContent, input.charAt(input.length() - 1))\n",
                        "                                                == shouldMatch;\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isMatch(CharSequence)",
                    "parameters": [
                        "input"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "length"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Rule",
                            "Rule",
                            "271-278:contains"
                        ],
                        [
                            "library",
                            "java.base/java/lang/CharSequence",
                            "charAt"
                        ]
                    ],
                    "is_overload": true
                },
                "587-590:isMatch": {
                    "start": 587,
                    "end": 590,
                    "body": [
                        "            public boolean isMatch(final CharSequence input) {\n",
                        "                final Matcher matcher = pattern.matcher(input);\n",
                        "                return matcher.find();\n",
                        "            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isMatch(CharSequence)",
                    "parameters": [
                        "input"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "matcher"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Matcher",
                            "find"
                        ]
                    ],
                    "is_overload": true
                },
                "223-224:": {
                    "start": 223,
                    "end": 224,
                    "body": [
                        "    public static final RPattern ALL_STRINGS_RMATCHER =\n",
                        "            new RPattern() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "512-512:": {
                    "start": 512,
                    "end": 512,
                    "body": [
                        "                    return new RPattern() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "518-518:": {
                    "start": 518,
                    "end": 518,
                    "body": [
                        "                return new RPattern() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "528-528:": {
                    "start": 528,
                    "end": 528,
                    "body": [
                        "                return new RPattern() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "535-535:": {
                    "start": 535,
                    "end": 535,
                    "body": [
                        "                return new RPattern() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "556-556:": {
                    "start": 556,
                    "end": 556,
                    "body": [
                        "                        return new RPattern() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "564-564:": {
                    "start": 564,
                    "end": 564,
                    "body": [
                        "                        return new RPattern() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "572-572:": {
                    "start": 572,
                    "end": 572,
                    "body": [
                        "                        return new RPattern() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "584-584:": {
                    "start": 584,
                    "end": 584,
                    "body": [
                        "        return new RPattern() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                }
            },
            "fields": {
                "585-585:pattern": {
                    "start": 585,
                    "end": 585,
                    "body": [
                        "            final Pattern pattern = Pattern.compile(regex);\n"
                    ],
                    "modifiers": [
                        "final"
                    ],
                    "types": [
                        [
                            "Pattern",
                            "java.util.regex.Pattern"
                        ]
                    ]
                }
            }
        },
        "PhonemeExpr": {
            "start": 198,
            "end": 198,
            "is_abstract": false,
            "is_interface": true,
            "nested_inside": "Rule",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "199-199:getPhonemes": {
                    "start": 199,
                    "end": 199,
                    "body": [
                        "        Iterable<Phoneme> getPhonemes();\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "abstract"
                    ],
                    "return_types": [
                        [
                            "Iterable<Phoneme>",
                            "java.lang.Iterable<Phoneme>"
                        ]
                    ],
                    "signature": "getPhonemes()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getPhonemes(self) -> typing.Iterable[Phoneme]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {},
            "is_enum": false,
            "python_class_declaration": "class PhonemeExpr(ABC):\n\n"
        },
        "RPattern": {
            "start": 219,
            "end": 219,
            "is_abstract": false,
            "is_interface": true,
            "nested_inside": "Rule",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "220-220:isMatch": {
                    "start": 220,
                    "end": 220,
                    "body": [
                        "        boolean isMatch(CharSequence input);\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "abstract"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isMatch(CharSequence)",
                    "parameters": [
                        "input"
                    ],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def isMatch(self, input_: str) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {},
            "is_enum": false,
            "python_class_declaration": "class RPattern(ABC):\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "from abc import ABC",
        "from io import StringIO",
        "import io",
        "import typing\nfrom typing import *",
        "from src.main.org.apache.commons.codec.Resources import *",
        "from src.main.org.apache.commons.codec.language.bm.Languages import *",
        "from src.main.org.apache.commons.codec.language.bm.NameType import *",
        "from src.main.org.apache.commons.codec.language.bm.ResourceConstants import *",
        "from src.main.org.apache.commons.codec.language.bm.RuleType import *"
    ]
}