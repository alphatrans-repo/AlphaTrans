{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/jansi/src/main/java/org/fusesource/jansi/internal/JansiLoader.java",
    "imports": {
        "38-38:import IOException": {
            "start": 38,
            "end": 38,
            "body": [
                "import java.io.IOException;\n"
            ]
        },
        "34-34:import File": {
            "start": 34,
            "end": 34,
            "body": [
                "import java.io.File;\n"
            ]
        },
        "37-37:import FilenameFilter": {
            "start": 37,
            "end": 37,
            "body": [
                "import java.io.FilenameFilter;\n"
            ]
        },
        "40-40:import URL": {
            "start": 40,
            "end": 40,
            "body": [
                "import java.net.URL;\n"
            ]
        },
        "35-35:import FileInputStream": {
            "start": 35,
            "end": 35,
            "body": [
                "import java.io.FileInputStream;\n"
            ]
        },
        "39-39:import InputStream": {
            "start": 39,
            "end": 39,
            "body": [
                "import java.io.InputStream;\n"
            ]
        },
        "36-36:import FileOutputStream": {
            "start": 36,
            "end": 36,
            "body": [
                "import java.io.FileOutputStream;\n"
            ]
        },
        "45-45:import List": {
            "start": 45,
            "end": 45,
            "body": [
                "import java.util.List;\n"
            ]
        },
        "46-46:import Properties": {
            "start": 46,
            "end": 46,
            "body": [
                "import java.util.Properties;\n"
            ]
        },
        "41-41:import Files": {
            "start": 41,
            "end": 41,
            "body": [
                "import java.nio.file.Files;\n"
            ]
        },
        "42-42:import StandardCopyOption": {
            "start": 42,
            "end": 42,
            "body": [
                "import java.nio.file.StandardCopyOption;\n"
            ]
        },
        "43-43:import Arrays": {
            "start": 43,
            "end": 43,
            "body": [
                "import java.util.Arrays;\n"
            ]
        },
        "44-44:import LinkedList": {
            "start": 44,
            "end": 44,
            "body": [
                "import java.util.LinkedList;\n"
            ]
        },
        "47-47:import Random": {
            "start": 47,
            "end": 47,
            "body": [
                "import java.util.Random;\n"
            ]
        },
        "49-49:import AnsiConsole": {
            "start": 49,
            "end": 49,
            "body": [
                "import org.fusesource.jansi.AnsiConsole;\n"
            ]
        }
    },
    "classes": {
        "JansiLoader": {
            "start": 61,
            "end": 61,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "new Runnable(...) { ... }",
                "new FilenameFilter(...) { ... }"
            ],
            "implements": [],
            "extends": [],
            "methods": {
                "378-394:getVersion": {
                    "start": 378,
                    "end": 394,
                    "body": [
                        "    public static String getVersion() {\n",
                        "\n",
                        "        URL versionFile = JansiLoader.class.getResource(\"/org/fusesource/jansi/jansi.properties\");\n",
                        "\n",
                        "        String version = \"unknown\";\n",
                        "        try {\n",
                        "            if (versionFile != null) {\n",
                        "                Properties versionData = new Properties();\n",
                        "                versionData.load(versionFile.openStream());\n",
                        "                version = versionData.getProperty(\"version\", version);\n",
                        "                version = version.trim().replaceAll(\"[^0-9.]\", \"\");\n",
                        "            }\n",
                        "        } catch (IOException e) {\n",
                        "            System.err.println(e);\n",
                        "        }\n",
                        "        return version;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "getVersion()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "getResource(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Properties",
                            "Properties()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Properties",
                            "load(java.io.InputStream)"
                        ],
                        [
                            "library",
                            "java.base/java/net/URL",
                            "openStream()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Properties",
                            "getProperty(java.lang.String,java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "replaceAll(java.lang.String,java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "trim()"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.Object)"
                        ]
                    ]
                },
                "370-373:getMinorVersion": {
                    "start": 370,
                    "end": 373,
                    "body": [
                        "    public static int getMinorVersion() {\n",
                        "        String[] c = getVersion().split(\"\\\\.\");\n",
                        "        return (c.length > 1) ? Integer.parseInt(c[1]) : 0;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "getMinorVersion()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "split(java.lang.String)"
                        ],
                        [
                            "jansi.src.main.org.fusesource.jansi.internal.JansiLoader",
                            "JansiLoader",
                            "378-394:getVersion"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "parseInt(java.lang.String)"
                        ]
                    ]
                },
                "362-365:getMajorVersion": {
                    "start": 362,
                    "end": 365,
                    "body": [
                        "    public static int getMajorVersion() {\n",
                        "        String[] c = getVersion().split(\"\\\\.\");\n",
                        "        return (c.length > 0) ? Integer.parseInt(c[0]) : 1;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "getMajorVersion()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "split(java.lang.String)"
                        ],
                        [
                            "jansi.src.main.org.fusesource.jansi.internal.JansiLoader",
                            "JansiLoader",
                            "378-394:getVersion"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "parseInt(java.lang.String)"
                        ]
                    ]
                },
                "109-132:cleanup": {
                    "start": 109,
                    "end": 132,
                    "body": [
                        "    static void cleanup() {\n",
                        "        String tempFolder = getTempDir().getAbsolutePath();\n",
                        "        File dir = new File(tempFolder);\n",
                        "\n",
                        "        File[] nativeLibFiles = dir.listFiles(new FilenameFilter() {\n",
                        "            private final String searchPattern = \"jansi-\" + getVersion();\n",
                        "\n",
                        "            public boolean accept(File dir, String name) {\n",
                        "                return name.startsWith(searchPattern) && !name.endsWith(\".lck\");\n",
                        "            }\n",
                        "        });\n",
                        "        if (nativeLibFiles != null) {\n",
                        "            for (File nativeLibFile : nativeLibFiles) {\n",
                        "                File lckFile = new File(nativeLibFile.getAbsolutePath() + \".lck\");\n",
                        "                if (!lckFile.exists()) {\n",
                        "                    try {\n",
                        "                        nativeLibFile.delete();\n",
                        "                    } catch (SecurityException e) {\n",
                        "                        System.err.println(\"Failed to delete old native lib\" + e.getMessage());\n",
                        "                    }\n",
                        "                }\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "cleanup()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/File",
                            "getAbsolutePath()"
                        ],
                        [
                            "jansi.src.main.org.fusesource.jansi.internal.JansiLoader",
                            "JansiLoader",
                            "101-103:getTempDir"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "File(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "listFiles(java.io.FilenameFilter)"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "exists()"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "delete()"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ]
                    ]
                },
                "97-99:getNativeLibrarySourceUrl": {
                    "start": 97,
                    "end": 99,
                    "body": [
                        "    public static String getNativeLibrarySourceUrl() {\n",
                        "        return nativeLibrarySourceUrl;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "getNativeLibrarySourceUrl()",
                    "parameters": [],
                    "calls": []
                },
                "93-95:getNativeLibraryPath": {
                    "start": 93,
                    "end": 95,
                    "body": [
                        "    public static String getNativeLibraryPath() {\n",
                        "        return nativeLibraryPath;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "getNativeLibraryPath()",
                    "parameters": [],
                    "calls": []
                },
                "73-91:initialize": {
                    "start": 73,
                    "end": 91,
                    "body": [
                        "    public static synchronized boolean initialize() {\n",
                        "        // only cleanup before the first extract\n",
                        "        if (!loaded) {\n",
                        "            Thread cleanup = new Thread(JansiLoader::cleanup, \"cleanup\");\n",
                        "            cleanup.setPriority(Thread.MIN_PRIORITY);\n",
                        "            cleanup.setDaemon(true);\n",
                        "            cleanup.start();\n",
                        "        }\n",
                        "        try {\n",
                        "            loadJansiNativeLibrary();\n",
                        "        } catch (Exception e) {\n",
                        "            if (!Boolean.parseBoolean(System.getProperty(AnsiConsole.JANSI_GRACEFUL, \"true\"))) {\n",
                        "                throw new RuntimeException(\n",
                        "                        \"Unable to load jansi native library. You may want set the `jansi.graceful` system property to true to be able to use Jansi on your platform\",\n",
                        "                        e);\n",
                        "            }\n",
                        "        }\n",
                        "        return loaded;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "synchronized",
                        "static"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "initialize()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Thread",
                            "Thread(java.lang.Runnable,java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Thread",
                            "setPriority(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Thread",
                            "setDaemon(boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Thread",
                            "start()"
                        ],
                        [
                            "jansi.src.main.org.fusesource.jansi.internal.JansiLoader",
                            "JansiLoader",
                            "283-353:loadJansiNativeLibrary"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Boolean",
                            "parseBoolean(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "getProperty(java.lang.String,java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String,java.lang.Throwable)"
                        ]
                    ]
                },
                "355-357:hasResource": {
                    "start": 355,
                    "end": 357,
                    "body": [
                        "    private static boolean hasResource(String path) {\n",
                        "        return JansiLoader.class.getResource(path) != null;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "hasResource(String)",
                    "parameters": [
                        "path"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "getResource(java.lang.String)"
                        ]
                    ]
                },
                "283-353:loadJansiNativeLibrary": {
                    "start": 283,
                    "end": 353,
                    "body": [
                        "    private static void loadJansiNativeLibrary() throws Exception {\n",
                        "        if (loaded) {\n",
                        "            return;\n",
                        "        }\n",
                        "\n",
                        "        List<String> triedPaths = new LinkedList<String>();\n",
                        "\n",
                        "        // Try loading library from library.jansi.path library path */\n",
                        "        String jansiNativeLibraryPath = System.getProperty(\"library.jansi.path\");\n",
                        "        String jansiNativeLibraryName = System.getProperty(\"library.jansi.name\");\n",
                        "        if (jansiNativeLibraryName == null) {\n",
                        "            jansiNativeLibraryName = System.mapLibraryName(\"jansi\");\n",
                        "            assert jansiNativeLibraryName != null;\n",
                        "            if (jansiNativeLibraryName.endsWith(\".dylib\")) {\n",
                        "                jansiNativeLibraryName = jansiNativeLibraryName.replace(\".dylib\", \".jnilib\");\n",
                        "            }\n",
                        "        }\n",
                        "\n",
                        "        if (jansiNativeLibraryPath != null) {\n",
                        "            String withOs = jansiNativeLibraryPath + \"/\" + OSInfo.getNativeLibFolderPathForCurrentOS();\n",
                        "            if (loadNativeLibrary(new File(withOs, jansiNativeLibraryName))) {\n",
                        "                loaded = true;\n",
                        "                return;\n",
                        "            } else {\n",
                        "                triedPaths.add(withOs);\n",
                        "            }\n",
                        "\n",
                        "            if (loadNativeLibrary(new File(jansiNativeLibraryPath, jansiNativeLibraryName))) {\n",
                        "                loaded = true;\n",
                        "                return;\n",
                        "            } else {\n",
                        "                triedPaths.add(jansiNativeLibraryPath);\n",
                        "            }\n",
                        "        }\n",
                        "\n",
                        "        // Load the os-dependent library from the jar file\n",
                        "        String packagePath = JansiLoader.class.getPackage().getName().replace('.', '/');\n",
                        "        jansiNativeLibraryPath =\n",
                        "                String.format(\"/%s/native/%s\", packagePath, OSInfo.getNativeLibFolderPathForCurrentOS());\n",
                        "        boolean hasNativeLib = hasResource(jansiNativeLibraryPath + \"/\" + jansiNativeLibraryName);\n",
                        "\n",
                        "        if (hasNativeLib) {\n",
                        "            // temporary library folder\n",
                        "            String tempFolder = getTempDir().getAbsolutePath();\n",
                        "            // Try extracting the library from jar\n",
                        "            if (extractAndLoadLibraryFile(jansiNativeLibraryPath, jansiNativeLibraryName, tempFolder)) {\n",
                        "                loaded = true;\n",
                        "                return;\n",
                        "            } else {\n",
                        "                triedPaths.add(jansiNativeLibraryPath);\n",
                        "            }\n",
                        "        }\n",
                        "\n",
                        "        // As a last resort try from java.library.path\n",
                        "        String javaLibraryPath = System.getProperty(\"java.library.path\", \"\");\n",
                        "        for (String ldPath : javaLibraryPath.split(File.pathSeparator)) {\n",
                        "            if (ldPath.isEmpty()) {\n",
                        "                continue;\n",
                        "            }\n",
                        "            if (loadNativeLibrary(new File(ldPath, jansiNativeLibraryName))) {\n",
                        "                loaded = true;\n",
                        "                return;\n",
                        "            } else {\n",
                        "                triedPaths.add(ldPath);\n",
                        "            }\n",
                        "        }\n",
                        "\n",
                        "        throw new Exception(String.format(\n",
                        "                \"No native library found for os.name=%s, os.arch=%s, paths=[%s]\",\n",
                        "                OSInfo.getOSName(), OSInfo.getArchName(), String.join(File.pathSeparator, triedPaths)));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "loadJansiNativeLibrary()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<String>()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "getProperty(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "replace(char,char)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Package",
                            "getName()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "getPackage()"
                        ],
                        [
                            "jansi.src.main.org.fusesource.jansi.internal.JansiLoader",
                            "JansiLoader",
                            "355-357:hasResource"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "getProperty(java.lang.String,java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "mapLibraryName(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "endsWith(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "replace(java.lang.CharSequence,java.lang.CharSequence)"
                        ],
                        [
                            "jansi.src.main.org.fusesource.jansi.internal.OSInfo",
                            "OSInfo",
                            "113-115:getNativeLibFolderPathForCurrentOS"
                        ],
                        [
                            "jansi.src.main.org.fusesource.jansi.internal.JansiLoader",
                            "JansiLoader",
                            "247-276:loadNativeLibrary"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "File(java.lang.String,java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "add(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "getAbsolutePath()"
                        ],
                        [
                            "jansi.src.main.org.fusesource.jansi.internal.JansiLoader",
                            "JansiLoader",
                            "101-103:getTempDir"
                        ],
                        [
                            "jansi.src.main.org.fusesource.jansi.internal.JansiLoader",
                            "JansiLoader",
                            "184-235:extractAndLoadLibraryFile"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "split(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "isEmpty()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Exception",
                            "Exception(java.lang.String)"
                        ],
                        [
                            "jansi.src.main.org.fusesource.jansi.internal.OSInfo",
                            "OSInfo",
                            "117-119:getOSName"
                        ],
                        [
                            "jansi.src.main.org.fusesource.jansi.internal.OSInfo",
                            "OSInfo",
                            "194-208:getArchName"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "join(java.lang.CharSequence,java.lang.Iterable)"
                        ]
                    ]
                },
                "247-276:loadNativeLibrary": {
                    "start": 247,
                    "end": 276,
                    "body": [
                        "    private static boolean loadNativeLibrary(File libPath) {\n",
                        "        if (libPath.exists()) {\n",
                        "            try {\n",
                        "                String path = libPath.getAbsolutePath();\n",
                        "                System.load(path);\n",
                        "                nativeLibraryPath = path;\n",
                        "                return true;\n",
                        "            } catch (UnsatisfiedLinkError e) {\n",
                        "                if (!libPath.canExecute()) {\n",
                        "                    // NOTE: this can be tested using something like:\n",
                        "                    // docker run --rm --tmpfs /tmp -v $PWD:/jansi openjdk:11 java -jar\n",
                        "                    // /jansi/target/jansi-xxx-SNAPSHOT.jar\n",
                        "                    System.err.printf(\n",
                        "                            \"Failed to load native library:%s. The native library file at %s is not executable, \"\n",
                        "                                    + \"make sure that the directory is mounted on a partition without the noexec flag, or set the \"\n",
                        "                                    + \"jansi.tmpdir system property to point to a proper location.  osinfo: %s%n\",\n",
                        "                            libPath.getName(), libPath, OSInfo.getNativeLibFolderPathForCurrentOS());\n",
                        "                } else {\n",
                        "                    System.err.printf(\n",
                        "                            \"Failed to load native library:%s. osinfo: %s%n\",\n",
                        "                            libPath.getName(), OSInfo.getNativeLibFolderPathForCurrentOS());\n",
                        "                }\n",
                        "                System.err.println(e);\n",
                        "                return false;\n",
                        "            }\n",
                        "\n",
                        "        } else {\n",
                        "            return false;\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "loadNativeLibrary(File)",
                    "parameters": [
                        "libPath"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/File",
                            "exists()"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "getAbsolutePath()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "load(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "canExecute()"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "printf(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "getName()"
                        ],
                        [
                            "jansi.src.main.org.fusesource.jansi.internal.OSInfo",
                            "OSInfo",
                            "113-115:getNativeLibFolderPathForCurrentOS"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.Object)"
                        ]
                    ]
                },
                "237-239:randomUUID": {
                    "start": 237,
                    "end": 239,
                    "body": [
                        "    private static String randomUUID() {\n",
                        "        return Long.toHexString(new Random().nextLong());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "randomUUID()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Long",
                            "toHexString(long)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Random",
                            "nextLong()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Random",
                            "Random()"
                        ]
                    ]
                },
                "184-235:extractAndLoadLibraryFile": {
                    "start": 184,
                    "end": 235,
                    "body": [
                        "    private static boolean extractAndLoadLibraryFile(\n",
                        "            String libFolderForCurrentOS, String libraryFileName, String targetFolder) {\n",
                        "        String nativeLibraryFilePath = libFolderForCurrentOS + \"/\" + libraryFileName;\n",
                        "        // Include architecture name in temporary filename in order to avoid conflicts\n",
                        "        // when multiple JVMs with different architectures running at the same time\n",
                        "        String uuid = randomUUID();\n",
                        "        String extractedLibFileName = String.format(\"jansi-%s-%s-%s\", getVersion(), uuid, libraryFileName);\n",
                        "        String extractedLckFileName = extractedLibFileName + \".lck\";\n",
                        "\n",
                        "        File extractedLibFile = new File(targetFolder, extractedLibFileName);\n",
                        "        File extractedLckFile = new File(targetFolder, extractedLckFileName);\n",
                        "\n",
                        "        try {\n",
                        "            // Extract a native library file into the target directory\n",
                        "            try (InputStream in = JansiLoader.class.getResourceAsStream(nativeLibraryFilePath)) {\n",
                        "                if (!extractedLckFile.exists()) {\n",
                        "                    new FileOutputStream(extractedLckFile).close();\n",
                        "                }\n",
                        "                Files.copy(in, extractedLibFile.toPath(), StandardCopyOption.REPLACE_EXISTING);\n",
                        "            } finally {\n",
                        "                // Delete the extracted lib file on JVM exit.\n",
                        "                extractedLibFile.deleteOnExit();\n",
                        "                extractedLckFile.deleteOnExit();\n",
                        "            }\n",
                        "\n",
                        "            // Set executable (x) flag to enable Java to load the native library\n",
                        "            extractedLibFile.setReadable(true);\n",
                        "            extractedLibFile.setWritable(true);\n",
                        "            extractedLibFile.setExecutable(true);\n",
                        "\n",
                        "            // Check whether the contents are properly copied from the resource folder\n",
                        "            try (InputStream nativeIn = JansiLoader.class.getResourceAsStream(nativeLibraryFilePath)) {\n",
                        "                try (InputStream extractedLibIn = new FileInputStream(extractedLibFile)) {\n",
                        "                    String eq = contentsEquals(nativeIn, extractedLibIn);\n",
                        "                    if (eq != null) {\n",
                        "                        throw new RuntimeException(String.format(\n",
                        "                                \"Failed to write a native library file at %s because %s\", extractedLibFile, eq));\n",
                        "                    }\n",
                        "                }\n",
                        "            }\n",
                        "\n",
                        "            // Load library\n",
                        "            if (loadNativeLibrary(extractedLibFile)) {\n",
                        "                nativeLibrarySourceUrl =\n",
                        "                        JansiLoader.class.getResource(nativeLibraryFilePath).toExternalForm();\n",
                        "                return true;\n",
                        "            }\n",
                        "        } catch (IOException e) {\n",
                        "            System.err.println(e.getMessage());\n",
                        "        }\n",
                        "        return false;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "extractAndLoadLibraryFile(String, String, String)",
                    "parameters": [
                        "libFolderForCurrentOS",
                        "libraryFileName",
                        "targetFolder"
                    ],
                    "calls": [
                        [
                            "jansi.src.main.org.fusesource.jansi.internal.JansiLoader",
                            "JansiLoader",
                            "237-239:randomUUID"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "jansi.src.main.org.fusesource.jansi.internal.JansiLoader",
                            "JansiLoader",
                            "378-394:getVersion"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "File(java.lang.String,java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "getResourceAsStream(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "exists()"
                        ],
                        [
                            "library",
                            "java.base/java/io/FileOutputStream",
                            "close()"
                        ],
                        [
                            "library",
                            "java.base/java/io/FileOutputStream",
                            "FileOutputStream(java.io.File)"
                        ],
                        [
                            "library",
                            "java.base/java/nio/file/Files",
                            "copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption[])"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "toPath()"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "deleteOnExit()"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "setReadable(boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "setWritable(boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "setExecutable(boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/io/FileInputStream",
                            "FileInputStream(java.io.File)"
                        ],
                        [
                            "jansi.src.main.org.fusesource.jansi.internal.JansiLoader",
                            "JansiLoader",
                            "145-174:contentsEquals"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ],
                        [
                            "jansi.src.main.org.fusesource.jansi.internal.JansiLoader",
                            "JansiLoader",
                            "247-276:loadNativeLibrary"
                        ],
                        [
                            "library",
                            "java.base/java/net/URL",
                            "toExternalForm()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "getResource(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ]
                    ]
                },
                "145-174:contentsEquals": {
                    "start": 145,
                    "end": 174,
                    "body": [
                        "    private static String contentsEquals(InputStream in1, InputStream in2) throws IOException {\n",
                        "        byte[] buffer1 = new byte[8192];\n",
                        "        byte[] buffer2 = new byte[8192];\n",
                        "        int numRead1;\n",
                        "        int numRead2;\n",
                        "        while (true) {\n",
                        "            numRead1 = readNBytes(in1, buffer1);\n",
                        "            numRead2 = readNBytes(in2, buffer2);\n",
                        "            if (numRead1 > 0) {\n",
                        "                if (numRead2 <= 0) {\n",
                        "                    return \"EOF on second stream but not first\";\n",
                        "                }\n",
                        "                if (numRead2 != numRead1) {\n",
                        "                    return \"Read size different (\" + numRead1 + \" vs \" + numRead2 + \")\";\n",
                        "                }\n",
                        "                // Otherwise same number of bytes read\n",
                        "                if (!Arrays.equals(buffer1, buffer2)) {\n",
                        "                    return \"Content differs\";\n",
                        "                }\n",
                        "                // Otherwise same bytes read, so continue ...\n",
                        "            } else {\n",
                        "                // Nothing more in stream 1 ...\n",
                        "                if (numRead2 > 0) {\n",
                        "                    return \"EOF on first stream but not second\";\n",
                        "                } else {\n",
                        "                    return null;\n",
                        "                }\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "contentsEquals(InputStream, InputStream)",
                    "parameters": [
                        "in1",
                        "in2"
                    ],
                    "calls": [
                        [
                            "jansi.src.main.org.fusesource.jansi.internal.JansiLoader",
                            "JansiLoader",
                            "134-143:readNBytes"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "equals(byte[],byte[])"
                        ]
                    ]
                },
                "134-143:readNBytes": {
                    "start": 134,
                    "end": 143,
                    "body": [
                        "    private static int readNBytes(InputStream in, byte[] b) throws IOException {\n",
                        "        int n = 0;\n",
                        "        int len = b.length;\n",
                        "        while (n < len) {\n",
                        "            int count = in.read(b, n, len - n);\n",
                        "            if (count <= 0) break;\n",
                        "            n += count;\n",
                        "        }\n",
                        "        return n;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "readNBytes(InputStream, byte[])",
                    "parameters": [
                        "in",
                        "b"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/InputStream",
                            "read(byte[],int,int)"
                        ]
                    ]
                },
                "101-103:getTempDir": {
                    "start": 101,
                    "end": 103,
                    "body": [
                        "    private static File getTempDir() {\n",
                        "        return new File(System.getProperty(\"jansi.tmpdir\", System.getProperty(\"java.io.tmpdir\")));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "File",
                            "java.io.File"
                        ]
                    ],
                    "signature": "getTempDir()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/File",
                            "File(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "getProperty(java.lang.String,java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "getProperty(java.lang.String)"
                        ]
                    ]
                }
            },
            "fields": {
                "65-65:nativeLibrarySourceUrl": {
                    "start": 65,
                    "end": 65,
                    "body": [
                        "    private static String nativeLibrarySourceUrl;\n"
                    ],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "64-64:nativeLibraryPath": {
                    "start": 64,
                    "end": 64,
                    "body": [
                        "    private static String nativeLibraryPath;\n"
                    ],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "63-63:loaded": {
                    "start": 63,
                    "end": 63,
                    "body": [
                        "    private static boolean loaded = false;\n"
                    ],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                }
            }
        },
        "new FilenameFilter(...) { ... }": {
            "start": 113,
            "end": 113,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "JansiLoader",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "116-118:accept": {
                    "start": 116,
                    "end": 118,
                    "body": [
                        "            public boolean accept(File dir, String name) {\n",
                        "                return name.startsWith(searchPattern) && !name.endsWith(\".lck\");\n",
                        "            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "accept(File, String)",
                    "parameters": [
                        "dir",
                        "name"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "startsWith"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "endsWith"
                        ]
                    ]
                },
                "113-113:": {
                    "start": 113,
                    "end": 113,
                    "body": [
                        "        File[] nativeLibFiles = dir.listFiles(new FilenameFilter() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": []
                }
            },
            "fields": {
                "114-114:searchPattern": {
                    "start": 114,
                    "end": 114,
                    "body": [
                        "            private final String searchPattern = \"jansi-\" + getVersion();\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                }
            }
        },
        "new Runnable(...) { ... }": {
            "start": 76,
            "end": 76,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "JansiLoader",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "76-76:run": {
                    "start": 76,
                    "end": 76,
                    "body": [
                        "            Thread cleanup = new Thread(JansiLoader::cleanup, \"cleanup\");\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "run()",
                    "parameters": [],
                    "calls": []
                }
            },
            "fields": {}
        }
    }
}