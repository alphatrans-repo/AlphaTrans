{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-graph/src/main/java/org/apache/commons/graph/visit/DefaultVisitAlgorithmsSelector.java",
    "imports": {
        "31-31:import Iterator": {
            "start": 31,
            "end": 31,
            "body": [
                "import java.util.Iterator;\n"
            ]
        },
        "33-33:import Set": {
            "start": 33,
            "end": 33,
            "body": [
                "import java.util.Set;\n"
            ]
        },
        "30-30:import HashSet": {
            "start": 30,
            "end": 30,
            "body": [
                "import java.util.HashSet;\n"
            ]
        },
        "32-32:import LinkedList": {
            "start": 32,
            "end": 32,
            "body": [
                "import java.util.LinkedList;\n"
            ]
        },
        "27-27:import Graph": {
            "start": 27,
            "end": 27,
            "body": [
                "import org.apache.commons.graph.Graph;\n"
            ]
        },
        "26-26:import DirectedGraph": {
            "start": 26,
            "end": 26,
            "body": [
                "import org.apache.commons.graph.DirectedGraph;\n"
            ]
        },
        "28-28:import VertexPair": {
            "start": 28,
            "end": 28,
            "body": [
                "import org.apache.commons.graph.VertexPair;\n"
            ]
        },
        "24-24:import static VisitState.CONTINUE": {
            "start": 24,
            "end": 24,
            "body": [
                "import static org.apache.commons.graph.visit.VisitState.CONTINUE;\n"
            ]
        },
        "23-23:import static VisitState.ABORT": {
            "start": 23,
            "end": 23,
            "body": [
                "import static org.apache.commons.graph.visit.VisitState.ABORT;\n"
            ]
        },
        "22-22:import static Assertions.checkNotNull": {
            "start": 22,
            "end": 22,
            "body": [
                "import static org.apache.commons.graph.utils.Assertions.checkNotNull;\n"
            ]
        }
    },
    "classes": {
        "DefaultVisitAlgorithmsSelector": {
            "start": 42,
            "end": 43,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [
                "VisitAlgorithmsSelector"
            ],
            "extends": [],
            "methods": {
                "79-81:applyingDepthFirstSearch1": {
                    "start": 79,
                    "end": 81,
                    "body": [
                        "    public <O> O applyingDepthFirstSearch1(GraphVisitHandler<V, E, G, O> handler) {\n",
                        "        return applyingSearch(handler, false);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "O",
                            "O"
                        ]
                    ],
                    "signature": "applyingDepthFirstSearch1(GraphVisitHandler<V,E,G,O>)",
                    "parameters": [
                        "handler"
                    ],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.visit.DefaultVisitAlgorithmsSelector",
                            "DefaultVisitAlgorithmsSelector",
                            "98-174:applyingSearch"
                        ]
                    ]
                },
                "74-76:applyingDepthFirstSearch0": {
                    "start": 74,
                    "end": 76,
                    "body": [
                        "    public Graph<V, E> applyingDepthFirstSearch0() {\n",
                        "        return applyingDepthFirstSearch1(new VisitGraphBuilder<V, E, G>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Graph<V,E>",
                            "Graph<V,E>"
                        ]
                    ],
                    "signature": "applyingDepthFirstSearch0()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.visit.DefaultVisitAlgorithmsSelector",
                            "DefaultVisitAlgorithmsSelector",
                            "79-81:applyingDepthFirstSearch1"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/visit/VisitGraphBuilder",
                            "VisitGraphBuilder<V,E,G>()"
                        ]
                    ]
                },
                "69-71:applyingBreadthFirstSearch1": {
                    "start": 69,
                    "end": 71,
                    "body": [
                        "    public <O> O applyingBreadthFirstSearch1(GraphVisitHandler<V, E, G, O> handler) {\n",
                        "        return applyingSearch(handler, true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "O",
                            "O"
                        ]
                    ],
                    "signature": "applyingBreadthFirstSearch1(GraphVisitHandler<V,E,G,O>)",
                    "parameters": [
                        "handler"
                    ],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.visit.DefaultVisitAlgorithmsSelector",
                            "DefaultVisitAlgorithmsSelector",
                            "98-174:applyingSearch"
                        ]
                    ]
                },
                "64-66:applyingBreadthFirstSearch0": {
                    "start": 64,
                    "end": 66,
                    "body": [
                        "    public Graph<V, E> applyingBreadthFirstSearch0() {\n",
                        "        return applyingBreadthFirstSearch1(new VisitGraphBuilder<V, E, G>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Graph<V,E>",
                            "Graph<V,E>"
                        ]
                    ],
                    "signature": "applyingBreadthFirstSearch0()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.visit.DefaultVisitAlgorithmsSelector",
                            "DefaultVisitAlgorithmsSelector",
                            "69-71:applyingBreadthFirstSearch1"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/visit/VisitGraphBuilder",
                            "VisitGraphBuilder<V,E,G>()"
                        ]
                    ]
                },
                "58-61:DefaultVisitAlgorithmsSelector": {
                    "start": 58,
                    "end": 61,
                    "body": [
                        "    public DefaultVisitAlgorithmsSelector(final G graph, final V source) {\n",
                        "        this.graph = graph;\n",
                        "        this.source = source;\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "DefaultVisitAlgorithmsSelector(G, V)",
                    "parameters": [
                        "graph",
                        "source"
                    ],
                    "calls": []
                },
                "98-174:applyingSearch": {
                    "start": 98,
                    "end": 174,
                    "body": [
                        "    private <O> O applyingSearch(GraphVisitHandler<V, E, G, O> handler, boolean enqueue) {\n",
                        "        handler = checkNotNull(handler, \"Graph visitor handler can not be null.\");\n",
                        "\n",
                        "        handler.discoverGraph(graph);\n",
                        "\n",
                        "        final LinkedList<VertexPair<V>> vertexList = new LinkedList<VertexPair<V>>();\n",
                        "\n",
                        "        vertexList.addLast(new VertexPair<V>(source, source));\n",
                        "\n",
                        "        final Set<V> visitedVertices = new HashSet<V>();\n",
                        "        visitedVertices.add(source);\n",
                        "\n",
                        "        boolean visitingGraph = true;\n",
                        "\n",
                        "        while (visitingGraph && !vertexList.isEmpty()) {\n",
                        "            final VertexPair<V> pair = enqueue ? vertexList.removeFirst() : vertexList.removeLast();\n",
                        "            final V v = pair.getHead();\n",
                        "            final V prevHead = pair.getTail();\n",
                        "            final E e = prevHead.equals(v) ? null : graph.getEdge(prevHead, v);\n",
                        "\n",
                        "            boolean skipVertex = false;\n",
                        "\n",
                        "            if (e != null) {\n",
                        "                if (visitedVertices.contains(v)) {\n",
                        "                    skipVertex = true;\n",
                        "                } else {\n",
                        "                    VisitState stateAfterEdgeDiscovery = handler.discoverEdge(prevHead, e, v);\n",
                        "                    if (CONTINUE != stateAfterEdgeDiscovery) {\n",
                        "                        skipVertex = true;\n",
                        "                        if (ABORT == stateAfterEdgeDiscovery) {\n",
                        "                            visitingGraph = false;\n",
                        "                        }\n",
                        "                    }\n",
                        "\n",
                        "                    if (ABORT == handler.finishEdge(prevHead, e, v)) {\n",
                        "                        skipVertex = true;\n",
                        "                        visitingGraph = false;\n",
                        "                    }\n",
                        "                }\n",
                        "            }\n",
                        "\n",
                        "            boolean vertexWasDiscovered = false;\n",
                        "            if (!skipVertex) {\n",
                        "                visitedVertices.add(v);\n",
                        "                VisitState stateAfterVertexDiscovery = handler.discoverVertex(v);\n",
                        "                vertexWasDiscovered = true;\n",
                        "                if (CONTINUE != stateAfterVertexDiscovery) {\n",
                        "                    skipVertex = true;\n",
                        "                    if (ABORT == stateAfterVertexDiscovery) {\n",
                        "                        visitingGraph = false;\n",
                        "                    }\n",
                        "                }\n",
                        "            }\n",
                        "\n",
                        "            if (!skipVertex) {\n",
                        "                Iterator<V> connected =\n",
                        "                        (graph instanceof DirectedGraph)\n",
                        "                                ? ((DirectedGraph<V, E>) graph).getOutbound(v).iterator()\n",
                        "                                : graph.getConnectedVertices(v).iterator();\n",
                        "\n",
                        "                while (connected.hasNext()) {\n",
                        "                    V w = connected.next();\n",
                        "                    if (!visitedVertices.contains(w)) {\n",
                        "                        vertexList.addLast(new VertexPair<V>(w, v));\n",
                        "                    }\n",
                        "                }\n",
                        "            }\n",
                        "\n",
                        "            if (vertexWasDiscovered && ABORT == handler.finishVertex(v)) {\n",
                        "                visitingGraph = false;\n",
                        "            }\n",
                        "        }\n",
                        "\n",
                        "        handler.finishGraph(graph);\n",
                        "\n",
                        "        return handler.onCompleted();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "O",
                            "O"
                        ]
                    ],
                    "signature": "applyingSearch(GraphVisitHandler<V,E,G,O>, boolean)",
                    "parameters": [
                        "handler",
                        "enqueue"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "LinkedList<VertexPair<V>>()"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "HashSet<V>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.utils.Assertions",
                            "Assertions",
                            "64-70:checkNotNull"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/visit/GraphVisitHandler",
                            "discoverGraph(org.apache.commons.graph.Graph)"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "addLast(org.apache.commons.graph.VertexPair)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/VertexPair",
                            "VertexPair<V>(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Set",
                            "add(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/util/AbstractCollection",
                            "isEmpty()"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "removeFirst()"
                        ],
                        [
                            "library",
                            "java.base/java/util/LinkedList",
                            "removeLast()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/VertexPair",
                            "getHead()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/VertexPair",
                            "getTail()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Graph",
                            "getEdge(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Set",
                            "contains(java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/visit/GraphVisitHandler",
                            "discoverEdge(java.lang.Object,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/visit/GraphVisitHandler",
                            "finishEdge(java.lang.Object,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/visit/GraphVisitHandler",
                            "discoverVertex(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Iterable",
                            "iterator()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/DirectedGraph",
                            "getOutbound(java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Graph",
                            "getConnectedVertices(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Iterator",
                            "hasNext()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Iterator",
                            "next()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/visit/GraphVisitHandler",
                            "finishVertex(java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/visit/GraphVisitHandler",
                            "finishGraph(org.apache.commons.graph.Graph)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/visit/GraphVisitHandler",
                            "onCompleted()"
                        ]
                    ]
                }
            },
            "fields": {
                "49-49:source": {
                    "start": 49,
                    "end": 49,
                    "body": [
                        "    private final V source;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "V",
                            "V"
                        ]
                    ]
                },
                "46-46:graph": {
                    "start": 46,
                    "end": 46,
                    "body": [
                        "    private final G graph;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "G",
                            "G"
                        ]
                    ]
                }
            }
        }
    }
}