{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/differential/SkippableIntegratedIntegerCODEC.java",
    "imports": {
        "10-10:import IntWrapper": {
            "start": 10,
            "end": 10,
            "body": [
                "import me.lemire.integercompression.IntWrapper;\n"
            ]
        }
    },
    "classes": {
        "SkippableIntegratedIntegerCODEC": {
            "start": 27,
            "end": 27,
            "is_abstract": false,
            "is_interface": true,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "71-73:headlessUncompress": {
                    "start": 71,
                    "end": 73,
                    "body": [
                        "    public void headlessUncompress(int[] in, IntWrapper inpos, int inlength, int[] out,\n",
                        "            IntWrapper outpos, int num, IntWrapper initvalue);\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "abstract"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessUncompress(int[], IntWrapper, int, int[], IntWrapper, int, IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos",
                        "num",
                        "initvalue"
                    ],
                    "calls": []
                },
                "48-50:headlessCompress": {
                    "start": 48,
                    "end": 50,
                    "body": [
                        "    public void headlessCompress(int[] in, IntWrapper inpos, int inlength, int[] out,\n",
                        "            IntWrapper outpos, IntWrapper initvalue);\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "abstract"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessCompress(int[], IntWrapper, int, int[], IntWrapper, IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos",
                        "initvalue"
                    ],
                    "calls": []
                }
            },
            "fields": {}
        }
    }
}