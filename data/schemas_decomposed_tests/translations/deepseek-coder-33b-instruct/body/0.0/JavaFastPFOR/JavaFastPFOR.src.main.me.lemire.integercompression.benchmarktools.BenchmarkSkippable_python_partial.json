{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/benchmarktools/BenchmarkSkippable.java",
    "imports": {
        "34-34:import PrintWriter": {
            "start": 34,
            "end": 34,
            "body": [
                "import java.io.PrintWriter;\n"
            ]
        },
        "32-32:import File": {
            "start": 32,
            "end": 32,
            "body": [
                "import java.io.File;\n"
            ]
        },
        "33-33:import FileNotFoundException": {
            "start": 33,
            "end": 33,
            "body": [
                "import java.io.FileNotFoundException;\n"
            ]
        },
        "35-35:import Arrays": {
            "start": 35,
            "end": 35,
            "body": [
                "import java.util.Arrays;\n"
            ]
        },
        "9-9:import BinaryPacking": {
            "start": 9,
            "end": 9,
            "body": [
                "import me.lemire.integercompression.BinaryPacking;\n"
            ]
        },
        "23-23:import SkippableIntegerCODEC": {
            "start": 23,
            "end": 23,
            "body": [
                "import me.lemire.integercompression.SkippableIntegerCODEC;\n"
            ]
        },
        "12-12:import IntWrapper": {
            "start": 12,
            "end": 12,
            "body": [
                "import me.lemire.integercompression.IntWrapper;\n"
            ]
        },
        "10-10:import FastPFOR": {
            "start": 10,
            "end": 10,
            "body": [
                "import me.lemire.integercompression.FastPFOR;\n"
            ]
        },
        "11-11:import FastPFOR128": {
            "start": 11,
            "end": 11,
            "body": [
                "import me.lemire.integercompression.FastPFOR128;\n"
            ]
        },
        "13-13:import JustCopy": {
            "start": 13,
            "end": 13,
            "body": [
                "import me.lemire.integercompression.JustCopy;\n"
            ]
        },
        "14-14:import NewPFD": {
            "start": 14,
            "end": 14,
            "body": [
                "import me.lemire.integercompression.NewPFD;\n"
            ]
        },
        "15-15:import NewPFDS16": {
            "start": 15,
            "end": 15,
            "body": [
                "import me.lemire.integercompression.NewPFDS16;\n"
            ]
        },
        "16-16:import NewPFDS9": {
            "start": 16,
            "end": 16,
            "body": [
                "import me.lemire.integercompression.NewPFDS9;\n"
            ]
        },
        "17-17:import OptPFD": {
            "start": 17,
            "end": 17,
            "body": [
                "import me.lemire.integercompression.OptPFD;\n"
            ]
        },
        "18-18:import OptPFDS16": {
            "start": 18,
            "end": 18,
            "body": [
                "import me.lemire.integercompression.OptPFDS16;\n"
            ]
        },
        "19-19:import OptPFDS9": {
            "start": 19,
            "end": 19,
            "body": [
                "import me.lemire.integercompression.OptPFDS9;\n"
            ]
        },
        "20-20:import Simple16": {
            "start": 20,
            "end": 20,
            "body": [
                "import me.lemire.integercompression.Simple16;\n"
            ]
        },
        "21-21:import Simple9": {
            "start": 21,
            "end": 21,
            "body": [
                "import me.lemire.integercompression.Simple9;\n"
            ]
        },
        "22-22:import SkippableComposition": {
            "start": 22,
            "end": 22,
            "body": [
                "import me.lemire.integercompression.SkippableComposition;\n"
            ]
        },
        "24-24:import VariableByte": {
            "start": 24,
            "end": 24,
            "body": [
                "import me.lemire.integercompression.VariableByte;\n"
            ]
        },
        "25-25:import Delta": {
            "start": 25,
            "end": 25,
            "body": [
                "import me.lemire.integercompression.differential.Delta;\n"
            ]
        },
        "26-26:import IntegratedBinaryPacking": {
            "start": 26,
            "end": 26,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedBinaryPacking;\n"
            ]
        },
        "29-29:import SkippableIntegratedIntegerCODEC": {
            "start": 29,
            "end": 29,
            "body": [
                "import me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC;\n"
            ]
        },
        "27-27:import IntegratedVariableByte": {
            "start": 27,
            "end": 27,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedVariableByte;\n"
            ]
        },
        "28-28:import SkippableIntegratedComposition": {
            "start": 28,
            "end": 28,
            "body": [
                "import me.lemire.integercompression.differential.SkippableIntegratedComposition;\n"
            ]
        },
        "30-30:import ClusteredDataGenerator": {
            "start": 30,
            "end": 30,
            "body": [
                "import me.lemire.integercompression.synth.ClusteredDataGenerator;\n"
            ]
        }
    },
    "classes": {
        "BenchmarkSkippable": {
            "start": 44,
            "end": 44,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "242-268:main": {
                    "start": 242,
                    "end": 268,
                    "body": [
                        "    public static void main(String args[]) throws FileNotFoundException {\n",
                        "        System.out.println(\"# benchmark based on the ClusterData model from:\");\n",
                        "        System.out.println(\"# \t Vo Ngoc Anh and Alistair Moffat. \");\n",
                        "        System.out.println(\"#\t Index compression using 64-bit words.\");\n",
                        "        System.out\n",
                        "                .println(\"# \t Softw. Pract. Exper.40, 2 (February 2010), 131-147. \");\n",
                        "        System.out.println();\n",
                        "\n",
                        "        PrintWriter writer = null;\n",
                        "        try {\n",
                        "            File csvFile = new File(String.format(\n",
                        "                    \"benchmark-%1$tY%1$tm%1$tdT%1$tH%1$tM%1$tS.csv\",\n",
                        "                    System.currentTimeMillis()));\n",
                        "            writer = new PrintWriter(csvFile);\n",
                        "            System.out.println(\"# Results will be written into a CSV file: \"\n",
                        "                    + csvFile.getName());\n",
                        "            System.out.println();\n",
                        "            test(writer, 20, 18, 10);\n",
                        "            System.out.println();\n",
                        "            System.out.println(\"Results were written into a CSV file: \"\n",
                        "                    + csvFile.getName());\n",
                        "        } finally {\n",
                        "            if (writer != null) {\n",
                        "                writer.close();\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "main(String[])",
                    "parameters": [
                        "args"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println()"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "File(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "currentTimeMillis()"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "PrintWriter(java.io.File)"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "getName()"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkSkippable",
                            "BenchmarkSkippable",
                            "318-338:test"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "close()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def main(args: typing.List[typing.List[str]]) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "318-338:test": {
                    "start": 318,
                    "end": 338,
                    "body": [
                        "    private static void test(PrintWriter csvLog, int N, int nbr, int repeat) {\n",
                        "        csvLog.format(\"\\\"Algorithm\\\",\\\"Sparsity\\\",\\\"Bits per int\\\",\\\"Compress speed (MiS)\\\",\\\"Decompress speed (MiS)\\\"\\n\");\n",
                        "        ClusteredDataGenerator cdg = new ClusteredDataGenerator();\n",
                        "        final int max_sparsity = 31 - nbr;\n",
                        "\n",
                        "        for (int sparsity = 1; sparsity < max_sparsity; sparsity+=4) {\n",
                        "            System.out.println(\"# sparsity \" + sparsity);\n",
                        "            System.out.println(\"# generating random data...\");\n",
                        "            int[][] data = generateTestData(cdg, N, nbr, sparsity);\n",
                        "            System.out.println(\"# generating random data... ok.\");\n",
                        "            for (Object c : codecs) {\n",
                        "                testCodec(csvLog, sparsity, c, data, repeat, false);\n",
                        "                testCodec(csvLog, sparsity, c, data, repeat, false);\n",
                        "                testCodec(csvLog, sparsity, c, data, repeat, true);\n",
                        "                testCodec(csvLog, sparsity, c, data, repeat, true);\n",
                        "                testCodec(csvLog, sparsity, c, data, repeat, true);\n",
                        "\n",
                        "            }\n",
                        "\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test(PrintWriter, int, int, int)",
                    "parameters": [
                        "csvLog",
                        "N",
                        "nbr",
                        "repeat"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.synth.ClusteredDataGenerator",
                            "ClusteredDataGenerator",
                            "25-26:ClusteredDataGenerator"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkSkippable",
                            "BenchmarkSkippable",
                            "280-288:generateTestData"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkSkippable",
                            "BenchmarkSkippable",
                            "123-232:testCodec"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __test(csvLog: typing.Union[io.TextIOWrapper, io.StringIO], N: int, nbr: int, repeat: int) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "280-288:generateTestData": {
                    "start": 280,
                    "end": 288,
                    "body": [
                        "    private static int[][] generateTestData(ClusteredDataGenerator dataGen,\n",
                        "            int N, int nbr, int sparsity) {\n",
                        "        final int[][] data = new int[N][];\n",
                        "        final int dataSize = (1 << (nbr + sparsity));\n",
                        "        for (int i = 0; i < N; ++i) {\n",
                        "            data[i] = dataGen.generateClustered((1 << nbr), dataSize);\n",
                        "        }\n",
                        "        return data;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "int[][]",
                            "int[][]"
                        ]
                    ],
                    "signature": "generateTestData(ClusteredDataGenerator, int, int, int)",
                    "parameters": [
                        "dataGen",
                        "N",
                        "nbr",
                        "sparsity"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.synth.ClusteredDataGenerator",
                            "ClusteredDataGenerator",
                            "69-73:generateClustered"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __generateTestData(dataGen: ClusteredDataGenerator, N: int, nbr: int, sparsity: int) -> typing.List[typing.List[int]]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "123-232:testCodec": {
                    "start": 123,
                    "end": 232,
                    "body": [
                        "    private static void testCodec(PrintWriter csvLog, int sparsity, Object c,\n",
                        "            int[][] data, int repeat, boolean verbose) {\n",
                        "        if (verbose) {\n",
                        "            System.out.println(\"# \" + c.toString());\n",
                        "            System.out\n",
                        "                    .println(\"# bits per int, compress speed (mis), decompression speed (mis) \");\n",
                        "        }\n",
                        "\n",
                        "        int N = data.length;\n",
                        "\n",
                        "        int totalSize = 0;\n",
                        "        int maxLength = 0;\n",
                        "        for (int k = 0; k < N; ++k) {\n",
                        "            totalSize += data[k].length;\n",
                        "            if (data[k].length > maxLength) {\n",
                        "                maxLength = data[k].length;\n",
                        "            }\n",
                        "        }\n",
                        "\n",
                        "        // 4x + 1024 to account for the possibility of some negative\n",
                        "        // compression.\n",
                        "        int[] compressBuffer = new int[4 * maxLength + 1024];\n",
                        "        int[] decompressBuffer = new int[maxLength + 1024];\n",
                        "        int[] metadataBuffer = new int[maxLength];\n",
                        "        final int blocksize = 1024;\n",
                        "\n",
                        "        // These variables hold time in microseconds (10^-6).\n",
                        "        double compressTime = 0;\n",
                        "        double decompressTime = 0;\n",
                        "        final int times = 5;\n",
                        "\n",
                        "        int size = 0;\n",
                        "\n",
                        "        for (int r = 0; r < repeat; ++r) {\n",
                        "            size = 0;\n",
                        "            for (int k = 0; k < N; ++k) {\n",
                        "                int[] backupdata = Arrays.copyOf(data[k], data[k].length);\n",
                        "\n",
                        "                // compress data.\n",
                        "                long beforeCompress = System.nanoTime() / 1000;\n",
                        "                IntWrapper outpos = IntWrapper.IntWrapper1();\n",
                        "                compressWithSkipTable(c, backupdata, compressBuffer, outpos,\n",
                        "                        metadataBuffer, blocksize);\n",
                        "                long afterCompress = System.nanoTime() / 1000;\n",
                        "\n",
                        "                // measure time of compression.\n",
                        "                compressTime += afterCompress - beforeCompress;\n",
                        "                final int thiscompsize = outpos.get();\n",
                        "                size += thiscompsize;\n",
                        "                // dry run\n",
                        "                int volume = 0;\n",
                        "                {\n",
                        "                    IntWrapper compressedpos = new IntWrapper(0);\n",
                        "                    volume = decompressFromSkipTable(c, compressBuffer,\n",
                        "                            compressedpos, metadataBuffer, blocksize,\n",
                        "                            decompressBuffer);\n",
                        "\n",
                        "                    // let us check the answer\n",
                        "                    if (volume != backupdata.length)\n",
                        "                        throw new RuntimeException(\n",
                        "                                \"Bad output size with codec \" + c);\n",
                        "                    for (int j = 0; j < volume; ++j) {\n",
                        "                        if (data[k][j] != decompressBuffer[j])\n",
                        "                            throw new RuntimeException(\"bug in codec \" + c);\n",
                        "                    }\n",
                        "                }\n",
                        "                // extract (uncompress) data\n",
                        "                long beforeDecompress = System.nanoTime() / 1000;\n",
                        "                for (int t = 0; t < times; ++t) {\n",
                        "                    IntWrapper compressedpos = new IntWrapper(0);\n",
                        "                    volume = decompressFromSkipTable(c, compressBuffer,\n",
                        "                            compressedpos, metadataBuffer, blocksize,\n",
                        "                            decompressBuffer);\n",
                        "                }\n",
                        "                long afterDecompress = System.nanoTime() / 1000;\n",
                        "\n",
                        "                // measure time of extraction (uncompression).\n",
                        "                decompressTime += (afterDecompress - beforeDecompress) / times;\n",
                        "                if (volume != data[k].length)\n",
                        "                    throw new RuntimeException(\"we have a bug (diff length) \"\n",
                        "                            + c + \" expected \" + data[k].length + \" got \"\n",
                        "                            + volume);\n",
                        "\n",
                        "                // verify: compare original array with\n",
                        "                // compressed and\n",
                        "                // uncompressed.\n",
                        "               for (int m = 0; m < outpos.get(); ++m) {\n",
                        "                    if (decompressBuffer[m] != data[k][m]) {\n",
                        "                        throw new RuntimeException(\n",
                        "                                \"we have a bug (actual difference), expected \"\n",
                        "                                        + data[k][m] + \" found \"\n",
                        "                                        + decompressBuffer[m] + \" at \" + m);\n",
                        "                    }\n",
                        "                }\n",
                        "            }\n",
                        "        }\n",
                        "\n",
                        "        if (verbose) {\n",
                        "            double bitsPerInt = size * 32.0 / totalSize;\n",
                        "            long compressSpeed = Math\n",
                        "                    .round(totalSize * repeat / (compressTime));\n",
                        "            long decompressSpeed = Math.round(totalSize * repeat\n",
                        "                    / (decompressTime));\n",
                        "            System.out.println(String.format(\"\\t%1$.2f\\t%2$d\\t%3$d\",\n",
                        "                    bitsPerInt, compressSpeed, decompressSpeed));\n",
                        "            csvLog.format(\"\\\"%1$s\\\",%2$d,%3$.2f,%4$d,%5$d\\n\", c.toString(),\n",
                        "                    sparsity, bitsPerInt, compressSpeed, decompressSpeed);\n",
                        "            csvLog.flush();\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testCodec(PrintWriter, int, Object, int[][], int, boolean)",
                    "parameters": [
                        "csvLog",
                        "sparsity",
                        "c",
                        "data",
                        "repeat",
                        "verbose"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "toString()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "nanoTime()"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkSkippable",
                            "BenchmarkSkippable",
                            "46-73:compressWithSkipTable"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkSkippable",
                            "BenchmarkSkippable",
                            "75-107:decompressFromSkipTable"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Math",
                            "round(double)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "flush()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __testCodec(csvLog: typing.Union[io.TextIOWrapper, io.StringIO], sparsity: int, c: typing.Any, data: typing.List[typing.List[int]], repeat: int, verbose: bool) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "75-107:decompressFromSkipTable": {
                    "start": 75,
                    "end": 107,
                    "body": [
                        "    private static int decompressFromSkipTable(Object c, int[] compressed,\n",
                        "            IntWrapper compressedpos, int[] metadata, int blocksize, int[] data) {\n",
                        "        int metapos = 0;\n",
                        "        int length = metadata[metapos++];\n",
                        "        IntWrapper uncomppos = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper ival = IntWrapper.IntWrapper1();\n",
                        "        while (uncomppos.get() < length) {\n",
                        "            int num = blocksize;\n",
                        "            if (num > length - uncomppos.get())\n",
                        "                num = length - uncomppos.get();\n",
                        "            int location = metadata[metapos++];\n",
                        "            int initvalue = metadata[metapos++];\n",
                        "            int outputlocation = uncomppos.get();\n",
                        "            if (location != compressedpos.get())\n",
                        "                throw new RuntimeException(\"Bug \" + location + \" \"\n",
                        "                        + compressedpos.get() + \" codec \" + c);\n",
                        "            if (c instanceof SkippableIntegerCODEC) {\n",
                        "                ((SkippableIntegerCODEC) c).headlessUncompress(compressed,\n",
                        "                        compressedpos, compressed.length - uncomppos.get(),\n",
                        "                        data, uncomppos, num);\n",
                        "                initvalue = Delta.fastinverseDelta1(data, outputlocation, num,\n",
                        "                        initvalue);\n",
                        "            } else if (c instanceof SkippableIntegratedIntegerCODEC) {\n",
                        "                ival.set(initvalue);\n",
                        "                ((SkippableIntegratedIntegerCODEC) c).headlessUncompress(\n",
                        "                        compressed, compressedpos, compressed.length\n",
                        "                                - uncomppos.get(), data, uncomppos, num, ival);\n",
                        "            } else {\n",
                        "                throw new RuntimeException(\"Unrecognized codec \" + c);\n",
                        "            }\n",
                        "        }\n",
                        "        return length;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "decompressFromSkipTable(Object, int[], IntWrapper, int[], int, int[])",
                    "parameters": [
                        "c",
                        "compressed",
                        "compressedpos",
                        "metadata",
                        "blocksize",
                        "data"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                            "SkippableIntegerCODEC",
                            "66-68:headlessUncompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                            "Delta",
                            "129-148:fastinverseDelta1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "89-91:set"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC",
                            "SkippableIntegratedIntegerCODEC",
                            "71-73:headlessUncompress"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __decompressFromSkipTable(c: typing.Any, compressed: typing.List[int], compressedpos: IntWrapper, metadata: typing.List[int], blocksize: int, data: typing.List[int]) -> int:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "46-73:compressWithSkipTable": {
                    "start": 46,
                    "end": 73,
                    "body": [
                        "    private static int compressWithSkipTable(Object c, int[] data,\n",
                        "            int[] output, IntWrapper outpos, int[] metadata, int blocksize) {\n",
                        "        int metapos = 0;\n",
                        "        metadata[metapos++] = data.length;\n",
                        "        IntWrapper inpos = IntWrapper.IntWrapper1();\n",
                        "        int initvalue = 0;\n",
                        "        IntWrapper ival = new IntWrapper(initvalue);\n",
                        "        while (inpos.get() < data.length) {\n",
                        "            metadata[metapos++] = outpos.get();\n",
                        "            metadata[metapos++] = initvalue;\n",
                        "            if (c instanceof SkippableIntegerCODEC) {\n",
                        "                int size = blocksize > data.length - inpos.get() ? data.length\n",
                        "                        - inpos.get() : blocksize;\n",
                        "                initvalue = Delta.delta1(data, inpos.get(), size, initvalue);\n",
                        "\n",
                        "                ((SkippableIntegerCODEC) c).headlessCompress(data, inpos,\n",
                        "                        blocksize, output, outpos);\n",
                        "            } else if (c instanceof SkippableIntegratedIntegerCODEC) {\n",
                        "                ival.set(initvalue);\n",
                        "                ((SkippableIntegratedIntegerCODEC) c).headlessCompress(data,\n",
                        "                        inpos, blocksize, output, outpos, ival);\n",
                        "                initvalue = ival.get();\n",
                        "            } else {\n",
                        "                throw new RuntimeException(\"Unrecognized codec \" + c);\n",
                        "            }\n",
                        "        }\n",
                        "        return metapos;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "compressWithSkipTable(Object, int[], int[], IntWrapper, int[], int)",
                    "parameters": [
                        "c",
                        "data",
                        "output",
                        "outpos",
                        "metadata",
                        "blocksize"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                            "Delta",
                            "43-50:delta1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                            "SkippableIntegerCODEC",
                            "44-46:headlessCompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "89-91:set"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC",
                            "SkippableIntegratedIntegerCODEC",
                            "48-50:headlessCompress"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __compressWithSkipTable(c: typing.Any, data: typing.List[int], output: typing.List[int], outpos: IntWrapper, metadata: typing.List[int], blocksize: int) -> int:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {
                "290-304:codecs": {
                    "start": 290,
                    "end": 304,
                    "body": [
                        "    static Object[] codecs = {\n",
                        "        \n",
                        "            new SkippableIntegratedComposition(new IntegratedBinaryPacking(),\n",
                        "                    new IntegratedVariableByte()), new JustCopy(), new VariableByte(),\n",
                        "\n",
                        "            new SkippableComposition(new BinaryPacking(), new VariableByte()),\n",
                        "            new SkippableComposition(new NewPFD(), new VariableByte()),\n",
                        "            new SkippableComposition(new NewPFDS9(), new VariableByte()),\n",
                        "            new SkippableComposition(new NewPFDS16(), new VariableByte()),\n",
                        "            new SkippableComposition(new OptPFD(), new VariableByte()),\n",
                        "            new SkippableComposition(new OptPFDS9(), new VariableByte()),\n",
                        "            new SkippableComposition(new OptPFDS16(), new VariableByte()),\n",
                        "            new SkippableComposition(FastPFOR.FastPFOR1(), new VariableByte()),\n",
                        "            new SkippableComposition(FastPFOR128.FastPFOR1281(), new VariableByte()),\n",
                        "            new Simple9(), new Simple16() };\n"
                    ],
                    "modifiers": [
                        "static"
                    ],
                    "types": [
                        [
                            "Object[]",
                            "java.lang.Object[]"
                        ]
                    ],
                    "partial_translation": [
                        "    codecs: typing.List[typing.Any] = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class BenchmarkSkippable:\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "from io import StringIO",
        "import io",
        "import typing\nfrom typing import *",
        "import os",
        "from src.main.me.lemire.integercompression.BinaryPacking import *",
        "from src.main.me.lemire.integercompression.FastPFOR import *",
        "from src.main.me.lemire.integercompression.FastPFOR128 import *",
        "from src.main.me.lemire.integercompression.IntWrapper import *",
        "from src.main.me.lemire.integercompression.JustCopy import *",
        "from src.main.me.lemire.integercompression.NewPFD import *",
        "from src.main.me.lemire.integercompression.NewPFDS16 import *",
        "from src.main.me.lemire.integercompression.NewPFDS9 import *",
        "from src.main.me.lemire.integercompression.OptPFD import *",
        "from src.main.me.lemire.integercompression.OptPFDS16 import *",
        "from src.main.me.lemire.integercompression.OptPFDS9 import *",
        "from src.main.me.lemire.integercompression.Simple16 import *",
        "from src.main.me.lemire.integercompression.Simple9 import *",
        "from src.main.me.lemire.integercompression.SkippableComposition import *",
        "from src.main.me.lemire.integercompression.SkippableIntegerCODEC import *",
        "from src.main.me.lemire.integercompression.VariableByte import *",
        "from src.main.me.lemire.integercompression.differential.Delta import *",
        "from src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking import *",
        "from src.main.me.lemire.integercompression.differential.IntegratedVariableByte import *",
        "from src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition import *",
        "from src.main.me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC import *",
        "from src.main.me.lemire.integercompression.synth.ClusteredDataGenerator import *"
    ]
}