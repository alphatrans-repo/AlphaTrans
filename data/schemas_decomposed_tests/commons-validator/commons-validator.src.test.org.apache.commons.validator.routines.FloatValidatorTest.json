{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-validator/src/test/java/org/apache/commons/validator/routines/FloatValidatorTest.java",
    "imports": {
        "21-21:import Locale": {
            "start": 21,
            "end": 21,
            "body": [
                "import java.util.Locale;\n"
            ]
        },
        "20-20:import DecimalFormat": {
            "start": 20,
            "end": 20,
            "body": [
                "import java.text.DecimalFormat;\n"
            ]
        },
        "18-18:import Test": {
            "start": 18,
            "end": 18,
            "body": [
                "import org.junit.Test;\n"
            ]
        }
    },
    "classes": {
        "FloatValidatorTest": {
            "start": 28,
            "end": 28,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "AbstractNumberValidatorTest"
            ],
            "methods": {
                "1626-1645:testFloatRangeMinMax_test4_decomposed": {
                    "start": 1626,
                    "end": 1645,
                    "body": [
                        "    public void testFloatRangeMinMax_test4_decomposed()  {\n",
                        "        FloatValidator validator = (FloatValidator) strictValidator;\n",
                        "        Float number9 = validator.validate1(\"9\", \"#\");\n",
                        "        Float number10 = validator.validate1(\"10\", \"#\");\n",
                        "        Float number11 = validator.validate1(\"11\", \"#\");\n",
                        "        Float number19 = validator.validate1(\"19\", \"#\");\n",
                        "        Float number20 = validator.validate1(\"20\", \"#\");\n",
                        "        Float number21 = validator.validate1(\"21\", \"#\");\n",
                        "        assertFalse(\"isInRange() < min\", validator.isInRange1(number9, 10, 20));\n",
                        "        assertTrue(\"isInRange() = min\", validator.isInRange1(number10, 10, 20));\n",
                        "        assertTrue(\"isInRange() in range\", validator.isInRange1(number11, 10, 20));\n",
                        "        assertTrue(\"isInRange() = max\", validator.isInRange1(number20, 10, 20));\n",
                        "        assertFalse(\"isInRange() > max\", validator.isInRange1(number21, 10, 20));\n",
                        "        assertFalse(\"minValue() < min\", validator.minValue1(number9, 10));\n",
                        "        assertTrue(\"minValue() = min\", validator.minValue1(number10, 10));\n",
                        "        assertTrue(\"minValue() > min\", validator.minValue1(number11, 10));\n",
                        "        assertTrue(\"maxValue() < max\", validator.maxValue1(number19, 20));\n",
                        "        assertTrue(\"maxValue() = max\", validator.maxValue1(number20, 20));\n",
                        "        assertFalse(\"maxValue() > max\", validator.maxValue1(number21, 20));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatRangeMinMax_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "172-174:isInRange1"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "194-196:minValue1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "216-218:maxValue1"
                        ]
                    ]
                },
                "1607-1623:testFloatRangeMinMax_test3_decomposed": {
                    "start": 1607,
                    "end": 1623,
                    "body": [
                        "    public void testFloatRangeMinMax_test3_decomposed()  {\n",
                        "        FloatValidator validator = (FloatValidator) strictValidator;\n",
                        "        Float number9 = validator.validate1(\"9\", \"#\");\n",
                        "        Float number10 = validator.validate1(\"10\", \"#\");\n",
                        "        Float number11 = validator.validate1(\"11\", \"#\");\n",
                        "        Float number19 = validator.validate1(\"19\", \"#\");\n",
                        "        Float number20 = validator.validate1(\"20\", \"#\");\n",
                        "        Float number21 = validator.validate1(\"21\", \"#\");\n",
                        "        assertFalse(\"isInRange() < min\", validator.isInRange1(number9, 10, 20));\n",
                        "        assertTrue(\"isInRange() = min\", validator.isInRange1(number10, 10, 20));\n",
                        "        assertTrue(\"isInRange() in range\", validator.isInRange1(number11, 10, 20));\n",
                        "        assertTrue(\"isInRange() = max\", validator.isInRange1(number20, 10, 20));\n",
                        "        assertFalse(\"isInRange() > max\", validator.isInRange1(number21, 10, 20));\n",
                        "        assertFalse(\"minValue() < min\", validator.minValue1(number9, 10));\n",
                        "        assertTrue(\"minValue() = min\", validator.minValue1(number10, 10));\n",
                        "        assertTrue(\"minValue() > min\", validator.minValue1(number11, 10));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatRangeMinMax_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "172-174:isInRange1"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "194-196:minValue1"
                        ]
                    ]
                },
                "1591-1604:testFloatRangeMinMax_test2_decomposed": {
                    "start": 1591,
                    "end": 1604,
                    "body": [
                        "    public void testFloatRangeMinMax_test2_decomposed()  {\n",
                        "        FloatValidator validator = (FloatValidator) strictValidator;\n",
                        "        Float number9 = validator.validate1(\"9\", \"#\");\n",
                        "        Float number10 = validator.validate1(\"10\", \"#\");\n",
                        "        Float number11 = validator.validate1(\"11\", \"#\");\n",
                        "        Float number19 = validator.validate1(\"19\", \"#\");\n",
                        "        Float number20 = validator.validate1(\"20\", \"#\");\n",
                        "        Float number21 = validator.validate1(\"21\", \"#\");\n",
                        "        assertFalse(\"isInRange() < min\", validator.isInRange1(number9, 10, 20));\n",
                        "        assertTrue(\"isInRange() = min\", validator.isInRange1(number10, 10, 20));\n",
                        "        assertTrue(\"isInRange() in range\", validator.isInRange1(number11, 10, 20));\n",
                        "        assertTrue(\"isInRange() = max\", validator.isInRange1(number20, 10, 20));\n",
                        "        assertFalse(\"isInRange() > max\", validator.isInRange1(number21, 10, 20));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatRangeMinMax_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "172-174:isInRange1"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ]
                    ]
                },
                "1580-1588:testFloatRangeMinMax_test1_decomposed": {
                    "start": 1580,
                    "end": 1588,
                    "body": [
                        "    public void testFloatRangeMinMax_test1_decomposed()  {\n",
                        "        FloatValidator validator = (FloatValidator) strictValidator;\n",
                        "        Float number9 = validator.validate1(\"9\", \"#\");\n",
                        "        Float number10 = validator.validate1(\"10\", \"#\");\n",
                        "        Float number11 = validator.validate1(\"11\", \"#\");\n",
                        "        Float number19 = validator.validate1(\"19\", \"#\");\n",
                        "        Float number20 = validator.validate1(\"20\", \"#\");\n",
                        "        Float number21 = validator.validate1(\"21\", \"#\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatRangeMinMax_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ]
                    ]
                },
                "1574-1577:testFloatRangeMinMax_test0_decomposed": {
                    "start": 1574,
                    "end": 1577,
                    "body": [
                        "    public void testFloatRangeMinMax_test0_decomposed()  {\n",
                        "        FloatValidator validator = (FloatValidator) strictValidator;\n",
                        "        Float number9 = validator.validate1(\"9\", \"#\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatRangeMinMax_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ]
                    ]
                },
                "1542-1571:testFloatSmallestValues_test7_decomposed": {
                    "start": 1542,
                    "end": 1571,
                    "body": [
                        "    public void testFloatSmallestValues_test7_decomposed()  {\n",
                        "        String pattern = \"#.#################################################################\";\n",
                        "        DecimalFormat fmt = new DecimalFormat(pattern);\n",
                        "        Float smallestPositive = Float.valueOf(Float.MIN_VALUE);\n",
                        "        String strSmallestPositive = fmt.format(smallestPositive);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"Smallest +ve\",\n",
                        "                smallestPositive,\n",
                        "                FloatValidator.getInstance().validate1(strSmallestPositive, pattern));\n",
                        "        Float smallestNegative = Float.valueOf(Float.MIN_VALUE * -1);\n",
                        "        String strSmallestNegative = fmt.format(smallestNegative);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"Smallest -ve\",\n",
                        "                smallestNegative,\n",
                        "                FloatValidator.getInstance().validate1(strSmallestNegative, pattern));\n",
                        "        Double tooSmallPositive = Double.valueOf(((double) Float.MIN_VALUE / (double) 10));\n",
                        "        String strTooSmallPositive = fmt.format(tooSmallPositive);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\n",
                        "                \"Too small +ve\",\n",
                        "                FloatValidator.getInstance().isValid1(strTooSmallPositive, pattern));\n",
                        "        Double tooSmallNegative = Double.valueOf(tooSmallPositive.doubleValue() * -1);\n",
                        "        String strTooSmallNegative = fmt.format(tooSmallNegative);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\n",
                        "                \"Too small -ve\",\n",
                        "                FloatValidator.getInstance().isValid1(strTooSmallNegative, pattern));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatSmallestValues_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/text/DecimalFormat",
                            "DecimalFormat(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "library",
                            "java.base/java/text/Format",
                            "format(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Double",
                            "valueOf(double)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Double",
                            "doubleValue()"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ]
                    ]
                },
                "1513-1539:testFloatSmallestValues_test6_decomposed": {
                    "start": 1513,
                    "end": 1539,
                    "body": [
                        "    public void testFloatSmallestValues_test6_decomposed()  {\n",
                        "        String pattern = \"#.#################################################################\";\n",
                        "        DecimalFormat fmt = new DecimalFormat(pattern);\n",
                        "        Float smallestPositive = Float.valueOf(Float.MIN_VALUE);\n",
                        "        String strSmallestPositive = fmt.format(smallestPositive);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"Smallest +ve\",\n",
                        "                smallestPositive,\n",
                        "                FloatValidator.getInstance().validate1(strSmallestPositive, pattern));\n",
                        "        Float smallestNegative = Float.valueOf(Float.MIN_VALUE * -1);\n",
                        "        String strSmallestNegative = fmt.format(smallestNegative);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"Smallest -ve\",\n",
                        "                smallestNegative,\n",
                        "                FloatValidator.getInstance().validate1(strSmallestNegative, pattern));\n",
                        "        Double tooSmallPositive = Double.valueOf(((double) Float.MIN_VALUE / (double) 10));\n",
                        "        String strTooSmallPositive = fmt.format(tooSmallPositive);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\n",
                        "                \"Too small +ve\",\n",
                        "                FloatValidator.getInstance().isValid1(strTooSmallPositive, pattern));\n",
                        "        Double tooSmallNegative = Double.valueOf(tooSmallPositive.doubleValue() * -1);\n",
                        "        String strTooSmallNegative = fmt.format(tooSmallNegative);\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatSmallestValues_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/text/DecimalFormat",
                            "DecimalFormat(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "library",
                            "java.base/java/text/Format",
                            "format(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Double",
                            "valueOf(double)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Double",
                            "doubleValue()"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ]
                    ]
                },
                "1487-1510:testFloatSmallestValues_test5_decomposed": {
                    "start": 1487,
                    "end": 1510,
                    "body": [
                        "    public void testFloatSmallestValues_test5_decomposed()  {\n",
                        "        String pattern = \"#.#################################################################\";\n",
                        "        DecimalFormat fmt = new DecimalFormat(pattern);\n",
                        "        Float smallestPositive = Float.valueOf(Float.MIN_VALUE);\n",
                        "        String strSmallestPositive = fmt.format(smallestPositive);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"Smallest +ve\",\n",
                        "                smallestPositive,\n",
                        "                FloatValidator.getInstance().validate1(strSmallestPositive, pattern));\n",
                        "        Float smallestNegative = Float.valueOf(Float.MIN_VALUE * -1);\n",
                        "        String strSmallestNegative = fmt.format(smallestNegative);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"Smallest -ve\",\n",
                        "                smallestNegative,\n",
                        "                FloatValidator.getInstance().validate1(strSmallestNegative, pattern));\n",
                        "        Double tooSmallPositive = Double.valueOf(((double) Float.MIN_VALUE / (double) 10));\n",
                        "        String strTooSmallPositive = fmt.format(tooSmallPositive);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\n",
                        "                \"Too small +ve\",\n",
                        "                FloatValidator.getInstance().isValid1(strTooSmallPositive, pattern));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatSmallestValues_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/text/DecimalFormat",
                            "DecimalFormat(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "library",
                            "java.base/java/text/Format",
                            "format(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Double",
                            "valueOf(double)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ]
                    ]
                },
                "1464-1484:testFloatSmallestValues_test4_decomposed": {
                    "start": 1464,
                    "end": 1484,
                    "body": [
                        "    public void testFloatSmallestValues_test4_decomposed()  {\n",
                        "        String pattern = \"#.#################################################################\";\n",
                        "        DecimalFormat fmt = new DecimalFormat(pattern);\n",
                        "        Float smallestPositive = Float.valueOf(Float.MIN_VALUE);\n",
                        "        String strSmallestPositive = fmt.format(smallestPositive);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"Smallest +ve\",\n",
                        "                smallestPositive,\n",
                        "                FloatValidator.getInstance().validate1(strSmallestPositive, pattern));\n",
                        "        Float smallestNegative = Float.valueOf(Float.MIN_VALUE * -1);\n",
                        "        String strSmallestNegative = fmt.format(smallestNegative);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"Smallest -ve\",\n",
                        "                smallestNegative,\n",
                        "                FloatValidator.getInstance().validate1(strSmallestNegative, pattern));\n",
                        "        Double tooSmallPositive = Double.valueOf(((double) Float.MIN_VALUE / (double) 10));\n",
                        "        String strTooSmallPositive = fmt.format(tooSmallPositive);\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatSmallestValues_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/text/DecimalFormat",
                            "DecimalFormat(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "library",
                            "java.base/java/text/Format",
                            "format(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Double",
                            "valueOf(double)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ]
                    ]
                },
                "1444-1461:testFloatSmallestValues_test3_decomposed": {
                    "start": 1444,
                    "end": 1461,
                    "body": [
                        "    public void testFloatSmallestValues_test3_decomposed()  {\n",
                        "        String pattern = \"#.#################################################################\";\n",
                        "        DecimalFormat fmt = new DecimalFormat(pattern);\n",
                        "        Float smallestPositive = Float.valueOf(Float.MIN_VALUE);\n",
                        "        String strSmallestPositive = fmt.format(smallestPositive);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"Smallest +ve\",\n",
                        "                smallestPositive,\n",
                        "                FloatValidator.getInstance().validate1(strSmallestPositive, pattern));\n",
                        "        Float smallestNegative = Float.valueOf(Float.MIN_VALUE * -1);\n",
                        "        String strSmallestNegative = fmt.format(smallestNegative);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"Smallest -ve\",\n",
                        "                smallestNegative,\n",
                        "                FloatValidator.getInstance().validate1(strSmallestNegative, pattern));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatSmallestValues_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/text/DecimalFormat",
                            "DecimalFormat(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "library",
                            "java.base/java/text/Format",
                            "format(java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ]
                    ]
                },
                "1428-1441:testFloatSmallestValues_test2_decomposed": {
                    "start": 1428,
                    "end": 1441,
                    "body": [
                        "    public void testFloatSmallestValues_test2_decomposed()  {\n",
                        "        String pattern = \"#.#################################################################\";\n",
                        "        DecimalFormat fmt = new DecimalFormat(pattern);\n",
                        "        Float smallestPositive = Float.valueOf(Float.MIN_VALUE);\n",
                        "        String strSmallestPositive = fmt.format(smallestPositive);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"Smallest +ve\",\n",
                        "                smallestPositive,\n",
                        "                FloatValidator.getInstance().validate1(strSmallestPositive, pattern));\n",
                        "        Float smallestNegative = Float.valueOf(Float.MIN_VALUE * -1);\n",
                        "        String strSmallestNegative = fmt.format(smallestNegative);\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatSmallestValues_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/text/DecimalFormat",
                            "DecimalFormat(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "library",
                            "java.base/java/text/Format",
                            "format(java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ]
                    ]
                },
                "1415-1425:testFloatSmallestValues_test1_decomposed": {
                    "start": 1415,
                    "end": 1425,
                    "body": [
                        "    public void testFloatSmallestValues_test1_decomposed()  {\n",
                        "        String pattern = \"#.#################################################################\";\n",
                        "        DecimalFormat fmt = new DecimalFormat(pattern);\n",
                        "        Float smallestPositive = Float.valueOf(Float.MIN_VALUE);\n",
                        "        String strSmallestPositive = fmt.format(smallestPositive);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"Smallest +ve\",\n",
                        "                smallestPositive,\n",
                        "                FloatValidator.getInstance().validate1(strSmallestPositive, pattern));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatSmallestValues_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/text/DecimalFormat",
                            "DecimalFormat(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "library",
                            "java.base/java/text/Format",
                            "format(java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ]
                    ]
                },
                "1406-1412:testFloatSmallestValues_test0_decomposed": {
                    "start": 1406,
                    "end": 1412,
                    "body": [
                        "    public void testFloatSmallestValues_test0_decomposed()  {\n",
                        "        String pattern = \"#.#################################################################\";\n",
                        "        DecimalFormat fmt = new DecimalFormat(pattern);\n",
                        "        Float smallestPositive = Float.valueOf(Float.MIN_VALUE);\n",
                        "        String strSmallestPositive = fmt.format(smallestPositive);\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatSmallestValues_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/text/DecimalFormat",
                            "DecimalFormat(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "library",
                            "java.base/java/text/Format",
                            "format(java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ]
                    ]
                },
                "1343-1403:testFloatValidatorMethods_test31_decomposed": {
                    "start": 1343,
                    "end": 1403,
                    "body": [
                        "    public void testFloatValidatorMethods_test31_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) pattern\", FloatValidator.getInstance().isValid1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) both\",\n",
                        "                FloatValidator.getInstance().isValid3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) default\", FloatValidator.getInstance().validate0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) locale \", FloatValidator.getInstance().validate2(XXXX, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) pattern\", FloatValidator.getInstance().validate1(XXXX, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\n",
                        "                \"validate(B) both\",\n",
                        "                FloatValidator.getInstance().validate3(patternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\"isValid(B) default\", FloatValidator.getInstance().isValid0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\"isValid(B) locale \", FloatValidator.getInstance().isValid2(XXXX, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\"isValid(B) pattern\", FloatValidator.getInstance().isValid1(XXXX, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\n",
                        "                \"isValid(B) both\",\n",
                        "                FloatValidator.getInstance().isValid3(patternVal, pattern, Locale.GERMAN));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test31_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractNumberValidator",
                            "AbstractNumberValidator",
                            "93-96:isValid3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ]
                },
                "1283-1340:testFloatValidatorMethods_test30_decomposed": {
                    "start": 1283,
                    "end": 1340,
                    "body": [
                        "    public void testFloatValidatorMethods_test30_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) pattern\", FloatValidator.getInstance().isValid1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) both\",\n",
                        "                FloatValidator.getInstance().isValid3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) default\", FloatValidator.getInstance().validate0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) locale \", FloatValidator.getInstance().validate2(XXXX, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) pattern\", FloatValidator.getInstance().validate1(XXXX, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\n",
                        "                \"validate(B) both\",\n",
                        "                FloatValidator.getInstance().validate3(patternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\"isValid(B) default\", FloatValidator.getInstance().isValid0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\"isValid(B) locale \", FloatValidator.getInstance().isValid2(XXXX, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\"isValid(B) pattern\", FloatValidator.getInstance().isValid1(XXXX, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test30_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractNumberValidator",
                            "AbstractNumberValidator",
                            "93-96:isValid3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ]
                },
                "1224-1280:testFloatValidatorMethods_test29_decomposed": {
                    "start": 1224,
                    "end": 1280,
                    "body": [
                        "    public void testFloatValidatorMethods_test29_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) pattern\", FloatValidator.getInstance().isValid1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) both\",\n",
                        "                FloatValidator.getInstance().isValid3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) default\", FloatValidator.getInstance().validate0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) locale \", FloatValidator.getInstance().validate2(XXXX, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) pattern\", FloatValidator.getInstance().validate1(XXXX, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\n",
                        "                \"validate(B) both\",\n",
                        "                FloatValidator.getInstance().validate3(patternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\"isValid(B) default\", FloatValidator.getInstance().isValid0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\"isValid(B) locale \", FloatValidator.getInstance().isValid2(XXXX, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\"isValid(B) pattern\", FloatValidator.getInstance().isValid1(XXXX, pattern));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test29_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractNumberValidator",
                            "AbstractNumberValidator",
                            "93-96:isValid3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ]
                },
                "1166-1221:testFloatValidatorMethods_test28_decomposed": {
                    "start": 1166,
                    "end": 1221,
                    "body": [
                        "    public void testFloatValidatorMethods_test28_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) pattern\", FloatValidator.getInstance().isValid1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) both\",\n",
                        "                FloatValidator.getInstance().isValid3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) default\", FloatValidator.getInstance().validate0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) locale \", FloatValidator.getInstance().validate2(XXXX, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) pattern\", FloatValidator.getInstance().validate1(XXXX, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\n",
                        "                \"validate(B) both\",\n",
                        "                FloatValidator.getInstance().validate3(patternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\"isValid(B) default\", FloatValidator.getInstance().isValid0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\"isValid(B) locale \", FloatValidator.getInstance().isValid2(XXXX, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test28_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractNumberValidator",
                            "AbstractNumberValidator",
                            "93-96:isValid3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ]
                },
                "1109-1163:testFloatValidatorMethods_test27_decomposed": {
                    "start": 1109,
                    "end": 1163,
                    "body": [
                        "    public void testFloatValidatorMethods_test27_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) pattern\", FloatValidator.getInstance().isValid1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) both\",\n",
                        "                FloatValidator.getInstance().isValid3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) default\", FloatValidator.getInstance().validate0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) locale \", FloatValidator.getInstance().validate2(XXXX, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) pattern\", FloatValidator.getInstance().validate1(XXXX, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\n",
                        "                \"validate(B) both\",\n",
                        "                FloatValidator.getInstance().validate3(patternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\"isValid(B) default\", FloatValidator.getInstance().isValid0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\"isValid(B) locale \", FloatValidator.getInstance().isValid2(XXXX, locale));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test27_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractNumberValidator",
                            "AbstractNumberValidator",
                            "93-96:isValid3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ]
                },
                "1053-1106:testFloatValidatorMethods_test26_decomposed": {
                    "start": 1053,
                    "end": 1106,
                    "body": [
                        "    public void testFloatValidatorMethods_test26_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) pattern\", FloatValidator.getInstance().isValid1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) both\",\n",
                        "                FloatValidator.getInstance().isValid3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) default\", FloatValidator.getInstance().validate0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) locale \", FloatValidator.getInstance().validate2(XXXX, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) pattern\", FloatValidator.getInstance().validate1(XXXX, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\n",
                        "                \"validate(B) both\",\n",
                        "                FloatValidator.getInstance().validate3(patternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\"isValid(B) default\", FloatValidator.getInstance().isValid0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test26_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractNumberValidator",
                            "AbstractNumberValidator",
                            "93-96:isValid3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ]
                },
                "998-1050:testFloatValidatorMethods_test25_decomposed": {
                    "start": 998,
                    "end": 1050,
                    "body": [
                        "    public void testFloatValidatorMethods_test25_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) pattern\", FloatValidator.getInstance().isValid1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) both\",\n",
                        "                FloatValidator.getInstance().isValid3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) default\", FloatValidator.getInstance().validate0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) locale \", FloatValidator.getInstance().validate2(XXXX, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) pattern\", FloatValidator.getInstance().validate1(XXXX, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\n",
                        "                \"validate(B) both\",\n",
                        "                FloatValidator.getInstance().validate3(patternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertFalse(\"isValid(B) default\", FloatValidator.getInstance().isValid0(XXXX));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test25_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractNumberValidator",
                            "AbstractNumberValidator",
                            "93-96:isValid3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ]
                },
                "944-995:testFloatValidatorMethods_test24_decomposed": {
                    "start": 944,
                    "end": 995,
                    "body": [
                        "    public void testFloatValidatorMethods_test24_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) pattern\", FloatValidator.getInstance().isValid1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) both\",\n",
                        "                FloatValidator.getInstance().isValid3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) default\", FloatValidator.getInstance().validate0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) locale \", FloatValidator.getInstance().validate2(XXXX, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) pattern\", FloatValidator.getInstance().validate1(XXXX, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\n",
                        "                \"validate(B) both\",\n",
                        "                FloatValidator.getInstance().validate3(patternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test24_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractNumberValidator",
                            "AbstractNumberValidator",
                            "93-96:isValid3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "891-941:testFloatValidatorMethods_test23_decomposed": {
                    "start": 891,
                    "end": 941,
                    "body": [
                        "    public void testFloatValidatorMethods_test23_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) pattern\", FloatValidator.getInstance().isValid1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) both\",\n",
                        "                FloatValidator.getInstance().isValid3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) default\", FloatValidator.getInstance().validate0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) locale \", FloatValidator.getInstance().validate2(XXXX, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) pattern\", FloatValidator.getInstance().validate1(XXXX, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\n",
                        "                \"validate(B) both\",\n",
                        "                FloatValidator.getInstance().validate3(patternVal, pattern, Locale.GERMAN));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test23_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractNumberValidator",
                            "AbstractNumberValidator",
                            "93-96:isValid3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "841-888:testFloatValidatorMethods_test22_decomposed": {
                    "start": 841,
                    "end": 888,
                    "body": [
                        "    public void testFloatValidatorMethods_test22_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) pattern\", FloatValidator.getInstance().isValid1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) both\",\n",
                        "                FloatValidator.getInstance().isValid3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) default\", FloatValidator.getInstance().validate0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) locale \", FloatValidator.getInstance().validate2(XXXX, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) pattern\", FloatValidator.getInstance().validate1(XXXX, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test22_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractNumberValidator",
                            "AbstractNumberValidator",
                            "93-96:isValid3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "792-838:testFloatValidatorMethods_test21_decomposed": {
                    "start": 792,
                    "end": 838,
                    "body": [
                        "    public void testFloatValidatorMethods_test21_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) pattern\", FloatValidator.getInstance().isValid1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) both\",\n",
                        "                FloatValidator.getInstance().isValid3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) default\", FloatValidator.getInstance().validate0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) locale \", FloatValidator.getInstance().validate2(XXXX, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) pattern\", FloatValidator.getInstance().validate1(XXXX, pattern));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test21_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractNumberValidator",
                            "AbstractNumberValidator",
                            "93-96:isValid3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "744-789:testFloatValidatorMethods_test20_decomposed": {
                    "start": 744,
                    "end": 789,
                    "body": [
                        "    public void testFloatValidatorMethods_test20_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) pattern\", FloatValidator.getInstance().isValid1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) both\",\n",
                        "                FloatValidator.getInstance().isValid3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) default\", FloatValidator.getInstance().validate0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) locale \", FloatValidator.getInstance().validate2(XXXX, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test20_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractNumberValidator",
                            "AbstractNumberValidator",
                            "93-96:isValid3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "697-741:testFloatValidatorMethods_test19_decomposed": {
                    "start": 697,
                    "end": 741,
                    "body": [
                        "    public void testFloatValidatorMethods_test19_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) pattern\", FloatValidator.getInstance().isValid1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) both\",\n",
                        "                FloatValidator.getInstance().isValid3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) default\", FloatValidator.getInstance().validate0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) locale \", FloatValidator.getInstance().validate2(XXXX, locale));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test19_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractNumberValidator",
                            "AbstractNumberValidator",
                            "93-96:isValid3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "651-694:testFloatValidatorMethods_test18_decomposed": {
                    "start": 651,
                    "end": 694,
                    "body": [
                        "    public void testFloatValidatorMethods_test18_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) pattern\", FloatValidator.getInstance().isValid1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) both\",\n",
                        "                FloatValidator.getInstance().isValid3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) default\", FloatValidator.getInstance().validate0(XXXX));\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test18_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractNumberValidator",
                            "AbstractNumberValidator",
                            "93-96:isValid3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "606-648:testFloatValidatorMethods_test17_decomposed": {
                    "start": 606,
                    "end": 648,
                    "body": [
                        "    public void testFloatValidatorMethods_test17_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) pattern\", FloatValidator.getInstance().isValid1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) both\",\n",
                        "                FloatValidator.getInstance().isValid3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertNull(\"validate(B) default\", FloatValidator.getInstance().validate0(XXXX));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test17_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractNumberValidator",
                            "AbstractNumberValidator",
                            "93-96:isValid3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "562-603:testFloatValidatorMethods_test16_decomposed": {
                    "start": 562,
                    "end": 603,
                    "body": [
                        "    public void testFloatValidatorMethods_test16_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) pattern\", FloatValidator.getInstance().isValid1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) both\",\n",
                        "                FloatValidator.getInstance().isValid3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test16_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractNumberValidator",
                            "AbstractNumberValidator",
                            "93-96:isValid3"
                        ]
                    ]
                },
                "519-559:testFloatValidatorMethods_test15_decomposed": {
                    "start": 519,
                    "end": 559,
                    "body": [
                        "    public void testFloatValidatorMethods_test15_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) pattern\", FloatValidator.getInstance().isValid1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) both\",\n",
                        "                FloatValidator.getInstance().isValid3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test15_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractNumberValidator",
                            "AbstractNumberValidator",
                            "93-96:isValid3"
                        ]
                    ]
                },
                "479-516:testFloatValidatorMethods_test14_decomposed": {
                    "start": 479,
                    "end": 516,
                    "body": [
                        "    public void testFloatValidatorMethods_test14_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) pattern\", FloatValidator.getInstance().isValid1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test14_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ]
                    ]
                },
                "440-476:testFloatValidatorMethods_test13_decomposed": {
                    "start": 440,
                    "end": 476,
                    "body": [
                        "    public void testFloatValidatorMethods_test13_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\n",
                        "                \"isValid(A) pattern\", FloatValidator.getInstance().isValid1(patternVal, pattern));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test13_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "79-81:isValid1"
                        ]
                    ]
                },
                "403-437:testFloatValidatorMethods_test12_decomposed": {
                    "start": 403,
                    "end": 437,
                    "body": [
                        "    public void testFloatValidatorMethods_test12_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test12_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ]
                    ]
                },
                "367-400:testFloatValidatorMethods_test11_decomposed": {
                    "start": 367,
                    "end": 400,
                    "body": [
                        "    public void testFloatValidatorMethods_test11_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) locale \", FloatValidator.getInstance().isValid2(localeVal, locale));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test11_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "90-92:isValid2"
                        ]
                    ]
                },
                "332-364:testFloatValidatorMethods_test10_decomposed": {
                    "start": 332,
                    "end": 364,
                    "body": [
                        "    public void testFloatValidatorMethods_test10_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test10_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ]
                    ]
                },
                "298-329:testFloatValidatorMethods_test9_decomposed": {
                    "start": 298,
                    "end": 329,
                    "body": [
                        "    public void testFloatValidatorMethods_test9_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertTrue(\"isValid(A) default\", FloatValidator.getInstance().isValid0(defaultVal));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test9_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.AbstractFormatValidator",
                            "AbstractFormatValidator",
                            "68-70:isValid0"
                        ]
                    ]
                },
                "265-295:testFloatValidatorMethods_test8_decomposed": {
                    "start": 265,
                    "end": 295,
                    "body": [
                        "    public void testFloatValidatorMethods_test8_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ]
                    ]
                },
                "233-262:testFloatValidatorMethods_test7_decomposed": {
                    "start": 233,
                    "end": 262,
                    "body": [
                        "    public void testFloatValidatorMethods_test7_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) both\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate3(germanPatternVal, pattern, Locale.GERMAN));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "148-150:validate3"
                        ]
                    ]
                },
                "205-230:testFloatValidatorMethods_test6_decomposed": {
                    "start": 205,
                    "end": 230,
                    "body": [
                        "    public void testFloatValidatorMethods_test6_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ]
                    ]
                },
                "178-202:testFloatValidatorMethods_test5_decomposed": {
                    "start": 178,
                    "end": 202,
                    "body": [
                        "    public void testFloatValidatorMethods_test5_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) pattern\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate1(patternVal, pattern));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "123-125:validate1"
                        ]
                    ]
                },
                "155-175:testFloatValidatorMethods_test4_decomposed": {
                    "start": 155,
                    "end": 175,
                    "body": [
                        "    public void testFloatValidatorMethods_test4_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ]
                    ]
                },
                "133-152:testFloatValidatorMethods_test3_decomposed": {
                    "start": 133,
                    "end": 152,
                    "body": [
                        "    public void testFloatValidatorMethods_test3_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) locale \",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate2(localeVal, locale));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "134-136:validate2"
                        ]
                    ]
                },
                "115-130:testFloatValidatorMethods_test2_decomposed": {
                    "start": 115,
                    "end": 130,
                    "body": [
                        "    public void testFloatValidatorMethods_test2_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ]
                    ]
                },
                "98-112:testFloatValidatorMethods_test1_decomposed": {
                    "start": 98,
                    "end": 112,
                    "body": [
                        "    public void testFloatValidatorMethods_test1_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "        assertEquals(\n",
                        "                \"validate(A) default\",\n",
                        "                expected,\n",
                        "                FloatValidator.getInstance().validate0(defaultVal));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "112-114:validate0"
                        ]
                    ]
                },
                "85-95:testFloatValidatorMethods_test0_decomposed": {
                    "start": 85,
                    "end": 95,
                    "body": [
                        "    public void testFloatValidatorMethods_test0_decomposed()  {\n",
                        "        Locale locale = Locale.GERMAN;\n",
                        "        String pattern = \"0,00,00\";\n",
                        "        String patternVal = \"1,23,45\";\n",
                        "        String localeVal = \"12.345\";\n",
                        "        String germanPatternVal = \"1.23.45\";\n",
                        "        String defaultVal = \"12,345\";\n",
                        "        String XXXX = \"XXXX\";\n",
                        "        Float expected = Float.valueOf(12345);\n",
                        "        FloatValidator.getInstance();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFloatValidatorMethods_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "74-76:getInstance"
                        ]
                    ]
                },
                "40-71:setUp": {
                    "start": 40,
                    "end": 71,
                    "body": [
                        "    protected void setUp() throws Exception {\n",
                        "        super.setUp();\n",
                        "\n",
                        "        validator = new FloatValidator(false, 0);\n",
                        "        strictValidator = FloatValidator.FloatValidator1();\n",
                        "\n",
                        "        testPattern = \"#,###.#\";\n",
                        "\n",
                        "        max = Float.valueOf(Float.MAX_VALUE);\n",
                        "        maxPlusOne = Double.valueOf(max.doubleValue() * 10);\n",
                        "        min = Float.valueOf(Float.MAX_VALUE * -1);\n",
                        "        minMinusOne = Double.valueOf(min.doubleValue() * 10);\n",
                        "\n",
                        "        invalidStrict = new String[] {null, \"\", \"X\", \"X12\", \"12X\", \"1X2\"};\n",
                        "\n",
                        "        invalid = new String[] {null, \"\", \"X\", \"X12\"};\n",
                        "\n",
                        "        testNumber = Float.valueOf(1234.5f);\n",
                        "        testZero = Float.valueOf(0);\n",
                        "        validStrict = new String[] {\"0\", \"1234.5\", \"1,234.5\"};\n",
                        "        validStrictCompare = new Number[] {testZero, testNumber, testNumber};\n",
                        "        valid = new String[] {\"0\", \"1234.5\", \"1,234.5\", \"1,234.5\", \"1234.5X\"};\n",
                        "        validCompare = new Number[] {testZero, testNumber, testNumber, testNumber, testNumber};\n",
                        "\n",
                        "        testStringUS = \"1,234.5\";\n",
                        "        testStringDE = \"1.234,5\";\n",
                        "\n",
                        "        localeValue = testStringDE;\n",
                        "        localePattern = \"#.###,#\";\n",
                        "        testLocale = Locale.GERMANY;\n",
                        "        localeExpected = testNumber;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "setUp()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.AbstractNumberValidatorTest",
                            "AbstractNumberValidatorTest",
                            "72-76:setUp"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "79-81:FloatValidator"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.FloatValidator",
                            "FloatValidator",
                            "83-85:FloatValidator1"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Float",
                            "valueOf(float)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Double",
                            "valueOf(double)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Number",
                            "doubleValue()"
                        ]
                    ]
                },
                "35-37:FloatValidatorTest": {
                    "start": 35,
                    "end": 37,
                    "body": [
                        "    public FloatValidatorTest(String name) {\n",
                        "        super(name);\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "FloatValidatorTest(String)",
                    "parameters": [
                        "name"
                    ],
                    "calls": [
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.AbstractNumberValidatorTest",
                            "AbstractNumberValidatorTest",
                            "67-69:AbstractNumberValidatorTest"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}