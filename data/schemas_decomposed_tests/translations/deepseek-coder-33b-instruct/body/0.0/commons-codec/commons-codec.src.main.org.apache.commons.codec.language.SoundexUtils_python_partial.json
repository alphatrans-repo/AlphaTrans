{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-codec/src/main/java/org/apache/commons/codec/language/SoundexUtils.java",
    "imports": {
        "20-20:import EncoderException": {
            "start": 20,
            "end": 20,
            "body": [
                "import org.apache.commons.codec.EncoderException;\n"
            ]
        },
        "21-21:import StringEncoder": {
            "start": 21,
            "end": 21,
            "body": [
                "import org.apache.commons.codec.StringEncoder;\n"
            ]
        }
    },
    "classes": {
        "SoundexUtils": {
            "start": 30,
            "end": 30,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "97-110:differenceEncoded": {
                    "start": 97,
                    "end": 110,
                    "body": [
                        "    static int differenceEncoded(final String es1, final String es2) {\n",
                        "\n",
                        "        if (es1 == null || es2 == null) {\n",
                        "            return 0;\n",
                        "        }\n",
                        "        final int lengthToMatch = Math.min(es1.length(), es2.length());\n",
                        "        int diff = 0;\n",
                        "        for (int i = 0; i < lengthToMatch; i++) {\n",
                        "            if (es1.charAt(i) == es2.charAt(i)) {\n",
                        "                diff++;\n",
                        "            }\n",
                        "        }\n",
                        "        return diff;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "differenceEncoded(String, String)",
                    "parameters": [
                        "es1",
                        "es2"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Math",
                            "min(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "charAt(int)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def differenceEncoded(es1: str, es2: str) -> int:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "76-79:difference": {
                    "start": 76,
                    "end": 79,
                    "body": [
                        "    static int difference(final StringEncoder encoder, final String s1, final String s2)\n",
                        "            throws EncoderException {\n",
                        "        return differenceEncoded(encoder.encode(s1), encoder.encode(s2));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "difference(StringEncoder, String, String)",
                    "parameters": [
                        "encoder",
                        "s1",
                        "s2"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.SoundexUtils",
                            "SoundexUtils",
                            "97-110:differenceEncoded"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.StringEncoder",
                            "StringEncoder",
                            "30-30:encode"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def difference(encoder: StringEncoder, s1: str, s2: str) -> int:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "38-54:clean": {
                    "start": 38,
                    "end": 54,
                    "body": [
                        "    static String clean(final String str) {\n",
                        "        if (str == null || str.isEmpty()) {\n",
                        "            return str;\n",
                        "        }\n",
                        "        final int len = str.length();\n",
                        "        final char[] chars = new char[len];\n",
                        "        int count = 0;\n",
                        "        for (int i = 0; i < len; i++) {\n",
                        "            if (Character.isLetter(str.charAt(i))) {\n",
                        "                chars[count++] = str.charAt(i);\n",
                        "            }\n",
                        "        }\n",
                        "        if (count == len) {\n",
                        "            return str.toUpperCase(java.util.Locale.ENGLISH);\n",
                        "        }\n",
                        "        return new String(chars, 0, count).toUpperCase(java.util.Locale.ENGLISH);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "clean(String)",
                    "parameters": [
                        "str"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "isEmpty()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Character",
                            "isLetter(char)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "charAt(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "toUpperCase(java.util.Locale)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(char[],int,int)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def clean(str_: str) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {},
            "is_enum": false,
            "python_class_declaration": "class SoundexUtils:\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import io",
        "from src.main.org.apache.commons.codec.EncoderException import *",
        "from src.main.org.apache.commons.codec.StringEncoder import *"
    ]
}