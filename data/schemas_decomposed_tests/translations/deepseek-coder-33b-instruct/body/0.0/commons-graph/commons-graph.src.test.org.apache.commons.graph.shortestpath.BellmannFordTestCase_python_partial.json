{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-graph/src/test/java/org/apache/commons/graph/shortestpath/BellmannFordTestCase.java",
    "imports": {
        "26-26:import Graph": {
            "start": 26,
            "end": 26,
            "body": [
                "import org.apache.commons.graph.Graph;\n"
            ]
        },
        "33-33:import UndirectedMutableGraph": {
            "start": 33,
            "end": 33,
            "body": [
                "import org.apache.commons.graph.model.UndirectedMutableGraph;\n"
            ]
        },
        "31-31:import DirectedMutableGraph": {
            "start": 31,
            "end": 31,
            "body": [
                "import org.apache.commons.graph.model.DirectedMutableGraph;\n"
            ]
        },
        "27-27:import WeightedPath": {
            "start": 27,
            "end": 27,
            "body": [
                "import org.apache.commons.graph.WeightedPath;\n"
            ]
        },
        "35-35:import Test": {
            "start": 35,
            "end": 35,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "29-29:import BaseLabeledWeightedEdge": {
            "start": 29,
            "end": 29,
            "body": [
                "import org.apache.commons.graph.model.BaseLabeledWeightedEdge;\n"
            ]
        },
        "28-28:import BaseLabeledVertex": {
            "start": 28,
            "end": 28,
            "body": [
                "import org.apache.commons.graph.model.BaseLabeledVertex;\n"
            ]
        },
        "30-30:import BaseWeightedEdge": {
            "start": 30,
            "end": 30,
            "body": [
                "import org.apache.commons.graph.model.BaseWeightedEdge;\n"
            ]
        },
        "32-32:import InMemoryWeightedPath": {
            "start": 32,
            "end": 32,
            "body": [
                "import org.apache.commons.graph.model.InMemoryWeightedPath;\n"
            ]
        },
        "34-34:import DoubleWeightBaseOperations": {
            "start": 34,
            "end": 34,
            "body": [
                "import org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations;\n"
            ]
        },
        "23-23:import static Assert.assertEquals": {
            "start": 23,
            "end": 23,
            "body": [
                "import static org.junit.Assert.assertEquals;\n"
            ]
        },
        "22-22:import static CommonsGraph.findShortestPath": {
            "start": 22,
            "end": 22,
            "body": [
                "import static org.apache.commons.graph.CommonsGraph.findShortestPath;\n"
            ]
        },
        "24-24:import static Assert.fail": {
            "start": 24,
            "end": 24,
            "body": [
                "import static org.junit.Assert.fail;\n"
            ]
        }
    },
    "classes": {
        "BellmannFordTestCase": {
            "start": 37,
            "end": 37,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "665-675:testNullVertices_test3_decomposed": {
                    "start": 665,
                    "end": 675,
                    "body": [
                        "    public void testNullVertices_test3_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null);\n",
                        "        findShortestPath(graph)\n",
                        "                .whereEdgesHaveWeights(new BaseWeightedEdge<Double>())\n",
                        "                .from(null)\n",
                        "                .applyingBelmannFord(new DoubleWeightBaseOperations());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "applyingBelmannFord(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "656-662:testNullVertices_test2_decomposed": {
                    "start": 656,
                    "end": 662,
                    "body": [
                        "    public void testNullVertices_test2_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "648-653:testNullVertices_test1_decomposed": {
                    "start": 648,
                    "end": 653,
                    "body": [
                        "    public void testNullVertices_test1_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "641-645:testNullVertices_test0_decomposed": {
                    "start": 641,
                    "end": 645,
                    "body": [
                        "    public void testNullVertices_test0_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        findShortestPath(graph);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "616-638:testNullMonoid_test4_decomposed": {
                    "start": 616,
                    "end": 638,
                    "body": [
                        "    public void testNullMonoid_test4_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph = null;\n",
                        "        BaseLabeledVertex a = null;\n",
                        "        try {\n",
                        "            graph =\n",
                        "                    new UndirectedMutableGraph<\n",
                        "                            BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "\n",
                        "            a = new BaseLabeledVertex(\"a\");\n",
                        "            final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "            graph.addVertex(a);\n",
                        "            graph.addVertex(b);\n",
                        "        } catch (NullPointerException e) {\n",
                        "            fail(e.getMessage());\n",
                        "        }\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a);\n",
                        "        findShortestPath(graph)\n",
                        "                .whereEdgesHaveWeights(new BaseWeightedEdge<Double>())\n",
                        "                .from(a)\n",
                        "                .applyingBelmannFord(null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullMonoid_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "applyingBelmannFord(org.apache.commons.graph.weight.OrderedMonoid)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullMonoid_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "595-613:testNullMonoid_test3_decomposed": {
                    "start": 595,
                    "end": 613,
                    "body": [
                        "    public void testNullMonoid_test3_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph = null;\n",
                        "        BaseLabeledVertex a = null;\n",
                        "        try {\n",
                        "            graph =\n",
                        "                    new UndirectedMutableGraph<\n",
                        "                            BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "\n",
                        "            a = new BaseLabeledVertex(\"a\");\n",
                        "            final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "            graph.addVertex(a);\n",
                        "            graph.addVertex(b);\n",
                        "        } catch (NullPointerException e) {\n",
                        "            fail(e.getMessage());\n",
                        "        }\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullMonoid_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullMonoid_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "575-592:testNullMonoid_test2_decomposed": {
                    "start": 575,
                    "end": 592,
                    "body": [
                        "    public void testNullMonoid_test2_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph = null;\n",
                        "        BaseLabeledVertex a = null;\n",
                        "        try {\n",
                        "            graph =\n",
                        "                    new UndirectedMutableGraph<\n",
                        "                            BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "\n",
                        "            a = new BaseLabeledVertex(\"a\");\n",
                        "            final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "            graph.addVertex(a);\n",
                        "            graph.addVertex(b);\n",
                        "        } catch (NullPointerException e) {\n",
                        "            fail(e.getMessage());\n",
                        "        }\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullMonoid_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullMonoid_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "556-572:testNullMonoid_test1_decomposed": {
                    "start": 556,
                    "end": 572,
                    "body": [
                        "    public void testNullMonoid_test1_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph = null;\n",
                        "        BaseLabeledVertex a = null;\n",
                        "        try {\n",
                        "            graph =\n",
                        "                    new UndirectedMutableGraph<\n",
                        "                            BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "\n",
                        "            a = new BaseLabeledVertex(\"a\");\n",
                        "            final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "            graph.addVertex(a);\n",
                        "            graph.addVertex(b);\n",
                        "        } catch (NullPointerException e) {\n",
                        "            fail(e.getMessage());\n",
                        "        }\n",
                        "        findShortestPath(graph);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullMonoid_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullMonoid_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "538-553:testNullMonoid_test0_decomposed": {
                    "start": 538,
                    "end": 553,
                    "body": [
                        "    public void testNullMonoid_test0_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph = null;\n",
                        "        BaseLabeledVertex a = null;\n",
                        "        try {\n",
                        "            graph =\n",
                        "                    new UndirectedMutableGraph<\n",
                        "                            BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "\n",
                        "            a = new BaseLabeledVertex(\"a\");\n",
                        "            final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "            graph.addVertex(a);\n",
                        "            graph.addVertex(b);\n",
                        "        } catch (NullPointerException e) {\n",
                        "            fail(e.getMessage());\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullMonoid_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullMonoid_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "527-535:testNullGraph_test3_decomposed": {
                    "start": 527,
                    "end": 535,
                    "body": [
                        "    public void testNullGraph_test3_decomposed()  {\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null);\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null);\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null)\n",
                        "                .whereEdgesHaveWeights(new BaseWeightedEdge<Double>())\n",
                        "                .from(null)\n",
                        "                .applyingBelmannFord(new DoubleWeightBaseOperations());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "applyingBelmannFord(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "520-524:testNullGraph_test2_decomposed": {
                    "start": 520,
                    "end": 524,
                    "body": [
                        "    public void testNullGraph_test2_decomposed()  {\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null);\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "514-517:testNullGraph_test1_decomposed": {
                    "start": 514,
                    "end": 517,
                    "body": [
                        "    public void testNullGraph_test1_decomposed()  {\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null);\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "509-511:testNullGraph_test0_decomposed": {
                    "start": 509,
                    "end": 511,
                    "body": [
                        "    public void testNullGraph_test0_decomposed()  {\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "482-506:testNotConnectGraph_test1_decomposed": {
                    "start": 482,
                    "end": 506,
                    "body": [
                        "    public void testNotConnectGraph_test1_decomposed()  {\n",
                        "        BaseLabeledVertex a = null;\n",
                        "        BaseLabeledVertex b = null;\n",
                        "        AllVertexPairsShortestPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>\n",
                        "                allVertexPairsShortestPath = null;\n",
                        "        try {\n",
                        "            UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                    new UndirectedMutableGraph<\n",
                        "                            BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "\n",
                        "            a = new BaseLabeledVertex(\"a\");\n",
                        "            b = new BaseLabeledVertex(\"b\");\n",
                        "            graph.addVertex(a);\n",
                        "            graph.addVertex(b);\n",
                        "\n",
                        "            allVertexPairsShortestPath =\n",
                        "                    findShortestPath(graph)\n",
                        "                            .whereEdgesHaveWeights(new BaseWeightedEdge<Double>())\n",
                        "                            .from(a)\n",
                        "                            .applyingBelmannFord(new DoubleWeightBaseOperations());\n",
                        "        } catch (PathNotFoundException e) {\n",
                        "            fail(e.getMessage());\n",
                        "        }\n",
                        "        allVertexPairsShortestPath.findShortestPath(a, b);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = PathNotFoundException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnectGraph_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "applyingBelmannFord(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/AllVertexPairsShortestPath",
                            "findShortestPath(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnectGraph_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "456-479:testNotConnectGraph_test0_decomposed": {
                    "start": 456,
                    "end": 479,
                    "body": [
                        "    public void testNotConnectGraph_test0_decomposed()  {\n",
                        "        BaseLabeledVertex a = null;\n",
                        "        BaseLabeledVertex b = null;\n",
                        "        AllVertexPairsShortestPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>\n",
                        "                allVertexPairsShortestPath = null;\n",
                        "        try {\n",
                        "            UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                    new UndirectedMutableGraph<\n",
                        "                            BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "\n",
                        "            a = new BaseLabeledVertex(\"a\");\n",
                        "            b = new BaseLabeledVertex(\"b\");\n",
                        "            graph.addVertex(a);\n",
                        "            graph.addVertex(b);\n",
                        "\n",
                        "            allVertexPairsShortestPath =\n",
                        "                    findShortestPath(graph)\n",
                        "                            .whereEdgesHaveWeights(new BaseWeightedEdge<Double>())\n",
                        "                            .from(a)\n",
                        "                            .applyingBelmannFord(new DoubleWeightBaseOperations());\n",
                        "        } catch (PathNotFoundException e) {\n",
                        "            fail(e.getMessage());\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnectGraph_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "applyingBelmannFord(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnectGraph_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "408-453:testFindShortestPathAndVerify_test14_decomposed": {
                    "start": 408,
                    "end": 453,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test14_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex one = new BaseLabeledVertex(\"1\");\n",
                        "        BaseLabeledVertex two = new BaseLabeledVertex(\"2\");\n",
                        "        BaseLabeledVertex three = new BaseLabeledVertex(\"3\");\n",
                        "        BaseLabeledVertex four = new BaseLabeledVertex(\"4\");\n",
                        "        BaseLabeledVertex five = new BaseLabeledVertex(\"5\");\n",
                        "        graph.addVertex(one);\n",
                        "        graph.addVertex(two);\n",
                        "        graph.addVertex(three);\n",
                        "        graph.addVertex(four);\n",
                        "        graph.addVertex(five);\n",
                        "        graph.addEdge(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 2\", 6D), two);\n",
                        "        graph.addEdge(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 4\", 7D), four);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 3\", 5D), three);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 5\", -4D), five);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 4\", 8D), four);\n",
                        "        graph.addEdge(three, new BaseLabeledWeightedEdge<Double>(\"3 -> 2\", -2D), two);\n",
                        "        graph.addEdge(four, new BaseLabeledWeightedEdge<Double>(\"4 -> 3\", -3D), three);\n",
                        "        graph.addEdge(four, new BaseLabeledWeightedEdge<Double>(\"4 -> 5\", 9D), five);\n",
                        "        graph.addEdge(five, new BaseLabeledWeightedEdge<Double>(\"5 -> 3\", 7D), three);\n",
                        "        graph.addEdge(five, new BaseLabeledWeightedEdge<Double>(\"5 -> 1\", 2D), one);\n",
                        "        InMemoryWeightedPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> expected =\n",
                        "                new InMemoryWeightedPath<\n",
                        "                        BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>(\n",
                        "                        one,\n",
                        "                        three,\n",
                        "                        new DoubleWeightBaseOperations(),\n",
                        "                        new BaseWeightedEdge<Double>());\n",
                        "        expected.addConnectionInTail(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 4\", 7D), four);\n",
                        "        expected.addConnectionInTail(\n",
                        "                four, new BaseLabeledWeightedEdge<Double>(\"4 -> 3\", -3D), three);\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(one);\n",
                        "        AllVertexPairsShortestPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>\n",
                        "                allVertexPairsShortestPath =\n",
                        "                        findShortestPath(graph)\n",
                        "                                .whereEdgesHaveWeights(new BaseWeightedEdge<Double>())\n",
                        "                                .from(one)\n",
                        "                                .applyingBelmannFord(new DoubleWeightBaseOperations());\n",
                        "        WeightedPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> actual =\n",
                        "                allVertexPairsShortestPath.findShortestPath(one, three);\n",
                        "        assertEquals(expected, actual);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test14_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "InMemoryWeightedPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.weight.Monoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "applyingBelmannFord(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/AllVertexPairsShortestPath",
                            "findShortestPath(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>(java.lang.String,java.lang.Double)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "addConnectionInTail(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test14_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "361-405:testFindShortestPathAndVerify_test13_decomposed": {
                    "start": 361,
                    "end": 405,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test13_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex one = new BaseLabeledVertex(\"1\");\n",
                        "        BaseLabeledVertex two = new BaseLabeledVertex(\"2\");\n",
                        "        BaseLabeledVertex three = new BaseLabeledVertex(\"3\");\n",
                        "        BaseLabeledVertex four = new BaseLabeledVertex(\"4\");\n",
                        "        BaseLabeledVertex five = new BaseLabeledVertex(\"5\");\n",
                        "        graph.addVertex(one);\n",
                        "        graph.addVertex(two);\n",
                        "        graph.addVertex(three);\n",
                        "        graph.addVertex(four);\n",
                        "        graph.addVertex(five);\n",
                        "        graph.addEdge(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 2\", 6D), two);\n",
                        "        graph.addEdge(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 4\", 7D), four);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 3\", 5D), three);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 5\", -4D), five);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 4\", 8D), four);\n",
                        "        graph.addEdge(three, new BaseLabeledWeightedEdge<Double>(\"3 -> 2\", -2D), two);\n",
                        "        graph.addEdge(four, new BaseLabeledWeightedEdge<Double>(\"4 -> 3\", -3D), three);\n",
                        "        graph.addEdge(four, new BaseLabeledWeightedEdge<Double>(\"4 -> 5\", 9D), five);\n",
                        "        graph.addEdge(five, new BaseLabeledWeightedEdge<Double>(\"5 -> 3\", 7D), three);\n",
                        "        graph.addEdge(five, new BaseLabeledWeightedEdge<Double>(\"5 -> 1\", 2D), one);\n",
                        "        InMemoryWeightedPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> expected =\n",
                        "                new InMemoryWeightedPath<\n",
                        "                        BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>(\n",
                        "                        one,\n",
                        "                        three,\n",
                        "                        new DoubleWeightBaseOperations(),\n",
                        "                        new BaseWeightedEdge<Double>());\n",
                        "        expected.addConnectionInTail(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 4\", 7D), four);\n",
                        "        expected.addConnectionInTail(\n",
                        "                four, new BaseLabeledWeightedEdge<Double>(\"4 -> 3\", -3D), three);\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(one);\n",
                        "        AllVertexPairsShortestPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>\n",
                        "                allVertexPairsShortestPath =\n",
                        "                        findShortestPath(graph)\n",
                        "                                .whereEdgesHaveWeights(new BaseWeightedEdge<Double>())\n",
                        "                                .from(one)\n",
                        "                                .applyingBelmannFord(new DoubleWeightBaseOperations());\n",
                        "        WeightedPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> actual =\n",
                        "                allVertexPairsShortestPath.findShortestPath(one, three);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test13_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "InMemoryWeightedPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.weight.Monoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "applyingBelmannFord(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/AllVertexPairsShortestPath",
                            "findShortestPath(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>(java.lang.String,java.lang.Double)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "addConnectionInTail(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test13_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "316-358:testFindShortestPathAndVerify_test12_decomposed": {
                    "start": 316,
                    "end": 358,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test12_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex one = new BaseLabeledVertex(\"1\");\n",
                        "        BaseLabeledVertex two = new BaseLabeledVertex(\"2\");\n",
                        "        BaseLabeledVertex three = new BaseLabeledVertex(\"3\");\n",
                        "        BaseLabeledVertex four = new BaseLabeledVertex(\"4\");\n",
                        "        BaseLabeledVertex five = new BaseLabeledVertex(\"5\");\n",
                        "        graph.addVertex(one);\n",
                        "        graph.addVertex(two);\n",
                        "        graph.addVertex(three);\n",
                        "        graph.addVertex(four);\n",
                        "        graph.addVertex(five);\n",
                        "        graph.addEdge(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 2\", 6D), two);\n",
                        "        graph.addEdge(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 4\", 7D), four);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 3\", 5D), three);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 5\", -4D), five);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 4\", 8D), four);\n",
                        "        graph.addEdge(three, new BaseLabeledWeightedEdge<Double>(\"3 -> 2\", -2D), two);\n",
                        "        graph.addEdge(four, new BaseLabeledWeightedEdge<Double>(\"4 -> 3\", -3D), three);\n",
                        "        graph.addEdge(four, new BaseLabeledWeightedEdge<Double>(\"4 -> 5\", 9D), five);\n",
                        "        graph.addEdge(five, new BaseLabeledWeightedEdge<Double>(\"5 -> 3\", 7D), three);\n",
                        "        graph.addEdge(five, new BaseLabeledWeightedEdge<Double>(\"5 -> 1\", 2D), one);\n",
                        "        InMemoryWeightedPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> expected =\n",
                        "                new InMemoryWeightedPath<\n",
                        "                        BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>(\n",
                        "                        one,\n",
                        "                        three,\n",
                        "                        new DoubleWeightBaseOperations(),\n",
                        "                        new BaseWeightedEdge<Double>());\n",
                        "        expected.addConnectionInTail(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 4\", 7D), four);\n",
                        "        expected.addConnectionInTail(\n",
                        "                four, new BaseLabeledWeightedEdge<Double>(\"4 -> 3\", -3D), three);\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(one);\n",
                        "        AllVertexPairsShortestPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>\n",
                        "                allVertexPairsShortestPath =\n",
                        "                        findShortestPath(graph)\n",
                        "                                .whereEdgesHaveWeights(new BaseWeightedEdge<Double>())\n",
                        "                                .from(one)\n",
                        "                                .applyingBelmannFord(new DoubleWeightBaseOperations());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test12_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "InMemoryWeightedPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.weight.Monoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "applyingBelmannFord(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>(java.lang.String,java.lang.Double)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "addConnectionInTail(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test12_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "277-313:testFindShortestPathAndVerify_test11_decomposed": {
                    "start": 277,
                    "end": 313,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test11_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex one = new BaseLabeledVertex(\"1\");\n",
                        "        BaseLabeledVertex two = new BaseLabeledVertex(\"2\");\n",
                        "        BaseLabeledVertex three = new BaseLabeledVertex(\"3\");\n",
                        "        BaseLabeledVertex four = new BaseLabeledVertex(\"4\");\n",
                        "        BaseLabeledVertex five = new BaseLabeledVertex(\"5\");\n",
                        "        graph.addVertex(one);\n",
                        "        graph.addVertex(two);\n",
                        "        graph.addVertex(three);\n",
                        "        graph.addVertex(four);\n",
                        "        graph.addVertex(five);\n",
                        "        graph.addEdge(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 2\", 6D), two);\n",
                        "        graph.addEdge(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 4\", 7D), four);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 3\", 5D), three);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 5\", -4D), five);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 4\", 8D), four);\n",
                        "        graph.addEdge(three, new BaseLabeledWeightedEdge<Double>(\"3 -> 2\", -2D), two);\n",
                        "        graph.addEdge(four, new BaseLabeledWeightedEdge<Double>(\"4 -> 3\", -3D), three);\n",
                        "        graph.addEdge(four, new BaseLabeledWeightedEdge<Double>(\"4 -> 5\", 9D), five);\n",
                        "        graph.addEdge(five, new BaseLabeledWeightedEdge<Double>(\"5 -> 3\", 7D), three);\n",
                        "        graph.addEdge(five, new BaseLabeledWeightedEdge<Double>(\"5 -> 1\", 2D), one);\n",
                        "        InMemoryWeightedPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> expected =\n",
                        "                new InMemoryWeightedPath<\n",
                        "                        BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>(\n",
                        "                        one,\n",
                        "                        three,\n",
                        "                        new DoubleWeightBaseOperations(),\n",
                        "                        new BaseWeightedEdge<Double>());\n",
                        "        expected.addConnectionInTail(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 4\", 7D), four);\n",
                        "        expected.addConnectionInTail(\n",
                        "                four, new BaseLabeledWeightedEdge<Double>(\"4 -> 3\", -3D), three);\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(one);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test11_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "InMemoryWeightedPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.weight.Monoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>(java.lang.String,java.lang.Double)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "addConnectionInTail(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test11_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "239-274:testFindShortestPathAndVerify_test10_decomposed": {
                    "start": 239,
                    "end": 274,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test10_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex one = new BaseLabeledVertex(\"1\");\n",
                        "        BaseLabeledVertex two = new BaseLabeledVertex(\"2\");\n",
                        "        BaseLabeledVertex three = new BaseLabeledVertex(\"3\");\n",
                        "        BaseLabeledVertex four = new BaseLabeledVertex(\"4\");\n",
                        "        BaseLabeledVertex five = new BaseLabeledVertex(\"5\");\n",
                        "        graph.addVertex(one);\n",
                        "        graph.addVertex(two);\n",
                        "        graph.addVertex(three);\n",
                        "        graph.addVertex(four);\n",
                        "        graph.addVertex(five);\n",
                        "        graph.addEdge(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 2\", 6D), two);\n",
                        "        graph.addEdge(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 4\", 7D), four);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 3\", 5D), three);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 5\", -4D), five);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 4\", 8D), four);\n",
                        "        graph.addEdge(three, new BaseLabeledWeightedEdge<Double>(\"3 -> 2\", -2D), two);\n",
                        "        graph.addEdge(four, new BaseLabeledWeightedEdge<Double>(\"4 -> 3\", -3D), three);\n",
                        "        graph.addEdge(four, new BaseLabeledWeightedEdge<Double>(\"4 -> 5\", 9D), five);\n",
                        "        graph.addEdge(five, new BaseLabeledWeightedEdge<Double>(\"5 -> 3\", 7D), three);\n",
                        "        graph.addEdge(five, new BaseLabeledWeightedEdge<Double>(\"5 -> 1\", 2D), one);\n",
                        "        InMemoryWeightedPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> expected =\n",
                        "                new InMemoryWeightedPath<\n",
                        "                        BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>(\n",
                        "                        one,\n",
                        "                        three,\n",
                        "                        new DoubleWeightBaseOperations(),\n",
                        "                        new BaseWeightedEdge<Double>());\n",
                        "        expected.addConnectionInTail(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 4\", 7D), four);\n",
                        "        expected.addConnectionInTail(\n",
                        "                four, new BaseLabeledWeightedEdge<Double>(\"4 -> 3\", -3D), three);\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test10_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "InMemoryWeightedPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.weight.Monoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>(java.lang.String,java.lang.Double)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "addConnectionInTail(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test10_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "202-236:testFindShortestPathAndVerify_test9_decomposed": {
                    "start": 202,
                    "end": 236,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test9_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex one = new BaseLabeledVertex(\"1\");\n",
                        "        BaseLabeledVertex two = new BaseLabeledVertex(\"2\");\n",
                        "        BaseLabeledVertex three = new BaseLabeledVertex(\"3\");\n",
                        "        BaseLabeledVertex four = new BaseLabeledVertex(\"4\");\n",
                        "        BaseLabeledVertex five = new BaseLabeledVertex(\"5\");\n",
                        "        graph.addVertex(one);\n",
                        "        graph.addVertex(two);\n",
                        "        graph.addVertex(three);\n",
                        "        graph.addVertex(four);\n",
                        "        graph.addVertex(five);\n",
                        "        graph.addEdge(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 2\", 6D), two);\n",
                        "        graph.addEdge(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 4\", 7D), four);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 3\", 5D), three);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 5\", -4D), five);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 4\", 8D), four);\n",
                        "        graph.addEdge(three, new BaseLabeledWeightedEdge<Double>(\"3 -> 2\", -2D), two);\n",
                        "        graph.addEdge(four, new BaseLabeledWeightedEdge<Double>(\"4 -> 3\", -3D), three);\n",
                        "        graph.addEdge(four, new BaseLabeledWeightedEdge<Double>(\"4 -> 5\", 9D), five);\n",
                        "        graph.addEdge(five, new BaseLabeledWeightedEdge<Double>(\"5 -> 3\", 7D), three);\n",
                        "        graph.addEdge(five, new BaseLabeledWeightedEdge<Double>(\"5 -> 1\", 2D), one);\n",
                        "        InMemoryWeightedPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> expected =\n",
                        "                new InMemoryWeightedPath<\n",
                        "                        BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>(\n",
                        "                        one,\n",
                        "                        three,\n",
                        "                        new DoubleWeightBaseOperations(),\n",
                        "                        new BaseWeightedEdge<Double>());\n",
                        "        expected.addConnectionInTail(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 4\", 7D), four);\n",
                        "        expected.addConnectionInTail(\n",
                        "                four, new BaseLabeledWeightedEdge<Double>(\"4 -> 3\", -3D), three);\n",
                        "        findShortestPath(graph);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test9_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "InMemoryWeightedPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.weight.Monoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>(java.lang.String,java.lang.Double)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "addConnectionInTail(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test9_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "166-199:testFindShortestPathAndVerify_test8_decomposed": {
                    "start": 166,
                    "end": 199,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test8_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex one = new BaseLabeledVertex(\"1\");\n",
                        "        BaseLabeledVertex two = new BaseLabeledVertex(\"2\");\n",
                        "        BaseLabeledVertex three = new BaseLabeledVertex(\"3\");\n",
                        "        BaseLabeledVertex four = new BaseLabeledVertex(\"4\");\n",
                        "        BaseLabeledVertex five = new BaseLabeledVertex(\"5\");\n",
                        "        graph.addVertex(one);\n",
                        "        graph.addVertex(two);\n",
                        "        graph.addVertex(three);\n",
                        "        graph.addVertex(four);\n",
                        "        graph.addVertex(five);\n",
                        "        graph.addEdge(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 2\", 6D), two);\n",
                        "        graph.addEdge(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 4\", 7D), four);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 3\", 5D), three);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 5\", -4D), five);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 4\", 8D), four);\n",
                        "        graph.addEdge(three, new BaseLabeledWeightedEdge<Double>(\"3 -> 2\", -2D), two);\n",
                        "        graph.addEdge(four, new BaseLabeledWeightedEdge<Double>(\"4 -> 3\", -3D), three);\n",
                        "        graph.addEdge(four, new BaseLabeledWeightedEdge<Double>(\"4 -> 5\", 9D), five);\n",
                        "        graph.addEdge(five, new BaseLabeledWeightedEdge<Double>(\"5 -> 3\", 7D), three);\n",
                        "        graph.addEdge(five, new BaseLabeledWeightedEdge<Double>(\"5 -> 1\", 2D), one);\n",
                        "        InMemoryWeightedPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> expected =\n",
                        "                new InMemoryWeightedPath<\n",
                        "                        BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>(\n",
                        "                        one,\n",
                        "                        three,\n",
                        "                        new DoubleWeightBaseOperations(),\n",
                        "                        new BaseWeightedEdge<Double>());\n",
                        "        expected.addConnectionInTail(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 4\", 7D), four);\n",
                        "        expected.addConnectionInTail(\n",
                        "                four, new BaseLabeledWeightedEdge<Double>(\"4 -> 3\", -3D), three);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "InMemoryWeightedPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.weight.Monoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>(java.lang.String,java.lang.Double)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "addConnectionInTail(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test8_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "132-163:testFindShortestPathAndVerify_test7_decomposed": {
                    "start": 132,
                    "end": 163,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test7_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex one = new BaseLabeledVertex(\"1\");\n",
                        "        BaseLabeledVertex two = new BaseLabeledVertex(\"2\");\n",
                        "        BaseLabeledVertex three = new BaseLabeledVertex(\"3\");\n",
                        "        BaseLabeledVertex four = new BaseLabeledVertex(\"4\");\n",
                        "        BaseLabeledVertex five = new BaseLabeledVertex(\"5\");\n",
                        "        graph.addVertex(one);\n",
                        "        graph.addVertex(two);\n",
                        "        graph.addVertex(three);\n",
                        "        graph.addVertex(four);\n",
                        "        graph.addVertex(five);\n",
                        "        graph.addEdge(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 2\", 6D), two);\n",
                        "        graph.addEdge(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 4\", 7D), four);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 3\", 5D), three);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 5\", -4D), five);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 4\", 8D), four);\n",
                        "        graph.addEdge(three, new BaseLabeledWeightedEdge<Double>(\"3 -> 2\", -2D), two);\n",
                        "        graph.addEdge(four, new BaseLabeledWeightedEdge<Double>(\"4 -> 3\", -3D), three);\n",
                        "        graph.addEdge(four, new BaseLabeledWeightedEdge<Double>(\"4 -> 5\", 9D), five);\n",
                        "        graph.addEdge(five, new BaseLabeledWeightedEdge<Double>(\"5 -> 3\", 7D), three);\n",
                        "        graph.addEdge(five, new BaseLabeledWeightedEdge<Double>(\"5 -> 1\", 2D), one);\n",
                        "        InMemoryWeightedPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> expected =\n",
                        "                new InMemoryWeightedPath<\n",
                        "                        BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>(\n",
                        "                        one,\n",
                        "                        three,\n",
                        "                        new DoubleWeightBaseOperations(),\n",
                        "                        new BaseWeightedEdge<Double>());\n",
                        "        expected.addConnectionInTail(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 4\", 7D), four);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "InMemoryWeightedPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.weight.Monoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>(java.lang.String,java.lang.Double)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "addConnectionInTail(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test7_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "106-129:testFindShortestPathAndVerify_test6_decomposed": {
                    "start": 106,
                    "end": 129,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test6_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex one = new BaseLabeledVertex(\"1\");\n",
                        "        BaseLabeledVertex two = new BaseLabeledVertex(\"2\");\n",
                        "        BaseLabeledVertex three = new BaseLabeledVertex(\"3\");\n",
                        "        BaseLabeledVertex four = new BaseLabeledVertex(\"4\");\n",
                        "        BaseLabeledVertex five = new BaseLabeledVertex(\"5\");\n",
                        "        graph.addVertex(one);\n",
                        "        graph.addVertex(two);\n",
                        "        graph.addVertex(three);\n",
                        "        graph.addVertex(four);\n",
                        "        graph.addVertex(five);\n",
                        "        graph.addEdge(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 2\", 6D), two);\n",
                        "        graph.addEdge(one, new BaseLabeledWeightedEdge<Double>(\"1 -> 4\", 7D), four);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 3\", 5D), three);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 5\", -4D), five);\n",
                        "        graph.addEdge(two, new BaseLabeledWeightedEdge<Double>(\"2 -> 4\", 8D), four);\n",
                        "        graph.addEdge(three, new BaseLabeledWeightedEdge<Double>(\"3 -> 2\", -2D), two);\n",
                        "        graph.addEdge(four, new BaseLabeledWeightedEdge<Double>(\"4 -> 3\", -3D), three);\n",
                        "        graph.addEdge(four, new BaseLabeledWeightedEdge<Double>(\"4 -> 5\", 9D), five);\n",
                        "        graph.addEdge(five, new BaseLabeledWeightedEdge<Double>(\"5 -> 3\", 7D), three);\n",
                        "        graph.addEdge(five, new BaseLabeledWeightedEdge<Double>(\"5 -> 1\", 2D), one);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>(java.lang.String,java.lang.Double)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test6_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "90-103:testFindShortestPathAndVerify_test5_decomposed": {
                    "start": 90,
                    "end": 103,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test5_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex one = new BaseLabeledVertex(\"1\");\n",
                        "        BaseLabeledVertex two = new BaseLabeledVertex(\"2\");\n",
                        "        BaseLabeledVertex three = new BaseLabeledVertex(\"3\");\n",
                        "        BaseLabeledVertex four = new BaseLabeledVertex(\"4\");\n",
                        "        BaseLabeledVertex five = new BaseLabeledVertex(\"5\");\n",
                        "        graph.addVertex(one);\n",
                        "        graph.addVertex(two);\n",
                        "        graph.addVertex(three);\n",
                        "        graph.addVertex(four);\n",
                        "        graph.addVertex(five);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test5_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "79-87:testFindShortestPathAndVerify_test4_decomposed": {
                    "start": 79,
                    "end": 87,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test4_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex one = new BaseLabeledVertex(\"1\");\n",
                        "        BaseLabeledVertex two = new BaseLabeledVertex(\"2\");\n",
                        "        BaseLabeledVertex three = new BaseLabeledVertex(\"3\");\n",
                        "        BaseLabeledVertex four = new BaseLabeledVertex(\"4\");\n",
                        "        BaseLabeledVertex five = new BaseLabeledVertex(\"5\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "69-76:testFindShortestPathAndVerify_test3_decomposed": {
                    "start": 69,
                    "end": 76,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test3_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex one = new BaseLabeledVertex(\"1\");\n",
                        "        BaseLabeledVertex two = new BaseLabeledVertex(\"2\");\n",
                        "        BaseLabeledVertex three = new BaseLabeledVertex(\"3\");\n",
                        "        BaseLabeledVertex four = new BaseLabeledVertex(\"4\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "60-66:testFindShortestPathAndVerify_test2_decomposed": {
                    "start": 60,
                    "end": 66,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test2_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex one = new BaseLabeledVertex(\"1\");\n",
                        "        BaseLabeledVertex two = new BaseLabeledVertex(\"2\");\n",
                        "        BaseLabeledVertex three = new BaseLabeledVertex(\"3\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "52-57:testFindShortestPathAndVerify_test1_decomposed": {
                    "start": 52,
                    "end": 57,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test1_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex one = new BaseLabeledVertex(\"1\");\n",
                        "        BaseLabeledVertex two = new BaseLabeledVertex(\"2\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "45-49:testFindShortestPathAndVerify_test0_decomposed": {
                    "start": 45,
                    "end": 49,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test0_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex one = new BaseLabeledVertex(\"1\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {},
            "is_enum": false,
            "python_class_declaration": "class BellmannFordTestCase(unittest.TestCase):\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import unittest",
        "import pytest",
        "import pathlib",
        "import io",
        "import os",
        "import unittest",
        "from src.main.org.apache.commons.graph.CommonsGraph import *",
        "from src.main.org.apache.commons.graph.Graph import *",
        "from src.main.org.apache.commons.graph.Mapper import *",
        "from src.main.org.apache.commons.graph.WeightedPath import *",
        "from src.test.org.apache.commons.graph.model.BaseLabeledVertex import *",
        "from src.test.org.apache.commons.graph.model.BaseLabeledWeightedEdge import *",
        "from src.test.org.apache.commons.graph.model.BaseWeightedEdge import *",
        "from src.main.org.apache.commons.graph.model.DirectedMutableGraph import *",
        "from src.main.org.apache.commons.graph.model.InMemoryWeightedPath import *",
        "from src.main.org.apache.commons.graph.model.UndirectedMutableGraph import *",
        "from src.main.org.apache.commons.graph.shortestpath.AllVertexPairsShortestPath import *",
        "from src.main.org.apache.commons.graph.shortestpath.PathNotFoundException import *",
        "from src.main.org.apache.commons.graph.shortestpath.PathSourceSelector import *",
        "from src.main.org.apache.commons.graph.shortestpath.PathWeightedEdgesBuilder import *",
        "from src.main.org.apache.commons.graph.shortestpath.TargetSourceSelector import *",
        "from src.main.org.apache.commons.graph.weight.Monoid import *",
        "from src.main.org.apache.commons.graph.weight.OrderedMonoid import *",
        "from src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations import *"
    ]
}