{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/differential/IntegratedVariableByte.java",
    "imports": {
        "11-11:import IntBuffer": {
            "start": 11,
            "end": 11,
            "body": [
                "import java.nio.IntBuffer;\n"
            ]
        },
        "9-9:import ByteBuffer": {
            "start": 9,
            "end": 9,
            "body": [
                "import java.nio.ByteBuffer;\n"
            ]
        },
        "10-10:import ByteOrder": {
            "start": 10,
            "end": 10,
            "body": [
                "import java.nio.ByteOrder;\n"
            ]
        },
        "13-13:import IntWrapper": {
            "start": 13,
            "end": 13,
            "body": [
                "import me.lemire.integercompression.IntWrapper;\n"
            ]
        }
    },
    "classes": {
        "IntegratedVariableByte": {
            "start": 24,
            "end": 25,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [
                "IntegratedByteIntegerCODEC",
                "IntegratedIntegerCODEC",
                "SkippableIntegratedIntegerCODEC"
            ],
            "extends": [],
            "methods": {
                "228-258:headlessUncompress": {
                    "start": 228,
                    "end": 258,
                    "body": [
                        "    public void headlessUncompress(int[] in, IntWrapper inpos, int inlength,\n",
                        "            int[] out, IntWrapper outpos, int num, IntWrapper initvalue) {\n",
                        "        int s = 0;\n",
                        "        int val = 0;\n",
                        "\n",
                        "        int p = inpos.get();\n",
                        "        int initoffset = initvalue.get();\n",
                        "        int tmpoutpos = outpos.get();\n",
                        "        int finaloutpos = num + tmpoutpos;\n",
                        "        for (int v = 0, shift = 0; tmpoutpos < finaloutpos;) {\n",
                        "\n",
                        "            val = in[p];\n",
                        "            int c = (byte) (val >>> s);\n",
                        "            s += 8;\n",
                        "            p += s>>5;\n",
                        "            s = s & 31;\n",
                        "            v += ((c & 127) << shift);\n",
                        "\n",
                        "            if ((c & 128) == 128) {\n",
                        "\n",
                        "                out[tmpoutpos++] = (initoffset = initoffset + v);\n",
                        "                v = 0;\n",
                        "                shift = 0;\n",
                        "            } else\n",
                        "                shift += 7;\n",
                        "        }\n",
                        "        initvalue.set(out[tmpoutpos-1]);\n",
                        "        outpos.set(tmpoutpos);\n",
                        "\n",
                        "        inpos.set(p + (s!=0 ? 1 : 0));        \n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessUncompress(int[], IntWrapper, int, int[], IntWrapper, int, IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos",
                        "num",
                        "initvalue"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "89-91:set"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def headlessUncompress(self, in_: typing.List[int], inpos: IntWrapper, inlength: int, out: typing.List[int], outpos: IntWrapper, num: int, initvalue: IntWrapper) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "184-225:headlessCompress": {
                    "start": 184,
                    "end": 225,
                    "body": [
                        "    public void headlessCompress(int[] in, IntWrapper inpos, int inlength,\n",
                        "            int[] out, IntWrapper outpos, IntWrapper initvalue) {\n",
                        "        if (inlength == 0)\n",
                        "            return;\n",
                        "        int initoffset = initvalue.get();\n",
                        "        initvalue.set(in[inpos.get()+inlength -1]);\n",
                        "        ByteBuffer buf = makeBuffer(inlength * 8);\n",
                        "        buf.order(ByteOrder.LITTLE_ENDIAN);\n",
                        "        for (int k = inpos.get(); k < inpos.get() + inlength; ++k) {\n",
                        "            final long val = (in[k] - initoffset) & 0xFFFFFFFFL;  // To be consistent with unsigned integers in C/C++\n",
                        "            initoffset = in[k];\n",
                        "            if (val < (1 << 7)) {\n",
                        "                buf.put((byte) (val | (1 << 7)));\n",
                        "            } else if (val < (1 << 14)) {\n",
                        "                buf.put((byte) extract7bits(0, val));\n",
                        "                buf.put((byte) (extract7bitsmaskless(1, (val)) | (1 << 7)));\n",
                        "            } else if (val < (1 << 21)) {\n",
                        "                buf.put((byte) extract7bits(0, val));\n",
                        "                buf.put((byte) extract7bits(1, val));\n",
                        "                buf.put((byte) (extract7bitsmaskless(2, (val)) | (1 << 7)));\n",
                        "            } else if (val < (1 << 28)) {\n",
                        "                buf.put((byte) extract7bits(0, val));\n",
                        "                buf.put((byte) extract7bits(1, val));\n",
                        "                buf.put((byte) extract7bits(2, val));\n",
                        "                buf.put((byte) (extract7bitsmaskless(3, (val)) | (1 << 7)));\n",
                        "            } else {\n",
                        "                buf.put((byte) extract7bits(0, val));\n",
                        "                buf.put((byte) extract7bits(1, val));\n",
                        "                buf.put((byte) extract7bits(2, val));\n",
                        "                buf.put((byte) extract7bits(3, val));\n",
                        "                buf.put((byte) (extract7bitsmaskless(4, (val)) | (1 << 7)));\n",
                        "            }\n",
                        "        }\n",
                        "        while (buf.position() % 4 != 0)\n",
                        "            buf.put((byte) 0);\n",
                        "        final int length = buf.position();\n",
                        "        buf.flip();\n",
                        "        IntBuffer ibuf = buf.asIntBuffer();\n",
                        "        ibuf.get(out, outpos.get(), length / 4);\n",
                        "        outpos.add(length / 4);\n",
                        "        inpos.add(inlength);        \n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessCompress(int[], IntWrapper, int, int[], IntWrapper, IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos",
                        "initvalue"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "267-269:makeBuffer"
                        ],
                        [
                            "library",
                            "java.base/java/nio/Buffer",
                            "position()"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "asIntBuffer()"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "89-91:set"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "order(java.nio.ByteOrder)"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "put(byte)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "27-29:extract7bits"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "31-33:extract7bitsmaskless"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "flip()"
                        ],
                        [
                            "library",
                            "java.base/java/nio/IntBuffer",
                            "get(int[],int,int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "45-47:add"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def headlessCompress(self, in_: typing.List[int], inpos: IntWrapper, inlength: int, out: typing.List[int], outpos: IntWrapper, initvalue: IntWrapper) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "179-181:toString": {
                    "start": 179,
                    "end": 181,
                    "body": [
                        "    public String toString() {\n",
                        "        return this.getClass().getSimpleName();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "toString()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "getSimpleName()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "getClass()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def toString(self) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "144-176:uncompress1": {
                    "start": 144,
                    "end": 176,
                    "body": [
                        "    public void uncompress1(byte[] in, IntWrapper inpos, int inlength,\n",
                        "                            int[] out, IntWrapper outpos) {\n",
                        "        int p = inpos.get();\n",
                        "        int initoffset = 0;\n",
                        "        int finalp = inpos.get() + inlength;\n",
                        "        int tmpoutpos = outpos.get();\n",
                        "        for (int v = 0;p < finalp; out[tmpoutpos++] = (initoffset = initoffset + v)) {\n",
                        "            v = in[p] & 0x7F;\n",
                        "            if (in[p] < 0 ) {\n",
                        "                p+= 1;\n",
                        "                continue;\n",
                        "            }\n",
                        "            v = ((in[p+1] & 0x7F)<<7) | v; \n",
                        "            if (in[p+1] < 0) {\n",
                        "                p+= 2;\n",
                        "                continue;\n",
                        "            }\n",
                        "            v = ((in[p+2] & 0x7F)<<14) | v;\n",
                        "            if (in[p+2] < 0) {\n",
                        "                p+= 3;\n",
                        "                continue;\n",
                        "            }\n",
                        "            v = ((in[p+3] & 0x7F)<<21) | v;\n",
                        "            if (in[p+3] < 0) {\n",
                        "                p+= 4;\n",
                        "                continue;\n",
                        "            }\n",
                        "            v = ((in[p+4] & 0x7F)<<28) | v;\n",
                        "            p+= 5;                \n",
                        "        }\n",
                        "        outpos.set(tmpoutpos);\n",
                        "        inpos.add(p);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "uncompress1(byte[], IntWrapper, int, int[], IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "89-91:set"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "45-47:add"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def uncompress1(self, in_: typing.List[int], inpos: IntWrapper, inlength: int, out: typing.List[int], outpos: IntWrapper) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "115-141:uncompress0": {
                    "start": 115,
                    "end": 141,
                    "body": [
                        "    public void uncompress0(int[] in, IntWrapper inpos, int inlength,\n",
                        "                            int[] out, IntWrapper outpos) {\n",
                        "        int s = 0;\n",
                        "        int val = 0;\n",
                        "        int p = inpos.get();\n",
                        "        int finalp = inpos.get() + inlength;\n",
                        "        int tmpoutpos = outpos.get();                \n",
                        "        int initoffset = 0;\n",
                        "        for (int v = 0, shift =0; p < finalp;) {\n",
                        "            val = in[p];\n",
                        "            int c = (byte) (val >>> s);\n",
                        "            s += 8;\n",
                        "            p += s>>5;\n",
                        "            s = s & 31;\n",
                        "            v += ((c & 127) << shift);\n",
                        "            if ((c & 128) == 128) {\n",
                        "                out[tmpoutpos] = v + initoffset;\n",
                        "                initoffset = out[tmpoutpos];\n",
                        "                tmpoutpos++;\n",
                        "                v = 0;\n",
                        "                shift = 0;\n",
                        "            } else \n",
                        "                shift +=7;\n",
                        "        }\n",
                        "        outpos.set(tmpoutpos);\n",
                        "        inpos.add(inlength);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "uncompress0(int[], IntWrapper, int, int[], IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "89-91:set"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "45-47:add"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def uncompress0(self, in_: typing.List[int], inpos: IntWrapper, inlength: int, out: typing.List[int], outpos: IntWrapper) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "79-112:compress1": {
                    "start": 79,
                    "end": 112,
                    "body": [
                        "    public void compress1(int[] in, IntWrapper inpos, int inlength,\n",
                        "                          byte[] out, IntWrapper outpos) {\n",
                        "        if (inlength == 0)\n",
                        "            return;\n",
                        "        int initoffset = 0;\n",
                        "        int outpostmp = outpos.get();\n",
                        "        for (int k = inpos.get(); k < inpos.get() + inlength; ++k) {\n",
                        "            final long val = (in[k] - initoffset) & 0xFFFFFFFFL;  // To be consistent with unsigned integers in C/C++\n",
                        "            initoffset = in[k];\n",
                        "            if (val < (1 << 7)) {\n",
                        "                out[outpostmp++] = (byte)(val | (1 << 7));\n",
                        "            } else if (val < (1 << 14)) {\n",
                        "                out[outpostmp++] = (byte)extract7bits(0, val);\n",
                        "                out[outpostmp++] = (byte)(extract7bitsmaskless(1, (val)) | (1 << 7));\n",
                        "            } else if (val < (1 << 21)) {\n",
                        "                out[outpostmp++] = (byte)extract7bits(0, val);\n",
                        "                out[outpostmp++] = (byte)extract7bits(1, val);\n",
                        "                out[outpostmp++] = (byte)(extract7bitsmaskless(2, (val)) | (1 << 7));\n",
                        "            } else if (val < (1 << 28)) {\n",
                        "                out[outpostmp++] = (byte)extract7bits(0, val);\n",
                        "                out[outpostmp++] = (byte)extract7bits(1, val);\n",
                        "                out[outpostmp++] = (byte)extract7bits(2, val);\n",
                        "                out[outpostmp++] = (byte)(extract7bitsmaskless(3, (val)) | (1 << 7));\n",
                        "            } else {\n",
                        "                out[outpostmp++] = (byte)extract7bits(0, val);\n",
                        "                out[outpostmp++] = (byte)extract7bits(1, val);\n",
                        "                out[outpostmp++] = (byte)extract7bits(2, val);\n",
                        "                out[outpostmp++] = (byte)extract7bits(3, val);\n",
                        "                out[outpostmp++] = (byte)(extract7bitsmaskless(4, (val)) | (1 << 7));\n",
                        "            }\n",
                        "        }\n",
                        "        outpos.set(outpostmp);\n",
                        "        inpos.add(inlength);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "compress1(int[], IntWrapper, int, byte[], IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "27-29:extract7bits"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "31-33:extract7bitsmaskless"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "89-91:set"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "45-47:add"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def compress1(self, in_: typing.List[int], inpos: IntWrapper, inlength: int, out: typing.List[int], outpos: IntWrapper) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "36-76:compress0": {
                    "start": 36,
                    "end": 76,
                    "body": [
                        "    public void compress0(int[] in, IntWrapper inpos, int inlength,\n",
                        "                          int[] out, IntWrapper outpos) {\n",
                        "        if (inlength == 0)\n",
                        "            return;\n",
                        "        int initoffset = 0;\n",
                        "        ByteBuffer buf = makeBuffer(inlength * 8);\n",
                        "        buf.order(ByteOrder.LITTLE_ENDIAN);\n",
                        "        for (int k = inpos.get(); k < inpos.get() + inlength; ++k) {\n",
                        "            final long val = (in[k] - initoffset) & 0xFFFFFFFFL; // To be consistent with unsigned integers in C/C++\n",
                        "            initoffset = in[k];\n",
                        "            if (val < (1 << 7)) {\n",
                        "                buf.put((byte)(val | (1 << 7)));\n",
                        "            } else if (val < (1 << 14)) {\n",
                        "                buf.put((byte)extract7bits(0, val));\n",
                        "                buf.put((byte)(extract7bitsmaskless(1, (val)) | (1 << 7)));\n",
                        "            } else if (val < (1 << 21)) {\n",
                        "                buf.put((byte)extract7bits(0, val));\n",
                        "                buf.put((byte)extract7bits(1, val));\n",
                        "                buf.put((byte)(extract7bitsmaskless(2, (val)) | (1 << 7)));\n",
                        "            } else if (val < (1 << 28)) {\n",
                        "                buf.put((byte)extract7bits(0, val));\n",
                        "                buf.put((byte)extract7bits(1, val));\n",
                        "                buf.put((byte)extract7bits(2, val));\n",
                        "                buf.put((byte)(extract7bitsmaskless(3, (val)) | (1 << 7)));\n",
                        "            } else {\n",
                        "                buf.put((byte)extract7bits(0, val));\n",
                        "                buf.put((byte)extract7bits(1, val));\n",
                        "                buf.put((byte)extract7bits(2, val));\n",
                        "                buf.put((byte)extract7bits(3, val));\n",
                        "                buf.put((byte)(extract7bitsmaskless(4, (val)) | (1 << 7)));\n",
                        "            }\n",
                        "        }\n",
                        "        while (buf.position() % 4 != 0)\n",
                        "            buf.put((byte) 0);\n",
                        "        final int length = buf.position();\n",
                        "        buf.flip();\n",
                        "        IntBuffer ibuf = buf.asIntBuffer();\n",
                        "        ibuf.get(out, outpos.get(), length / 4);\n",
                        "        outpos.add(length / 4);\n",
                        "        inpos.add(inlength);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "compress0(int[], IntWrapper, int, int[], IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "267-269:makeBuffer"
                        ],
                        [
                            "library",
                            "java.base/java/nio/Buffer",
                            "position()"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "asIntBuffer()"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "order(java.nio.ByteOrder)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "put(byte)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "27-29:extract7bits"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "31-33:extract7bitsmaskless"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "flip()"
                        ],
                        [
                            "library",
                            "java.base/java/nio/IntBuffer",
                            "get(int[],int,int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "45-47:add"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def compress0(self, in_: typing.List[int], inpos: IntWrapper, inlength: int, out: typing.List[int], outpos: IntWrapper) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "267-269:makeBuffer": {
                    "start": 267,
                    "end": 269,
                    "body": [
                        "    protected ByteBuffer makeBuffer(int sizeInBytes) {\n",
                        "        return ByteBuffer.allocateDirect(sizeInBytes);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "ByteBuffer",
                            "java.nio.ByteBuffer"
                        ]
                    ],
                    "signature": "makeBuffer(int)",
                    "parameters": [
                        "sizeInBytes"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "allocateDirect(int)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def _makeBuffer(self, sizeInBytes: int) -> typing.Union[bytearray, memoryview]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "31-33:extract7bitsmaskless": {
                    "start": 31,
                    "end": 33,
                    "body": [
                        "    private static  byte extract7bitsmaskless(int i, long val) {\n",
                        "        return (byte)((val >> (7 * i)));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "byte",
                            "byte"
                        ]
                    ],
                    "signature": "extract7bitsmaskless(int, long)",
                    "parameters": [
                        "i",
                        "val"
                    ],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __extract7bitsmaskless(i: int, val: int) -> int:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "27-29:extract7bits": {
                    "start": 27,
                    "end": 29,
                    "body": [
                        "    private static byte extract7bits(int i, long val) {\n",
                        "        return (byte)((val >> (7 * i)) & ((1 << 7) - 1));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "byte",
                            "byte"
                        ]
                    ],
                    "signature": "extract7bits(int, long)",
                    "parameters": [
                        "i",
                        "val"
                    ],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __extract7bits(i: int, val: int) -> int:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {},
            "is_enum": false,
            "python_class_declaration": "class IntegratedVariableByte(IntegratedByteIntegerCODEC, IntegratedIntegerCODEC, SkippableIntegratedIntegerCODEC):\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import io",
        "import typing\nfrom typing import *",
        "import os",
        "from src.main.me.lemire.integercompression.IntWrapper import *",
        "from src.main.me.lemire.integercompression.differential.IntegratedByteIntegerCODEC import *",
        "from src.main.me.lemire.integercompression.differential.IntegratedIntegerCODEC import *",
        "from src.main.me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC import *"
    ]
}