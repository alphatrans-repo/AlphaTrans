{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-codec/src/test/java/org/apache/commons/codec/binary/Base16Test.java",
    "imports": {
        "32-32:import Charset": {
            "start": 32,
            "end": 32,
            "body": [
                "import java.nio.charset.Charset;\n"
            ]
        },
        "34-34:import Random": {
            "start": 34,
            "end": 34,
            "body": [
                "import java.util.Random;\n"
            ]
        },
        "33-33:import StandardCharsets": {
            "start": 33,
            "end": 33,
            "body": [
                "import java.nio.charset.StandardCharsets;\n"
            ]
        },
        "28-28:import DecoderException": {
            "start": 28,
            "end": 28,
            "body": [
                "import org.apache.commons.codec.DecoderException;\n"
            ]
        },
        "29-29:import EncoderException": {
            "start": 29,
            "end": 29,
            "body": [
                "import org.apache.commons.codec.EncoderException;\n"
            ]
        },
        "30-30:import Test": {
            "start": 30,
            "end": 30,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "27-27:import CodecPolicy": {
            "start": 27,
            "end": 27,
            "body": [
                "import org.apache.commons.codec.CodecPolicy;\n"
            ]
        },
        "25-25:import static Assert.fail": {
            "start": 25,
            "end": 25,
            "body": [
                "import static org.junit.Assert.fail;\n"
            ]
        },
        "21-21:import static Assert.assertEquals": {
            "start": 21,
            "end": 21,
            "body": [
                "import static org.junit.Assert.assertEquals;\n"
            ]
        },
        "23-23:import static Assert.assertNull": {
            "start": 23,
            "end": 23,
            "body": [
                "import static org.junit.Assert.assertNull;\n"
            ]
        },
        "20-20:import static Assert.assertArrayEquals": {
            "start": 20,
            "end": 20,
            "body": [
                "import static org.junit.Assert.assertArrayEquals;\n"
            ]
        },
        "22-22:import static Assert.assertFalse": {
            "start": 22,
            "end": 22,
            "body": [
                "import static org.junit.Assert.assertFalse;\n"
            ]
        },
        "24-24:import static Assert.assertTrue": {
            "start": 24,
            "end": 24,
            "body": [
                "import static org.junit.Assert.assertTrue;\n"
            ]
        }
    },
    "classes": {
        "Base16Test": {
            "start": 41,
            "end": 41,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "28194-28202:testLenientDecoding_test4_decomposed": {
                    "start": 28194,
                    "end": 28202,
                    "body": [
                        "    public void testLenientDecoding_test4_decomposed()  {\n",
                        "        final String encoded =\n",
                        "                \"aabbccdde\";\n",
                        "        final Base16 b16 = new Base16(true, CodecPolicy.LENIENT);\n",
                        "        assertEquals(CodecPolicy.LENIENT, b16.getCodecPolicy());\n",
                        "        StringUtils.getBytesUtf8(encoded);\n",
                        "        final byte[] decoded = b16.decode0(StringUtils.getBytesUtf8(encoded));\n",
                        "        assertArrayEquals(new byte[] {(byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd}, decoded);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testLenientDecoding_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "265-280:Base16"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "567-569:getCodecPolicy"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(byte[],byte[])"
                        ]
                    ]
                },
                "28184-28191:testLenientDecoding_test3_decomposed": {
                    "start": 28184,
                    "end": 28191,
                    "body": [
                        "    public void testLenientDecoding_test3_decomposed()  {\n",
                        "        final String encoded =\n",
                        "                \"aabbccdde\";\n",
                        "        final Base16 b16 = new Base16(true, CodecPolicy.LENIENT);\n",
                        "        assertEquals(CodecPolicy.LENIENT, b16.getCodecPolicy());\n",
                        "        StringUtils.getBytesUtf8(encoded);\n",
                        "        final byte[] decoded = b16.decode0(StringUtils.getBytesUtf8(encoded));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testLenientDecoding_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "265-280:Base16"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "567-569:getCodecPolicy"
                        ]
                    ]
                },
                "28175-28181:testLenientDecoding_test2_decomposed": {
                    "start": 28175,
                    "end": 28181,
                    "body": [
                        "    public void testLenientDecoding_test2_decomposed()  {\n",
                        "        final String encoded =\n",
                        "                \"aabbccdde\";\n",
                        "        final Base16 b16 = new Base16(true, CodecPolicy.LENIENT);\n",
                        "        assertEquals(CodecPolicy.LENIENT, b16.getCodecPolicy());\n",
                        "        StringUtils.getBytesUtf8(encoded);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testLenientDecoding_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "265-280:Base16"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "567-569:getCodecPolicy"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ]
                    ]
                },
                "28167-28172:testLenientDecoding_test1_decomposed": {
                    "start": 28167,
                    "end": 28172,
                    "body": [
                        "    public void testLenientDecoding_test1_decomposed()  {\n",
                        "        final String encoded =\n",
                        "                \"aabbccdde\";\n",
                        "        final Base16 b16 = new Base16(true, CodecPolicy.LENIENT);\n",
                        "        assertEquals(CodecPolicy.LENIENT, b16.getCodecPolicy());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testLenientDecoding_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "265-280:Base16"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "567-569:getCodecPolicy"
                        ]
                    ]
                },
                "28160-28164:testLenientDecoding_test0_decomposed": {
                    "start": 28160,
                    "end": 28164,
                    "body": [
                        "    public void testLenientDecoding_test0_decomposed()  {\n",
                        "        final String encoded =\n",
                        "                \"aabbccdde\";\n",
                        "        final Base16 b16 = new Base16(true, CodecPolicy.LENIENT);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testLenientDecoding_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "265-280:Base16"
                        ]
                    ]
                },
                "28150-28157:testStrictDecoding_test3_decomposed": {
                    "start": 28150,
                    "end": 28157,
                    "body": [
                        "    public void testStrictDecoding_test3_decomposed()  {\n",
                        "        final String encoded =\n",
                        "                \"aabbccdde\";\n",
                        "        final Base16 b16 = new Base16(true, CodecPolicy.STRICT);\n",
                        "        assertEquals(CodecPolicy.STRICT, b16.getCodecPolicy());\n",
                        "        StringUtils.getBytesUtf8(encoded);\n",
                        "        b16.decode0(StringUtils.getBytesUtf8(encoded));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = IllegalArgumentException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStrictDecoding_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "265-280:Base16"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "567-569:getCodecPolicy"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "28141-28147:testStrictDecoding_test2_decomposed": {
                    "start": 28141,
                    "end": 28147,
                    "body": [
                        "    public void testStrictDecoding_test2_decomposed()  {\n",
                        "        final String encoded =\n",
                        "                \"aabbccdde\";\n",
                        "        final Base16 b16 = new Base16(true, CodecPolicy.STRICT);\n",
                        "        assertEquals(CodecPolicy.STRICT, b16.getCodecPolicy());\n",
                        "        StringUtils.getBytesUtf8(encoded);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStrictDecoding_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "265-280:Base16"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "567-569:getCodecPolicy"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ]
                    ]
                },
                "28133-28138:testStrictDecoding_test1_decomposed": {
                    "start": 28133,
                    "end": 28138,
                    "body": [
                        "    public void testStrictDecoding_test1_decomposed()  {\n",
                        "        final String encoded =\n",
                        "                \"aabbccdde\";\n",
                        "        final Base16 b16 = new Base16(true, CodecPolicy.STRICT);\n",
                        "        assertEquals(CodecPolicy.STRICT, b16.getCodecPolicy());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStrictDecoding_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "265-280:Base16"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "567-569:getCodecPolicy"
                        ]
                    ]
                },
                "28126-28130:testStrictDecoding_test0_decomposed": {
                    "start": 28126,
                    "end": 28130,
                    "body": [
                        "    public void testStrictDecoding_test0_decomposed()  {\n",
                        "        final String encoded =\n",
                        "                \"aabbccdde\";\n",
                        "        final Base16 b16 = new Base16(true, CodecPolicy.STRICT);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStrictDecoding_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "265-280:Base16"
                        ]
                    ]
                },
                "28109-28123:testDecodeSingleBytesOptimisation_test6_decomposed": {
                    "start": 28109,
                    "end": 28123,
                    "body": [
                        "    public void testDecodeSingleBytesOptimisation_test6_decomposed()  {\n",
                        "        final BaseNCodec.Context context = new BaseNCodec.Context();\n",
                        "        assertEquals(0, context.ibitWorkArea);\n",
                        "        assertNull(context.buffer);\n",
                        "        final byte[] data = new byte[1];\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "        data[0] = (byte) 'E';\n",
                        "        b16.decode1(data, 0, 1, context);\n",
                        "        assertEquals(15, context.ibitWorkArea);\n",
                        "        assertNull(context.buffer);\n",
                        "        data[0] = (byte) 'F';\n",
                        "        b16.decode1(data, 0, 1, context);\n",
                        "        assertEquals(0, context.ibitWorkArea);\n",
                        "        assertEquals((byte) 0xEF, context.buffer[0]);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testDecodeSingleBytesOptimisation_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "303-347:decode1"
                        ]
                    ]
                },
                "28094-28106:testDecodeSingleBytesOptimisation_test5_decomposed": {
                    "start": 28094,
                    "end": 28106,
                    "body": [
                        "    public void testDecodeSingleBytesOptimisation_test5_decomposed()  {\n",
                        "        final BaseNCodec.Context context = new BaseNCodec.Context();\n",
                        "        assertEquals(0, context.ibitWorkArea);\n",
                        "        assertNull(context.buffer);\n",
                        "        final byte[] data = new byte[1];\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "        data[0] = (byte) 'E';\n",
                        "        b16.decode1(data, 0, 1, context);\n",
                        "        assertEquals(15, context.ibitWorkArea);\n",
                        "        assertNull(context.buffer);\n",
                        "        data[0] = (byte) 'F';\n",
                        "        b16.decode1(data, 0, 1, context);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testDecodeSingleBytesOptimisation_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "303-347:decode1"
                        ]
                    ]
                },
                "28081-28091:testDecodeSingleBytesOptimisation_test4_decomposed": {
                    "start": 28081,
                    "end": 28091,
                    "body": [
                        "    public void testDecodeSingleBytesOptimisation_test4_decomposed()  {\n",
                        "        final BaseNCodec.Context context = new BaseNCodec.Context();\n",
                        "        assertEquals(0, context.ibitWorkArea);\n",
                        "        assertNull(context.buffer);\n",
                        "        final byte[] data = new byte[1];\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "        data[0] = (byte) 'E';\n",
                        "        b16.decode1(data, 0, 1, context);\n",
                        "        assertEquals(15, context.ibitWorkArea);\n",
                        "        assertNull(context.buffer);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testDecodeSingleBytesOptimisation_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "303-347:decode1"
                        ]
                    ]
                },
                "28070-28078:testDecodeSingleBytesOptimisation_test3_decomposed": {
                    "start": 28070,
                    "end": 28078,
                    "body": [
                        "    public void testDecodeSingleBytesOptimisation_test3_decomposed()  {\n",
                        "        final BaseNCodec.Context context = new BaseNCodec.Context();\n",
                        "        assertEquals(0, context.ibitWorkArea);\n",
                        "        assertNull(context.buffer);\n",
                        "        final byte[] data = new byte[1];\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "        data[0] = (byte) 'E';\n",
                        "        b16.decode1(data, 0, 1, context);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testDecodeSingleBytesOptimisation_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "303-347:decode1"
                        ]
                    ]
                },
                "28061-28067:testDecodeSingleBytesOptimisation_test2_decomposed": {
                    "start": 28061,
                    "end": 28067,
                    "body": [
                        "    public void testDecodeSingleBytesOptimisation_test2_decomposed()  {\n",
                        "        final BaseNCodec.Context context = new BaseNCodec.Context();\n",
                        "        assertEquals(0, context.ibitWorkArea);\n",
                        "        assertNull(context.buffer);\n",
                        "        final byte[] data = new byte[1];\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testDecodeSingleBytesOptimisation_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.Object)"
                        ]
                    ]
                },
                "28054-28058:testDecodeSingleBytesOptimisation_test1_decomposed": {
                    "start": 28054,
                    "end": 28058,
                    "body": [
                        "    public void testDecodeSingleBytesOptimisation_test1_decomposed()  {\n",
                        "        final BaseNCodec.Context context = new BaseNCodec.Context();\n",
                        "        assertEquals(0, context.ibitWorkArea);\n",
                        "        assertNull(context.buffer);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testDecodeSingleBytesOptimisation_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.Object)"
                        ]
                    ]
                },
                "28049-28051:testDecodeSingleBytesOptimisation_test0_decomposed": {
                    "start": 28049,
                    "end": 28051,
                    "body": [
                        "    public void testDecodeSingleBytesOptimisation_test0_decomposed()  {\n",
                        "        final BaseNCodec.Context context = new BaseNCodec.Context();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testDecodeSingleBytesOptimisation_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ]
                    ]
                },
                "28029-28046:testDecodeSingleBytes_test5_decomposed": {
                    "start": 28029,
                    "end": 28046,
                    "body": [
                        "    public void testDecodeSingleBytes_test5_decomposed()  {\n",
                        "        final String encoded = \"556E74696C206E6578742074696D6521\";\n",
                        "        final BaseNCodec.Context context = new BaseNCodec.Context();\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "        final byte[] encocdedBytes = StringUtils.getBytesUtf8(encoded);\n",
                        "        b16.decode1(encocdedBytes, 0, 1, context);\n",
                        "        b16.decode1(encocdedBytes, 1, 1, context);\n",
                        "        b16.decode1(encocdedBytes, 2, 1, context);\n",
                        "        b16.decode1(encocdedBytes, 3, 1, context);\n",
                        "        b16.decode1(encocdedBytes, 4, 3, context);\n",
                        "        b16.decode1(encocdedBytes, 7, 3, context);\n",
                        "        b16.decode1(encocdedBytes, 10, 3, context);\n",
                        "        b16.decode1(encocdedBytes, 13, 19, context);\n",
                        "        final byte[] decodedBytes = new byte[context.pos];\n",
                        "        System.arraycopy(context.buffer, context.readPos, decodedBytes, 0, decodedBytes.length);\n",
                        "        final String decoded = StringUtils.newStringUtf8(decodedBytes);\n",
                        "        assertEquals(\"Until next time!\", decoded);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testDecodeSingleBytes_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "303-347:decode1"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ]
                    ]
                },
                "28010-28026:testDecodeSingleBytes_test4_decomposed": {
                    "start": 28010,
                    "end": 28026,
                    "body": [
                        "    public void testDecodeSingleBytes_test4_decomposed()  {\n",
                        "        final String encoded = \"556E74696C206E6578742074696D6521\";\n",
                        "        final BaseNCodec.Context context = new BaseNCodec.Context();\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "        final byte[] encocdedBytes = StringUtils.getBytesUtf8(encoded);\n",
                        "        b16.decode1(encocdedBytes, 0, 1, context);\n",
                        "        b16.decode1(encocdedBytes, 1, 1, context);\n",
                        "        b16.decode1(encocdedBytes, 2, 1, context);\n",
                        "        b16.decode1(encocdedBytes, 3, 1, context);\n",
                        "        b16.decode1(encocdedBytes, 4, 3, context);\n",
                        "        b16.decode1(encocdedBytes, 7, 3, context);\n",
                        "        b16.decode1(encocdedBytes, 10, 3, context);\n",
                        "        b16.decode1(encocdedBytes, 13, 19, context);\n",
                        "        final byte[] decodedBytes = new byte[context.pos];\n",
                        "        System.arraycopy(context.buffer, context.readPos, decodedBytes, 0, decodedBytes.length);\n",
                        "        final String decoded = StringUtils.newStringUtf8(decodedBytes);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testDecodeSingleBytes_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "303-347:decode1"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
                        ]
                    ]
                },
                "27994-28007:testDecodeSingleBytes_test3_decomposed": {
                    "start": 27994,
                    "end": 28007,
                    "body": [
                        "    public void testDecodeSingleBytes_test3_decomposed()  {\n",
                        "        final String encoded = \"556E74696C206E6578742074696D6521\";\n",
                        "        final BaseNCodec.Context context = new BaseNCodec.Context();\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "        final byte[] encocdedBytes = StringUtils.getBytesUtf8(encoded);\n",
                        "        b16.decode1(encocdedBytes, 0, 1, context);\n",
                        "        b16.decode1(encocdedBytes, 1, 1, context);\n",
                        "        b16.decode1(encocdedBytes, 2, 1, context);\n",
                        "        b16.decode1(encocdedBytes, 3, 1, context);\n",
                        "        b16.decode1(encocdedBytes, 4, 3, context);\n",
                        "        b16.decode1(encocdedBytes, 7, 3, context);\n",
                        "        b16.decode1(encocdedBytes, 10, 3, context);\n",
                        "        b16.decode1(encocdedBytes, 13, 19, context);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testDecodeSingleBytes_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "303-347:decode1"
                        ]
                    ]
                },
                "27986-27991:testDecodeSingleBytes_test2_decomposed": {
                    "start": 27986,
                    "end": 27991,
                    "body": [
                        "    public void testDecodeSingleBytes_test2_decomposed()  {\n",
                        "        final String encoded = \"556E74696C206E6578742074696D6521\";\n",
                        "        final BaseNCodec.Context context = new BaseNCodec.Context();\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "        final byte[] encocdedBytes = StringUtils.getBytesUtf8(encoded);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testDecodeSingleBytes_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ]
                    ]
                },
                "27979-27983:testDecodeSingleBytes_test1_decomposed": {
                    "start": 27979,
                    "end": 27983,
                    "body": [
                        "    public void testDecodeSingleBytes_test1_decomposed()  {\n",
                        "        final String encoded = \"556E74696C206E6578742074696D6521\";\n",
                        "        final BaseNCodec.Context context = new BaseNCodec.Context();\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testDecodeSingleBytes_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ]
                    ]
                },
                "27973-27976:testDecodeSingleBytes_test0_decomposed": {
                    "start": 27973,
                    "end": 27976,
                    "body": [
                        "    public void testDecodeSingleBytes_test0_decomposed()  {\n",
                        "        final String encoded = \"556E74696C206E6578742074696D6521\";\n",
                        "        final BaseNCodec.Context context = new BaseNCodec.Context();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testDecodeSingleBytes_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "Context",
                            "99-99:Context"
                        ]
                    ]
                },
                "27931-27970:testIsInAlphabet_test5_decomposed": {
                    "start": 27931,
                    "end": 27970,
                    "body": [
                        "    public void testIsInAlphabet_test5_decomposed()  {\n",
                        "        Base16 b16 = Base16.Base161(true);\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 0));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 1));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) -1));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) -15));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) -16));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 128));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 255));\n",
                        "        b16 = Base16.Base161(true);\n",
                        "        for (char c = '0'; c <= '9'; c++) {\n",
                        "            assertTrue(b16.isInAlphabet0((byte) c));\n",
                        "        }\n",
                        "        for (char c = 'a'; c <= 'f'; c++) {\n",
                        "            assertTrue(b16.isInAlphabet0((byte) c));\n",
                        "        }\n",
                        "        for (char c = 'A'; c <= 'F'; c++) {\n",
                        "            assertFalse(b16.isInAlphabet0((byte) c));\n",
                        "        }\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('0' - 1)));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('9' + 1)));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('a' - 1)));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('f' + 1)));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('z' + 1)));\n",
                        "        b16 = Base16.Base161(false);\n",
                        "        for (char c = '0'; c <= '9'; c++) {\n",
                        "            assertTrue(b16.isInAlphabet0((byte) c));\n",
                        "        }\n",
                        "        for (char c = 'a'; c <= 'f'; c++) {\n",
                        "            assertFalse(b16.isInAlphabet0((byte) c));\n",
                        "        }\n",
                        "        for (char c = 'A'; c <= 'F'; c++) {\n",
                        "            assertTrue(b16.isInAlphabet0((byte) c));\n",
                        "        }\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('0' - 1)));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('9' + 1)));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('A' - 1)));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('F' + 1)));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('Z' + 1)));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsInAlphabet_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse(boolean)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "399-401:isInAlphabet0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ]
                    ]
                },
                "27903-27928:testIsInAlphabet_test4_decomposed": {
                    "start": 27903,
                    "end": 27928,
                    "body": [
                        "    public void testIsInAlphabet_test4_decomposed()  {\n",
                        "        Base16 b16 = Base16.Base161(true);\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 0));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 1));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) -1));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) -15));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) -16));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 128));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 255));\n",
                        "        b16 = Base16.Base161(true);\n",
                        "        for (char c = '0'; c <= '9'; c++) {\n",
                        "            assertTrue(b16.isInAlphabet0((byte) c));\n",
                        "        }\n",
                        "        for (char c = 'a'; c <= 'f'; c++) {\n",
                        "            assertTrue(b16.isInAlphabet0((byte) c));\n",
                        "        }\n",
                        "        for (char c = 'A'; c <= 'F'; c++) {\n",
                        "            assertFalse(b16.isInAlphabet0((byte) c));\n",
                        "        }\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('0' - 1)));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('9' + 1)));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('a' - 1)));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('f' + 1)));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('z' + 1)));\n",
                        "        b16 = Base16.Base161(false);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsInAlphabet_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse(boolean)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "399-401:isInAlphabet0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ]
                    ]
                },
                "27876-27900:testIsInAlphabet_test3_decomposed": {
                    "start": 27876,
                    "end": 27900,
                    "body": [
                        "    public void testIsInAlphabet_test3_decomposed()  {\n",
                        "        Base16 b16 = Base16.Base161(true);\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 0));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 1));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) -1));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) -15));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) -16));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 128));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 255));\n",
                        "        b16 = Base16.Base161(true);\n",
                        "        for (char c = '0'; c <= '9'; c++) {\n",
                        "            assertTrue(b16.isInAlphabet0((byte) c));\n",
                        "        }\n",
                        "        for (char c = 'a'; c <= 'f'; c++) {\n",
                        "            assertTrue(b16.isInAlphabet0((byte) c));\n",
                        "        }\n",
                        "        for (char c = 'A'; c <= 'F'; c++) {\n",
                        "            assertFalse(b16.isInAlphabet0((byte) c));\n",
                        "        }\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('0' - 1)));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('9' + 1)));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('a' - 1)));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('f' + 1)));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) ('z' + 1)));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsInAlphabet_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse(boolean)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "399-401:isInAlphabet0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ]
                    ]
                },
                "27863-27873:testIsInAlphabet_test2_decomposed": {
                    "start": 27863,
                    "end": 27873,
                    "body": [
                        "    public void testIsInAlphabet_test2_decomposed()  {\n",
                        "        Base16 b16 = Base16.Base161(true);\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 0));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 1));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) -1));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) -15));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) -16));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 128));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 255));\n",
                        "        b16 = Base16.Base161(true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsInAlphabet_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse(boolean)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "399-401:isInAlphabet0"
                        ]
                    ]
                },
                "27851-27860:testIsInAlphabet_test1_decomposed": {
                    "start": 27851,
                    "end": 27860,
                    "body": [
                        "    public void testIsInAlphabet_test1_decomposed()  {\n",
                        "        Base16 b16 = Base16.Base161(true);\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 0));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 1));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) -1));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) -15));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) -16));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 128));\n",
                        "        assertFalse(b16.isInAlphabet0((byte) 255));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsInAlphabet_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse(boolean)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "399-401:isInAlphabet0"
                        ]
                    ]
                },
                "27846-27848:testIsInAlphabet_test0_decomposed": {
                    "start": 27846,
                    "end": 27848,
                    "body": [
                        "    public void testIsInAlphabet_test0_decomposed()  {\n",
                        "        Base16 b16 = Base16.Base161(true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsInAlphabet_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ]
                    ]
                },
                "27840-27843:checkEncodeLengthBounds_test1_decomposed": {
                    "start": 27840,
                    "end": 27843,
                    "body": [
                        "    public void checkEncodeLengthBounds_test1_decomposed()  {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        base16.encode1(new byte[10], 0, 1 << 30);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = IllegalArgumentException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "checkEncodeLengthBounds_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "478-488:encode1"
                        ]
                    ]
                },
                "27835-27837:checkEncodeLengthBounds_test0_decomposed": {
                    "start": 27835,
                    "end": 27837,
                    "body": [
                        "    public void checkEncodeLengthBounds_test0_decomposed()  {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "checkEncodeLengthBounds_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ]
                    ]
                },
                "27792-27832:testStringToByteVariations_test20_decomposed": {
                    "start": 27792,
                    "end": 27832,
                    "body": [
                        "    public void testStringToByteVariations_test20_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(base16.decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode2((Object) s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s2);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte \\\"\\\"\", \"\", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s2);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static \\\"\\\"\",\n",
                        "                \"\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s3);\n",
                        "        assertNull(\"StringToByte null\", StringUtils.newStringUtf8(Base16.Base162().decode3(s3)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s3);\n",
                        "        assertNull(\n",
                        "                \"StringToByte static null\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s3)));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test20_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "27752-27789:testStringToByteVariations_test19_decomposed": {
                    "start": 27752,
                    "end": 27789,
                    "body": [
                        "    public void testStringToByteVariations_test19_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(base16.decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode2((Object) s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s2);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte \\\"\\\"\", \"\", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s2);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static \\\"\\\"\",\n",
                        "                \"\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s3);\n",
                        "        assertNull(\"StringToByte null\", StringUtils.newStringUtf8(Base16.Base162().decode3(s3)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s3);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test19_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "27713-27749:testStringToByteVariations_test18_decomposed": {
                    "start": 27713,
                    "end": 27749,
                    "body": [
                        "    public void testStringToByteVariations_test18_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(base16.decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode2((Object) s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s2);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte \\\"\\\"\", \"\", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s2);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static \\\"\\\"\",\n",
                        "                \"\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s3);\n",
                        "        assertNull(\"StringToByte null\", StringUtils.newStringUtf8(Base16.Base162().decode3(s3)));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test18_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "27675-27710:testStringToByteVariations_test17_decomposed": {
                    "start": 27675,
                    "end": 27710,
                    "body": [
                        "    public void testStringToByteVariations_test17_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(base16.decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode2((Object) s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s2);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte \\\"\\\"\", \"\", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s2);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static \\\"\\\"\",\n",
                        "                \"\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s3);\n",
                        "        assertNull(\"StringToByte null\", StringUtils.newStringUtf8(Base16.Base162().decode3(s3)));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test17_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "27638-27672:testStringToByteVariations_test16_decomposed": {
                    "start": 27638,
                    "end": 27672,
                    "body": [
                        "    public void testStringToByteVariations_test16_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(base16.decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode2((Object) s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s2);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte \\\"\\\"\", \"\", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s2);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static \\\"\\\"\",\n",
                        "                \"\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s3);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test16_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ]
                    ]
                },
                "27602-27635:testStringToByteVariations_test15_decomposed": {
                    "start": 27602,
                    "end": 27635,
                    "body": [
                        "    public void testStringToByteVariations_test15_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(base16.decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode2((Object) s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s2);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte \\\"\\\"\", \"\", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s2);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static \\\"\\\"\",\n",
                        "                \"\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test15_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ]
                    ]
                },
                "27567-27599:testStringToByteVariations_test14_decomposed": {
                    "start": 27567,
                    "end": 27599,
                    "body": [
                        "    public void testStringToByteVariations_test14_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(base16.decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode2((Object) s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s2);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte \\\"\\\"\", \"\", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s2);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static \\\"\\\"\",\n",
                        "                \"\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test14_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ]
                    ]
                },
                "27536-27564:testStringToByteVariations_test13_decomposed": {
                    "start": 27536,
                    "end": 27564,
                    "body": [
                        "    public void testStringToByteVariations_test13_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(base16.decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode2((Object) s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s2);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte \\\"\\\"\", \"\", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s2);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test13_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ]
                    ]
                },
                "27506-27533:testStringToByteVariations_test12_decomposed": {
                    "start": 27506,
                    "end": 27533,
                    "body": [
                        "    public void testStringToByteVariations_test12_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(base16.decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode2((Object) s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s2);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte \\\"\\\"\", \"\", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test12_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ]
                    ]
                },
                "27477-27503:testStringToByteVariations_test11_decomposed": {
                    "start": 27477,
                    "end": 27503,
                    "body": [
                        "    public void testStringToByteVariations_test11_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(base16.decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode2((Object) s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s2);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte \\\"\\\"\", \"\", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test11_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ]
                    ]
                },
                "27450-27474:testStringToByteVariations_test10_decomposed": {
                    "start": 27450,
                    "end": 27474,
                    "body": [
                        "    public void testStringToByteVariations_test10_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(base16.decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode2((Object) s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s2);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test10_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ]
                    ]
                },
                "27424-27447:testStringToByteVariations_test9_decomposed": {
                    "start": 27424,
                    "end": 27447,
                    "body": [
                        "    public void testStringToByteVariations_test9_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(base16.decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode2((Object) s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test9_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ]
                    ]
                },
                "27399-27421:testStringToByteVariations_test8_decomposed": {
                    "start": 27399,
                    "end": 27421,
                    "body": [
                        "    public void testStringToByteVariations_test8_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(base16.decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode2((Object) s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte static Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ]
                    ]
                },
                "27378-27396:testStringToByteVariations_test7_decomposed": {
                    "start": 27378,
                    "end": 27396,
                    "body": [
                        "    public void testStringToByteVariations_test7_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(base16.decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode2((Object) s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode3(s1);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ]
                    ]
                },
                "27358-27375:testStringToByteVariations_test6_decomposed": {
                    "start": 27358,
                    "end": 27375,
                    "body": [
                        "    public void testStringToByteVariations_test6_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(base16.decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode2((Object) s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ]
                    ]
                },
                "27339-27355:testStringToByteVariations_test5_decomposed": {
                    "start": 27339,
                    "end": 27355,
                    "body": [
                        "    public void testStringToByteVariations_test5_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(base16.decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode2((Object) s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ]
                    ]
                },
                "27324-27336:testStringToByteVariations_test4_decomposed": {
                    "start": 27324,
                    "end": 27336,
                    "body": [
                        "    public void testStringToByteVariations_test4_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(base16.decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().decode2((Object) s1);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ]
                    ]
                },
                "27310-27321:testStringToByteVariations_test3_decomposed": {
                    "start": 27310,
                    "end": 27321,
                    "body": [
                        "    public void testStringToByteVariations_test3_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(base16.decode3(s1)));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ]
                    ]
                },
                "27297-27307:testStringToByteVariations_test2_decomposed": {
                    "start": 27297,
                    "end": 27307,
                    "body": [
                        "    public void testStringToByteVariations_test2_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "        assertEquals(\n",
                        "                \"StringToByte Hello World\",\n",
                        "                \"Hello World\",\n",
                        "                StringUtils.newStringUtf8(base16.decode3(s1)));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ]
                    ]
                },
                "27288-27294:testStringToByteVariations_test1_decomposed": {
                    "start": 27288,
                    "end": 27294,
                    "body": [
                        "    public void testStringToByteVariations_test1_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final String s1 = \"48656C6C6F20576F726C64\";\n",
                        "        final String s2 = \"\";\n",
                        "        final String s3 = null;\n",
                        "        base16.decode3(s1);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "447-449:decode3"
                        ]
                    ]
                },
                "27283-27285:testStringToByteVariations_test0_decomposed": {
                    "start": 27283,
                    "end": 27285,
                    "body": [
                        "    public void testStringToByteVariations_test0_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testStringToByteVariations_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ]
                    ]
                },
                "27254-27280:testByteToStringVariations_test13_decomposed": {
                    "start": 27254,
                    "end": 27280,
                    "body": [
                        "    public void testByteToStringVariations_test13_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\n",
                        "        final byte[] b2 = {};\n",
                        "        final byte[] b3 = null;\n",
                        "        assertEquals(\n",
                        "                \"byteToString Hello World\", \"48656C6C6F20576F726C64\", base16.encodeToString(b1));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().encode0(b1);\n",
                        "        assertEquals(\n",
                        "                \"byteToString static Hello World\",\n",
                        "                \"48656C6C6F20576F726C64\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().encode0(b1)));\n",
                        "        assertEquals(\"byteToString \\\"\\\"\", \"\", base16.encodeToString(b2));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().encode0(b2);\n",
                        "        assertEquals(\n",
                        "                \"byteToString static \\\"\\\"\",\n",
                        "                \"\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().encode0(b2)));\n",
                        "        assertNull(\"byteToString null\", base16.encodeToString(b3));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().encode0(b3);\n",
                        "        assertNull(\n",
                        "                \"byteToString static null\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().encode0(b3)));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testByteToStringVariations_test13_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "534-536:encodeToString"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "27228-27251:testByteToStringVariations_test12_decomposed": {
                    "start": 27228,
                    "end": 27251,
                    "body": [
                        "    public void testByteToStringVariations_test12_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\n",
                        "        final byte[] b2 = {};\n",
                        "        final byte[] b3 = null;\n",
                        "        assertEquals(\n",
                        "                \"byteToString Hello World\", \"48656C6C6F20576F726C64\", base16.encodeToString(b1));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().encode0(b1);\n",
                        "        assertEquals(\n",
                        "                \"byteToString static Hello World\",\n",
                        "                \"48656C6C6F20576F726C64\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().encode0(b1)));\n",
                        "        assertEquals(\"byteToString \\\"\\\"\", \"\", base16.encodeToString(b2));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().encode0(b2);\n",
                        "        assertEquals(\n",
                        "                \"byteToString static \\\"\\\"\",\n",
                        "                \"\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().encode0(b2)));\n",
                        "        assertNull(\"byteToString null\", base16.encodeToString(b3));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().encode0(b3);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testByteToStringVariations_test12_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "534-536:encodeToString"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "27203-27225:testByteToStringVariations_test11_decomposed": {
                    "start": 27203,
                    "end": 27225,
                    "body": [
                        "    public void testByteToStringVariations_test11_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\n",
                        "        final byte[] b2 = {};\n",
                        "        final byte[] b3 = null;\n",
                        "        assertEquals(\n",
                        "                \"byteToString Hello World\", \"48656C6C6F20576F726C64\", base16.encodeToString(b1));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().encode0(b1);\n",
                        "        assertEquals(\n",
                        "                \"byteToString static Hello World\",\n",
                        "                \"48656C6C6F20576F726C64\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().encode0(b1)));\n",
                        "        assertEquals(\"byteToString \\\"\\\"\", \"\", base16.encodeToString(b2));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().encode0(b2);\n",
                        "        assertEquals(\n",
                        "                \"byteToString static \\\"\\\"\",\n",
                        "                \"\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().encode0(b2)));\n",
                        "        assertNull(\"byteToString null\", base16.encodeToString(b3));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testByteToStringVariations_test11_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "534-536:encodeToString"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "27179-27200:testByteToStringVariations_test10_decomposed": {
                    "start": 27179,
                    "end": 27200,
                    "body": [
                        "    public void testByteToStringVariations_test10_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\n",
                        "        final byte[] b2 = {};\n",
                        "        final byte[] b3 = null;\n",
                        "        assertEquals(\n",
                        "                \"byteToString Hello World\", \"48656C6C6F20576F726C64\", base16.encodeToString(b1));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().encode0(b1);\n",
                        "        assertEquals(\n",
                        "                \"byteToString static Hello World\",\n",
                        "                \"48656C6C6F20576F726C64\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().encode0(b1)));\n",
                        "        assertEquals(\"byteToString \\\"\\\"\", \"\", base16.encodeToString(b2));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().encode0(b2);\n",
                        "        assertEquals(\n",
                        "                \"byteToString static \\\"\\\"\",\n",
                        "                \"\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().encode0(b2)));\n",
                        "        assertNull(\"byteToString null\", base16.encodeToString(b3));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testByteToStringVariations_test10_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "534-536:encodeToString"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "27156-27176:testByteToStringVariations_test9_decomposed": {
                    "start": 27156,
                    "end": 27176,
                    "body": [
                        "    public void testByteToStringVariations_test9_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\n",
                        "        final byte[] b2 = {};\n",
                        "        final byte[] b3 = null;\n",
                        "        assertEquals(\n",
                        "                \"byteToString Hello World\", \"48656C6C6F20576F726C64\", base16.encodeToString(b1));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().encode0(b1);\n",
                        "        assertEquals(\n",
                        "                \"byteToString static Hello World\",\n",
                        "                \"48656C6C6F20576F726C64\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().encode0(b1)));\n",
                        "        assertEquals(\"byteToString \\\"\\\"\", \"\", base16.encodeToString(b2));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().encode0(b2);\n",
                        "        assertEquals(\n",
                        "                \"byteToString static \\\"\\\"\",\n",
                        "                \"\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().encode0(b2)));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testByteToStringVariations_test9_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "534-536:encodeToString"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ]
                    ]
                },
                "27137-27153:testByteToStringVariations_test8_decomposed": {
                    "start": 27137,
                    "end": 27153,
                    "body": [
                        "    public void testByteToStringVariations_test8_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\n",
                        "        final byte[] b2 = {};\n",
                        "        final byte[] b3 = null;\n",
                        "        assertEquals(\n",
                        "                \"byteToString Hello World\", \"48656C6C6F20576F726C64\", base16.encodeToString(b1));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().encode0(b1);\n",
                        "        assertEquals(\n",
                        "                \"byteToString static Hello World\",\n",
                        "                \"48656C6C6F20576F726C64\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().encode0(b1)));\n",
                        "        assertEquals(\"byteToString \\\"\\\"\", \"\", base16.encodeToString(b2));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().encode0(b2);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testByteToStringVariations_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "534-536:encodeToString"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ]
                    ]
                },
                "27119-27134:testByteToStringVariations_test7_decomposed": {
                    "start": 27119,
                    "end": 27134,
                    "body": [
                        "    public void testByteToStringVariations_test7_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\n",
                        "        final byte[] b2 = {};\n",
                        "        final byte[] b3 = null;\n",
                        "        assertEquals(\n",
                        "                \"byteToString Hello World\", \"48656C6C6F20576F726C64\", base16.encodeToString(b1));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().encode0(b1);\n",
                        "        assertEquals(\n",
                        "                \"byteToString static Hello World\",\n",
                        "                \"48656C6C6F20576F726C64\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().encode0(b1)));\n",
                        "        assertEquals(\"byteToString \\\"\\\"\", \"\", base16.encodeToString(b2));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testByteToStringVariations_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "534-536:encodeToString"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ]
                    ]
                },
                "27102-27116:testByteToStringVariations_test6_decomposed": {
                    "start": 27102,
                    "end": 27116,
                    "body": [
                        "    public void testByteToStringVariations_test6_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\n",
                        "        final byte[] b2 = {};\n",
                        "        final byte[] b3 = null;\n",
                        "        assertEquals(\n",
                        "                \"byteToString Hello World\", \"48656C6C6F20576F726C64\", base16.encodeToString(b1));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().encode0(b1);\n",
                        "        assertEquals(\n",
                        "                \"byteToString static Hello World\",\n",
                        "                \"48656C6C6F20576F726C64\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().encode0(b1)));\n",
                        "        assertEquals(\"byteToString \\\"\\\"\", \"\", base16.encodeToString(b2));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testByteToStringVariations_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "534-536:encodeToString"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ]
                    ]
                },
                "27086-27099:testByteToStringVariations_test5_decomposed": {
                    "start": 27086,
                    "end": 27099,
                    "body": [
                        "    public void testByteToStringVariations_test5_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\n",
                        "        final byte[] b2 = {};\n",
                        "        final byte[] b3 = null;\n",
                        "        assertEquals(\n",
                        "                \"byteToString Hello World\", \"48656C6C6F20576F726C64\", base16.encodeToString(b1));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().encode0(b1);\n",
                        "        assertEquals(\n",
                        "                \"byteToString static Hello World\",\n",
                        "                \"48656C6C6F20576F726C64\",\n",
                        "                StringUtils.newStringUtf8(Base16.Base162().encode0(b1)));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testByteToStringVariations_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "534-536:encodeToString"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ]
                    ]
                },
                "27074-27083:testByteToStringVariations_test4_decomposed": {
                    "start": 27074,
                    "end": 27083,
                    "body": [
                        "    public void testByteToStringVariations_test4_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\n",
                        "        final byte[] b2 = {};\n",
                        "        final byte[] b3 = null;\n",
                        "        assertEquals(\n",
                        "                \"byteToString Hello World\", \"48656C6C6F20576F726C64\", base16.encodeToString(b1));\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base162().encode0(b1);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testByteToStringVariations_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "534-536:encodeToString"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "27063-27071:testByteToStringVariations_test3_decomposed": {
                    "start": 27063,
                    "end": 27071,
                    "body": [
                        "    public void testByteToStringVariations_test3_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\n",
                        "        final byte[] b2 = {};\n",
                        "        final byte[] b3 = null;\n",
                        "        assertEquals(\n",
                        "                \"byteToString Hello World\", \"48656C6C6F20576F726C64\", base16.encodeToString(b1));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testByteToStringVariations_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "534-536:encodeToString"
                        ]
                    ]
                },
                "27053-27060:testByteToStringVariations_test2_decomposed": {
                    "start": 27053,
                    "end": 27060,
                    "body": [
                        "    public void testByteToStringVariations_test2_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\n",
                        "        final byte[] b2 = {};\n",
                        "        final byte[] b3 = null;\n",
                        "        assertEquals(\n",
                        "                \"byteToString Hello World\", \"48656C6C6F20576F726C64\", base16.encodeToString(b1));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testByteToStringVariations_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "534-536:encodeToString"
                        ]
                    ]
                },
                "27047-27050:testByteToStringVariations_test1_decomposed": {
                    "start": 27047,
                    "end": 27050,
                    "body": [
                        "    public void testByteToStringVariations_test1_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "        final byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testByteToStringVariations_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ]
                    ]
                },
                "27042-27044:testByteToStringVariations_test0_decomposed": {
                    "start": 27042,
                    "end": 27044,
                    "body": [
                        "    public void testByteToStringVariations_test0_decomposed() throws DecoderException {\n",
                        "        final Base16 base16 = Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testByteToStringVariations_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ]
                    ]
                },
                "26974-27039:testTriplets_test31_decomposed": {
                    "start": 26974,
                    "end": 27039,
                    "body": [
                        "    public void testTriplets_test31_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000006\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000007\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000008\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000009\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000A\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000B\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000C\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000D\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000E\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000F\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 15})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test31_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26909-26971:testTriplets_test30_decomposed": {
                    "start": 26909,
                    "end": 26971,
                    "body": [
                        "    public void testTriplets_test30_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000006\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000007\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000008\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000009\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000A\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000B\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000C\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000D\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000E\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test30_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26845-26906:testTriplets_test29_decomposed": {
                    "start": 26845,
                    "end": 26906,
                    "body": [
                        "    public void testTriplets_test29_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000006\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000007\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000008\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000009\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000A\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000B\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000C\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000D\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000E\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 14})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test29_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26784-26842:testTriplets_test28_decomposed": {
                    "start": 26784,
                    "end": 26842,
                    "body": [
                        "    public void testTriplets_test28_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000006\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000007\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000008\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000009\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000A\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000B\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000C\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000D\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test28_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26724-26781:testTriplets_test27_decomposed": {
                    "start": 26724,
                    "end": 26781,
                    "body": [
                        "    public void testTriplets_test27_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000006\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000007\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000008\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000009\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000A\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000B\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000C\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000D\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 13})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test27_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26667-26721:testTriplets_test26_decomposed": {
                    "start": 26667,
                    "end": 26721,
                    "body": [
                        "    public void testTriplets_test26_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000006\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000007\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000008\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000009\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000A\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000B\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000C\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test26_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26611-26664:testTriplets_test25_decomposed": {
                    "start": 26611,
                    "end": 26664,
                    "body": [
                        "    public void testTriplets_test25_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000006\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000007\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000008\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000009\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000A\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000B\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000C\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 12})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test25_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26558-26608:testTriplets_test24_decomposed": {
                    "start": 26558,
                    "end": 26608,
                    "body": [
                        "    public void testTriplets_test24_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000006\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000007\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000008\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000009\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000A\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000B\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test24_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26506-26555:testTriplets_test23_decomposed": {
                    "start": 26506,
                    "end": 26555,
                    "body": [
                        "    public void testTriplets_test23_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000006\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000007\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000008\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000009\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000A\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000B\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 11})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test23_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26457-26503:testTriplets_test22_decomposed": {
                    "start": 26457,
                    "end": 26503,
                    "body": [
                        "    public void testTriplets_test22_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000006\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000007\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000008\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000009\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000A\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test22_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26409-26454:testTriplets_test21_decomposed": {
                    "start": 26409,
                    "end": 26454,
                    "body": [
                        "    public void testTriplets_test21_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000006\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000007\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000008\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000009\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"00000A\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test21_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26364-26406:testTriplets_test20_decomposed": {
                    "start": 26364,
                    "end": 26406,
                    "body": [
                        "    public void testTriplets_test20_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000006\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000007\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000008\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000009\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test20_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26320-26361:testTriplets_test19_decomposed": {
                    "start": 26320,
                    "end": 26361,
                    "body": [
                        "    public void testTriplets_test19_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000006\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000007\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000008\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000009\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test19_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26279-26317:testTriplets_test18_decomposed": {
                    "start": 26279,
                    "end": 26317,
                    "body": [
                        "    public void testTriplets_test18_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000006\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000007\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000008\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test18_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26239-26276:testTriplets_test17_decomposed": {
                    "start": 26239,
                    "end": 26276,
                    "body": [
                        "    public void testTriplets_test17_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000006\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000007\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000008\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test17_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26202-26236:testTriplets_test16_decomposed": {
                    "start": 26202,
                    "end": 26236,
                    "body": [
                        "    public void testTriplets_test16_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000006\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000007\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test16_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26166-26199:testTriplets_test15_decomposed": {
                    "start": 26166,
                    "end": 26199,
                    "body": [
                        "    public void testTriplets_test15_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000006\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000007\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test15_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26133-26163:testTriplets_test14_decomposed": {
                    "start": 26133,
                    "end": 26163,
                    "body": [
                        "    public void testTriplets_test14_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000006\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test14_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26101-26130:testTriplets_test13_decomposed": {
                    "start": 26101,
                    "end": 26130,
                    "body": [
                        "    public void testTriplets_test13_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000006\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test13_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26072-26098:testTriplets_test12_decomposed": {
                    "start": 26072,
                    "end": 26098,
                    "body": [
                        "    public void testTriplets_test12_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test12_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26044-26069:testTriplets_test11_decomposed": {
                    "start": 26044,
                    "end": 26069,
                    "body": [
                        "    public void testTriplets_test11_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000005\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test11_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "26019-26041:testTriplets_test10_decomposed": {
                    "start": 26019,
                    "end": 26041,
                    "body": [
                        "    public void testTriplets_test10_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test10_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "25995-26016:testTriplets_test9_decomposed": {
                    "start": 25995,
                    "end": 26016,
                    "body": [
                        "    public void testTriplets_test9_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000004\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test9_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "25974-25992:testTriplets_test8_decomposed": {
                    "start": 25974,
                    "end": 25992,
                    "body": [
                        "    public void testTriplets_test8_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "25954-25971:testTriplets_test7_decomposed": {
                    "start": 25954,
                    "end": 25971,
                    "body": [
                        "    public void testTriplets_test7_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000003\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "25937-25951:testTriplets_test6_decomposed": {
                    "start": 25937,
                    "end": 25951,
                    "body": [
                        "    public void testTriplets_test6_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "25921-25934:testTriplets_test5_decomposed": {
                    "start": 25921,
                    "end": 25934,
                    "body": [
                        "    public void testTriplets_test5_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000002\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "25908-25918:testTriplets_test4_decomposed": {
                    "start": 25908,
                    "end": 25918,
                    "body": [
                        "    public void testTriplets_test4_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "25896-25905:testTriplets_test3_decomposed": {
                    "start": 25896,
                    "end": 25905,
                    "body": [
                        "    public void testTriplets_test3_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000001\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "25887-25893:testTriplets_test2_decomposed": {
                    "start": 25887,
                    "end": 25893,
                    "body": [
                        "    public void testTriplets_test2_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "25879-25884:testTriplets_test1_decomposed": {
                    "start": 25879,
                    "end": 25884,
                    "body": [
                        "    public void testTriplets_test1_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000000\",\n",
                        "                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "25874-25876:testTriplets_test0_decomposed": {
                    "start": 25874,
                    "end": 25876,
                    "body": [
                        "    public void testTriplets_test0_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTriplets_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ]
                    ]
                },
                "25656-25871:testSingletons_test210_decomposed": {
                    "start": 25656,
                    "end": 25871,
                    "body": [
                        "    public void testSingletons_test210_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"60\", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"61\", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"62\", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"63\", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"64\", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"65\", new String(Base16.Base162().encode0(new byte[] {(byte) 101})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"66\", new String(Base16.Base162().encode0(new byte[] {(byte) 102})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"67\", new String(Base16.Base162().encode0(new byte[] {(byte) 103})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"68\", new String(Base16.Base162().encode0(new byte[] {(byte) 104})));\n",
                        "        for (int i = -128; i <= 127; i++) {\n",
                        "            final byte test[] = {(byte) i};\n",
                        "            assertArrayEquals(test, Base16.Base162().decode0(Base16.Base162().encode0(test)));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test210_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(byte[],byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "25442-25653:testSingletons_test209_decomposed": {
                    "start": 25442,
                    "end": 25653,
                    "body": [
                        "    public void testSingletons_test209_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"60\", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"61\", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"62\", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"63\", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"64\", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"65\", new String(Base16.Base162().encode0(new byte[] {(byte) 101})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"66\", new String(Base16.Base162().encode0(new byte[] {(byte) 102})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"67\", new String(Base16.Base162().encode0(new byte[] {(byte) 103})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"68\", new String(Base16.Base162().encode0(new byte[] {(byte) 104})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test209_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "25229-25439:testSingletons_test208_decomposed": {
                    "start": 25229,
                    "end": 25439,
                    "body": [
                        "    public void testSingletons_test208_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"60\", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"61\", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"62\", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"63\", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"64\", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"65\", new String(Base16.Base162().encode0(new byte[] {(byte) 101})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"66\", new String(Base16.Base162().encode0(new byte[] {(byte) 102})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"67\", new String(Base16.Base162().encode0(new byte[] {(byte) 103})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test208_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "25017-25226:testSingletons_test207_decomposed": {
                    "start": 25017,
                    "end": 25226,
                    "body": [
                        "    public void testSingletons_test207_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"60\", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"61\", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"62\", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"63\", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"64\", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"65\", new String(Base16.Base162().encode0(new byte[] {(byte) 101})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"66\", new String(Base16.Base162().encode0(new byte[] {(byte) 102})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"67\", new String(Base16.Base162().encode0(new byte[] {(byte) 103})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test207_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "24806-25014:testSingletons_test206_decomposed": {
                    "start": 24806,
                    "end": 25014,
                    "body": [
                        "    public void testSingletons_test206_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"60\", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"61\", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"62\", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"63\", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"64\", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"65\", new String(Base16.Base162().encode0(new byte[] {(byte) 101})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"66\", new String(Base16.Base162().encode0(new byte[] {(byte) 102})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test206_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "24596-24803:testSingletons_test205_decomposed": {
                    "start": 24596,
                    "end": 24803,
                    "body": [
                        "    public void testSingletons_test205_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"60\", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"61\", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"62\", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"63\", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"64\", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"65\", new String(Base16.Base162().encode0(new byte[] {(byte) 101})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"66\", new String(Base16.Base162().encode0(new byte[] {(byte) 102})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test205_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "24387-24593:testSingletons_test204_decomposed": {
                    "start": 24387,
                    "end": 24593,
                    "body": [
                        "    public void testSingletons_test204_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"60\", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"61\", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"62\", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"63\", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"64\", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"65\", new String(Base16.Base162().encode0(new byte[] {(byte) 101})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test204_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "24179-24384:testSingletons_test203_decomposed": {
                    "start": 24179,
                    "end": 24384,
                    "body": [
                        "    public void testSingletons_test203_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"60\", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"61\", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"62\", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"63\", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"64\", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"65\", new String(Base16.Base162().encode0(new byte[] {(byte) 101})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test203_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "23972-24176:testSingletons_test202_decomposed": {
                    "start": 23972,
                    "end": 24176,
                    "body": [
                        "    public void testSingletons_test202_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"60\", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"61\", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"62\", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"63\", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"64\", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test202_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "23766-23969:testSingletons_test201_decomposed": {
                    "start": 23766,
                    "end": 23969,
                    "body": [
                        "    public void testSingletons_test201_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"60\", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"61\", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"62\", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"63\", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"64\", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test201_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "23561-23763:testSingletons_test200_decomposed": {
                    "start": 23561,
                    "end": 23763,
                    "body": [
                        "    public void testSingletons_test200_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"60\", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"61\", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"62\", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"63\", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test200_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "23357-23558:testSingletons_test199_decomposed": {
                    "start": 23357,
                    "end": 23558,
                    "body": [
                        "    public void testSingletons_test199_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"60\", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"61\", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"62\", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"63\", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test199_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "23154-23354:testSingletons_test198_decomposed": {
                    "start": 23154,
                    "end": 23354,
                    "body": [
                        "    public void testSingletons_test198_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"60\", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"61\", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"62\", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test198_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "22952-23151:testSingletons_test197_decomposed": {
                    "start": 22952,
                    "end": 23151,
                    "body": [
                        "    public void testSingletons_test197_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"60\", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"61\", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"62\", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test197_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "22751-22949:testSingletons_test196_decomposed": {
                    "start": 22751,
                    "end": 22949,
                    "body": [
                        "    public void testSingletons_test196_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"60\", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"61\", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test196_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "22551-22748:testSingletons_test195_decomposed": {
                    "start": 22551,
                    "end": 22748,
                    "body": [
                        "    public void testSingletons_test195_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"60\", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"61\", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test195_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "22352-22548:testSingletons_test194_decomposed": {
                    "start": 22352,
                    "end": 22548,
                    "body": [
                        "    public void testSingletons_test194_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"60\", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test194_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "22154-22349:testSingletons_test193_decomposed": {
                    "start": 22154,
                    "end": 22349,
                    "body": [
                        "    public void testSingletons_test193_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"60\", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test193_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "21957-22151:testSingletons_test192_decomposed": {
                    "start": 21957,
                    "end": 22151,
                    "body": [
                        "    public void testSingletons_test192_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test192_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "21761-21954:testSingletons_test191_decomposed": {
                    "start": 21761,
                    "end": 21954,
                    "body": [
                        "    public void testSingletons_test191_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5F\", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test191_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "21566-21758:testSingletons_test190_decomposed": {
                    "start": 21566,
                    "end": 21758,
                    "body": [
                        "    public void testSingletons_test190_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test190_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "21372-21563:testSingletons_test189_decomposed": {
                    "start": 21372,
                    "end": 21563,
                    "body": [
                        "    public void testSingletons_test189_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5E\", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test189_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "21179-21369:testSingletons_test188_decomposed": {
                    "start": 21179,
                    "end": 21369,
                    "body": [
                        "    public void testSingletons_test188_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test188_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "20987-21176:testSingletons_test187_decomposed": {
                    "start": 20987,
                    "end": 21176,
                    "body": [
                        "    public void testSingletons_test187_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5D\", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test187_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "20796-20984:testSingletons_test186_decomposed": {
                    "start": 20796,
                    "end": 20984,
                    "body": [
                        "    public void testSingletons_test186_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test186_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "20606-20793:testSingletons_test185_decomposed": {
                    "start": 20606,
                    "end": 20793,
                    "body": [
                        "    public void testSingletons_test185_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5C\", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test185_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "20417-20603:testSingletons_test184_decomposed": {
                    "start": 20417,
                    "end": 20603,
                    "body": [
                        "    public void testSingletons_test184_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test184_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "20229-20414:testSingletons_test183_decomposed": {
                    "start": 20229,
                    "end": 20414,
                    "body": [
                        "    public void testSingletons_test183_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5B\", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test183_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "20042-20226:testSingletons_test182_decomposed": {
                    "start": 20042,
                    "end": 20226,
                    "body": [
                        "    public void testSingletons_test182_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test182_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "19856-20039:testSingletons_test181_decomposed": {
                    "start": 19856,
                    "end": 20039,
                    "body": [
                        "    public void testSingletons_test181_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"5A\", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test181_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "19671-19853:testSingletons_test180_decomposed": {
                    "start": 19671,
                    "end": 19853,
                    "body": [
                        "    public void testSingletons_test180_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test180_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "19487-19668:testSingletons_test179_decomposed": {
                    "start": 19487,
                    "end": 19668,
                    "body": [
                        "    public void testSingletons_test179_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"59\", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test179_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "19304-19484:testSingletons_test178_decomposed": {
                    "start": 19304,
                    "end": 19484,
                    "body": [
                        "    public void testSingletons_test178_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test178_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "19122-19301:testSingletons_test177_decomposed": {
                    "start": 19122,
                    "end": 19301,
                    "body": [
                        "    public void testSingletons_test177_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"58\", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test177_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "18941-19119:testSingletons_test176_decomposed": {
                    "start": 18941,
                    "end": 19119,
                    "body": [
                        "    public void testSingletons_test176_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test176_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "18761-18938:testSingletons_test175_decomposed": {
                    "start": 18761,
                    "end": 18938,
                    "body": [
                        "    public void testSingletons_test175_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"57\", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test175_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "18582-18758:testSingletons_test174_decomposed": {
                    "start": 18582,
                    "end": 18758,
                    "body": [
                        "    public void testSingletons_test174_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test174_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "18404-18579:testSingletons_test173_decomposed": {
                    "start": 18404,
                    "end": 18579,
                    "body": [
                        "    public void testSingletons_test173_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"56\", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test173_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "18227-18401:testSingletons_test172_decomposed": {
                    "start": 18227,
                    "end": 18401,
                    "body": [
                        "    public void testSingletons_test172_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test172_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "18051-18224:testSingletons_test171_decomposed": {
                    "start": 18051,
                    "end": 18224,
                    "body": [
                        "    public void testSingletons_test171_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"55\", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test171_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "17876-18048:testSingletons_test170_decomposed": {
                    "start": 17876,
                    "end": 18048,
                    "body": [
                        "    public void testSingletons_test170_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test170_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "17702-17873:testSingletons_test169_decomposed": {
                    "start": 17702,
                    "end": 17873,
                    "body": [
                        "    public void testSingletons_test169_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"54\", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test169_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "17529-17699:testSingletons_test168_decomposed": {
                    "start": 17529,
                    "end": 17699,
                    "body": [
                        "    public void testSingletons_test168_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test168_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "17357-17526:testSingletons_test167_decomposed": {
                    "start": 17357,
                    "end": 17526,
                    "body": [
                        "    public void testSingletons_test167_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"53\", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test167_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "17186-17354:testSingletons_test166_decomposed": {
                    "start": 17186,
                    "end": 17354,
                    "body": [
                        "    public void testSingletons_test166_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test166_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "17016-17183:testSingletons_test165_decomposed": {
                    "start": 17016,
                    "end": 17183,
                    "body": [
                        "    public void testSingletons_test165_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"52\", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test165_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "16847-17013:testSingletons_test164_decomposed": {
                    "start": 16847,
                    "end": 17013,
                    "body": [
                        "    public void testSingletons_test164_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test164_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "16679-16844:testSingletons_test163_decomposed": {
                    "start": 16679,
                    "end": 16844,
                    "body": [
                        "    public void testSingletons_test163_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"51\", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test163_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "16512-16676:testSingletons_test162_decomposed": {
                    "start": 16512,
                    "end": 16676,
                    "body": [
                        "    public void testSingletons_test162_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test162_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "16346-16509:testSingletons_test161_decomposed": {
                    "start": 16346,
                    "end": 16509,
                    "body": [
                        "    public void testSingletons_test161_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"50\", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test161_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "16181-16343:testSingletons_test160_decomposed": {
                    "start": 16181,
                    "end": 16343,
                    "body": [
                        "    public void testSingletons_test160_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test160_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "16017-16178:testSingletons_test159_decomposed": {
                    "start": 16017,
                    "end": 16178,
                    "body": [
                        "    public void testSingletons_test159_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4F\", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test159_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "15854-16014:testSingletons_test158_decomposed": {
                    "start": 15854,
                    "end": 16014,
                    "body": [
                        "    public void testSingletons_test158_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test158_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "15692-15851:testSingletons_test157_decomposed": {
                    "start": 15692,
                    "end": 15851,
                    "body": [
                        "    public void testSingletons_test157_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4E\", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test157_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "15531-15689:testSingletons_test156_decomposed": {
                    "start": 15531,
                    "end": 15689,
                    "body": [
                        "    public void testSingletons_test156_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test156_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "15371-15528:testSingletons_test155_decomposed": {
                    "start": 15371,
                    "end": 15528,
                    "body": [
                        "    public void testSingletons_test155_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4D\", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test155_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "15212-15368:testSingletons_test154_decomposed": {
                    "start": 15212,
                    "end": 15368,
                    "body": [
                        "    public void testSingletons_test154_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test154_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "15054-15209:testSingletons_test153_decomposed": {
                    "start": 15054,
                    "end": 15209,
                    "body": [
                        "    public void testSingletons_test153_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4C\", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test153_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "14897-15051:testSingletons_test152_decomposed": {
                    "start": 14897,
                    "end": 15051,
                    "body": [
                        "    public void testSingletons_test152_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test152_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "14741-14894:testSingletons_test151_decomposed": {
                    "start": 14741,
                    "end": 14894,
                    "body": [
                        "    public void testSingletons_test151_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4B\", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test151_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "14586-14738:testSingletons_test150_decomposed": {
                    "start": 14586,
                    "end": 14738,
                    "body": [
                        "    public void testSingletons_test150_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test150_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "14432-14583:testSingletons_test149_decomposed": {
                    "start": 14432,
                    "end": 14583,
                    "body": [
                        "    public void testSingletons_test149_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"4A\", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test149_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "14279-14429:testSingletons_test148_decomposed": {
                    "start": 14279,
                    "end": 14429,
                    "body": [
                        "    public void testSingletons_test148_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test148_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "14127-14276:testSingletons_test147_decomposed": {
                    "start": 14127,
                    "end": 14276,
                    "body": [
                        "    public void testSingletons_test147_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"49\", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test147_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "13976-14124:testSingletons_test146_decomposed": {
                    "start": 13976,
                    "end": 14124,
                    "body": [
                        "    public void testSingletons_test146_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test146_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "13826-13973:testSingletons_test145_decomposed": {
                    "start": 13826,
                    "end": 13973,
                    "body": [
                        "    public void testSingletons_test145_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"48\", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test145_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "13677-13823:testSingletons_test144_decomposed": {
                    "start": 13677,
                    "end": 13823,
                    "body": [
                        "    public void testSingletons_test144_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test144_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "13529-13674:testSingletons_test143_decomposed": {
                    "start": 13529,
                    "end": 13674,
                    "body": [
                        "    public void testSingletons_test143_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"47\", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test143_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "13382-13526:testSingletons_test142_decomposed": {
                    "start": 13382,
                    "end": 13526,
                    "body": [
                        "    public void testSingletons_test142_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test142_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "13236-13379:testSingletons_test141_decomposed": {
                    "start": 13236,
                    "end": 13379,
                    "body": [
                        "    public void testSingletons_test141_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"46\", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test141_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "13091-13233:testSingletons_test140_decomposed": {
                    "start": 13091,
                    "end": 13233,
                    "body": [
                        "    public void testSingletons_test140_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test140_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "12947-13088:testSingletons_test139_decomposed": {
                    "start": 12947,
                    "end": 13088,
                    "body": [
                        "    public void testSingletons_test139_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"45\", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test139_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "12804-12944:testSingletons_test138_decomposed": {
                    "start": 12804,
                    "end": 12944,
                    "body": [
                        "    public void testSingletons_test138_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test138_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "12662-12801:testSingletons_test137_decomposed": {
                    "start": 12662,
                    "end": 12801,
                    "body": [
                        "    public void testSingletons_test137_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"44\", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test137_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "12521-12659:testSingletons_test136_decomposed": {
                    "start": 12521,
                    "end": 12659,
                    "body": [
                        "    public void testSingletons_test136_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test136_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "12381-12518:testSingletons_test135_decomposed": {
                    "start": 12381,
                    "end": 12518,
                    "body": [
                        "    public void testSingletons_test135_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"43\", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test135_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "12242-12378:testSingletons_test134_decomposed": {
                    "start": 12242,
                    "end": 12378,
                    "body": [
                        "    public void testSingletons_test134_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test134_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "12104-12239:testSingletons_test133_decomposed": {
                    "start": 12104,
                    "end": 12239,
                    "body": [
                        "    public void testSingletons_test133_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"42\", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test133_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "11967-12101:testSingletons_test132_decomposed": {
                    "start": 11967,
                    "end": 12101,
                    "body": [
                        "    public void testSingletons_test132_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test132_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "11831-11964:testSingletons_test131_decomposed": {
                    "start": 11831,
                    "end": 11964,
                    "body": [
                        "    public void testSingletons_test131_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"41\", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test131_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "11696-11828:testSingletons_test130_decomposed": {
                    "start": 11696,
                    "end": 11828,
                    "body": [
                        "    public void testSingletons_test130_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test130_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "11562-11693:testSingletons_test129_decomposed": {
                    "start": 11562,
                    "end": 11693,
                    "body": [
                        "    public void testSingletons_test129_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"40\", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test129_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "11429-11559:testSingletons_test128_decomposed": {
                    "start": 11429,
                    "end": 11559,
                    "body": [
                        "    public void testSingletons_test128_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test128_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "11297-11426:testSingletons_test127_decomposed": {
                    "start": 11297,
                    "end": 11426,
                    "body": [
                        "    public void testSingletons_test127_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3F\", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test127_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "11166-11294:testSingletons_test126_decomposed": {
                    "start": 11166,
                    "end": 11294,
                    "body": [
                        "    public void testSingletons_test126_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test126_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "11036-11163:testSingletons_test125_decomposed": {
                    "start": 11036,
                    "end": 11163,
                    "body": [
                        "    public void testSingletons_test125_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3E\", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test125_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "10907-11033:testSingletons_test124_decomposed": {
                    "start": 10907,
                    "end": 11033,
                    "body": [
                        "    public void testSingletons_test124_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test124_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "10779-10904:testSingletons_test123_decomposed": {
                    "start": 10779,
                    "end": 10904,
                    "body": [
                        "    public void testSingletons_test123_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3D\", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test123_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "10652-10776:testSingletons_test122_decomposed": {
                    "start": 10652,
                    "end": 10776,
                    "body": [
                        "    public void testSingletons_test122_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test122_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "10526-10649:testSingletons_test121_decomposed": {
                    "start": 10526,
                    "end": 10649,
                    "body": [
                        "    public void testSingletons_test121_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3C\", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test121_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "10401-10523:testSingletons_test120_decomposed": {
                    "start": 10401,
                    "end": 10523,
                    "body": [
                        "    public void testSingletons_test120_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test120_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "10277-10398:testSingletons_test119_decomposed": {
                    "start": 10277,
                    "end": 10398,
                    "body": [
                        "    public void testSingletons_test119_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3B\", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test119_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "10154-10274:testSingletons_test118_decomposed": {
                    "start": 10154,
                    "end": 10274,
                    "body": [
                        "    public void testSingletons_test118_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test118_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "10032-10151:testSingletons_test117_decomposed": {
                    "start": 10032,
                    "end": 10151,
                    "body": [
                        "    public void testSingletons_test117_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"3A\", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test117_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "9911-10029:testSingletons_test116_decomposed": {
                    "start": 9911,
                    "end": 10029,
                    "body": [
                        "    public void testSingletons_test116_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test116_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "9791-9908:testSingletons_test115_decomposed": {
                    "start": 9791,
                    "end": 9908,
                    "body": [
                        "    public void testSingletons_test115_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"39\", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test115_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "9672-9788:testSingletons_test114_decomposed": {
                    "start": 9672,
                    "end": 9788,
                    "body": [
                        "    public void testSingletons_test114_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test114_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "9554-9669:testSingletons_test113_decomposed": {
                    "start": 9554,
                    "end": 9669,
                    "body": [
                        "    public void testSingletons_test113_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"38\", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test113_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "9437-9551:testSingletons_test112_decomposed": {
                    "start": 9437,
                    "end": 9551,
                    "body": [
                        "    public void testSingletons_test112_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test112_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "9321-9434:testSingletons_test111_decomposed": {
                    "start": 9321,
                    "end": 9434,
                    "body": [
                        "    public void testSingletons_test111_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"37\", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test111_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "9206-9318:testSingletons_test110_decomposed": {
                    "start": 9206,
                    "end": 9318,
                    "body": [
                        "    public void testSingletons_test110_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test110_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "9092-9203:testSingletons_test109_decomposed": {
                    "start": 9092,
                    "end": 9203,
                    "body": [
                        "    public void testSingletons_test109_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"36\", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test109_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "8979-9089:testSingletons_test108_decomposed": {
                    "start": 8979,
                    "end": 9089,
                    "body": [
                        "    public void testSingletons_test108_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test108_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "8867-8976:testSingletons_test107_decomposed": {
                    "start": 8867,
                    "end": 8976,
                    "body": [
                        "    public void testSingletons_test107_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"35\", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test107_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "8756-8864:testSingletons_test106_decomposed": {
                    "start": 8756,
                    "end": 8864,
                    "body": [
                        "    public void testSingletons_test106_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test106_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "8646-8753:testSingletons_test105_decomposed": {
                    "start": 8646,
                    "end": 8753,
                    "body": [
                        "    public void testSingletons_test105_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"34\", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test105_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "8537-8643:testSingletons_test104_decomposed": {
                    "start": 8537,
                    "end": 8643,
                    "body": [
                        "    public void testSingletons_test104_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test104_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "8429-8534:testSingletons_test103_decomposed": {
                    "start": 8429,
                    "end": 8534,
                    "body": [
                        "    public void testSingletons_test103_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"33\", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test103_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "8322-8426:testSingletons_test102_decomposed": {
                    "start": 8322,
                    "end": 8426,
                    "body": [
                        "    public void testSingletons_test102_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test102_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "8216-8319:testSingletons_test101_decomposed": {
                    "start": 8216,
                    "end": 8319,
                    "body": [
                        "    public void testSingletons_test101_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"32\", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test101_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "8111-8213:testSingletons_test100_decomposed": {
                    "start": 8111,
                    "end": 8213,
                    "body": [
                        "    public void testSingletons_test100_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test100_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "8007-8108:testSingletons_test99_decomposed": {
                    "start": 8007,
                    "end": 8108,
                    "body": [
                        "    public void testSingletons_test99_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"31\", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test99_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "7904-8004:testSingletons_test98_decomposed": {
                    "start": 7904,
                    "end": 8004,
                    "body": [
                        "    public void testSingletons_test98_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test98_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "7802-7901:testSingletons_test97_decomposed": {
                    "start": 7802,
                    "end": 7901,
                    "body": [
                        "    public void testSingletons_test97_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"30\", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test97_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "7701-7799:testSingletons_test96_decomposed": {
                    "start": 7701,
                    "end": 7799,
                    "body": [
                        "    public void testSingletons_test96_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test96_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "7601-7698:testSingletons_test95_decomposed": {
                    "start": 7601,
                    "end": 7698,
                    "body": [
                        "    public void testSingletons_test95_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2F\", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test95_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "7502-7598:testSingletons_test94_decomposed": {
                    "start": 7502,
                    "end": 7598,
                    "body": [
                        "    public void testSingletons_test94_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test94_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "7404-7499:testSingletons_test93_decomposed": {
                    "start": 7404,
                    "end": 7499,
                    "body": [
                        "    public void testSingletons_test93_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2E\", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test93_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "7307-7401:testSingletons_test92_decomposed": {
                    "start": 7307,
                    "end": 7401,
                    "body": [
                        "    public void testSingletons_test92_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test92_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "7211-7304:testSingletons_test91_decomposed": {
                    "start": 7211,
                    "end": 7304,
                    "body": [
                        "    public void testSingletons_test91_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2D\", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test91_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "7116-7208:testSingletons_test90_decomposed": {
                    "start": 7116,
                    "end": 7208,
                    "body": [
                        "    public void testSingletons_test90_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test90_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "7022-7113:testSingletons_test89_decomposed": {
                    "start": 7022,
                    "end": 7113,
                    "body": [
                        "    public void testSingletons_test89_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2C\", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test89_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "6929-7019:testSingletons_test88_decomposed": {
                    "start": 6929,
                    "end": 7019,
                    "body": [
                        "    public void testSingletons_test88_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test88_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "6837-6926:testSingletons_test87_decomposed": {
                    "start": 6837,
                    "end": 6926,
                    "body": [
                        "    public void testSingletons_test87_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2B\", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test87_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "6746-6834:testSingletons_test86_decomposed": {
                    "start": 6746,
                    "end": 6834,
                    "body": [
                        "    public void testSingletons_test86_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test86_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "6656-6743:testSingletons_test85_decomposed": {
                    "start": 6656,
                    "end": 6743,
                    "body": [
                        "    public void testSingletons_test85_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"2A\", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test85_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "6567-6653:testSingletons_test84_decomposed": {
                    "start": 6567,
                    "end": 6653,
                    "body": [
                        "    public void testSingletons_test84_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test84_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "6479-6564:testSingletons_test83_decomposed": {
                    "start": 6479,
                    "end": 6564,
                    "body": [
                        "    public void testSingletons_test83_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"29\", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test83_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "6392-6476:testSingletons_test82_decomposed": {
                    "start": 6392,
                    "end": 6476,
                    "body": [
                        "    public void testSingletons_test82_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test82_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "6306-6389:testSingletons_test81_decomposed": {
                    "start": 6306,
                    "end": 6389,
                    "body": [
                        "    public void testSingletons_test81_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"28\", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test81_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "6221-6303:testSingletons_test80_decomposed": {
                    "start": 6221,
                    "end": 6303,
                    "body": [
                        "    public void testSingletons_test80_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test80_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "6137-6218:testSingletons_test79_decomposed": {
                    "start": 6137,
                    "end": 6218,
                    "body": [
                        "    public void testSingletons_test79_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"27\", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test79_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "6054-6134:testSingletons_test78_decomposed": {
                    "start": 6054,
                    "end": 6134,
                    "body": [
                        "    public void testSingletons_test78_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test78_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "5972-6051:testSingletons_test77_decomposed": {
                    "start": 5972,
                    "end": 6051,
                    "body": [
                        "    public void testSingletons_test77_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"26\", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test77_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "5891-5969:testSingletons_test76_decomposed": {
                    "start": 5891,
                    "end": 5969,
                    "body": [
                        "    public void testSingletons_test76_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test76_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "5811-5888:testSingletons_test75_decomposed": {
                    "start": 5811,
                    "end": 5888,
                    "body": [
                        "    public void testSingletons_test75_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"25\", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test75_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "5732-5808:testSingletons_test74_decomposed": {
                    "start": 5732,
                    "end": 5808,
                    "body": [
                        "    public void testSingletons_test74_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test74_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "5654-5729:testSingletons_test73_decomposed": {
                    "start": 5654,
                    "end": 5729,
                    "body": [
                        "    public void testSingletons_test73_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"24\", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test73_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "5577-5651:testSingletons_test72_decomposed": {
                    "start": 5577,
                    "end": 5651,
                    "body": [
                        "    public void testSingletons_test72_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test72_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "5501-5574:testSingletons_test71_decomposed": {
                    "start": 5501,
                    "end": 5574,
                    "body": [
                        "    public void testSingletons_test71_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"23\", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test71_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "5426-5498:testSingletons_test70_decomposed": {
                    "start": 5426,
                    "end": 5498,
                    "body": [
                        "    public void testSingletons_test70_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test70_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "5352-5423:testSingletons_test69_decomposed": {
                    "start": 5352,
                    "end": 5423,
                    "body": [
                        "    public void testSingletons_test69_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"22\", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test69_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "5279-5349:testSingletons_test68_decomposed": {
                    "start": 5279,
                    "end": 5349,
                    "body": [
                        "    public void testSingletons_test68_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test68_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "5207-5276:testSingletons_test67_decomposed": {
                    "start": 5207,
                    "end": 5276,
                    "body": [
                        "    public void testSingletons_test67_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"21\", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test67_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "5136-5204:testSingletons_test66_decomposed": {
                    "start": 5136,
                    "end": 5204,
                    "body": [
                        "    public void testSingletons_test66_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test66_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "5066-5133:testSingletons_test65_decomposed": {
                    "start": 5066,
                    "end": 5133,
                    "body": [
                        "    public void testSingletons_test65_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"20\", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test65_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "4997-5063:testSingletons_test64_decomposed": {
                    "start": 4997,
                    "end": 5063,
                    "body": [
                        "    public void testSingletons_test64_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test64_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "4929-4994:testSingletons_test63_decomposed": {
                    "start": 4929,
                    "end": 4994,
                    "body": [
                        "    public void testSingletons_test63_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1F\", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test63_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "4862-4926:testSingletons_test62_decomposed": {
                    "start": 4862,
                    "end": 4926,
                    "body": [
                        "    public void testSingletons_test62_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test62_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "4796-4859:testSingletons_test61_decomposed": {
                    "start": 4796,
                    "end": 4859,
                    "body": [
                        "    public void testSingletons_test61_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1E\", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test61_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "4731-4793:testSingletons_test60_decomposed": {
                    "start": 4731,
                    "end": 4793,
                    "body": [
                        "    public void testSingletons_test60_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test60_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "4667-4728:testSingletons_test59_decomposed": {
                    "start": 4667,
                    "end": 4728,
                    "body": [
                        "    public void testSingletons_test59_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1D\", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test59_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "4604-4664:testSingletons_test58_decomposed": {
                    "start": 4604,
                    "end": 4664,
                    "body": [
                        "    public void testSingletons_test58_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test58_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "4542-4601:testSingletons_test57_decomposed": {
                    "start": 4542,
                    "end": 4601,
                    "body": [
                        "    public void testSingletons_test57_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1C\", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test57_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "4481-4539:testSingletons_test56_decomposed": {
                    "start": 4481,
                    "end": 4539,
                    "body": [
                        "    public void testSingletons_test56_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test56_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "4421-4478:testSingletons_test55_decomposed": {
                    "start": 4421,
                    "end": 4478,
                    "body": [
                        "    public void testSingletons_test55_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1B\", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test55_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "4362-4418:testSingletons_test54_decomposed": {
                    "start": 4362,
                    "end": 4418,
                    "body": [
                        "    public void testSingletons_test54_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test54_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "4304-4359:testSingletons_test53_decomposed": {
                    "start": 4304,
                    "end": 4359,
                    "body": [
                        "    public void testSingletons_test53_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"1A\", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test53_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "4247-4301:testSingletons_test52_decomposed": {
                    "start": 4247,
                    "end": 4301,
                    "body": [
                        "    public void testSingletons_test52_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test52_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "4191-4244:testSingletons_test51_decomposed": {
                    "start": 4191,
                    "end": 4244,
                    "body": [
                        "    public void testSingletons_test51_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"19\", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test51_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "4136-4188:testSingletons_test50_decomposed": {
                    "start": 4136,
                    "end": 4188,
                    "body": [
                        "    public void testSingletons_test50_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test50_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "4082-4133:testSingletons_test49_decomposed": {
                    "start": 4082,
                    "end": 4133,
                    "body": [
                        "    public void testSingletons_test49_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"18\", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test49_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "4029-4079:testSingletons_test48_decomposed": {
                    "start": 4029,
                    "end": 4079,
                    "body": [
                        "    public void testSingletons_test48_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test48_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3977-4026:testSingletons_test47_decomposed": {
                    "start": 3977,
                    "end": 4026,
                    "body": [
                        "    public void testSingletons_test47_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"17\", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test47_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3926-3974:testSingletons_test46_decomposed": {
                    "start": 3926,
                    "end": 3974,
                    "body": [
                        "    public void testSingletons_test46_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test46_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3876-3923:testSingletons_test45_decomposed": {
                    "start": 3876,
                    "end": 3923,
                    "body": [
                        "    public void testSingletons_test45_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"16\", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test45_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3827-3873:testSingletons_test44_decomposed": {
                    "start": 3827,
                    "end": 3873,
                    "body": [
                        "    public void testSingletons_test44_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test44_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3779-3824:testSingletons_test43_decomposed": {
                    "start": 3779,
                    "end": 3824,
                    "body": [
                        "    public void testSingletons_test43_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"15\", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test43_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3732-3776:testSingletons_test42_decomposed": {
                    "start": 3732,
                    "end": 3776,
                    "body": [
                        "    public void testSingletons_test42_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test42_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3686-3729:testSingletons_test41_decomposed": {
                    "start": 3686,
                    "end": 3729,
                    "body": [
                        "    public void testSingletons_test41_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"14\", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test41_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3641-3683:testSingletons_test40_decomposed": {
                    "start": 3641,
                    "end": 3683,
                    "body": [
                        "    public void testSingletons_test40_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test40_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3597-3638:testSingletons_test39_decomposed": {
                    "start": 3597,
                    "end": 3638,
                    "body": [
                        "    public void testSingletons_test39_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"13\", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test39_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3554-3594:testSingletons_test38_decomposed": {
                    "start": 3554,
                    "end": 3594,
                    "body": [
                        "    public void testSingletons_test38_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test38_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3512-3551:testSingletons_test37_decomposed": {
                    "start": 3512,
                    "end": 3551,
                    "body": [
                        "    public void testSingletons_test37_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"12\", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test37_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3471-3509:testSingletons_test36_decomposed": {
                    "start": 3471,
                    "end": 3509,
                    "body": [
                        "    public void testSingletons_test36_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test36_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3431-3468:testSingletons_test35_decomposed": {
                    "start": 3431,
                    "end": 3468,
                    "body": [
                        "    public void testSingletons_test35_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"11\", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test35_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3392-3428:testSingletons_test34_decomposed": {
                    "start": 3392,
                    "end": 3428,
                    "body": [
                        "    public void testSingletons_test34_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test34_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3354-3389:testSingletons_test33_decomposed": {
                    "start": 3354,
                    "end": 3389,
                    "body": [
                        "    public void testSingletons_test33_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"10\", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test33_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3317-3351:testSingletons_test32_decomposed": {
                    "start": 3317,
                    "end": 3351,
                    "body": [
                        "    public void testSingletons_test32_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test32_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3281-3314:testSingletons_test31_decomposed": {
                    "start": 3281,
                    "end": 3314,
                    "body": [
                        "    public void testSingletons_test31_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0F\", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test31_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3246-3278:testSingletons_test30_decomposed": {
                    "start": 3246,
                    "end": 3278,
                    "body": [
                        "    public void testSingletons_test30_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test30_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3212-3243:testSingletons_test29_decomposed": {
                    "start": 3212,
                    "end": 3243,
                    "body": [
                        "    public void testSingletons_test29_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0E\", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test29_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3179-3209:testSingletons_test28_decomposed": {
                    "start": 3179,
                    "end": 3209,
                    "body": [
                        "    public void testSingletons_test28_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test28_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3147-3176:testSingletons_test27_decomposed": {
                    "start": 3147,
                    "end": 3176,
                    "body": [
                        "    public void testSingletons_test27_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0D\", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test27_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3116-3144:testSingletons_test26_decomposed": {
                    "start": 3116,
                    "end": 3144,
                    "body": [
                        "    public void testSingletons_test26_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test26_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3086-3113:testSingletons_test25_decomposed": {
                    "start": 3086,
                    "end": 3113,
                    "body": [
                        "    public void testSingletons_test25_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0C\", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test25_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3057-3083:testSingletons_test24_decomposed": {
                    "start": 3057,
                    "end": 3083,
                    "body": [
                        "    public void testSingletons_test24_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test24_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3029-3054:testSingletons_test23_decomposed": {
                    "start": 3029,
                    "end": 3054,
                    "body": [
                        "    public void testSingletons_test23_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0B\", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test23_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "3002-3026:testSingletons_test22_decomposed": {
                    "start": 3002,
                    "end": 3026,
                    "body": [
                        "    public void testSingletons_test22_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test22_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2976-2999:testSingletons_test21_decomposed": {
                    "start": 2976,
                    "end": 2999,
                    "body": [
                        "    public void testSingletons_test21_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0A\", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test21_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2951-2973:testSingletons_test20_decomposed": {
                    "start": 2951,
                    "end": 2973,
                    "body": [
                        "    public void testSingletons_test20_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test20_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2927-2948:testSingletons_test19_decomposed": {
                    "start": 2927,
                    "end": 2948,
                    "body": [
                        "    public void testSingletons_test19_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"09\", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test19_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2904-2924:testSingletons_test18_decomposed": {
                    "start": 2904,
                    "end": 2924,
                    "body": [
                        "    public void testSingletons_test18_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test18_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2882-2901:testSingletons_test17_decomposed": {
                    "start": 2882,
                    "end": 2901,
                    "body": [
                        "    public void testSingletons_test17_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"08\", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test17_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2861-2879:testSingletons_test16_decomposed": {
                    "start": 2861,
                    "end": 2879,
                    "body": [
                        "    public void testSingletons_test16_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test16_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2841-2858:testSingletons_test15_decomposed": {
                    "start": 2841,
                    "end": 2858,
                    "body": [
                        "    public void testSingletons_test15_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"07\", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test15_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2822-2838:testSingletons_test14_decomposed": {
                    "start": 2822,
                    "end": 2838,
                    "body": [
                        "    public void testSingletons_test14_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test14_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2804-2819:testSingletons_test13_decomposed": {
                    "start": 2804,
                    "end": 2819,
                    "body": [
                        "    public void testSingletons_test13_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"06\", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test13_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2787-2801:testSingletons_test12_decomposed": {
                    "start": 2787,
                    "end": 2801,
                    "body": [
                        "    public void testSingletons_test12_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test12_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2771-2784:testSingletons_test11_decomposed": {
                    "start": 2771,
                    "end": 2784,
                    "body": [
                        "    public void testSingletons_test11_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"05\", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test11_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2756-2768:testSingletons_test10_decomposed": {
                    "start": 2756,
                    "end": 2768,
                    "body": [
                        "    public void testSingletons_test10_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test10_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2742-2753:testSingletons_test9_decomposed": {
                    "start": 2742,
                    "end": 2753,
                    "body": [
                        "    public void testSingletons_test9_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"04\", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test9_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2729-2739:testSingletons_test8_decomposed": {
                    "start": 2729,
                    "end": 2739,
                    "body": [
                        "    public void testSingletons_test8_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2717-2726:testSingletons_test7_decomposed": {
                    "start": 2717,
                    "end": 2726,
                    "body": [
                        "    public void testSingletons_test7_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"03\", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2706-2714:testSingletons_test6_decomposed": {
                    "start": 2706,
                    "end": 2714,
                    "body": [
                        "    public void testSingletons_test6_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2696-2703:testSingletons_test5_decomposed": {
                    "start": 2696,
                    "end": 2703,
                    "body": [
                        "    public void testSingletons_test5_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"02\", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2687-2693:testSingletons_test4_decomposed": {
                    "start": 2687,
                    "end": 2693,
                    "body": [
                        "    public void testSingletons_test4_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2679-2684:testSingletons_test3_decomposed": {
                    "start": 2679,
                    "end": 2684,
                    "body": [
                        "    public void testSingletons_test3_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"01\", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2672-2676:testSingletons_test2_decomposed": {
                    "start": 2672,
                    "end": 2676,
                    "body": [
                        "    public void testSingletons_test2_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2666-2669:testSingletons_test1_decomposed": {
                    "start": 2666,
                    "end": 2669,
                    "body": [
                        "    public void testSingletons_test1_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"00\", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2661-2663:testSingletons_test0_decomposed": {
                    "start": 2661,
                    "end": 2663,
                    "body": [
                        "    public void testSingletons_test0_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSingletons_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ]
                    ]
                },
                "2609-2658:testPairs_test36_decomposed": {
                    "start": 2609,
                    "end": 2658,
                    "body": [
                        "    public void testPairs_test36_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0009\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000A\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000B\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000C\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000D\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000E\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000F\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"0010\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"0011\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 17})));\n",
                        "        for (int i = -128; i <= 127; i++) {\n",
                        "            final byte test[] = {(byte) i, (byte) i};\n",
                        "            assertArrayEquals(test, Base16.Base162().decode0(Base16.Base162().encode0(test)));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test36_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(byte[],byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "2561-2606:testPairs_test35_decomposed": {
                    "start": 2561,
                    "end": 2606,
                    "body": [
                        "    public void testPairs_test35_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0009\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000A\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000B\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000C\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000D\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000E\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000F\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"0010\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"0011\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 17})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test35_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2515-2558:testPairs_test34_decomposed": {
                    "start": 2515,
                    "end": 2558,
                    "body": [
                        "    public void testPairs_test34_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0009\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000A\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000B\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000C\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000D\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000E\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000F\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"0010\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 16})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test34_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2470-2512:testPairs_test33_decomposed": {
                    "start": 2470,
                    "end": 2512,
                    "body": [
                        "    public void testPairs_test33_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0009\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000A\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000B\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000C\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000D\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000E\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000F\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"0010\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 16})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test33_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2427-2467:testPairs_test32_decomposed": {
                    "start": 2427,
                    "end": 2467,
                    "body": [
                        "    public void testPairs_test32_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0009\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000A\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000B\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000C\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000D\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000E\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000F\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 15})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test32_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2385-2424:testPairs_test31_decomposed": {
                    "start": 2385,
                    "end": 2424,
                    "body": [
                        "    public void testPairs_test31_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0009\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000A\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000B\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000C\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000D\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000E\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000F\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 15})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test31_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2345-2382:testPairs_test30_decomposed": {
                    "start": 2345,
                    "end": 2382,
                    "body": [
                        "    public void testPairs_test30_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0009\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000A\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000B\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000C\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000D\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000E\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 14})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test30_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2306-2342:testPairs_test29_decomposed": {
                    "start": 2306,
                    "end": 2342,
                    "body": [
                        "    public void testPairs_test29_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0009\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000A\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000B\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000C\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000D\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000E\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 14})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test29_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2269-2303:testPairs_test28_decomposed": {
                    "start": 2269,
                    "end": 2303,
                    "body": [
                        "    public void testPairs_test28_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0009\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000A\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000B\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000C\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000D\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test28_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2233-2266:testPairs_test27_decomposed": {
                    "start": 2233,
                    "end": 2266,
                    "body": [
                        "    public void testPairs_test27_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0009\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000A\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000B\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000C\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000D\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test27_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2199-2230:testPairs_test26_decomposed": {
                    "start": 2199,
                    "end": 2230,
                    "body": [
                        "    public void testPairs_test26_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0009\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000A\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000B\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000C\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test26_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2166-2196:testPairs_test25_decomposed": {
                    "start": 2166,
                    "end": 2196,
                    "body": [
                        "    public void testPairs_test25_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0009\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000A\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000B\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000C\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test25_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2135-2163:testPairs_test24_decomposed": {
                    "start": 2135,
                    "end": 2163,
                    "body": [
                        "    public void testPairs_test24_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0009\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000A\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000B\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test24_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2105-2132:testPairs_test23_decomposed": {
                    "start": 2105,
                    "end": 2132,
                    "body": [
                        "    public void testPairs_test23_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0009\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000A\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000B\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test23_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2077-2102:testPairs_test22_decomposed": {
                    "start": 2077,
                    "end": 2102,
                    "body": [
                        "    public void testPairs_test22_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0009\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000A\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test22_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2050-2074:testPairs_test21_decomposed": {
                    "start": 2050,
                    "end": 2074,
                    "body": [
                        "    public void testPairs_test21_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0009\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\n",
                        "                \"000A\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test21_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2025-2047:testPairs_test20_decomposed": {
                    "start": 2025,
                    "end": 2047,
                    "body": [
                        "    public void testPairs_test20_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0009\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test20_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "2001-2022:testPairs_test19_decomposed": {
                    "start": 2001,
                    "end": 2022,
                    "body": [
                        "    public void testPairs_test19_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0009\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test19_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1978-1998:testPairs_test18_decomposed": {
                    "start": 1978,
                    "end": 1998,
                    "body": [
                        "    public void testPairs_test18_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test18_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1956-1975:testPairs_test17_decomposed": {
                    "start": 1956,
                    "end": 1975,
                    "body": [
                        "    public void testPairs_test17_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0008\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test17_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1935-1953:testPairs_test16_decomposed": {
                    "start": 1935,
                    "end": 1953,
                    "body": [
                        "    public void testPairs_test16_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test16_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1915-1932:testPairs_test15_decomposed": {
                    "start": 1915,
                    "end": 1932,
                    "body": [
                        "    public void testPairs_test15_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0007\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test15_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1896-1912:testPairs_test14_decomposed": {
                    "start": 1896,
                    "end": 1912,
                    "body": [
                        "    public void testPairs_test14_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test14_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1878-1893:testPairs_test13_decomposed": {
                    "start": 1878,
                    "end": 1893,
                    "body": [
                        "    public void testPairs_test13_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0006\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test13_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1861-1875:testPairs_test12_decomposed": {
                    "start": 1861,
                    "end": 1875,
                    "body": [
                        "    public void testPairs_test12_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test12_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1845-1858:testPairs_test11_decomposed": {
                    "start": 1845,
                    "end": 1858,
                    "body": [
                        "    public void testPairs_test11_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0005\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test11_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1830-1842:testPairs_test10_decomposed": {
                    "start": 1830,
                    "end": 1842,
                    "body": [
                        "    public void testPairs_test10_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test10_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1816-1827:testPairs_test9_decomposed": {
                    "start": 1816,
                    "end": 1827,
                    "body": [
                        "    public void testPairs_test9_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0004\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test9_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1803-1813:testPairs_test8_decomposed": {
                    "start": 1803,
                    "end": 1813,
                    "body": [
                        "    public void testPairs_test8_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1791-1800:testPairs_test7_decomposed": {
                    "start": 1791,
                    "end": 1800,
                    "body": [
                        "    public void testPairs_test7_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0003\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1780-1788:testPairs_test6_decomposed": {
                    "start": 1780,
                    "end": 1788,
                    "body": [
                        "    public void testPairs_test6_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1770-1777:testPairs_test5_decomposed": {
                    "start": 1770,
                    "end": 1777,
                    "body": [
                        "    public void testPairs_test5_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0002\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1761-1767:testPairs_test4_decomposed": {
                    "start": 1761,
                    "end": 1767,
                    "body": [
                        "    public void testPairs_test4_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1753-1758:testPairs_test3_decomposed": {
                    "start": 1753,
                    "end": 1758,
                    "body": [
                        "    public void testPairs_test3_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0001\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1746-1750:testPairs_test2_decomposed": {
                    "start": 1746,
                    "end": 1750,
                    "body": [
                        "    public void testPairs_test2_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1740-1743:testPairs_test1_decomposed": {
                    "start": 1740,
                    "end": 1743,
                    "body": [
                        "    public void testPairs_test1_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        assertEquals(\"0000\", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1735-1737:testPairs_test0_decomposed": {
                    "start": 1735,
                    "end": 1737,
                    "body": [
                        "    public void testPairs_test0_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPairs_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ]
                    ]
                },
                "1726-1732:testObjectEncode_test2_decomposed": {
                    "start": 1726,
                    "end": 1732,
                    "body": [
                        "    public void testObjectEncode_test2_decomposed()  {\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "        \"Hello World\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"48656C6C6F20576F726C64\",\n",
                        "                new String(b16.encode0(\"Hello World\".getBytes(CHARSET_UTF8))));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testObjectEncode_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1720-1723:testObjectEncode_test1_decomposed": {
                    "start": 1720,
                    "end": 1723,
                    "body": [
                        "    public void testObjectEncode_test1_decomposed()  {\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "        \"Hello World\".getBytes(CHARSET_UTF8);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testObjectEncode_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ]
                    ]
                },
                "1715-1717:testObjectEncode_test0_decomposed": {
                    "start": 1715,
                    "end": 1717,
                    "body": [
                        "    public void testObjectEncode_test0_decomposed()  {\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testObjectEncode_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ]
                    ]
                },
                "1703-1712:testObjectEncodeWithValidParameter_test5_decomposed": {
                    "start": 1703,
                    "end": 1712,
                    "body": [
                        "    public void testObjectEncodeWithValidParameter_test5_decomposed() throws Exception {\n",
                        "        final String original = \"Hello World!\";\n",
                        "        final Object origObj = original.getBytes(CHARSET_UTF8);\n",
                        "        Base16.Base162();\n",
                        "        final Object oEncoded = Base16.Base162().encode3(origObj);\n",
                        "        Base16.Base162();\n",
                        "        final byte[] bArray = Base16.Base162().decode0((byte[]) oEncoded);\n",
                        "        final String dest = new String(bArray);\n",
                        "        assertEquals(\"dest string does not equal original\", original, dest);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testObjectEncodeWithValidParameter_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "507-512:encode3"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ]
                    ]
                },
                "1693-1700:testObjectEncodeWithValidParameter_test4_decomposed": {
                    "start": 1693,
                    "end": 1700,
                    "body": [
                        "    public void testObjectEncodeWithValidParameter_test4_decomposed() throws Exception {\n",
                        "        final String original = \"Hello World!\";\n",
                        "        final Object origObj = original.getBytes(CHARSET_UTF8);\n",
                        "        Base16.Base162();\n",
                        "        final Object oEncoded = Base16.Base162().encode3(origObj);\n",
                        "        Base16.Base162();\n",
                        "        final byte[] bArray = Base16.Base162().decode0((byte[]) oEncoded);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testObjectEncodeWithValidParameter_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "507-512:encode3"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "1684-1690:testObjectEncodeWithValidParameter_test3_decomposed": {
                    "start": 1684,
                    "end": 1690,
                    "body": [
                        "    public void testObjectEncodeWithValidParameter_test3_decomposed() throws Exception {\n",
                        "        final String original = \"Hello World!\";\n",
                        "        final Object origObj = original.getBytes(CHARSET_UTF8);\n",
                        "        Base16.Base162();\n",
                        "        final Object oEncoded = Base16.Base162().encode3(origObj);\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testObjectEncodeWithValidParameter_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "507-512:encode3"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ]
                    ]
                },
                "1676-1681:testObjectEncodeWithValidParameter_test2_decomposed": {
                    "start": 1676,
                    "end": 1681,
                    "body": [
                        "    public void testObjectEncodeWithValidParameter_test2_decomposed() throws Exception {\n",
                        "        final String original = \"Hello World!\";\n",
                        "        final Object origObj = original.getBytes(CHARSET_UTF8);\n",
                        "        Base16.Base162();\n",
                        "        final Object oEncoded = Base16.Base162().encode3(origObj);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testObjectEncodeWithValidParameter_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "507-512:encode3"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ]
                    ]
                },
                "1669-1673:testObjectEncodeWithValidParameter_test1_decomposed": {
                    "start": 1669,
                    "end": 1673,
                    "body": [
                        "    public void testObjectEncodeWithValidParameter_test1_decomposed() throws Exception {\n",
                        "        final String original = \"Hello World!\";\n",
                        "        final Object origObj = original.getBytes(CHARSET_UTF8);\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testObjectEncodeWithValidParameter_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ]
                    ]
                },
                "1663-1666:testObjectEncodeWithValidParameter_test0_decomposed": {
                    "start": 1663,
                    "end": 1666,
                    "body": [
                        "    public void testObjectEncodeWithValidParameter_test0_decomposed() throws Exception {\n",
                        "        final String original = \"Hello World!\";\n",
                        "        final Object origObj = original.getBytes(CHARSET_UTF8);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testObjectEncodeWithValidParameter_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ]
                    ]
                },
                "1653-1660:testObjectEncodeWithInvalidParameter_test1_decomposed": {
                    "start": 1653,
                    "end": 1660,
                    "body": [
                        "    public void testObjectEncodeWithInvalidParameter_test1_decomposed()  {\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "        try {\n",
                        "            b16.encode3(\"Yadayadayada\");\n",
                        "            fail(\"encode(Object) didn't throw an exception when passed a String object\");\n",
                        "        } catch (final EncoderException e) {\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testObjectEncodeWithInvalidParameter_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "507-512:encode3"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail(java.lang.String)"
                        ]
                    ]
                },
                "1648-1650:testObjectEncodeWithInvalidParameter_test0_decomposed": {
                    "start": 1648,
                    "end": 1650,
                    "body": [
                        "    public void testObjectEncodeWithInvalidParameter_test0_decomposed()  {\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testObjectEncodeWithInvalidParameter_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ]
                    ]
                },
                "1635-1645:testObjectDecodeWithValidParameter_test5_decomposed": {
                    "start": 1635,
                    "end": 1645,
                    "body": [
                        "    public void testObjectDecodeWithValidParameter_test5_decomposed() throws Exception {\n",
                        "        final String original = \"Hello World!\";\n",
                        "        Base16.Base162();\n",
                        "        original.getBytes(CHARSET_UTF8);\n",
                        "        final Object o = Base16.Base162().encode0(original.getBytes(CHARSET_UTF8));\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "        final Object oDecoded = b16.decode2(o);\n",
                        "        final byte[] baDecoded = (byte[]) oDecoded;\n",
                        "        final String dest = new String(baDecoded);\n",
                        "        assertEquals(\"dest string does not equal original\", original, dest);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testObjectDecodeWithValidParameter_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ]
                    ]
                },
                "1625-1632:testObjectDecodeWithValidParameter_test4_decomposed": {
                    "start": 1625,
                    "end": 1632,
                    "body": [
                        "    public void testObjectDecodeWithValidParameter_test4_decomposed() throws Exception {\n",
                        "        final String original = \"Hello World!\";\n",
                        "        Base16.Base162();\n",
                        "        original.getBytes(CHARSET_UTF8);\n",
                        "        final Object o = Base16.Base162().encode0(original.getBytes(CHARSET_UTF8));\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "        final Object oDecoded = b16.decode2(o);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testObjectDecodeWithValidParameter_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ]
                    ]
                },
                "1616-1622:testObjectDecodeWithValidParameter_test3_decomposed": {
                    "start": 1616,
                    "end": 1622,
                    "body": [
                        "    public void testObjectDecodeWithValidParameter_test3_decomposed() throws Exception {\n",
                        "        final String original = \"Hello World!\";\n",
                        "        Base16.Base162();\n",
                        "        original.getBytes(CHARSET_UTF8);\n",
                        "        final Object o = Base16.Base162().encode0(original.getBytes(CHARSET_UTF8));\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testObjectDecodeWithValidParameter_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ]
                    ]
                },
                "1608-1613:testObjectDecodeWithValidParameter_test2_decomposed": {
                    "start": 1608,
                    "end": 1613,
                    "body": [
                        "    public void testObjectDecodeWithValidParameter_test2_decomposed() throws Exception {\n",
                        "        final String original = \"Hello World!\";\n",
                        "        Base16.Base162();\n",
                        "        original.getBytes(CHARSET_UTF8);\n",
                        "        final Object o = Base16.Base162().encode0(original.getBytes(CHARSET_UTF8));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testObjectDecodeWithValidParameter_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ]
                    ]
                },
                "1601-1605:testObjectDecodeWithValidParameter_test1_decomposed": {
                    "start": 1601,
                    "end": 1605,
                    "body": [
                        "    public void testObjectDecodeWithValidParameter_test1_decomposed() throws Exception {\n",
                        "        final String original = \"Hello World!\";\n",
                        "        Base16.Base162();\n",
                        "        original.getBytes(CHARSET_UTF8);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testObjectDecodeWithValidParameter_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ]
                    ]
                },
                "1595-1598:testObjectDecodeWithValidParameter_test0_decomposed": {
                    "start": 1595,
                    "end": 1598,
                    "body": [
                        "    public void testObjectDecodeWithValidParameter_test0_decomposed() throws Exception {\n",
                        "        final String original = \"Hello World!\";\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testObjectDecodeWithValidParameter_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ]
                    ]
                },
                "1585-1592:testObjectDecodeWithInvalidParameter_test1_decomposed": {
                    "start": 1585,
                    "end": 1592,
                    "body": [
                        "    public void testObjectDecodeWithInvalidParameter_test1_decomposed()  {\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "        try {\n",
                        "            b16.decode2(Integer.valueOf(5));\n",
                        "            fail(\"decode(Object) didn't throw an exception when passed an Integer object\");\n",
                        "        } catch (final DecoderException e) {\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testObjectDecodeWithInvalidParameter_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "430-439:decode2"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "valueOf(int)"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail(java.lang.String)"
                        ]
                    ]
                },
                "1580-1582:testObjectDecodeWithInvalidParameter_test0_decomposed": {
                    "start": 1580,
                    "end": 1582,
                    "body": [
                        "    public void testObjectDecodeWithInvalidParameter_test0_decomposed()  {\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testObjectDecodeWithInvalidParameter_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ]
                    ]
                },
                "1562-1577:testNonBase16Test_test0_decomposed": {
                    "start": 1562,
                    "end": 1577,
                    "body": [
                        "    public void testNonBase16Test_test0_decomposed()  {\n",
                        "        final byte[] invalidEncodedChars = {'/', ':', '@', 'G', '%', '`', 'g'};\n",
                        "        final byte[] encoded = new byte[1];\n",
                        "        for (final byte invalidEncodedChar : invalidEncodedChars) {\n",
                        "            try {\n",
                        "                encoded[0] = invalidEncodedChar;\n",
                        "                Base16.Base162().decode0(encoded);\n",
                        "                fail(\n",
                        "                        \"IllegalArgumentException should have been thrown when trying to decode\"\n",
                        "                                + \" invalid Base16 char: \"\n",
                        "                                + (char) invalidEncodedChar);\n",
                        "            } catch (final Exception e) {\n",
                        "                assertTrue(e instanceof IllegalArgumentException);\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNonBase16Test_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ]
                    ]
                },
                "1508-1559:testKnownEncodings_test17_decomposed": {
                    "start": 1508,
                    "end": 1559,
                    "body": [
                        "    public void testKnownEncodings_test17_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"The quick brown fox jumped over the lazy dogs.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"It was the best of times, it was the worst of times.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"It was the best of times, it was the worst of times.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"http://jakarta.apache.org/commmons\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"http://jakarta.apache.org/commmons\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"xyzzy!\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"78797a7a7921\",\n",
                        "                new String(Base16.Base161(true).encode0(\"xyzzy!\".getBytes(CHARSET_UTF8))));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownEncodings_test17_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1457-1505:testKnownEncodings_test16_decomposed": {
                    "start": 1457,
                    "end": 1505,
                    "body": [
                        "    public void testKnownEncodings_test16_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"The quick brown fox jumped over the lazy dogs.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"It was the best of times, it was the worst of times.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"It was the best of times, it was the worst of times.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"http://jakarta.apache.org/commmons\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"http://jakarta.apache.org/commmons\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"xyzzy!\".getBytes(CHARSET_UTF8);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownEncodings_test16_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1407-1454:testKnownEncodings_test15_decomposed": {
                    "start": 1407,
                    "end": 1454,
                    "body": [
                        "    public void testKnownEncodings_test15_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"The quick brown fox jumped over the lazy dogs.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"It was the best of times, it was the worst of times.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"It was the best of times, it was the worst of times.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"http://jakarta.apache.org/commmons\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"http://jakarta.apache.org/commmons\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownEncodings_test15_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1358-1404:testKnownEncodings_test14_decomposed": {
                    "start": 1358,
                    "end": 1404,
                    "body": [
                        "    public void testKnownEncodings_test14_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"The quick brown fox jumped over the lazy dogs.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"It was the best of times, it was the worst of times.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"It was the best of times, it was the worst of times.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"http://jakarta.apache.org/commmons\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"http://jakarta.apache.org/commmons\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownEncodings_test14_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1316-1355:testKnownEncodings_test13_decomposed": {
                    "start": 1316,
                    "end": 1355,
                    "body": [
                        "    public void testKnownEncodings_test13_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"The quick brown fox jumped over the lazy dogs.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"It was the best of times, it was the worst of times.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"It was the best of times, it was the worst of times.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"http://jakarta.apache.org/commmons\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"http://jakarta.apache.org/commmons\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\".getBytes(CHARSET_UTF8);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownEncodings_test13_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1275-1313:testKnownEncodings_test12_decomposed": {
                    "start": 1275,
                    "end": 1313,
                    "body": [
                        "    public void testKnownEncodings_test12_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"The quick brown fox jumped over the lazy dogs.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"It was the best of times, it was the worst of times.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"It was the best of times, it was the worst of times.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"http://jakarta.apache.org/commmons\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"http://jakarta.apache.org/commmons\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownEncodings_test12_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1235-1272:testKnownEncodings_test11_decomposed": {
                    "start": 1235,
                    "end": 1272,
                    "body": [
                        "    public void testKnownEncodings_test11_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"The quick brown fox jumped over the lazy dogs.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"It was the best of times, it was the worst of times.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"It was the best of times, it was the worst of times.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"http://jakarta.apache.org/commmons\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"http://jakarta.apache.org/commmons\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownEncodings_test11_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1202-1232:testKnownEncodings_test10_decomposed": {
                    "start": 1202,
                    "end": 1232,
                    "body": [
                        "    public void testKnownEncodings_test10_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"The quick brown fox jumped over the lazy dogs.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"It was the best of times, it was the worst of times.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"It was the best of times, it was the worst of times.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"http://jakarta.apache.org/commmons\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"http://jakarta.apache.org/commmons\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes(CHARSET_UTF8);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownEncodings_test10_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1170-1199:testKnownEncodings_test9_decomposed": {
                    "start": 1170,
                    "end": 1199,
                    "body": [
                        "    public void testKnownEncodings_test9_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"The quick brown fox jumped over the lazy dogs.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"It was the best of times, it was the worst of times.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"It was the best of times, it was the worst of times.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"http://jakarta.apache.org/commmons\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"http://jakarta.apache.org/commmons\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownEncodings_test9_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1139-1167:testKnownEncodings_test8_decomposed": {
                    "start": 1139,
                    "end": 1167,
                    "body": [
                        "    public void testKnownEncodings_test8_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"The quick brown fox jumped over the lazy dogs.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"It was the best of times, it was the worst of times.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"It was the best of times, it was the worst of times.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"http://jakarta.apache.org/commmons\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"http://jakarta.apache.org/commmons\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownEncodings_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1115-1136:testKnownEncodings_test7_decomposed": {
                    "start": 1115,
                    "end": 1136,
                    "body": [
                        "    public void testKnownEncodings_test7_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"The quick brown fox jumped over the lazy dogs.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"It was the best of times, it was the worst of times.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"It was the best of times, it was the worst of times.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"http://jakarta.apache.org/commmons\".getBytes(CHARSET_UTF8);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownEncodings_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1092-1112:testKnownEncodings_test6_decomposed": {
                    "start": 1092,
                    "end": 1112,
                    "body": [
                        "    public void testKnownEncodings_test6_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"The quick brown fox jumped over the lazy dogs.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"It was the best of times, it was the worst of times.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"It was the best of times, it was the worst of times.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownEncodings_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1070-1089:testKnownEncodings_test5_decomposed": {
                    "start": 1070,
                    "end": 1089,
                    "body": [
                        "    public void testKnownEncodings_test5_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"The quick brown fox jumped over the lazy dogs.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"It was the best of times, it was the worst of times.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"It was the best of times, it was the worst of times.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownEncodings_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1055-1067:testKnownEncodings_test4_decomposed": {
                    "start": 1055,
                    "end": 1067,
                    "body": [
                        "    public void testKnownEncodings_test4_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"The quick brown fox jumped over the lazy dogs.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"It was the best of times, it was the worst of times.\".getBytes(CHARSET_UTF8);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownEncodings_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1041-1052:testKnownEncodings_test3_decomposed": {
                    "start": 1041,
                    "end": 1052,
                    "body": [
                        "    public void testKnownEncodings_test3_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"The quick brown fox jumped over the lazy dogs.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownEncodings_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1028-1038:testKnownEncodings_test2_decomposed": {
                    "start": 1028,
                    "end": 1038,
                    "body": [
                        "    public void testKnownEncodings_test2_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .encode0(\n",
                        "                                        \"The quick brown fox jumped over the lazy dogs.\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownEncodings_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "1022-1025:testKnownEncodings_test1_decomposed": {
                    "start": 1022,
                    "end": 1025,
                    "body": [
                        "    public void testKnownEncodings_test1_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownEncodings_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ]
                    ]
                },
                "1017-1019:testKnownEncodings_test0_decomposed": {
                    "start": 1017,
                    "end": 1019,
                    "body": [
                        "    public void testKnownEncodings_test0_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownEncodings_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ]
                    ]
                },
                "963-1014:testKnownDecodings_test17_decomposed": {
                    "start": 963,
                    "end": 1014,
                    "body": [
                        "    public void testKnownDecodings_test17_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"The quick brown fox jumped over the lazy dogs.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"It was the best of times, it was the worst of times.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"http://jakarta.apache.org/commmons\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"78797a7a7921\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"xyzzy!\",\n",
                        "                new String(Base16.Base161(true).decode0(\"78797a7a7921\".getBytes(CHARSET_UTF8))));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownDecodings_test17_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "912-960:testKnownDecodings_test16_decomposed": {
                    "start": 912,
                    "end": 960,
                    "body": [
                        "    public void testKnownDecodings_test16_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"The quick brown fox jumped over the lazy dogs.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"It was the best of times, it was the worst of times.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"http://jakarta.apache.org/commmons\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"78797a7a7921\".getBytes(CHARSET_UTF8);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownDecodings_test16_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "862-909:testKnownDecodings_test15_decomposed": {
                    "start": 862,
                    "end": 909,
                    "body": [
                        "    public void testKnownDecodings_test15_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"The quick brown fox jumped over the lazy dogs.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"It was the best of times, it was the worst of times.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"http://jakarta.apache.org/commmons\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownDecodings_test15_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "813-859:testKnownDecodings_test14_decomposed": {
                    "start": 813,
                    "end": 859,
                    "body": [
                        "    public void testKnownDecodings_test14_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"The quick brown fox jumped over the lazy dogs.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"It was the best of times, it was the worst of times.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"http://jakarta.apache.org/commmons\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownDecodings_test14_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "771-810:testKnownDecodings_test13_decomposed": {
                    "start": 771,
                    "end": 810,
                    "body": [
                        "    public void testKnownDecodings_test13_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"The quick brown fox jumped over the lazy dogs.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"It was the best of times, it was the worst of times.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"http://jakarta.apache.org/commmons\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d\".getBytes(CHARSET_UTF8);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownDecodings_test13_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "730-768:testKnownDecodings_test12_decomposed": {
                    "start": 730,
                    "end": 768,
                    "body": [
                        "    public void testKnownDecodings_test12_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"The quick brown fox jumped over the lazy dogs.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"It was the best of times, it was the worst of times.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"http://jakarta.apache.org/commmons\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownDecodings_test12_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "690-727:testKnownDecodings_test11_decomposed": {
                    "start": 690,
                    "end": 727,
                    "body": [
                        "    public void testKnownDecodings_test11_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"The quick brown fox jumped over the lazy dogs.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"It was the best of times, it was the worst of times.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"http://jakarta.apache.org/commmons\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownDecodings_test11_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "657-687:testKnownDecodings_test10_decomposed": {
                    "start": 657,
                    "end": 687,
                    "body": [
                        "    public void testKnownDecodings_test10_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"The quick brown fox jumped over the lazy dogs.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"It was the best of times, it was the worst of times.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"http://jakarta.apache.org/commmons\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a\".getBytes(CHARSET_UTF8);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownDecodings_test10_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "625-654:testKnownDecodings_test9_decomposed": {
                    "start": 625,
                    "end": 654,
                    "body": [
                        "    public void testKnownDecodings_test9_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"The quick brown fox jumped over the lazy dogs.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"It was the best of times, it was the worst of times.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"http://jakarta.apache.org/commmons\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownDecodings_test9_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "594-622:testKnownDecodings_test8_decomposed": {
                    "start": 594,
                    "end": 622,
                    "body": [
                        "    public void testKnownDecodings_test8_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"The quick brown fox jumped over the lazy dogs.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"It was the best of times, it was the worst of times.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"http://jakarta.apache.org/commmons\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownDecodings_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "570-591:testKnownDecodings_test7_decomposed": {
                    "start": 570,
                    "end": 591,
                    "body": [
                        "    public void testKnownDecodings_test7_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"The quick brown fox jumped over the lazy dogs.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"It was the best of times, it was the worst of times.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73\".getBytes(CHARSET_UTF8);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownDecodings_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "547-567:testKnownDecodings_test6_decomposed": {
                    "start": 547,
                    "end": 567,
                    "body": [
                        "    public void testKnownDecodings_test6_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"The quick brown fox jumped over the lazy dogs.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"It was the best of times, it was the worst of times.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownDecodings_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "525-544:testKnownDecodings_test5_decomposed": {
                    "start": 525,
                    "end": 544,
                    "body": [
                        "    public void testKnownDecodings_test5_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"The quick brown fox jumped over the lazy dogs.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"It was the best of times, it was the worst of times.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownDecodings_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "510-522:testKnownDecodings_test4_decomposed": {
                    "start": 510,
                    "end": 522,
                    "body": [
                        "    public void testKnownDecodings_test4_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"The quick brown fox jumped over the lazy dogs.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "        \"497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e\".getBytes(CHARSET_UTF8);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownDecodings_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "496-507:testKnownDecodings_test3_decomposed": {
                    "start": 496,
                    "end": 507,
                    "body": [
                        "    public void testKnownDecodings_test3_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"The quick brown fox jumped over the lazy dogs.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "        Base16.Base161(true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownDecodings_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "483-493:testKnownDecodings_test2_decomposed": {
                    "start": 483,
                    "end": 493,
                    "body": [
                        "    public void testKnownDecodings_test2_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\".getBytes(CHARSET_UTF8);\n",
                        "        assertEquals(\n",
                        "                \"The quick brown fox jumped over the lazy dogs.\",\n",
                        "                new String(\n",
                        "                        Base16.Base161(true)\n",
                        "                                .decode0(\n",
                        "                                        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\"\n",
                        "                                                .getBytes(CHARSET_UTF8))));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownDecodings_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(byte[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "477-480:testKnownDecodings_test1_decomposed": {
                    "start": 477,
                    "end": 480,
                    "body": [
                        "    public void testKnownDecodings_test1_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "        \"54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e\".getBytes(CHARSET_UTF8);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownDecodings_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes(java.nio.charset.Charset)"
                        ]
                    ]
                },
                "472-474:testKnownDecodings_test0_decomposed": {
                    "start": 472,
                    "end": 474,
                    "body": [
                        "    public void testKnownDecodings_test0_decomposed()  {\n",
                        "        Base16.Base161(true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKnownDecodings_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ]
                    ]
                },
                "461-469:testEncodeDecodeSmall_test0_decomposed": {
                    "start": 461,
                    "end": 469,
                    "body": [
                        "    public void testEncodeDecodeSmall_test0_decomposed()  {\n",
                        "        for (int i = 0; i < 12; i++) {\n",
                        "            final byte[] data = new byte[i];\n",
                        "            this.getRandom().nextBytes(data);\n",
                        "            final byte[] enc = Base16.Base162().encode0(data);\n",
                        "            final byte[] data2 = Base16.Base162().decode0(enc);\n",
                        "            assertArrayEquals(toString(data) + \" equals \" + toString(data2), data, data2);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEncodeDecodeSmall_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ],
                        [
                            "library",
                            "java.base/java/util/Random",
                            "nextBytes(byte[])"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.Base16Test",
                            "Base16Test",
                            "50-52:getRandom"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(java.lang.String,byte[],byte[])"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.Base16Test",
                            "Base16Test",
                            "99-108:toString"
                        ]
                    ]
                },
                "449-458:testEncodeDecodeRandom_test0_decomposed": {
                    "start": 449,
                    "end": 458,
                    "body": [
                        "    public void testEncodeDecodeRandom_test0_decomposed()  {\n",
                        "        for (int i = 1; i < 5; i++) {\n",
                        "            final int len = this.getRandom().nextInt(10000) + 1;\n",
                        "            final byte[] data = new byte[len];\n",
                        "            this.getRandom().nextBytes(data);\n",
                        "            final byte[] enc = Base16.Base162().encode0(data);\n",
                        "            final byte[] data2 = Base16.Base162().decode0(enc);\n",
                        "            assertArrayEquals(data, data2);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEncodeDecodeRandom_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Random",
                            "nextInt(int)"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.Base16Test",
                            "Base16Test",
                            "50-52:getRandom"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ],
                        [
                            "library",
                            "java.base/java/util/Random",
                            "nextBytes(byte[])"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(byte[],byte[])"
                        ]
                    ]
                },
                "428-446:testEmptyBase16_test11_decomposed": {
                    "start": 428,
                    "end": 446,
                    "body": [
                        "    public void testEmptyBase16_test11_decomposed()  {\n",
                        "        byte[] empty = {};\n",
                        "        Base16.Base162();\n",
                        "        byte[] result = Base16.Base162().encode0(empty);\n",
                        "        assertEquals(\"empty Base16 encode\", 0, result.length);\n",
                        "        Base16.Base162();\n",
                        "        assertNull(\"empty Base16 encode\", Base16.Base162().encode0(null));\n",
                        "        Base16.Base162();\n",
                        "        result = Base16.Base162().encode1(empty, 0, 1);\n",
                        "        assertEquals(\"empty Base16 encode with offset\", 0, result.length);\n",
                        "        Base16.Base162();\n",
                        "        assertNull(\"empty Base16 encode with offset\", Base16.Base162().encode0(null));\n",
                        "        empty = new byte[0];\n",
                        "        Base16.Base162();\n",
                        "        result = Base16.Base162().decode0(empty);\n",
                        "        assertEquals(\"empty Base16 decode\", 0, result.length);\n",
                        "        Base16.Base162();\n",
                        "        assertNull(\"empty Base16 encode\", Base16.Base162().decode0((byte[]) null));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEmptyBase16_test11_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "478-488:encode1"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "408-425:testEmptyBase16_test10_decomposed": {
                    "start": 408,
                    "end": 425,
                    "body": [
                        "    public void testEmptyBase16_test10_decomposed()  {\n",
                        "        byte[] empty = {};\n",
                        "        Base16.Base162();\n",
                        "        byte[] result = Base16.Base162().encode0(empty);\n",
                        "        assertEquals(\"empty Base16 encode\", 0, result.length);\n",
                        "        Base16.Base162();\n",
                        "        assertNull(\"empty Base16 encode\", Base16.Base162().encode0(null));\n",
                        "        Base16.Base162();\n",
                        "        result = Base16.Base162().encode1(empty, 0, 1);\n",
                        "        assertEquals(\"empty Base16 encode with offset\", 0, result.length);\n",
                        "        Base16.Base162();\n",
                        "        assertNull(\"empty Base16 encode with offset\", Base16.Base162().encode0(null));\n",
                        "        empty = new byte[0];\n",
                        "        Base16.Base162();\n",
                        "        result = Base16.Base162().decode0(empty);\n",
                        "        assertEquals(\"empty Base16 decode\", 0, result.length);\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEmptyBase16_test10_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "478-488:encode1"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "390-405:testEmptyBase16_test9_decomposed": {
                    "start": 390,
                    "end": 405,
                    "body": [
                        "    public void testEmptyBase16_test9_decomposed()  {\n",
                        "        byte[] empty = {};\n",
                        "        Base16.Base162();\n",
                        "        byte[] result = Base16.Base162().encode0(empty);\n",
                        "        assertEquals(\"empty Base16 encode\", 0, result.length);\n",
                        "        Base16.Base162();\n",
                        "        assertNull(\"empty Base16 encode\", Base16.Base162().encode0(null));\n",
                        "        Base16.Base162();\n",
                        "        result = Base16.Base162().encode1(empty, 0, 1);\n",
                        "        assertEquals(\"empty Base16 encode with offset\", 0, result.length);\n",
                        "        Base16.Base162();\n",
                        "        assertNull(\"empty Base16 encode with offset\", Base16.Base162().encode0(null));\n",
                        "        empty = new byte[0];\n",
                        "        Base16.Base162();\n",
                        "        result = Base16.Base162().decode0(empty);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEmptyBase16_test9_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "478-488:encode1"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "373-387:testEmptyBase16_test8_decomposed": {
                    "start": 373,
                    "end": 387,
                    "body": [
                        "    public void testEmptyBase16_test8_decomposed()  {\n",
                        "        byte[] empty = {};\n",
                        "        Base16.Base162();\n",
                        "        byte[] result = Base16.Base162().encode0(empty);\n",
                        "        assertEquals(\"empty Base16 encode\", 0, result.length);\n",
                        "        Base16.Base162();\n",
                        "        assertNull(\"empty Base16 encode\", Base16.Base162().encode0(null));\n",
                        "        Base16.Base162();\n",
                        "        result = Base16.Base162().encode1(empty, 0, 1);\n",
                        "        assertEquals(\"empty Base16 encode with offset\", 0, result.length);\n",
                        "        Base16.Base162();\n",
                        "        assertNull(\"empty Base16 encode with offset\", Base16.Base162().encode0(null));\n",
                        "        empty = new byte[0];\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEmptyBase16_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "478-488:encode1"
                        ]
                    ]
                },
                "358-370:testEmptyBase16_test7_decomposed": {
                    "start": 358,
                    "end": 370,
                    "body": [
                        "    public void testEmptyBase16_test7_decomposed()  {\n",
                        "        byte[] empty = {};\n",
                        "        Base16.Base162();\n",
                        "        byte[] result = Base16.Base162().encode0(empty);\n",
                        "        assertEquals(\"empty Base16 encode\", 0, result.length);\n",
                        "        Base16.Base162();\n",
                        "        assertNull(\"empty Base16 encode\", Base16.Base162().encode0(null));\n",
                        "        Base16.Base162();\n",
                        "        result = Base16.Base162().encode1(empty, 0, 1);\n",
                        "        assertEquals(\"empty Base16 encode with offset\", 0, result.length);\n",
                        "        Base16.Base162();\n",
                        "        assertNull(\"empty Base16 encode with offset\", Base16.Base162().encode0(null));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEmptyBase16_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "478-488:encode1"
                        ]
                    ]
                },
                "344-355:testEmptyBase16_test6_decomposed": {
                    "start": 344,
                    "end": 355,
                    "body": [
                        "    public void testEmptyBase16_test6_decomposed()  {\n",
                        "        byte[] empty = {};\n",
                        "        Base16.Base162();\n",
                        "        byte[] result = Base16.Base162().encode0(empty);\n",
                        "        assertEquals(\"empty Base16 encode\", 0, result.length);\n",
                        "        Base16.Base162();\n",
                        "        assertNull(\"empty Base16 encode\", Base16.Base162().encode0(null));\n",
                        "        Base16.Base162();\n",
                        "        result = Base16.Base162().encode1(empty, 0, 1);\n",
                        "        assertEquals(\"empty Base16 encode with offset\", 0, result.length);\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEmptyBase16_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "478-488:encode1"
                        ]
                    ]
                },
                "332-341:testEmptyBase16_test5_decomposed": {
                    "start": 332,
                    "end": 341,
                    "body": [
                        "    public void testEmptyBase16_test5_decomposed()  {\n",
                        "        byte[] empty = {};\n",
                        "        Base16.Base162();\n",
                        "        byte[] result = Base16.Base162().encode0(empty);\n",
                        "        assertEquals(\"empty Base16 encode\", 0, result.length);\n",
                        "        Base16.Base162();\n",
                        "        assertNull(\"empty Base16 encode\", Base16.Base162().encode0(null));\n",
                        "        Base16.Base162();\n",
                        "        result = Base16.Base162().encode1(empty, 0, 1);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEmptyBase16_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "478-488:encode1"
                        ]
                    ]
                },
                "321-329:testEmptyBase16_test4_decomposed": {
                    "start": 321,
                    "end": 329,
                    "body": [
                        "    public void testEmptyBase16_test4_decomposed()  {\n",
                        "        byte[] empty = {};\n",
                        "        Base16.Base162();\n",
                        "        byte[] result = Base16.Base162().encode0(empty);\n",
                        "        assertEquals(\"empty Base16 encode\", 0, result.length);\n",
                        "        Base16.Base162();\n",
                        "        assertNull(\"empty Base16 encode\", Base16.Base162().encode0(null));\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEmptyBase16_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "311-318:testEmptyBase16_test3_decomposed": {
                    "start": 311,
                    "end": 318,
                    "body": [
                        "    public void testEmptyBase16_test3_decomposed()  {\n",
                        "        byte[] empty = {};\n",
                        "        Base16.Base162();\n",
                        "        byte[] result = Base16.Base162().encode0(empty);\n",
                        "        assertEquals(\"empty Base16 encode\", 0, result.length);\n",
                        "        Base16.Base162();\n",
                        "        assertNull(\"empty Base16 encode\", Base16.Base162().encode0(null));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEmptyBase16_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "302-308:testEmptyBase16_test2_decomposed": {
                    "start": 302,
                    "end": 308,
                    "body": [
                        "    public void testEmptyBase16_test2_decomposed()  {\n",
                        "        byte[] empty = {};\n",
                        "        Base16.Base162();\n",
                        "        byte[] result = Base16.Base162().encode0(empty);\n",
                        "        assertEquals(\"empty Base16 encode\", 0, result.length);\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEmptyBase16_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ]
                    ]
                },
                "295-299:testEmptyBase16_test1_decomposed": {
                    "start": 295,
                    "end": 299,
                    "body": [
                        "    public void testEmptyBase16_test1_decomposed()  {\n",
                        "        byte[] empty = {};\n",
                        "        Base16.Base162();\n",
                        "        byte[] result = Base16.Base162().encode0(empty);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEmptyBase16_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ]
                    ]
                },
                "289-292:testEmptyBase16_test0_decomposed": {
                    "start": 289,
                    "end": 292,
                    "body": [
                        "    public void testEmptyBase16_test0_decomposed()  {\n",
                        "        byte[] empty = {};\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEmptyBase16_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ]
                    ]
                },
                "280-286:testConstructor_LowerCase_DecodingPolicy_test3_decomposed": {
                    "start": 280,
                    "end": 286,
                    "body": [
                        "    public void testConstructor_LowerCase_DecodingPolicy_test3_decomposed()  {\n",
                        "        final Base16 base16 = new Base16(false, CodecPolicy.STRICT);\n",
                        "        final byte[] encoded = base16.encode0(BaseNTestData.DECODED);\n",
                        "        final String expectedResult = Base16TestData.ENCODED_UTF8_UPPERCASE;\n",
                        "        final String result = StringUtils.newStringUtf8(encoded);\n",
                        "        assertEquals(\"new base16(false, CodecPolicy.STRICT)\", result, expectedResult);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testConstructor_LowerCase_DecodingPolicy_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "265-280:Base16"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ]
                    ]
                },
                "272-277:testConstructor_LowerCase_DecodingPolicy_test2_decomposed": {
                    "start": 272,
                    "end": 277,
                    "body": [
                        "    public void testConstructor_LowerCase_DecodingPolicy_test2_decomposed()  {\n",
                        "        final Base16 base16 = new Base16(false, CodecPolicy.STRICT);\n",
                        "        final byte[] encoded = base16.encode0(BaseNTestData.DECODED);\n",
                        "        final String expectedResult = Base16TestData.ENCODED_UTF8_UPPERCASE;\n",
                        "        final String result = StringUtils.newStringUtf8(encoded);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testConstructor_LowerCase_DecodingPolicy_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "265-280:Base16"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ]
                    ]
                },
                "266-269:testConstructor_LowerCase_DecodingPolicy_test1_decomposed": {
                    "start": 266,
                    "end": 269,
                    "body": [
                        "    public void testConstructor_LowerCase_DecodingPolicy_test1_decomposed()  {\n",
                        "        final Base16 base16 = new Base16(false, CodecPolicy.STRICT);\n",
                        "        final byte[] encoded = base16.encode0(BaseNTestData.DECODED);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testConstructor_LowerCase_DecodingPolicy_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "265-280:Base16"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "261-263:testConstructor_LowerCase_DecodingPolicy_test0_decomposed": {
                    "start": 261,
                    "end": 263,
                    "body": [
                        "    public void testConstructor_LowerCase_DecodingPolicy_test0_decomposed()  {\n",
                        "        final Base16 base16 = new Base16(false, CodecPolicy.STRICT);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testConstructor_LowerCase_DecodingPolicy_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "265-280:Base16"
                        ]
                    ]
                },
                "252-258:testConstructor_LowerCase_test3_decomposed": {
                    "start": 252,
                    "end": 258,
                    "body": [
                        "    public void testConstructor_LowerCase_test3_decomposed()  {\n",
                        "        final Base16 base16 = Base16.Base161(true);\n",
                        "        final byte[] encoded = base16.encode0(BaseNTestData.DECODED);\n",
                        "        final String expectedResult = Base16TestData.ENCODED_UTF8_LOWERCASE;\n",
                        "        final String result = StringUtils.newStringUtf8(encoded);\n",
                        "        assertEquals(\"new Base16(true)\", expectedResult, result);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testConstructor_LowerCase_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ]
                    ]
                },
                "244-249:testConstructor_LowerCase_test2_decomposed": {
                    "start": 244,
                    "end": 249,
                    "body": [
                        "    public void testConstructor_LowerCase_test2_decomposed()  {\n",
                        "        final Base16 base16 = Base16.Base161(true);\n",
                        "        final byte[] encoded = base16.encode0(BaseNTestData.DECODED);\n",
                        "        final String expectedResult = Base16TestData.ENCODED_UTF8_LOWERCASE;\n",
                        "        final String result = StringUtils.newStringUtf8(encoded);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testConstructor_LowerCase_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ]
                    ]
                },
                "238-241:testConstructor_LowerCase_test1_decomposed": {
                    "start": 238,
                    "end": 241,
                    "body": [
                        "    public void testConstructor_LowerCase_test1_decomposed()  {\n",
                        "        final Base16 base16 = Base16.Base161(true);\n",
                        "        final byte[] encoded = base16.encode0(BaseNTestData.DECODED);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testConstructor_LowerCase_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ]
                    ]
                },
                "233-235:testConstructor_LowerCase_test0_decomposed": {
                    "start": 233,
                    "end": 235,
                    "body": [
                        "    public void testConstructor_LowerCase_test0_decomposed()  {\n",
                        "        final Base16 base16 = Base16.Base161(true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testConstructor_LowerCase_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ]
                    ]
                },
                "224-230:testConstructors_test3_decomposed": {
                    "start": 224,
                    "end": 230,
                    "body": [
                        "    public void testConstructors_test3_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base161(false);\n",
                        "        Base16.Base161(true);\n",
                        "        new Base16(false, CodecPolicy.LENIENT);\n",
                        "        new Base16(false, CodecPolicy.STRICT);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testConstructors_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "265-280:Base16"
                        ]
                    ]
                },
                "216-221:testConstructors_test2_decomposed": {
                    "start": 216,
                    "end": 221,
                    "body": [
                        "    public void testConstructors_test2_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base161(false);\n",
                        "        Base16.Base161(true);\n",
                        "        new Base16(false, CodecPolicy.LENIENT);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testConstructors_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "265-280:Base16"
                        ]
                    ]
                },
                "209-213:testConstructors_test1_decomposed": {
                    "start": 209,
                    "end": 213,
                    "body": [
                        "    public void testConstructors_test1_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "        Base16.Base161(false);\n",
                        "        Base16.Base161(true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testConstructors_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "282-284:Base161"
                        ]
                    ]
                },
                "204-206:testConstructors_test0_decomposed": {
                    "start": 204,
                    "end": 206,
                    "body": [
                        "    public void testConstructors_test0_decomposed()  {\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testConstructors_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ]
                    ]
                },
                "197-201:testCodec68_test1_decomposed": {
                    "start": 197,
                    "end": 201,
                    "body": [
                        "    public void testCodec68_test1_decomposed()  {\n",
                        "        final byte[] x = {'n', 'H', '=', '=', (byte) 0x9c};\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "        b16.decode0(x);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = RuntimeException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testCodec68_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ]
                    ]
                },
                "191-194:testCodec68_test0_decomposed": {
                    "start": 191,
                    "end": 194,
                    "body": [
                        "    public void testCodec68_test0_decomposed()  {\n",
                        "        final byte[] x = {'n', 'H', '=', '=', (byte) 0x9c};\n",
                        "        final Base16 b16 = Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testCodec68_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ]
                    ]
                },
                "177-188:testBase16_test7_decomposed": {
                    "start": 177,
                    "end": 188,
                    "body": [
                        "    public void testBase16_test7_decomposed()  {\n",
                        "        final String content = \"Hello World\";\n",
                        "        Base16.Base162();\n",
                        "        StringUtils.getBytesUtf8(content);\n",
                        "        final byte[] encodedBytes = Base16.Base162().encode0(StringUtils.getBytesUtf8(content));\n",
                        "        final String encodedContent = StringUtils.newStringUtf8(encodedBytes);\n",
                        "        assertEquals(\"encoding hello world\", \"48656C6C6F20576F726C64\", encodedContent);\n",
                        "        Base16.Base162();\n",
                        "        final byte[] decodedBytes = Base16.Base162().decode0(encodedBytes);\n",
                        "        final String decodedContent = StringUtils.newStringUtf8(decodedBytes);\n",
                        "        assertEquals(\"decoding hello world\", content, decodedContent);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testBase16_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ]
                    ]
                },
                "164-174:testBase16_test6_decomposed": {
                    "start": 164,
                    "end": 174,
                    "body": [
                        "    public void testBase16_test6_decomposed()  {\n",
                        "        final String content = \"Hello World\";\n",
                        "        Base16.Base162();\n",
                        "        StringUtils.getBytesUtf8(content);\n",
                        "        final byte[] encodedBytes = Base16.Base162().encode0(StringUtils.getBytesUtf8(content));\n",
                        "        final String encodedContent = StringUtils.newStringUtf8(encodedBytes);\n",
                        "        assertEquals(\"encoding hello world\", \"48656C6C6F20576F726C64\", encodedContent);\n",
                        "        Base16.Base162();\n",
                        "        final byte[] decodedBytes = Base16.Base162().decode0(encodedBytes);\n",
                        "        final String decodedContent = StringUtils.newStringUtf8(decodedBytes);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testBase16_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ]
                    ]
                },
                "152-161:testBase16_test5_decomposed": {
                    "start": 152,
                    "end": 161,
                    "body": [
                        "    public void testBase16_test5_decomposed()  {\n",
                        "        final String content = \"Hello World\";\n",
                        "        Base16.Base162();\n",
                        "        StringUtils.getBytesUtf8(content);\n",
                        "        final byte[] encodedBytes = Base16.Base162().encode0(StringUtils.getBytesUtf8(content));\n",
                        "        final String encodedContent = StringUtils.newStringUtf8(encodedBytes);\n",
                        "        assertEquals(\"encoding hello world\", \"48656C6C6F20576F726C64\", encodedContent);\n",
                        "        Base16.Base162();\n",
                        "        final byte[] decodedBytes = Base16.Base162().decode0(encodedBytes);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testBase16_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "401-411:decode0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ]
                    ]
                },
                "141-149:testBase16_test4_decomposed": {
                    "start": 141,
                    "end": 149,
                    "body": [
                        "    public void testBase16_test4_decomposed()  {\n",
                        "        final String content = \"Hello World\";\n",
                        "        Base16.Base162();\n",
                        "        StringUtils.getBytesUtf8(content);\n",
                        "        final byte[] encodedBytes = Base16.Base162().encode0(StringUtils.getBytesUtf8(content));\n",
                        "        final String encodedContent = StringUtils.newStringUtf8(encodedBytes);\n",
                        "        assertEquals(\"encoding hello world\", \"48656C6C6F20576F726C64\", encodedContent);\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testBase16_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ]
                    ]
                },
                "132-138:testBase16_test3_decomposed": {
                    "start": 132,
                    "end": 138,
                    "body": [
                        "    public void testBase16_test3_decomposed()  {\n",
                        "        final String content = \"Hello World\";\n",
                        "        Base16.Base162();\n",
                        "        StringUtils.getBytesUtf8(content);\n",
                        "        final byte[] encodedBytes = Base16.Base162().encode0(StringUtils.getBytesUtf8(content));\n",
                        "        final String encodedContent = StringUtils.newStringUtf8(encodedBytes);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testBase16_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "396-398:newStringUtf8"
                        ]
                    ]
                },
                "124-129:testBase16_test2_decomposed": {
                    "start": 124,
                    "end": 129,
                    "body": [
                        "    public void testBase16_test2_decomposed()  {\n",
                        "        final String content = \"Hello World\";\n",
                        "        Base16.Base162();\n",
                        "        StringUtils.getBytesUtf8(content);\n",
                        "        final byte[] encodedBytes = Base16.Base162().encode0(StringUtils.getBytesUtf8(content));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testBase16_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.BaseNCodec",
                            "BaseNCodec",
                            "462-467:encode0"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ]
                    ]
                },
                "117-121:testBase16_test1_decomposed": {
                    "start": 117,
                    "end": 121,
                    "body": [
                        "    public void testBase16_test1_decomposed()  {\n",
                        "        final String content = \"Hello World\";\n",
                        "        Base16.Base162();\n",
                        "        StringUtils.getBytesUtf8(content);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testBase16_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ]
                    ]
                },
                "111-114:testBase16_test0_decomposed": {
                    "start": 111,
                    "end": 114,
                    "body": [
                        "    public void testBase16_test0_decomposed()  {\n",
                        "        final String content = \"Hello World\";\n",
                        "        Base16.Base162();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testBase16_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.Base16",
                            "Base16",
                            "286-288:Base162"
                        ]
                    ]
                },
                "50-52:getRandom": {
                    "start": 50,
                    "end": 52,
                    "body": [
                        "    public Random getRandom() {\n",
                        "        return this.random;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Random",
                            "java.util.Random"
                        ]
                    ],
                    "signature": "getRandom()",
                    "parameters": [],
                    "calls": []
                },
                "99-108:toString": {
                    "start": 99,
                    "end": 108,
                    "body": [
                        "    private String toString(final byte[] data) {\n",
                        "        final StringBuilder buf = new StringBuilder();\n",
                        "        for (int i = 0; i < data.length; i++) {\n",
                        "            buf.append(data[i]);\n",
                        "            if (i != data.length - 1) {\n",
                        "                buf.append(\",\");\n",
                        "            }\n",
                        "        }\n",
                        "        return buf.toString();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "toString(byte[])",
                    "parameters": [
                        "data"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ]
                    ]
                }
            },
            "fields": {
                "45-45:random": {
                    "start": 45,
                    "end": 45,
                    "body": [
                        "    private final Random random = new Random();\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Random",
                            "java.util.Random"
                        ]
                    ]
                },
                "43-43:CHARSET_UTF8": {
                    "start": 43,
                    "end": 43,
                    "body": [
                        "    private static final Charset CHARSET_UTF8 = StandardCharsets.UTF_8;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "Charset",
                            "java.nio.charset.Charset"
                        ]
                    ]
                }
            }
        }
    }
}