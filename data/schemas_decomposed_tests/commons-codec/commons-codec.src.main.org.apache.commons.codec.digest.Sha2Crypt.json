{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-codec/src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java",
    "imports": {
        "19-19:import Pattern": {
            "start": 19,
            "end": 19,
            "body": [
                "import java.util.regex.Pattern;\n"
            ]
        }
    },
    "classes": {
        "Sha2Crypt": {
            "start": 34,
            "end": 34,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {},
            "fields": {
                "58-58:SHA512_PREFIX": {
                    "start": 58,
                    "end": 58,
                    "body": [
                        "    static final String SHA512_PREFIX = \"$6$\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "52-52:SHA256_PREFIX": {
                    "start": 52,
                    "end": 52,
                    "body": [
                        "    static final String SHA256_PREFIX = \"$5$\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "61-62:SALT_PATTERN": {
                    "start": 61,
                    "end": 62,
                    "body": [
                        "    private static final Pattern SALT_PATTERN =\n",
                        "            Pattern.compile(\"^\\\\$([56])\\\\$(rounds=(\\\\d+)\\\\$)?([\\\\.\\\\/a-zA-Z0-9]{1,16}).*\");\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "Pattern",
                            "java.util.regex.Pattern"
                        ]
                    ]
                },
                "55-55:SHA512_BLOCKSIZE": {
                    "start": 55,
                    "end": 55,
                    "body": [
                        "    private static final int SHA512_BLOCKSIZE = 64;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                },
                "49-49:SHA256_BLOCKSIZE": {
                    "start": 49,
                    "end": 49,
                    "body": [
                        "    private static final int SHA256_BLOCKSIZE = 32;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                },
                "46-46:ROUNDS_PREFIX": {
                    "start": 46,
                    "end": 46,
                    "body": [
                        "    private static final String ROUNDS_PREFIX = \"rounds=\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "43-43:ROUNDS_MIN": {
                    "start": 43,
                    "end": 43,
                    "body": [
                        "    private static final int ROUNDS_MIN = 1000;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                },
                "40-40:ROUNDS_MAX": {
                    "start": 40,
                    "end": 40,
                    "body": [
                        "    private static final int ROUNDS_MAX = 999999999;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                },
                "37-37:ROUNDS_DEFAULT": {
                    "start": 37,
                    "end": 37,
                    "body": [
                        "    private static final int ROUNDS_DEFAULT = 5000;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                }
            }
        }
    }
}