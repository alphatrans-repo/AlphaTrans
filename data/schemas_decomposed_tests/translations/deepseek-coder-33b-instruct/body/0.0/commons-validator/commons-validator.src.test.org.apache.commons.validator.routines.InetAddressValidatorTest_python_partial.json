{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-validator/src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java",
    "imports": {
        "21-21:import TestCase": {
            "start": 21,
            "end": 21,
            "body": [
                "import junit.framework.TestCase;\n"
            ]
        },
        "19-19:import Test": {
            "start": 19,
            "end": 19,
            "body": [
                "import org.junit.Test;\n"
            ]
        }
    },
    "classes": {
        "InetAddressValidatorTest": {
            "start": 28,
            "end": 28,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "unittest.TestCase"
            ],
            "methods": {
                "248-1509:testIPv6_test0_decomposed": {
                    "start": 248,
                    "end": 1509,
                    "body": [
                        "    public void testIPv6_test0_decomposed()  {\n",
                        "        assertFalse(\n",
                        "                \"IPV6 empty string should be invalid\",\n",
                        "                validator.isValidInet6Address(\"\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::1 should be valid\",\n",
                        "                validator.isValidInet6Address(\"::1\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 :: should be valid\",\n",
                        "                validator.isValidInet6Address(\"::\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 0:0:0:0:0:0:0:1 should be valid\",\n",
                        "                validator.isValidInet6Address(\"0:0:0:0:0:0:0:1\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 0:0:0:0:0:0:0:0 should be valid\",\n",
                        "                validator.isValidInet6Address(\"0:0:0:0:0:0:0:0\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 2001:DB8:0:0:8:800:200C:417A should be valid\",\n",
                        "                validator.isValidInet6Address(\"2001:DB8:0:0:8:800:200C:417A\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 FF01:0:0:0:0:0:0:101 should be valid\",\n",
                        "                validator.isValidInet6Address(\"FF01:0:0:0:0:0:0:101\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 2001:DB8::8:800:200C:417A should be valid\",\n",
                        "                validator.isValidInet6Address(\"2001:DB8::8:800:200C:417A\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 FF01::101 should be valid\",\n",
                        "                validator.isValidInet6Address(\"FF01::101\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 2001:DB8:0:0:8:800:200C:417A:221 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"2001:DB8:0:0:8:800:200C:417A:221\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 FF01::101::2 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"FF01::101::2\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 fe80::217:f2ff:fe07:ed62 should be valid\",\n",
                        "                validator.isValidInet6Address(\"fe80::217:f2ff:fe07:ed62\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 2001:0000:1234:0000:0000:C1C0:ABCD:0876 should be valid\",\n",
                        "                validator.isValidInet6Address(\"2001:0000:1234:0000:0000:C1C0:ABCD:0876\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 3ffe:0b00:0000:0000:0001:0000:0000:000a should be valid\",\n",
                        "                validator.isValidInet6Address(\"3ffe:0b00:0000:0000:0001:0000:0000:000a\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 FF02:0000:0000:0000:0000:0000:0000:0001 should be valid\",\n",
                        "                validator.isValidInet6Address(\"FF02:0000:0000:0000:0000:0000:0000:0001\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 0000:0000:0000:0000:0000:0000:0000:0001 should be valid\",\n",
                        "                validator.isValidInet6Address(\"0000:0000:0000:0000:0000:0000:0000:0001\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 0000:0000:0000:0000:0000:0000:0000:0000 should be valid\",\n",
                        "                validator.isValidInet6Address(\"0000:0000:0000:0000:0000:0000:0000:0000\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 02001:0000:1234:0000:0000:C1C0:ABCD:0876 should be invalid\",\n",
                        "                validator.isValidInet6Address(\n",
                        "                        \"02001:0000:1234:0000:0000:C1C0:ABCD:0876\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 2001:0000:1234:0000:00001:C1C0:ABCD:0876 should be invalid\",\n",
                        "                validator.isValidInet6Address(\n",
                        "                        \"2001:0000:1234:0000:00001:C1C0:ABCD:0876\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 2001:0000:1234:0000:0000:C1C0:ABCD:0876 0 should be invalid\",\n",
                        "                validator.isValidInet6Address(\n",
                        "                        \"2001:0000:1234:0000:0000:C1C0:ABCD:0876 0\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 2001:0000:1234: 0000:0000:C1C0:ABCD:0876 should be invalid\",\n",
                        "                validator.isValidInet6Address(\n",
                        "                        \"2001:0000:1234: 0000:0000:C1C0:ABCD:0876\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 3ffe:0b00:0000:0001:0000:0000:000a should be invalid\",\n",
                        "                validator.isValidInet6Address(\n",
                        "                        \"3ffe:0b00:0000:0001:0000:0000:000a\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 FF02:0000:0000:0000:0000:0000:0000:0000:0001 should be invalid\",\n",
                        "                validator.isValidInet6Address(\n",
                        "                        \"FF02:0000:0000:0000:0000:0000:0000:0000:0001\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 3ffe:b00::1::a should be invalid\",\n",
                        "                validator.isValidInet6Address(\"3ffe:b00::1::a\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::1111:2222:3333:4444:5555:6666:: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::1111:2222:3333:4444:5555:6666::\"));\n",
                        "        assertTrue(\"IPV6 2::10 should be valid\", validator.isValidInet6Address(\"2::10\"));\n",
                        "        assertTrue(\"IPV6 ff02::1 should be valid\", validator.isValidInet6Address(\"ff02::1\"));\n",
                        "        assertTrue(\"IPV6 fe80:: should be valid\", validator.isValidInet6Address(\"fe80::\"));\n",
                        "        assertTrue(\"IPV6 2002:: should be valid\", validator.isValidInet6Address(\"2002::\"));\n",
                        "        assertTrue(\"IPV6 2001:db8:: should be valid\", validator.isValidInet6Address(\"2001:db8::\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 2001:0db8:1234:: should be valid\",\n",
                        "                validator.isValidInet6Address(\"2001:0db8:1234::\"));\n",
                        "        assertTrue(\"IPV6 ::ffff:0:0 should be valid\", validator.isValidInet6Address(\"::ffff:0:0\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1:2:3:4:5:6:7:8 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1:2:3:4:5:6:7:8\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1:2:3:4:5:6::8 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1:2:3:4:5:6::8\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1:2:3:4:5::8 should be valid\", validator.isValidInet6Address(\"1:2:3:4:5::8\"));\n",
                        "        assertTrue(\"IPV6 1:2:3:4::8 should be valid\", validator.isValidInet6Address(\"1:2:3:4::8\"));\n",
                        "        assertTrue(\"IPV6 1:2:3::8 should be valid\", validator.isValidInet6Address(\"1:2:3::8\"));\n",
                        "        assertTrue(\"IPV6 1:2::8 should be valid\", validator.isValidInet6Address(\"1:2::8\"));\n",
                        "        assertTrue(\"IPV6 1::8 should be valid\", validator.isValidInet6Address(\"1::8\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1::2:3:4:5:6:7 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1::2:3:4:5:6:7\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1::2:3:4:5:6 should be valid\", validator.isValidInet6Address(\"1::2:3:4:5:6\"));\n",
                        "        assertTrue(\"IPV6 1::2:3:4:5 should be valid\", validator.isValidInet6Address(\"1::2:3:4:5\"));\n",
                        "        assertTrue(\"IPV6 1::2:3:4 should be valid\", validator.isValidInet6Address(\"1::2:3:4\"));\n",
                        "        assertTrue(\"IPV6 1::2:3 should be valid\", validator.isValidInet6Address(\"1::2:3\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::2:3:4:5:6:7:8 should be valid\",\n",
                        "                validator.isValidInet6Address(\"::2:3:4:5:6:7:8\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::2:3:4:5:6:7 should be valid\",\n",
                        "                validator.isValidInet6Address(\"::2:3:4:5:6:7\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::2:3:4:5:6 should be valid\", validator.isValidInet6Address(\"::2:3:4:5:6\"));\n",
                        "        assertTrue(\"IPV6 ::2:3:4:5 should be valid\", validator.isValidInet6Address(\"::2:3:4:5\"));\n",
                        "        assertTrue(\"IPV6 ::2:3:4 should be valid\", validator.isValidInet6Address(\"::2:3:4\"));\n",
                        "        assertTrue(\"IPV6 ::2:3 should be valid\", validator.isValidInet6Address(\"::2:3\"));\n",
                        "        assertTrue(\"IPV6 ::8 should be valid\", validator.isValidInet6Address(\"::8\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1:2:3:4:5:6:: should be valid\",\n",
                        "                validator.isValidInet6Address(\"1:2:3:4:5:6::\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1:2:3:4:5:: should be valid\", validator.isValidInet6Address(\"1:2:3:4:5::\"));\n",
                        "        assertTrue(\"IPV6 1:2:3:4:: should be valid\", validator.isValidInet6Address(\"1:2:3:4::\"));\n",
                        "        assertTrue(\"IPV6 1:2:3:: should be valid\", validator.isValidInet6Address(\"1:2:3::\"));\n",
                        "        assertTrue(\"IPV6 1:2:: should be valid\", validator.isValidInet6Address(\"1:2::\"));\n",
                        "        assertTrue(\"IPV6 1:: should be valid\", validator.isValidInet6Address(\"1::\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1:2:3:4:5::7:8 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1:2:3:4:5::7:8\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1:2:3::4:5::7:8 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1:2:3::4:5::7:8\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 12345::6:7:8 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"12345::6:7:8\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1:2:3:4::7:8 should be valid\", validator.isValidInet6Address(\"1:2:3:4::7:8\"));\n",
                        "        assertTrue(\"IPV6 1:2:3::7:8 should be valid\", validator.isValidInet6Address(\"1:2:3::7:8\"));\n",
                        "        assertTrue(\"IPV6 1:2::7:8 should be valid\", validator.isValidInet6Address(\"1:2::7:8\"));\n",
                        "        assertTrue(\"IPV6 1::7:8 should be valid\", validator.isValidInet6Address(\"1::7:8\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1:2:3:4:5:6:1.2.3.4 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1:2:3:4:5:6:1.2.3.4\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1:2:3:4:5::1.2.3.4 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1:2:3:4:5::1.2.3.4\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1:2:3:4::1.2.3.4 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1:2:3:4::1.2.3.4\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1:2:3::1.2.3.4 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1:2:3::1.2.3.4\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1:2::1.2.3.4 should be valid\", validator.isValidInet6Address(\"1:2::1.2.3.4\"));\n",
                        "        assertTrue(\"IPV6 1::1.2.3.4 should be valid\", validator.isValidInet6Address(\"1::1.2.3.4\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1:2:3:4::5:1.2.3.4 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1:2:3:4::5:1.2.3.4\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1:2:3::5:1.2.3.4 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1:2:3::5:1.2.3.4\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1:2::5:1.2.3.4 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1:2::5:1.2.3.4\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1::5:1.2.3.4 should be valid\", validator.isValidInet6Address(\"1::5:1.2.3.4\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1::5:11.22.33.44 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1::5:11.22.33.44\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::5:400.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::5:400.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::5:260.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::5:260.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::5:256.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::5:256.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::5:1.256.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::5:1.256.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::5:1.2.256.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::5:1.2.256.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::5:1.2.3.256 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::5:1.2.3.256\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::5:300.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::5:300.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::5:1.300.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::5:1.300.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::5:1.2.300.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::5:1.2.300.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::5:1.2.3.300 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::5:1.2.3.300\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::5:900.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::5:900.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::5:1.900.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::5:1.900.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::5:1.2.900.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::5:1.2.900.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::5:1.2.3.900 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::5:1.2.3.900\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::5:300.300.300.300 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::5:300.300.300.300\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::5:3000.30.30.30 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::5:3000.30.30.30\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::400.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::400.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::260.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::260.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::256.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::256.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::1.256.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::1.256.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::1.2.256.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::1.2.256.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::1.2.3.256 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::1.2.3.256\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::300.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::300.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::1.300.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::1.300.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::1.2.300.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::1.2.300.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::1.2.3.300 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::1.2.3.300\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::900.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::900.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::1.900.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::1.900.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::1.2.900.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::1.2.900.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::1.2.3.900 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::1.2.3.900\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::300.300.300.300 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::300.300.300.300\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1::3000.30.30.30 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1::3000.30.30.30\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::400.2.3.4 should be invalid\", validator.isValidInet6Address(\"::400.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::260.2.3.4 should be invalid\", validator.isValidInet6Address(\"::260.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::256.2.3.4 should be invalid\", validator.isValidInet6Address(\"::256.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::1.256.3.4 should be invalid\", validator.isValidInet6Address(\"::1.256.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::1.2.256.4 should be invalid\", validator.isValidInet6Address(\"::1.2.256.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::1.2.3.256 should be invalid\", validator.isValidInet6Address(\"::1.2.3.256\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::300.2.3.4 should be invalid\", validator.isValidInet6Address(\"::300.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::1.300.3.4 should be invalid\", validator.isValidInet6Address(\"::1.300.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::1.2.300.4 should be invalid\", validator.isValidInet6Address(\"::1.2.300.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::1.2.3.300 should be invalid\", validator.isValidInet6Address(\"::1.2.3.300\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::900.2.3.4 should be invalid\", validator.isValidInet6Address(\"::900.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::1.900.3.4 should be invalid\", validator.isValidInet6Address(\"::1.900.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::1.2.900.4 should be invalid\", validator.isValidInet6Address(\"::1.2.900.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::1.2.3.900 should be invalid\", validator.isValidInet6Address(\"::1.2.3.900\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::300.300.300.300 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::300.300.300.300\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::3000.30.30.30 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::3000.30.30.30\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 fe80::217:f2ff:254.7.237.98 should be valid\",\n",
                        "                validator.isValidInet6Address(\"fe80::217:f2ff:254.7.237.98\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::ffff:192.168.1.26 should be valid\",\n",
                        "                validator.isValidInet6Address(\"::ffff:192.168.1.26\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 2001:1:1:1:1:1:255Z255X255Y255 should be invalid\",\n",
                        "                validator.isValidInet6Address(\n",
                        "                        \"2001:1:1:1:1:1:255Z255X255Y255\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::ffff:192x168.1.26 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::ffff:192x168.1.26\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::ffff:192.168.1.1 should be valid\",\n",
                        "                validator.isValidInet6Address(\"::ffff:192.168.1.1\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 0:0:0:0:0:0:13.1.68.3 should be valid\",\n",
                        "                validator.isValidInet6Address(\n",
                        "                        \"0:0:0:0:0:0:13.1.68.3\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 0:0:0:0:0:FFFF:129.144.52.38 should be valid\",\n",
                        "                validator.isValidInet6Address(\n",
                        "                        \"0:0:0:0:0:FFFF:129.144.52.38\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::13.1.68.3 should be valid\",\n",
                        "                validator.isValidInet6Address(\n",
                        "                        \"::13.1.68.3\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::FFFF:129.144.52.38 should be valid\",\n",
                        "                validator.isValidInet6Address(\n",
                        "                        \"::FFFF:129.144.52.38\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 fe80:0:0:0:204:61ff:254.157.241.86 should be valid\",\n",
                        "                validator.isValidInet6Address(\"fe80:0:0:0:204:61ff:254.157.241.86\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 fe80::204:61ff:254.157.241.86 should be valid\",\n",
                        "                validator.isValidInet6Address(\"fe80::204:61ff:254.157.241.86\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::ffff:12.34.56.78 should be valid\",\n",
                        "                validator.isValidInet6Address(\"::ffff:12.34.56.78\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::ffff:2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::ffff:2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::ffff:257.1.2.3 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::ffff:257.1.2.3\"));\n",
                        "        assertFalse(\"IPV6 1.2.3.4 should be invalid\", validator.isValidInet6Address(\"1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1.2.3.4:1111:2222:3333:4444::5555 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1.2.3.4:1111:2222:3333:4444::5555\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1.2.3.4:1111:2222:3333::5555 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1.2.3.4:1111:2222:3333::5555\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1.2.3.4:1111:2222::5555 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1.2.3.4:1111:2222::5555\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1.2.3.4:1111::5555 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1.2.3.4:1111::5555\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1.2.3.4::5555 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1.2.3.4::5555\"));\n",
                        "        assertFalse(\"IPV6 1.2.3.4:: should be invalid\", validator.isValidInet6Address(\"1.2.3.4::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 fe80:0000:0000:0000:0204:61ff:254.157.241.086 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"fe80:0000:0000:0000:0204:61ff:254.157.241.086\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::ffff:192.0.2.128 should be valid\",\n",
                        "                validator.isValidInet6Address(\n",
                        "                        \"::ffff:192.0.2.128\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:00.00.00.00 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:00.00.00.00\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:000.000.000.000 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:000.000.000.000\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:256.256.256.256 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:256.256.256.256\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 fe80:0000:0000:0000:0204:61ff:fe9d:f156 should be valid\",\n",
                        "                validator.isValidInet6Address(\"fe80:0000:0000:0000:0204:61ff:fe9d:f156\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 fe80:0:0:0:204:61ff:fe9d:f156 should be valid\",\n",
                        "                validator.isValidInet6Address(\"fe80:0:0:0:204:61ff:fe9d:f156\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 fe80::204:61ff:fe9d:f156 should be valid\",\n",
                        "                validator.isValidInet6Address(\"fe80::204:61ff:fe9d:f156\"));\n",
                        "        assertFalse(\"IPV6 : should be invalid\", validator.isValidInet6Address(\":\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::ffff:c000:280 should be valid\",\n",
                        "                validator.isValidInet6Address(\"::ffff:c000:280\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444::5555: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444::5555:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333::5555: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333::5555:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222::5555: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::5555:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111::5555: should be invalid\", validator.isValidInet6Address(\"1111::5555:\"));\n",
                        "        assertFalse(\"IPV6 ::5555: should be invalid\", validator.isValidInet6Address(\"::5555:\"));\n",
                        "        assertFalse(\"IPV6 ::: should be invalid\", validator.isValidInet6Address(\":::\"));\n",
                        "        assertFalse(\"IPV6 1111: should be invalid\", validator.isValidInet6Address(\"1111:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333:4444::5555 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333:4444::5555\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333::5555 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333::5555\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222::5555 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222::5555\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111::5555 should be invalid\", validator.isValidInet6Address(\":1111::5555\"));\n",
                        "        assertFalse(\"IPV6 :::5555 should be invalid\", validator.isValidInet6Address(\":::5555\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 2001:0db8:85a3:0000:0000:8a2e:0370:7334 should be valid\",\n",
                        "                validator.isValidInet6Address(\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 2001:db8:85a3:0:0:8a2e:370:7334 should be valid\",\n",
                        "                validator.isValidInet6Address(\"2001:db8:85a3:0:0:8a2e:370:7334\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 2001:db8:85a3::8a2e:370:7334 should be valid\",\n",
                        "                validator.isValidInet6Address(\"2001:db8:85a3::8a2e:370:7334\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 2001:0db8:0000:0000:0000:0000:1428:57ab should be valid\",\n",
                        "                validator.isValidInet6Address(\"2001:0db8:0000:0000:0000:0000:1428:57ab\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 2001:0db8:0000:0000:0000::1428:57ab should be valid\",\n",
                        "                validator.isValidInet6Address(\"2001:0db8:0000:0000:0000::1428:57ab\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 2001:0db8:0:0:0:0:1428:57ab should be valid\",\n",
                        "                validator.isValidInet6Address(\"2001:0db8:0:0:0:0:1428:57ab\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 2001:0db8:0:0::1428:57ab should be valid\",\n",
                        "                validator.isValidInet6Address(\"2001:0db8:0:0::1428:57ab\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 2001:0db8::1428:57ab should be valid\",\n",
                        "                validator.isValidInet6Address(\"2001:0db8::1428:57ab\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 2001:db8::1428:57ab should be valid\",\n",
                        "                validator.isValidInet6Address(\"2001:db8::1428:57ab\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::ffff:0c22:384e should be valid\",\n",
                        "                validator.isValidInet6Address(\"::ffff:0c22:384e\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 2001:0db8:1234:0000:0000:0000:0000:0000 should be valid\",\n",
                        "                validator.isValidInet6Address(\"2001:0db8:1234:0000:0000:0000:0000:0000\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 2001:0db8:1234:ffff:ffff:ffff:ffff:ffff should be valid\",\n",
                        "                validator.isValidInet6Address(\"2001:0db8:1234:ffff:ffff:ffff:ffff:ffff\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 2001:db8:a::123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"2001:db8:a::123\"));\n",
                        "        assertFalse(\"IPV6 123 should be invalid\", validator.isValidInet6Address(\"123\"));\n",
                        "        assertFalse(\"IPV6 ldkfj should be invalid\", validator.isValidInet6Address(\"ldkfj\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 2001::FFD3::57ab should be invalid\",\n",
                        "                validator.isValidInet6Address(\"2001::FFD3::57ab\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 2001:db8:85a3::8a2e:37023:7334 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"2001:db8:85a3::8a2e:37023:7334\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 2001:db8:85a3::8a2e:370k:7334 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"2001:db8:85a3::8a2e:370k:7334\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1:2:3:4:5:6:7:8:9 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1:2:3:4:5:6:7:8:9\"));\n",
                        "        assertFalse(\"IPV6 1::2::3 should be invalid\", validator.isValidInet6Address(\"1::2::3\"));\n",
                        "        assertFalse(\"IPV6 1:::3:4:5 should be invalid\", validator.isValidInet6Address(\"1:::3:4:5\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1:2:3::4:5:6:7:8:9 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1:2:3::4:5:6:7:8:9\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:7777:: should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777::\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:: should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666::\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:: should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555::\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333:4444:: should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444::\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333:: should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333::\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:: should be valid\", validator.isValidInet6Address(\"1111:2222::\"));\n",
                        "        assertTrue(\"IPV6 1111:: should be valid\", validator.isValidInet6Address(\"1111::\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666::8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666::8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555::8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555::8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333:4444::8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444::8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333::8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333::8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222::8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::8888\"));\n",
                        "        assertTrue(\"IPV6 1111::8888 should be valid\", validator.isValidInet6Address(\"1111::8888\"));\n",
                        "        assertTrue(\"IPV6 ::8888 should be valid\", validator.isValidInet6Address(\"::8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555::7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555::7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333:4444::7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444::7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333::7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333::7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222::7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111::7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111::7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::7777:8888 should be valid\", validator.isValidInet6Address(\"::7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333:4444::6666:7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444::6666:7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333::6666:7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333::6666:7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222::6666:7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::6666:7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111::6666:7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111::6666:7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::6666:7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"::6666:7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333::5555:6666:7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333::5555:6666:7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222::5555:6666:7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::5555:6666:7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111::5555:6666:7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111::5555:6666:7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::5555:6666:7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"::5555:6666:7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222::4444:5555:6666:7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::4444:5555:6666:7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111::4444:5555:6666:7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111::4444:5555:6666:7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::4444:5555:6666:7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"::4444:5555:6666:7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111::3333:4444:5555:6666:7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111::3333:4444:5555:6666:7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::3333:4444:5555:6666:7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"::3333:4444:5555:6666:7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::2222:3333:4444:5555:6666:7777:8888 should be valid\",\n",
                        "                validator.isValidInet6Address(\"::2222:3333:4444:5555:6666:7777:8888\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555::123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555::123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333:4444::123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444::123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333::123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333::123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222::123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111::123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111::123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"::123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333:4444::6666:123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444::6666:123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333::6666:123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333::6666:123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222::6666:123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::6666:123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111::6666:123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111::6666:123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::6666:123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"::6666:123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222:3333::5555:6666:123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333::5555:6666:123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222::5555:6666:123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::5555:6666:123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111::5555:6666:123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111::5555:6666:123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::5555:6666:123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"::5555:6666:123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111:2222::4444:5555:6666:123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::4444:5555:6666:123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111::4444:5555:6666:123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111::4444:5555:6666:123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::4444:5555:6666:123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"::4444:5555:6666:123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 1111::3333:4444:5555:6666:123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"1111::3333:4444:5555:6666:123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::2222:3333:4444:5555:6666:123.123.123.123 should be valid\",\n",
                        "                validator.isValidInet6Address(\"::2222:3333:4444:5555:6666:123.123.123.123\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::0:0:0:0:0:0:0 should be valid\",\n",
                        "                validator.isValidInet6Address(\"::0:0:0:0:0:0:0\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::0:0:0:0:0:0 should be valid\",\n",
                        "                validator.isValidInet6Address(\"::0:0:0:0:0:0\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::0:0:0:0:0 should be valid\", validator.isValidInet6Address(\"::0:0:0:0:0\"));\n",
                        "        assertTrue(\"IPV6 ::0:0:0:0 should be valid\", validator.isValidInet6Address(\"::0:0:0:0\"));\n",
                        "        assertTrue(\"IPV6 ::0:0:0 should be valid\", validator.isValidInet6Address(\"::0:0:0\"));\n",
                        "        assertTrue(\"IPV6 ::0:0 should be valid\", validator.isValidInet6Address(\"::0:0\"));\n",
                        "        assertTrue(\"IPV6 ::0 should be valid\", validator.isValidInet6Address(\"::0\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 0:0:0:0:0:0:0:: should be valid\",\n",
                        "                validator.isValidInet6Address(\"0:0:0:0:0:0:0::\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 0:0:0:0:0:0:: should be valid\",\n",
                        "                validator.isValidInet6Address(\"0:0:0:0:0:0::\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 0:0:0:0:0:: should be valid\", validator.isValidInet6Address(\"0:0:0:0:0::\"));\n",
                        "        assertTrue(\"IPV6 0:0:0:0:: should be valid\", validator.isValidInet6Address(\"0:0:0:0::\"));\n",
                        "        assertTrue(\"IPV6 0:0:0:: should be valid\", validator.isValidInet6Address(\"0:0:0::\"));\n",
                        "        assertTrue(\"IPV6 0:0:: should be valid\", validator.isValidInet6Address(\"0:0::\"));\n",
                        "        assertTrue(\"IPV6 0:: should be valid\", validator.isValidInet6Address(\"0::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX should be invalid\",\n",
                        "                validator.isValidInet6Address(\"XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:7777:8888:9999 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:8888:9999\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:7777:8888:: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:8888::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::2222:3333:4444:5555:6666:7777:8888:9999 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::2222:3333:4444:5555:6666:7777:8888:9999\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:7777 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333\"));\n",
                        "        assertFalse(\"IPV6 1111:2222 should be invalid\", validator.isValidInet6Address(\"1111:2222\"));\n",
                        "        assertFalse(\"IPV6 1111 should be invalid\", validator.isValidInet6Address(\"1111\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 11112222:3333:4444:5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"11112222:3333:4444:5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:22223333:4444:5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:22223333:4444:5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:33334444:5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:33334444:5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:44445555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:44445555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:55556666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:55556666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:66667777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:66667777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:77778888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:77778888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:7777: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222: should be invalid\", validator.isValidInet6Address(\"1111:2222:\"));\n",
                        "        assertFalse(\"IPV6 :8888 should be invalid\", validator.isValidInet6Address(\":8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :7777:8888 should be invalid\", validator.isValidInet6Address(\":7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :4444:5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":4444:5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :3333:4444:5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":3333:4444:5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :2222:3333:4444:5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":2222:3333:4444:5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333:4444:5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333:4444:5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :::2222:3333:4444:5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":::2222:3333:4444:5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:::3333:4444:5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:::3333:4444:5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:::4444:5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:::4444:5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:::5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:::5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:::6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:::6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:::7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:::7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:::8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:::8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:7777::: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::2222::4444:5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::2222::4444:5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::2222:3333::5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::2222:3333::5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::2222:3333:4444::6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::2222:3333:4444::6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::2222:3333:4444:5555::7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::2222:3333:4444:5555::7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::2222:3333:4444:5555:7777::8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::2222:3333:4444:5555:7777::8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::2222:3333:4444:5555:7777:8888:: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::2222:3333:4444:5555:7777:8888::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111::3333::5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111::3333::5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111::3333:4444::6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111::3333:4444::6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111::3333:4444:5555::7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111::3333:4444:5555::7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111::3333:4444:5555:6666::8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111::3333:4444:5555:6666::8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111::3333:4444:5555:6666:7777:: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111::3333:4444:5555:6666:7777::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222::4444::6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::4444::6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222::4444:5555::7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::4444:5555::7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222::4444:5555:6666::8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::4444:5555:6666::8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222::4444:5555:6666:7777:: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::4444:5555:6666:7777::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333::5555::7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333::5555::7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333::5555:6666::8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333::5555:6666::8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333::5555:6666:7777:: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333::5555:6666:7777::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444::6666::8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444::6666::8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444::6666:7777:: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444::6666:7777::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555::7777:: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555::7777::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:7777:8888:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:8888:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:7777:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666::1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666::1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::2222:3333:4444:5555:6666:7777:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::2222:3333:4444:5555:6666:7777:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:1.2.3.4.5 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:1.2.3.4.5\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:1.2.3.4\"));\n",
                        "        assertFalse(\"IPV6 1.2.3.4 should be invalid\", validator.isValidInet6Address(\"1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 11112222:3333:4444:5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"11112222:3333:4444:5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:22223333:4444:5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:22223333:4444:5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:33334444:5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:33334444:5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:44445555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:44445555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:55556666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:55556666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:66661.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:66661.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:255255.255.255 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:255255.255.255\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:255.255255.255 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:255.255255.255\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:255.255.255255 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:255.255.255255\"));\n",
                        "        assertFalse(\"IPV6 :1.2.3.4 should be invalid\", validator.isValidInet6Address(\":1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :4444:5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":4444:5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :3333:4444:5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":3333:4444:5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :2222:3333:4444:5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":2222:3333:4444:5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333:4444:5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333:4444:5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :::2222:3333:4444:5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":::2222:3333:4444:5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:::3333:4444:5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:::3333:4444:5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:::4444:5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:::4444:5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:::5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:::5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:::6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:::6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:::1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:::1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::2222::4444:5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::2222::4444:5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::2222:3333::5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::2222:3333::5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::2222:3333:4444::6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::2222:3333:4444::6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::2222:3333:4444:5555::1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::2222:3333:4444:5555::1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111::3333::5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111::3333::5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111::3333:4444::6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111::3333:4444::6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111::3333:4444:5555::1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111::3333:4444:5555::1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222::4444::6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::4444::6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222::4444:5555::1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::4444:5555::1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333::5555::1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333::5555::1.2.3.4\"));\n",
                        "        assertFalse(\"IPV6 ::. should be invalid\", validator.isValidInet6Address(\"::.\"));\n",
                        "        assertFalse(\"IPV6 ::.. should be invalid\", validator.isValidInet6Address(\"::..\"));\n",
                        "        assertFalse(\"IPV6 ::... should be invalid\", validator.isValidInet6Address(\"::...\"));\n",
                        "        assertFalse(\"IPV6 ::1... should be invalid\", validator.isValidInet6Address(\"::1...\"));\n",
                        "        assertFalse(\"IPV6 ::1.2.. should be invalid\", validator.isValidInet6Address(\"::1.2..\"));\n",
                        "        assertFalse(\"IPV6 ::1.2.3. should be invalid\", validator.isValidInet6Address(\"::1.2.3.\"));\n",
                        "        assertFalse(\"IPV6 ::.2.. should be invalid\", validator.isValidInet6Address(\"::.2..\"));\n",
                        "        assertFalse(\"IPV6 ::.2.3. should be invalid\", validator.isValidInet6Address(\"::.2.3.\"));\n",
                        "        assertFalse(\"IPV6 ::.2.3.4 should be invalid\", validator.isValidInet6Address(\"::.2.3.4\"));\n",
                        "        assertFalse(\"IPV6 ::..3. should be invalid\", validator.isValidInet6Address(\"::..3.\"));\n",
                        "        assertFalse(\"IPV6 ::..3.4 should be invalid\", validator.isValidInet6Address(\"::..3.4\"));\n",
                        "        assertFalse(\"IPV6 ::...4 should be invalid\", validator.isValidInet6Address(\"::...4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333:4444:5555:6666:7777:: should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333:4444:5555:6666:7777::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333:4444:5555:6666:: should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333:4444:5555:6666::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333:4444:5555:: should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333:4444:5555::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333:4444:: should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333:4444::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333:: should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:: should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222::\"));\n",
                        "        assertFalse(\"IPV6 :1111:: should be invalid\", validator.isValidInet6Address(\":1111::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333:4444:5555:6666::8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333:4444:5555:6666::8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333:4444:5555::8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333:4444:5555::8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333:4444::8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333:4444::8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333::8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333::8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222::8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222::8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111::8888 should be invalid\", validator.isValidInet6Address(\":1111::8888\"));\n",
                        "        assertFalse(\"IPV6 :::8888 should be invalid\", validator.isValidInet6Address(\":::8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333:4444:5555::7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333:4444:5555::7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333:4444::7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333:4444::7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333::7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333::7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222::7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222::7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111::7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111::7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :::7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":::7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333:4444::6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333:4444::6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333::6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333::6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222::6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222::6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111::6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111::6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :::6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":::6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333::5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333::5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222::5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222::5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111::5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111::5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :::5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":::5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222::4444:5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222::4444:5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111::4444:5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111::4444:5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :::4444:5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":::4444:5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111::3333:4444:5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111::3333:4444:5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :::3333:4444:5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":::3333:4444:5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :::2222:3333:4444:5555:6666:7777:8888 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":::2222:3333:4444:5555:6666:7777:8888\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333:4444:5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333:4444:5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333:4444:5555::1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333:4444:5555::1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333:4444::1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333:4444::1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333::1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333::1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222::1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222::1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111::1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111::1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :::1.2.3.4 should be invalid\", validator.isValidInet6Address(\":::1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333:4444::6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333:4444::6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333::6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333::6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222::6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222::6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111::6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111::6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :::6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":::6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222:3333::5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222:3333::5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222::5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222::5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111::5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111::5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :::5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":::5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111:2222::4444:5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111:2222::4444:5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111::4444:5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111::4444:5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :::4444:5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":::4444:5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :1111::3333:4444:5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":1111::3333:4444:5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 :::2222:3333:4444:5555:6666:1.2.3.4 should be invalid\",\n",
                        "                validator.isValidInet6Address(\":::2222:3333:4444:5555:6666:1.2.3.4\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666:7777::: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666::: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555::: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444::: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333::: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222::: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:::\"));\n",
                        "        assertFalse(\"IPV6 1111::: should be invalid\", validator.isValidInet6Address(\"1111:::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555:6666::8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666::8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555::8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555::8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444::8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444::8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333::8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333::8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222::8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111::8888: should be invalid\", validator.isValidInet6Address(\"1111::8888:\"));\n",
                        "        assertFalse(\"IPV6 ::8888: should be invalid\", validator.isValidInet6Address(\"::8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444:5555::7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444:5555::7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444::7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444::7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333::7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333::7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222::7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111::7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111::7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333:4444::6666:7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333:4444::6666:7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333::6666:7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333::6666:7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222::6666:7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::6666:7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111::6666:7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111::6666:7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::6666:7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::6666:7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222:3333::5555:6666:7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222:3333::5555:6666:7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222::5555:6666:7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::5555:6666:7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111::5555:6666:7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111::5555:6666:7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::5555:6666:7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::5555:6666:7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111:2222::4444:5555:6666:7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111:2222::4444:5555:6666:7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111::4444:5555:6666:7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111::4444:5555:6666:7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::4444:5555:6666:7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::4444:5555:6666:7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 1111::3333:4444:5555:6666:7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"1111::3333:4444:5555:6666:7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::3333:4444:5555:6666:7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::3333:4444:5555:6666:7777:8888:\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ::2222:3333:4444:5555:6666:7777:8888: should be invalid\",\n",
                        "                validator.isValidInet6Address(\"::2222:3333:4444:5555:6666:7777:8888:\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 0:a:b:c:d:e:f:: should be valid\",\n",
                        "                validator.isValidInet6Address(\"0:a:b:c:d:e:f::\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 ::0:a:b:c:d:e:f should be valid\",\n",
                        "                validator.isValidInet6Address(\n",
                        "                        \"::0:a:b:c:d:e:f\"));\n",
                        "        assertTrue(\n",
                        "                \"IPV6 a:b:c:d:e:f:0:: should be valid\",\n",
                        "                validator.isValidInet6Address(\"a:b:c:d:e:f:0::\"));\n",
                        "        assertFalse(\n",
                        "                \"IPV6 ':10.0.0.1 should be invalid\", validator.isValidInet6Address(\"':10.0.0.1\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIPv6_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.InetAddressValidator",
                            "InetAddressValidator",
                            "122-207:isValidInet6Address"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testIPv6_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "237-245:testBrokenInetAddresses_test1_decomposed": {
                    "start": 237,
                    "end": 245,
                    "body": [
                        "    public void testBrokenInetAddresses_test1_decomposed()  {\n",
                        "        assertFalse(\"IP with characters should be invalid\", validator.isValid(\"124.14.32.abc\"));\n",
                        "        assertFalse(\"IP with leading zeroes should be invalid\", validator.isValid(\"124.14.32.01\"));\n",
                        "        assertFalse(\"IP with three groups should be invalid\", validator.isValid(\"23.64.12\"));\n",
                        "        assertFalse(\"IP with five groups should be invalid\", validator.isValid(\"26.34.23.77.234\"));\n",
                        "        assertFalse(\n",
                        "                \"IP empty string should be invalid\",\n",
                        "                validator.isValidInet6Address(\"\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testBrokenInetAddresses_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.InetAddressValidator",
                            "InetAddressValidator",
                            "73-75:isValid"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.InetAddressValidator",
                            "InetAddressValidator",
                            "122-207:isValidInet6Address"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testBrokenInetAddresses_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "229-234:testBrokenInetAddresses_test0_decomposed": {
                    "start": 229,
                    "end": 234,
                    "body": [
                        "    public void testBrokenInetAddresses_test0_decomposed()  {\n",
                        "        assertFalse(\"IP with characters should be invalid\", validator.isValid(\"124.14.32.abc\"));\n",
                        "        assertFalse(\"IP with leading zeroes should be invalid\", validator.isValid(\"124.14.32.01\"));\n",
                        "        assertFalse(\"IP with three groups should be invalid\", validator.isValid(\"23.64.12\"));\n",
                        "        assertFalse(\"IP with five groups should be invalid\", validator.isValid(\"26.34.23.77.234\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testBrokenInetAddresses_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.InetAddressValidator",
                            "InetAddressValidator",
                            "73-75:isValid"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testBrokenInetAddresses_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "223-226:testReservedInetAddresses_test0_decomposed": {
                    "start": 223,
                    "end": 226,
                    "body": [
                        "    public void testReservedInetAddresses_test0_decomposed()  {\n",
                        "        assertTrue(\"localhost IP should be valid\", validator.isValid(\"127.0.0.1\"));\n",
                        "        assertTrue(\"broadcast IP should be valid\", validator.isValid(\"255.255.255.255\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testReservedInetAddresses_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.InetAddressValidator",
                            "InetAddressValidator",
                            "73-75:isValid"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testReservedInetAddresses_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "209-220:testInetAddressesByClass_test0_decomposed": {
                    "start": 209,
                    "end": 220,
                    "body": [
                        "    public void testInetAddressesByClass_test0_decomposed()  {\n",
                        "        assertTrue(\"class A IP should be valid\", validator.isValid(\"24.25.231.12\"));\n",
                        "        assertFalse(\"illegal class A IP should be invalid\", validator.isValid(\"2.41.32.324\"));\n",
                        "        assertTrue(\"class B IP should be valid\", validator.isValid(\"135.14.44.12\"));\n",
                        "        assertFalse(\"illegal class B IP should be invalid\", validator.isValid(\"154.123.441.123\"));\n",
                        "        assertTrue(\"class C IP should be valid\", validator.isValid(\"213.25.224.32\"));\n",
                        "        assertFalse(\"illegal class C IP should be invalid\", validator.isValid(\"201.543.23.11\"));\n",
                        "        assertTrue(\"class D IP should be valid\", validator.isValid(\"229.35.159.6\"));\n",
                        "        assertFalse(\"illegal class D IP should be invalid\", validator.isValid(\"231.54.11.987\"));\n",
                        "        assertTrue(\"class E IP should be valid\", validator.isValid(\"248.85.24.92\"));\n",
                        "        assertFalse(\"illegal class E IP should be invalid\", validator.isValid(\"250.21.323.48\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testInetAddressesByClass_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.InetAddressValidator",
                            "InetAddressValidator",
                            "73-75:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testInetAddressesByClass_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "183-206:testVALIDATOR_445_test1_decomposed": {
                    "start": 183,
                    "end": 206,
                    "body": [
                        "    public void testVALIDATOR_445_test1_decomposed()  {\n",
                        "        String[] valid = {\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876\",\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/123\",\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/0\",\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%0\",\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%abcdefgh\",\n",
                        "        };\n",
                        "        String[] invalid = {\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/129\", // too big\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/-0\", // sign not allowed\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/+0\", // sign not allowed\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/10O\", // non-digit\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/0%0\", // /bits before %node-id\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%abc defgh\", // space in node id\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%abc%defgh\", // '%' in node id\n",
                        "        };\n",
                        "        for (String item : valid) {\n",
                        "            assertTrue(String.format(\"%s should be valid\", item), validator.isValid(item));\n",
                        "        }\n",
                        "        for (String item : invalid) {\n",
                        "            assertFalse(String.format(\"%s should be invalid\", item), validator.isValid(item));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testVALIDATOR_445_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.InetAddressValidator",
                            "InetAddressValidator",
                            "73-75:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testVALIDATOR_445_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "160-180:testVALIDATOR_445_test0_decomposed": {
                    "start": 160,
                    "end": 180,
                    "body": [
                        "    public void testVALIDATOR_445_test0_decomposed()  {\n",
                        "        String[] valid = {\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876\",\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/123\",\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/0\",\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%0\",\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%abcdefgh\",\n",
                        "        };\n",
                        "        String[] invalid = {\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/129\", // too big\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/-0\", // sign not allowed\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/+0\", // sign not allowed\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/10O\", // non-digit\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/0%0\", // /bits before %node-id\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%abc defgh\", // space in node id\n",
                        "            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%abc%defgh\", // '%' in node id\n",
                        "        };\n",
                        "        for (String item : valid) {\n",
                        "            assertTrue(String.format(\"%s should be valid\", item), validator.isValid(item));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testVALIDATOR_445_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.InetAddressValidator",
                            "InetAddressValidator",
                            "73-75:isValid"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testVALIDATOR_445_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "143-157:testVALIDATOR_419_test5_decomposed": {
                    "start": 143,
                    "end": 157,
                    "body": [
                        "    public void testVALIDATOR_419_test5_decomposed()  {\n",
                        "        String addr;\n",
                        "        addr = \"0:0:0:0:0:0:13.1.68.3\";\n",
                        "        assertTrue(addr, validator.isValid(addr));\n",
                        "        addr = \"0:0:0:0:0:FFFF:129.144.52.38\";\n",
                        "        assertTrue(addr, validator.isValid(addr));\n",
                        "        addr = \"::13.1.68.3\";\n",
                        "        assertTrue(addr, validator.isValid(addr));\n",
                        "        addr = \"::FFFF:129.144.52.38\";\n",
                        "        assertTrue(addr, validator.isValid(addr));\n",
                        "        addr = \"::ffff:192.168.1.1:192.168.1.1\";\n",
                        "        assertFalse(addr, validator.isValid(addr));\n",
                        "        addr = \"::192.168.1.1:192.168.1.1\";\n",
                        "        assertFalse(addr, validator.isValid(addr));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testVALIDATOR_419_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.InetAddressValidator",
                            "InetAddressValidator",
                            "73-75:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testVALIDATOR_419_test5_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "128-140:testVALIDATOR_419_test4_decomposed": {
                    "start": 128,
                    "end": 140,
                    "body": [
                        "    public void testVALIDATOR_419_test4_decomposed()  {\n",
                        "        String addr;\n",
                        "        addr = \"0:0:0:0:0:0:13.1.68.3\";\n",
                        "        assertTrue(addr, validator.isValid(addr));\n",
                        "        addr = \"0:0:0:0:0:FFFF:129.144.52.38\";\n",
                        "        assertTrue(addr, validator.isValid(addr));\n",
                        "        addr = \"::13.1.68.3\";\n",
                        "        assertTrue(addr, validator.isValid(addr));\n",
                        "        addr = \"::FFFF:129.144.52.38\";\n",
                        "        assertTrue(addr, validator.isValid(addr));\n",
                        "        addr = \"::ffff:192.168.1.1:192.168.1.1\";\n",
                        "        assertFalse(addr, validator.isValid(addr));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testVALIDATOR_419_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.InetAddressValidator",
                            "InetAddressValidator",
                            "73-75:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testVALIDATOR_419_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "115-125:testVALIDATOR_419_test3_decomposed": {
                    "start": 115,
                    "end": 125,
                    "body": [
                        "    public void testVALIDATOR_419_test3_decomposed()  {\n",
                        "        String addr;\n",
                        "        addr = \"0:0:0:0:0:0:13.1.68.3\";\n",
                        "        assertTrue(addr, validator.isValid(addr));\n",
                        "        addr = \"0:0:0:0:0:FFFF:129.144.52.38\";\n",
                        "        assertTrue(addr, validator.isValid(addr));\n",
                        "        addr = \"::13.1.68.3\";\n",
                        "        assertTrue(addr, validator.isValid(addr));\n",
                        "        addr = \"::FFFF:129.144.52.38\";\n",
                        "        assertTrue(addr, validator.isValid(addr));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testVALIDATOR_419_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.InetAddressValidator",
                            "InetAddressValidator",
                            "73-75:isValid"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testVALIDATOR_419_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "104-112:testVALIDATOR_419_test2_decomposed": {
                    "start": 104,
                    "end": 112,
                    "body": [
                        "    public void testVALIDATOR_419_test2_decomposed()  {\n",
                        "        String addr;\n",
                        "        addr = \"0:0:0:0:0:0:13.1.68.3\";\n",
                        "        assertTrue(addr, validator.isValid(addr));\n",
                        "        addr = \"0:0:0:0:0:FFFF:129.144.52.38\";\n",
                        "        assertTrue(addr, validator.isValid(addr));\n",
                        "        addr = \"::13.1.68.3\";\n",
                        "        assertTrue(addr, validator.isValid(addr));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testVALIDATOR_419_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.InetAddressValidator",
                            "InetAddressValidator",
                            "73-75:isValid"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testVALIDATOR_419_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "95-101:testVALIDATOR_419_test1_decomposed": {
                    "start": 95,
                    "end": 101,
                    "body": [
                        "    public void testVALIDATOR_419_test1_decomposed()  {\n",
                        "        String addr;\n",
                        "        addr = \"0:0:0:0:0:0:13.1.68.3\";\n",
                        "        assertTrue(addr, validator.isValid(addr));\n",
                        "        addr = \"0:0:0:0:0:FFFF:129.144.52.38\";\n",
                        "        assertTrue(addr, validator.isValid(addr));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testVALIDATOR_419_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.InetAddressValidator",
                            "InetAddressValidator",
                            "73-75:isValid"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testVALIDATOR_419_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "88-92:testVALIDATOR_419_test0_decomposed": {
                    "start": 88,
                    "end": 92,
                    "body": [
                        "    public void testVALIDATOR_419_test0_decomposed()  {\n",
                        "        String addr;\n",
                        "        addr = \"0:0:0:0:0:0:13.1.68.3\";\n",
                        "        assertTrue(addr, validator.isValid(addr));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testVALIDATOR_419_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.InetAddressValidator",
                            "InetAddressValidator",
                            "73-75:isValid"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testVALIDATOR_419_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "81-85:testVALIDATOR_335_test0_decomposed": {
                    "start": 81,
                    "end": 85,
                    "body": [
                        "    public void testVALIDATOR_335_test0_decomposed()  {\n",
                        "        assertTrue(\n",
                        "                \"2001:0438:FFFE:0000:0000:0000:0000:0A35 should be valid\",\n",
                        "                validator.isValid(\"2001:0438:FFFE:0000:0000:0000:0000:0A35\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testVALIDATOR_335_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.InetAddressValidator",
                            "InetAddressValidator",
                            "73-75:isValid"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testVALIDATOR_335_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "73-78:testInetAddressesFromTheWild_test0_decomposed": {
                    "start": 73,
                    "end": 78,
                    "body": [
                        "    public void testInetAddressesFromTheWild_test0_decomposed()  {\n",
                        "        assertTrue(\"www.apache.org IP should be valid\", validator.isValid(\"140.211.11.130\"));\n",
                        "        assertTrue(\"www.l.google.com IP should be valid\", validator.isValid(\"72.14.253.103\"));\n",
                        "        assertTrue(\"fsf.org IP should be valid\", validator.isValid(\"199.232.41.5\"));\n",
                        "        assertTrue(\"appscs.ign.com IP should be valid\", validator.isValid(\"216.35.123.87\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testInetAddressesFromTheWild_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.InetAddressValidator",
                            "InetAddressValidator",
                            "73-75:isValid"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testInetAddressesFromTheWild_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "42-44:setUp": {
                    "start": 42,
                    "end": 44,
                    "body": [
                        "    protected void setUp() {\n",
                        "        validator = new InetAddressValidator();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "setUp()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.InetAddressValidator",
                            "InetAddressValidator",
                            "InetAddressValidator"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def setUp(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "37-39:InetAddressValidatorTest": {
                    "start": 37,
                    "end": 39,
                    "body": [
                        "    public InetAddressValidatorTest(String name) {\n",
                        "        super(name);\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "InetAddressValidatorTest(String)",
                    "parameters": [
                        "name"
                    ],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "TestCase(java.lang.String)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __init__(self, name: str) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {
                "30-30:validator": {
                    "start": 30,
                    "end": 30,
                    "body": [
                        "    private InetAddressValidator validator;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "InetAddressValidator",
                            "InetAddressValidator"
                        ]
                    ],
                    "partial_translation": [
                        "    __validator: InetAddressValidator = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class InetAddressValidatorTest(unittest.TestCase):\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import unittest",
        "import pytest",
        "import io",
        "import os",
        "import unittest",
        "from src.main.org.apache.commons.validator.routines.InetAddressValidator import *"
    ]
}