{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-codec/src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
    "imports": {
        "23-23:import Locale": {
            "start": 23,
            "end": 23,
            "body": [
                "import java.util.Locale;\n"
            ]
        },
        "20-20:import EncoderException": {
            "start": 20,
            "end": 20,
            "body": [
                "import org.apache.commons.codec.EncoderException;\n"
            ]
        },
        "21-21:import StringEncoder": {
            "start": 21,
            "end": 21,
            "body": [
                "import org.apache.commons.codec.StringEncoder;\n"
            ]
        }
    },
    "classes": {
        "CologneBuffer": {
            "start": 190,
            "end": 190,
            "is_abstract": true,
            "is_interface": false,
            "nested_inside": "ColognePhonetic",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "213-215:toString": {
                    "start": 213,
                    "end": 215,
                    "body": [
                        "        public String toString() {\n",
                        "            return new String(copyData(0, length));\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "toString()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "String(char[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "CologneBuffer",
                            "206-206:copyData"
                        ]
                    ]
                },
                "217-219:isEmpty": {
                    "start": 217,
                    "end": 219,
                    "body": [
                        "        public boolean isEmpty() {\n",
                        "            return length() == 0;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isEmpty()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "CologneBuffer",
                            "208-210:length"
                        ]
                    ]
                },
                "208-210:length": {
                    "start": 208,
                    "end": 210,
                    "body": [
                        "        public int length() {\n",
                        "            return length;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "length()",
                    "parameters": [],
                    "calls": []
                },
                "196-204:CologneBuffer": {
                    "start": 196,
                    "end": 204,
                    "body": [
                        "        public CologneBuffer(int constructorId, final char[] data, final int buffSize) {\n",
                        "            if (constructorId == 0) {\n",
                        "                this.data = new char[buffSize];\n",
                        "                this.length = 0;\n",
                        "            } else {\n",
                        "                this.data = data;\n",
                        "                this.length = data.length;\n",
                        "            }\n",
                        "        }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "CologneBuffer(int, char[], int)",
                    "parameters": [
                        "constructorId",
                        "data",
                        "buffSize"
                    ],
                    "calls": []
                },
                "206-206:copyData": {
                    "start": 206,
                    "end": 206,
                    "body": [
                        "        protected abstract char[] copyData(int start, final int length);\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "abstract",
                        "protected"
                    ],
                    "return_types": [
                        [
                            "char[]",
                            "char[]"
                        ]
                    ],
                    "signature": "copyData(int, int)",
                    "parameters": [
                        "start",
                        "length"
                    ],
                    "calls": []
                }
            },
            "fields": {
                "194-194:length": {
                    "start": 194,
                    "end": 194,
                    "body": [
                        "        protected int length = 0;\n"
                    ],
                    "modifiers": [
                        "protected"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                },
                "192-192:data": {
                    "start": 192,
                    "end": 192,
                    "body": [
                        "        protected final char[] data;\n"
                    ],
                    "modifiers": [
                        "final",
                        "protected"
                    ],
                    "types": [
                        [
                            "char[]",
                            "char[]"
                        ]
                    ]
                }
            }
        },
        "ColognePhonetic": {
            "start": 171,
            "end": 171,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "CologneBuffer",
                "CologneInputBuffer",
                "CologneOutputBuffer"
            ],
            "implements": [
                "StringEncoder"
            ],
            "extends": [],
            "methods": {
                "402-404:encode": {
                    "start": 402,
                    "end": 404,
                    "body": [
                        "    public String encode(final String text) {\n",
                        "        return encode1(text);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "encode(String)",
                    "parameters": [
                        "text"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "ColognePhonetic",
                            "406-408:encode1"
                        ]
                    ]
                },
                "384-386:encode": {
                    "start": 384,
                    "end": 386,
                    "body": [
                        "    public Object encode(final Object object) throws EncoderException {\n",
                        "        return encode0(object);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Object",
                            "java.lang.Object"
                        ]
                    ],
                    "signature": "encode(Object)",
                    "parameters": [
                        "object"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "ColognePhonetic",
                            "388-399:encode0"
                        ]
                    ]
                },
                "418-420:isEncodeEqual": {
                    "start": 418,
                    "end": 420,
                    "body": [
                        "    public boolean isEncodeEqual(final String text1, final String text2) {\n",
                        "        return colognePhonetic(text1).equals(colognePhonetic(text2));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isEncodeEqual(String, String)",
                    "parameters": [
                        "text1",
                        "text2"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "ColognePhonetic",
                            "303-381:colognePhonetic"
                        ]
                    ]
                },
                "406-408:encode1": {
                    "start": 406,
                    "end": 408,
                    "body": [
                        "    public String encode1(final String text) {\n",
                        "        return colognePhonetic(text);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "encode1(String)",
                    "parameters": [
                        "text"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "ColognePhonetic",
                            "303-381:colognePhonetic"
                        ]
                    ]
                },
                "388-399:encode0": {
                    "start": 388,
                    "end": 399,
                    "body": [
                        "    public Object encode0(final Object object) throws EncoderException {\n",
                        "        if (!(object instanceof String)) {\n",
                        "            throw new EncoderException(\n",
                        "                    \"This method's parameter was expected to be of the type \"\n",
                        "                            + String.class.getName()\n",
                        "                            + \". But actually it was of the type \"\n",
                        "                            + object.getClass().getName()\n",
                        "                            + \".\",\n",
                        "                    null);\n",
                        "        }\n",
                        "        return encode1((String) object);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Object",
                            "java.lang.Object"
                        ]
                    ],
                    "signature": "encode0(Object)",
                    "parameters": [
                        "object"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.EncoderException",
                            "EncoderException",
                            "62-64:EncoderException"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "getName()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "getClass()"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "ColognePhonetic",
                            "406-408:encode1"
                        ]
                    ]
                },
                "303-381:colognePhonetic": {
                    "start": 303,
                    "end": 381,
                    "body": [
                        "    public String colognePhonetic(final String text) {\n",
                        "        if (text == null) {\n",
                        "            return null;\n",
                        "        }\n",
                        "\n",
                        "        final CologneInputBuffer input = new CologneInputBuffer(preprocess(text));\n",
                        "        final CologneOutputBuffer output = new CologneOutputBuffer(input.length() * 2);\n",
                        "\n",
                        "        char nextChar;\n",
                        "\n",
                        "        char lastChar = CHAR_IGNORE;\n",
                        "        char chr;\n",
                        "\n",
                        "        while (!input.isEmpty()) {\n",
                        "            chr = input.removeNext();\n",
                        "\n",
                        "            if (!input.isEmpty()) {\n",
                        "                nextChar = input.getNextChar();\n",
                        "            } else {\n",
                        "                nextChar = CHAR_IGNORE;\n",
                        "            }\n",
                        "\n",
                        "            if (chr < 'A' || chr > 'Z') {\n",
                        "                continue; // ignore unwanted characters\n",
                        "            }\n",
                        "\n",
                        "            if (arrayContains(AEIJOUY, chr)) {\n",
                        "                output.put('0');\n",
                        "            } else if (chr == 'B' || (chr == 'P' && nextChar != 'H')) {\n",
                        "                output.put('1');\n",
                        "            } else if ((chr == 'D' || chr == 'T') && !arrayContains(CSZ, nextChar)) {\n",
                        "                output.put('2');\n",
                        "            } else if (arrayContains(FPVW, chr)) {\n",
                        "                output.put('3');\n",
                        "            } else if (arrayContains(GKQ, chr)) {\n",
                        "                output.put('4');\n",
                        "            } else if (chr == 'X' && !arrayContains(CKQ, lastChar)) {\n",
                        "                output.put('4');\n",
                        "                output.put('8');\n",
                        "            } else if (chr == 'S' || chr == 'Z') {\n",
                        "                output.put('8');\n",
                        "            } else if (chr == 'C') {\n",
                        "                if (output.isEmpty()) {\n",
                        "                    if (arrayContains(AHKLOQRUX, nextChar)) {\n",
                        "                        output.put('4');\n",
                        "                    } else {\n",
                        "                        output.put('8');\n",
                        "                    }\n",
                        "                } else if (arrayContains(SZ, lastChar) || !arrayContains(AHKOQUX, nextChar)) {\n",
                        "                    output.put('8');\n",
                        "                } else {\n",
                        "                    output.put('4');\n",
                        "                }\n",
                        "            } else if (arrayContains(DTX, chr)) {\n",
                        "                output.put('8');\n",
                        "            } else {\n",
                        "                switch (chr) {\n",
                        "                    case 'R':\n",
                        "                        output.put('7');\n",
                        "                        break;\n",
                        "                    case 'L':\n",
                        "                        output.put('5');\n",
                        "                        break;\n",
                        "                    case 'M':\n",
                        "                    case 'N':\n",
                        "                        output.put('6');\n",
                        "                        break;\n",
                        "                    case 'H':\n",
                        "                        output.put(CHAR_IGNORE); // needed by put\n",
                        "                        break;\n",
                        "                    default:\n",
                        "                        break;\n",
                        "                }\n",
                        "            }\n",
                        "\n",
                        "            lastChar = chr;\n",
                        "        }\n",
                        "        return output.toString();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "colognePhonetic(String)",
                    "parameters": [
                        "text"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "CologneInputBuffer",
                            "256-258:CologneInputBuffer"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "ColognePhonetic",
                            "433-452:preprocess"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "CologneOutputBuffer",
                            "226-229:CologneOutputBuffer"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "CologneBuffer",
                            "208-210:length"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "CologneBuffer",
                            "217-219:isEmpty"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "CologneInputBuffer",
                            "275-279:removeNext"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "CologneInputBuffer",
                            "267-269:getNextChar"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "ColognePhonetic",
                            "285-292:arrayContains"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "CologneOutputBuffer",
                            "238-244:put"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "CologneBuffer",
                            "213-215:toString"
                        ]
                    ]
                },
                "433-452:preprocess": {
                    "start": 433,
                    "end": 452,
                    "body": [
                        "    private char[] preprocess(final String text) {\n",
                        "        final char[] chrs = text.toUpperCase(Locale.GERMAN).toCharArray();\n",
                        "\n",
                        "        for (int index = 0; index < chrs.length; index++) {\n",
                        "            switch (chrs[index]) {\n",
                        "                case '\\u00C4': // capital A, umlaut mark\n",
                        "                    chrs[index] = 'A';\n",
                        "                    break;\n",
                        "                case '\\u00DC': // capital U, umlaut mark\n",
                        "                    chrs[index] = 'U';\n",
                        "                    break;\n",
                        "                case '\\u00D6': // capital O, umlaut mark\n",
                        "                    chrs[index] = 'O';\n",
                        "                    break;\n",
                        "                default:\n",
                        "                    break;\n",
                        "            }\n",
                        "        }\n",
                        "        return chrs;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "char[]",
                            "char[]"
                        ]
                    ],
                    "signature": "preprocess(String)",
                    "parameters": [
                        "text"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "toCharArray()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "toUpperCase(java.util.Locale)"
                        ]
                    ]
                },
                "285-292:arrayContains": {
                    "start": 285,
                    "end": 292,
                    "body": [
                        "    private static boolean arrayContains(final char[] arr, final char key) {\n",
                        "        for (final char element : arr) {\n",
                        "            if (element == key) {\n",
                        "                return true;\n",
                        "            }\n",
                        "        }\n",
                        "        return false;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "arrayContains(char[], char)",
                    "parameters": [
                        "arr",
                        "key"
                    ],
                    "calls": []
                }
            },
            "fields": {
                "183-183:CHAR_IGNORE": {
                    "start": 183,
                    "end": 183,
                    "body": [
                        "    private static final char CHAR_IGNORE = '-'; // is this character to be ignored?\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "char",
                            "char"
                        ]
                    ]
                },
                "181-181:DTX": {
                    "start": 181,
                    "end": 181,
                    "body": [
                        "    private static final char[] DTX = {'D', 'T', 'X'};\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "char[]",
                            "char[]"
                        ]
                    ]
                },
                "180-180:AHKOQUX": {
                    "start": 180,
                    "end": 180,
                    "body": [
                        "    private static final char[] AHKOQUX = {'A', 'H', 'K', 'O', 'Q', 'U', 'X'};\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "char[]",
                            "char[]"
                        ]
                    ]
                },
                "179-179:SZ": {
                    "start": 179,
                    "end": 179,
                    "body": [
                        "    private static final char[] SZ = {'S', 'Z'};\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "char[]",
                            "char[]"
                        ]
                    ]
                },
                "178-178:AHKLOQRUX": {
                    "start": 178,
                    "end": 178,
                    "body": [
                        "    private static final char[] AHKLOQRUX = {'A', 'H', 'K', 'L', 'O', 'Q', 'R', 'U', 'X'};\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "char[]",
                            "char[]"
                        ]
                    ]
                },
                "177-177:CKQ": {
                    "start": 177,
                    "end": 177,
                    "body": [
                        "    private static final char[] CKQ = {'C', 'K', 'Q'};\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "char[]",
                            "char[]"
                        ]
                    ]
                },
                "176-176:GKQ": {
                    "start": 176,
                    "end": 176,
                    "body": [
                        "    private static final char[] GKQ = {'G', 'K', 'Q'};\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "char[]",
                            "char[]"
                        ]
                    ]
                },
                "175-175:FPVW": {
                    "start": 175,
                    "end": 175,
                    "body": [
                        "    private static final char[] FPVW = {'F', 'P', 'V', 'W'};\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "char[]",
                            "char[]"
                        ]
                    ]
                },
                "174-174:CSZ": {
                    "start": 174,
                    "end": 174,
                    "body": [
                        "    private static final char[] CSZ = {'C', 'S', 'Z'};\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "char[]",
                            "char[]"
                        ]
                    ]
                },
                "173-173:AEIJOUY": {
                    "start": 173,
                    "end": 173,
                    "body": [
                        "    private static final char[] AEIJOUY = {'A', 'E', 'I', 'J', 'O', 'U', 'Y'};\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "char[]",
                            "char[]"
                        ]
                    ]
                }
            }
        },
        "CologneInputBuffer": {
            "start": 254,
            "end": 254,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "ColognePhonetic",
            "nests": [],
            "implements": [],
            "extends": [
                "CologneBuffer"
            ],
            "methods": {
                "261-265:copyData": {
                    "start": 261,
                    "end": 265,
                    "body": [
                        "        protected char[] copyData(final int start, final int length) {\n",
                        "            final char[] newData = new char[length];\n",
                        "            System.arraycopy(data, data.length - this.length + start, newData, 0, length);\n",
                        "            return newData;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "char[]",
                            "char[]"
                        ]
                    ],
                    "signature": "copyData(int, int)",
                    "parameters": [
                        "start",
                        "length"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/System",
                            "arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
                        ]
                    ]
                },
                "275-279:removeNext": {
                    "start": 275,
                    "end": 279,
                    "body": [
                        "        public char removeNext() {\n",
                        "            final char ch = getNextChar();\n",
                        "            length--;\n",
                        "            return ch;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "char",
                            "char"
                        ]
                    ],
                    "signature": "removeNext()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "CologneInputBuffer",
                            "267-269:getNextChar"
                        ]
                    ]
                },
                "271-273:getNextPos": {
                    "start": 271,
                    "end": 273,
                    "body": [
                        "        protected int getNextPos() {\n",
                        "            return data.length - length;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "getNextPos()",
                    "parameters": [],
                    "calls": []
                },
                "267-269:getNextChar": {
                    "start": 267,
                    "end": 269,
                    "body": [
                        "        public char getNextChar() {\n",
                        "            return data[getNextPos()];\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "char",
                            "char"
                        ]
                    ],
                    "signature": "getNextChar()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "CologneInputBuffer",
                            "271-273:getNextPos"
                        ]
                    ]
                },
                "256-258:CologneInputBuffer": {
                    "start": 256,
                    "end": 258,
                    "body": [
                        "        public CologneInputBuffer(final char[] data) {\n",
                        "            super(1, data, 0);\n",
                        "        }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "CologneInputBuffer(char[])",
                    "parameters": [
                        "data"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "CologneBuffer",
                            "196-204:CologneBuffer"
                        ]
                    ]
                }
            },
            "fields": {}
        },
        "CologneOutputBuffer": {
            "start": 222,
            "end": 222,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "ColognePhonetic",
            "nests": [],
            "implements": [],
            "extends": [
                "CologneBuffer"
            ],
            "methods": {
                "247-251:copyData": {
                    "start": 247,
                    "end": 251,
                    "body": [
                        "        protected char[] copyData(final int start, final int length) {\n",
                        "            final char[] newData = new char[length];\n",
                        "            System.arraycopy(data, start, newData, 0, length);\n",
                        "            return newData;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "char[]",
                            "char[]"
                        ]
                    ],
                    "signature": "copyData(int, int)",
                    "parameters": [
                        "start",
                        "length"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/System",
                            "arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
                        ]
                    ]
                },
                "238-244:put": {
                    "start": 238,
                    "end": 244,
                    "body": [
                        "        public void put(final char code) {\n",
                        "            if (code != CHAR_IGNORE && lastCode != code && (code != '0' || length == 0)) {\n",
                        "                data[length] = code;\n",
                        "                length++;\n",
                        "            }\n",
                        "            lastCode = code;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "put(char)",
                    "parameters": [
                        "code"
                    ],
                    "calls": []
                },
                "226-229:CologneOutputBuffer": {
                    "start": 226,
                    "end": 229,
                    "body": [
                        "        public CologneOutputBuffer(final int buffSize) {\n",
                        "            super(0, null, buffSize);\n",
                        "            lastCode = '/'; // impossible value\n",
                        "        }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "CologneOutputBuffer(int)",
                    "parameters": [
                        "buffSize"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.ColognePhonetic",
                            "CologneBuffer",
                            "196-204:CologneBuffer"
                        ]
                    ]
                }
            },
            "fields": {
                "224-224:lastCode": {
                    "start": 224,
                    "end": 224,
                    "body": [
                        "        private char lastCode;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "char",
                            "char"
                        ]
                    ]
                }
            }
        }
    }
}