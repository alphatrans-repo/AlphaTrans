{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/Kamikaze.java",
    "imports": {
        "3-3:import PForDelta": {
            "start": 3,
            "end": 3,
            "body": [
                "import com.kamikaze.pfordelta.PForDelta;\n"
            ]
        }
    },
    "classes": {
        "Kamikaze": {
            "start": 14,
            "end": 14,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [
                "IntegerCODEC",
                "SkippableIntegerCODEC"
            ],
            "extends": [],
            "methods": {
                "58-66:uncompress0": {
                    "start": 58,
                    "end": 66,
                    "body": [
                        "    public void uncompress0(int[] in, IntWrapper inpos, int inlength, int[] out,\n",
                        "                            IntWrapper outpos) {\n",
                        "        if (inlength == 0)\n",
                        "            return;\n",
                        "        final int outlength = in[inpos.get()];\n",
                        "        inpos.increment();\n",
                        "        headlessUncompress(in, inpos, inlength, out, outpos, outlength);\n",
                        "\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "uncompress0(int[], IntWrapper, int, int[], IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "69-71:increment"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Kamikaze",
                            "Kamikaze",
                            "31-39:headlessUncompress"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def uncompress0(self, in_: typing.List[int], inpos: IntWrapper, inlength: int, out: typing.List[int], outpos: IntWrapper) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "47-55:compress0": {
                    "start": 47,
                    "end": 55,
                    "body": [
                        "    public void compress0(int[] in, IntWrapper inpos, int inlength, int[] out,\n",
                        "                          IntWrapper outpos) {\n",
                        "        inlength = Util.greatestMultiple(inlength, BLOCK_SIZE);\n",
                        "        if (inlength == 0)\n",
                        "                return;\n",
                        "        out[outpos.get()] = inlength;\n",
                        "        outpos.increment();\n",
                        "        headlessCompress(in, inpos, inlength, out, outpos);        \n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "compress0(int[], IntWrapper, int, int[], IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                            "Util",
                            "207-209:greatestMultiple"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "69-71:increment"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Kamikaze",
                            "Kamikaze",
                            "19-28:headlessCompress"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def compress0(self, in_: typing.List[int], inpos: IntWrapper, inlength: int, out: typing.List[int], outpos: IntWrapper) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "42-44:toString": {
                    "start": 42,
                    "end": 44,
                    "body": [
                        "    public String toString() {\n",
                        "        return \"Kamikaze's PForDelta\";\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "toString()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def toString(self) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "31-39:headlessUncompress": {
                    "start": 31,
                    "end": 39,
                    "body": [
                        "    public void headlessUncompress(int[] in, IntWrapper inpos, int inlength, int[] out,\n",
                        "            IntWrapper outpos, int num) {\n",
                        "        num = Util.greatestMultiple(num, BLOCK_SIZE);\n",
                        "        if (num > 0) {\n",
                        "            int d = PForDelta.decompressOneBlock(out, in, num);\n",
                        "            inpos.add(d / 32);\n",
                        "            outpos.add(num);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessUncompress(int[], IntWrapper, int, int[], IntWrapper, int)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos",
                        "num"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                            "Util",
                            "207-209:greatestMultiple"
                        ],
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDelta",
                            "PForDelta",
                            "115-152:decompressOneBlock"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "45-47:add"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def headlessUncompress(self, in_: typing.List[int], inpos: IntWrapper, inlength: int, out: typing.List[int], outpos: IntWrapper, num: int) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "19-28:headlessCompress": {
                    "start": 19,
                    "end": 28,
                    "body": [
                        "    public void headlessCompress(int[] in, IntWrapper inpos, int inlength, int[] out,\n",
                        "            IntWrapper outpos) {\n",
                        "        inlength = Util.greatestMultiple(inlength, BLOCK_SIZE);\n",
                        "        if (inlength > 0) {\n",
                        "            int[] out2 = PForDelta.compressOneBlockOpt(in, inlength);\n",
                        "            inpos.add(inlength);\n",
                        "            System.arraycopy(out2, 0, out, outpos.get(), out2.length);\n",
                        "            outpos.add(out2.length);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "headlessCompress(int[], IntWrapper, int, int[], IntWrapper)",
                    "parameters": [
                        "in",
                        "inpos",
                        "inlength",
                        "out",
                        "outpos"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                            "Util",
                            "207-209:greatestMultiple"
                        ],
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDelta",
                            "PForDelta",
                            "70-102:compressOneBlockOpt"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "45-47:add"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def headlessCompress(self, in_: typing.List[int], inpos: IntWrapper, inlength: int, out: typing.List[int], outpos: IntWrapper) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                }
            },
            "fields": {
                "16-16:BLOCK_SIZE": {
                    "start": 16,
                    "end": 16,
                    "body": [
                        "    private int BLOCK_SIZE = 128;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "partial_translation": [
                        "    __BLOCK_SIZE: int = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class Kamikaze(IntegerCODEC, SkippableIntegerCODEC):\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import io",
        "import typing\nfrom typing import *",
        "import os",
        "from src.main.com.kamikaze.pfordelta.PForDelta import *",
        "from src.main.me.lemire.integercompression.IntWrapper import *",
        "from src.main.me.lemire.integercompression.IntegerCODEC import *",
        "from src.main.me.lemire.integercompression.SkippableIntegerCODEC import *",
        "from src.main.me.lemire.integercompression.Util import *"
    ]
}