{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-exec/src/main/java/org/apache/commons/exec/InputStreamPumper.java",
    "imports": {
        "21-21:import OutputStream": {
            "start": 21,
            "end": 21,
            "body": [
                "import java.io.OutputStream;\n"
            ]
        },
        "20-20:import InputStream": {
            "start": 20,
            "end": 20,
            "body": [
                "import java.io.InputStream;\n"
            ]
        },
        "23-23:import DebugUtils": {
            "start": 23,
            "end": 23,
            "body": [
                "import org.apache.commons.exec.util.DebugUtils;\n"
            ]
        }
    },
    "classes": {
        "InputStreamPumper": {
            "start": 28,
            "end": 28,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [
                "Runnable"
            ],
            "extends": [],
            "methods": {
                "60-73:run": {
                    "start": 60,
                    "end": 73,
                    "body": [
                        "    public void run() {\n",
                        "        try {\n",
                        "            while (!stop) {\n",
                        "                while (is.available() > 0 && !stop) {\n",
                        "                    os.write(is.read());\n",
                        "                }\n",
                        "                os.flush();\n",
                        "                Thread.sleep(SLEEPING_TIME);\n",
                        "            }\n",
                        "        } catch (final Exception e) {\n",
                        "            final String msg = \"Got exception while reading/writing the stream\";\n",
                        "            DebugUtils.handleException(msg, e);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "run()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/InputStream",
                            "available()"
                        ],
                        [
                            "library",
                            "java.base/java/io/OutputStream",
                            "write(int)"
                        ],
                        [
                            "library",
                            "java.base/java/io/InputStream",
                            "read()"
                        ],
                        [
                            "library",
                            "java.base/java/io/OutputStream",
                            "flush()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Thread",
                            "sleep(long)"
                        ],
                        [
                            "commons-exec.src.main.org.apache.commons.exec.util.DebugUtils",
                            "DebugUtils",
                            "42-53:handleException"
                        ]
                    ]
                },
                "78-80:stopProcessing": {
                    "start": 78,
                    "end": 80,
                    "body": [
                        "    public void stopProcessing() {\n",
                        "        stop = true;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "stopProcessing()",
                    "parameters": [],
                    "calls": []
                },
                "50-54:InputStreamPumper": {
                    "start": 50,
                    "end": 54,
                    "body": [
                        "    public InputStreamPumper(final InputStream is, final OutputStream os) {\n",
                        "        this.is = is;\n",
                        "        this.os = os;\n",
                        "        this.stop = false;\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "InputStreamPumper(InputStream, OutputStream)",
                    "parameters": [
                        "is",
                        "os"
                    ],
                    "calls": []
                }
            },
            "fields": {
                "33-33:SLEEPING_TIME": {
                    "start": 33,
                    "end": 33,
                    "body": [
                        "    public static final int SLEEPING_TIME = 100;\n"
                    ],
                    "modifiers": [
                        "public",
                        "final",
                        "static"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                },
                "42-42:stop": {
                    "start": 42,
                    "end": 42,
                    "body": [
                        "    private volatile boolean stop;\n"
                    ],
                    "modifiers": [
                        "private",
                        "volatile"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "39-39:os": {
                    "start": 39,
                    "end": 39,
                    "body": [
                        "    private final OutputStream os;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "OutputStream",
                            "java.io.OutputStream"
                        ]
                    ]
                },
                "36-36:is": {
                    "start": 36,
                    "end": 36,
                    "body": [
                        "    private final InputStream is;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "InputStream",
                            "java.io.InputStream"
                        ]
                    ]
                }
            }
        }
    }
}