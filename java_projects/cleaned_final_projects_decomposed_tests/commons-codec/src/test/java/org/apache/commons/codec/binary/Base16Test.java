/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.commons.codec.binary;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.Test;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Random;

/**
 * Test cases for Base16 class.
 *
 * @since 1.15
 */
public class Base16Test {

    private static final Charset CHARSET_UTF8 = StandardCharsets.UTF_8;

    private final Random random = new Random();

    /**
     * @return Returns the random.
     */
    public Random getRandom() {
        return this.random;
    }

    /** Test the Base16 implementation */
    

    /** isBase16 throws RuntimeException on some non-Base16 bytes */
    

    

    

    

    /** Test encode and decode of empty byte array. */
    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    private String toString(final byte[] data) {
        final StringBuilder buf = new StringBuilder();
        for (int i = 0; i < data.length; i++) {
            buf.append(data[i]);
            if (i != data.length - 1) {
                buf.append(",");
            }
        }
        return buf.toString();
    }

    @Test
    public void testBase16_test0_decomposed()  {
        final String content = "Hello World";
        Base16.Base162();
    }

    @Test
    public void testBase16_test1_decomposed()  {
        final String content = "Hello World";
        Base16.Base162();
        StringUtils.getBytesUtf8(content);
    }

    @Test
    public void testBase16_test2_decomposed()  {
        final String content = "Hello World";
        Base16.Base162();
        StringUtils.getBytesUtf8(content);
        final byte[] encodedBytes = Base16.Base162().encode0(StringUtils.getBytesUtf8(content));
    }

    @Test
    public void testBase16_test3_decomposed()  {
        final String content = "Hello World";
        Base16.Base162();
        StringUtils.getBytesUtf8(content);
        final byte[] encodedBytes = Base16.Base162().encode0(StringUtils.getBytesUtf8(content));
        final String encodedContent = StringUtils.newStringUtf8(encodedBytes);
    }

    @Test
    public void testBase16_test4_decomposed()  {
        final String content = "Hello World";
        Base16.Base162();
        StringUtils.getBytesUtf8(content);
        final byte[] encodedBytes = Base16.Base162().encode0(StringUtils.getBytesUtf8(content));
        final String encodedContent = StringUtils.newStringUtf8(encodedBytes);
        assertEquals("encoding hello world", "48656C6C6F20576F726C64", encodedContent);
        Base16.Base162();
    }

    @Test
    public void testBase16_test5_decomposed()  {
        final String content = "Hello World";
        Base16.Base162();
        StringUtils.getBytesUtf8(content);
        final byte[] encodedBytes = Base16.Base162().encode0(StringUtils.getBytesUtf8(content));
        final String encodedContent = StringUtils.newStringUtf8(encodedBytes);
        assertEquals("encoding hello world", "48656C6C6F20576F726C64", encodedContent);
        Base16.Base162();
        final byte[] decodedBytes = Base16.Base162().decode0(encodedBytes);
    }

    @Test
    public void testBase16_test6_decomposed()  {
        final String content = "Hello World";
        Base16.Base162();
        StringUtils.getBytesUtf8(content);
        final byte[] encodedBytes = Base16.Base162().encode0(StringUtils.getBytesUtf8(content));
        final String encodedContent = StringUtils.newStringUtf8(encodedBytes);
        assertEquals("encoding hello world", "48656C6C6F20576F726C64", encodedContent);
        Base16.Base162();
        final byte[] decodedBytes = Base16.Base162().decode0(encodedBytes);
        final String decodedContent = StringUtils.newStringUtf8(decodedBytes);
    }

    @Test
    public void testBase16_test7_decomposed()  {
        final String content = "Hello World";
        Base16.Base162();
        StringUtils.getBytesUtf8(content);
        final byte[] encodedBytes = Base16.Base162().encode0(StringUtils.getBytesUtf8(content));
        final String encodedContent = StringUtils.newStringUtf8(encodedBytes);
        assertEquals("encoding hello world", "48656C6C6F20576F726C64", encodedContent);
        Base16.Base162();
        final byte[] decodedBytes = Base16.Base162().decode0(encodedBytes);
        final String decodedContent = StringUtils.newStringUtf8(decodedBytes);
        assertEquals("decoding hello world", content, decodedContent);
    }

    @Test
    public void testCodec68_test0_decomposed()  {
        final byte[] x = {'n', 'H', '=', '=', (byte) 0x9c};
        final Base16 b16 = Base16.Base162();
    }

    @Test(expected = RuntimeException.class)
    public void testCodec68_test1_decomposed()  {
        final byte[] x = {'n', 'H', '=', '=', (byte) 0x9c};
        final Base16 b16 = Base16.Base162();
        b16.decode0(x);
    }

    @Test
    public void testConstructors_test0_decomposed()  {
        Base16.Base162();
    }

    @Test
    public void testConstructors_test1_decomposed()  {
        Base16.Base162();
        Base16.Base161(false);
        Base16.Base161(true);
    }

    @Test
    public void testConstructors_test2_decomposed()  {
        Base16.Base162();
        Base16.Base161(false);
        Base16.Base161(true);
        new Base16(false, CodecPolicy.LENIENT);
    }

    @Test
    public void testConstructors_test3_decomposed()  {
        Base16.Base162();
        Base16.Base161(false);
        Base16.Base161(true);
        new Base16(false, CodecPolicy.LENIENT);
        new Base16(false, CodecPolicy.STRICT);
    }

    @Test
    public void testConstructor_LowerCase_test0_decomposed()  {
        final Base16 base16 = Base16.Base161(true);
    }

    @Test
    public void testConstructor_LowerCase_test1_decomposed()  {
        final Base16 base16 = Base16.Base161(true);
        final byte[] encoded = base16.encode0(BaseNTestData.DECODED);
    }

    @Test
    public void testConstructor_LowerCase_test2_decomposed()  {
        final Base16 base16 = Base16.Base161(true);
        final byte[] encoded = base16.encode0(BaseNTestData.DECODED);
        final String expectedResult = Base16TestData.ENCODED_UTF8_LOWERCASE;
        final String result = StringUtils.newStringUtf8(encoded);
    }

    @Test
    public void testConstructor_LowerCase_test3_decomposed()  {
        final Base16 base16 = Base16.Base161(true);
        final byte[] encoded = base16.encode0(BaseNTestData.DECODED);
        final String expectedResult = Base16TestData.ENCODED_UTF8_LOWERCASE;
        final String result = StringUtils.newStringUtf8(encoded);
        assertEquals("new Base16(true)", expectedResult, result);
    }

    @Test
    public void testConstructor_LowerCase_DecodingPolicy_test0_decomposed()  {
        final Base16 base16 = new Base16(false, CodecPolicy.STRICT);
    }

    @Test
    public void testConstructor_LowerCase_DecodingPolicy_test1_decomposed()  {
        final Base16 base16 = new Base16(false, CodecPolicy.STRICT);
        final byte[] encoded = base16.encode0(BaseNTestData.DECODED);
    }

    @Test
    public void testConstructor_LowerCase_DecodingPolicy_test2_decomposed()  {
        final Base16 base16 = new Base16(false, CodecPolicy.STRICT);
        final byte[] encoded = base16.encode0(BaseNTestData.DECODED);
        final String expectedResult = Base16TestData.ENCODED_UTF8_UPPERCASE;
        final String result = StringUtils.newStringUtf8(encoded);
    }

    @Test
    public void testConstructor_LowerCase_DecodingPolicy_test3_decomposed()  {
        final Base16 base16 = new Base16(false, CodecPolicy.STRICT);
        final byte[] encoded = base16.encode0(BaseNTestData.DECODED);
        final String expectedResult = Base16TestData.ENCODED_UTF8_UPPERCASE;
        final String result = StringUtils.newStringUtf8(encoded);
        assertEquals("new base16(false, CodecPolicy.STRICT)", result, expectedResult);
    }

    @Test
    public void testEmptyBase16_test0_decomposed()  {
        byte[] empty = {};
        Base16.Base162();
    }

    @Test
    public void testEmptyBase16_test1_decomposed()  {
        byte[] empty = {};
        Base16.Base162();
        byte[] result = Base16.Base162().encode0(empty);
    }

    @Test
    public void testEmptyBase16_test2_decomposed()  {
        byte[] empty = {};
        Base16.Base162();
        byte[] result = Base16.Base162().encode0(empty);
        assertEquals("empty Base16 encode", 0, result.length);
        Base16.Base162();
    }

    @Test
    public void testEmptyBase16_test3_decomposed()  {
        byte[] empty = {};
        Base16.Base162();
        byte[] result = Base16.Base162().encode0(empty);
        assertEquals("empty Base16 encode", 0, result.length);
        Base16.Base162();
        assertNull("empty Base16 encode", Base16.Base162().encode0(null));
    }

    @Test
    public void testEmptyBase16_test4_decomposed()  {
        byte[] empty = {};
        Base16.Base162();
        byte[] result = Base16.Base162().encode0(empty);
        assertEquals("empty Base16 encode", 0, result.length);
        Base16.Base162();
        assertNull("empty Base16 encode", Base16.Base162().encode0(null));
        Base16.Base162();
    }

    @Test
    public void testEmptyBase16_test5_decomposed()  {
        byte[] empty = {};
        Base16.Base162();
        byte[] result = Base16.Base162().encode0(empty);
        assertEquals("empty Base16 encode", 0, result.length);
        Base16.Base162();
        assertNull("empty Base16 encode", Base16.Base162().encode0(null));
        Base16.Base162();
        result = Base16.Base162().encode1(empty, 0, 1);
    }

    @Test
    public void testEmptyBase16_test6_decomposed()  {
        byte[] empty = {};
        Base16.Base162();
        byte[] result = Base16.Base162().encode0(empty);
        assertEquals("empty Base16 encode", 0, result.length);
        Base16.Base162();
        assertNull("empty Base16 encode", Base16.Base162().encode0(null));
        Base16.Base162();
        result = Base16.Base162().encode1(empty, 0, 1);
        assertEquals("empty Base16 encode with offset", 0, result.length);
        Base16.Base162();
    }

    @Test
    public void testEmptyBase16_test7_decomposed()  {
        byte[] empty = {};
        Base16.Base162();
        byte[] result = Base16.Base162().encode0(empty);
        assertEquals("empty Base16 encode", 0, result.length);
        Base16.Base162();
        assertNull("empty Base16 encode", Base16.Base162().encode0(null));
        Base16.Base162();
        result = Base16.Base162().encode1(empty, 0, 1);
        assertEquals("empty Base16 encode with offset", 0, result.length);
        Base16.Base162();
        assertNull("empty Base16 encode with offset", Base16.Base162().encode0(null));
    }

    @Test
    public void testEmptyBase16_test8_decomposed()  {
        byte[] empty = {};
        Base16.Base162();
        byte[] result = Base16.Base162().encode0(empty);
        assertEquals("empty Base16 encode", 0, result.length);
        Base16.Base162();
        assertNull("empty Base16 encode", Base16.Base162().encode0(null));
        Base16.Base162();
        result = Base16.Base162().encode1(empty, 0, 1);
        assertEquals("empty Base16 encode with offset", 0, result.length);
        Base16.Base162();
        assertNull("empty Base16 encode with offset", Base16.Base162().encode0(null));
        empty = new byte[0];
        Base16.Base162();
    }

    @Test
    public void testEmptyBase16_test9_decomposed()  {
        byte[] empty = {};
        Base16.Base162();
        byte[] result = Base16.Base162().encode0(empty);
        assertEquals("empty Base16 encode", 0, result.length);
        Base16.Base162();
        assertNull("empty Base16 encode", Base16.Base162().encode0(null));
        Base16.Base162();
        result = Base16.Base162().encode1(empty, 0, 1);
        assertEquals("empty Base16 encode with offset", 0, result.length);
        Base16.Base162();
        assertNull("empty Base16 encode with offset", Base16.Base162().encode0(null));
        empty = new byte[0];
        Base16.Base162();
        result = Base16.Base162().decode0(empty);
    }

    @Test
    public void testEmptyBase16_test10_decomposed()  {
        byte[] empty = {};
        Base16.Base162();
        byte[] result = Base16.Base162().encode0(empty);
        assertEquals("empty Base16 encode", 0, result.length);
        Base16.Base162();
        assertNull("empty Base16 encode", Base16.Base162().encode0(null));
        Base16.Base162();
        result = Base16.Base162().encode1(empty, 0, 1);
        assertEquals("empty Base16 encode with offset", 0, result.length);
        Base16.Base162();
        assertNull("empty Base16 encode with offset", Base16.Base162().encode0(null));
        empty = new byte[0];
        Base16.Base162();
        result = Base16.Base162().decode0(empty);
        assertEquals("empty Base16 decode", 0, result.length);
        Base16.Base162();
    }

    @Test
    public void testEmptyBase16_test11_decomposed()  {
        byte[] empty = {};
        Base16.Base162();
        byte[] result = Base16.Base162().encode0(empty);
        assertEquals("empty Base16 encode", 0, result.length);
        Base16.Base162();
        assertNull("empty Base16 encode", Base16.Base162().encode0(null));
        Base16.Base162();
        result = Base16.Base162().encode1(empty, 0, 1);
        assertEquals("empty Base16 encode with offset", 0, result.length);
        Base16.Base162();
        assertNull("empty Base16 encode with offset", Base16.Base162().encode0(null));
        empty = new byte[0];
        Base16.Base162();
        result = Base16.Base162().decode0(empty);
        assertEquals("empty Base16 decode", 0, result.length);
        Base16.Base162();
        assertNull("empty Base16 encode", Base16.Base162().decode0((byte[]) null));
    }

    @Test
    public void testEncodeDecodeRandom_test0_decomposed()  {
        for (int i = 1; i < 5; i++) {
            final int len = this.getRandom().nextInt(10000) + 1;
            final byte[] data = new byte[len];
            this.getRandom().nextBytes(data);
            final byte[] enc = Base16.Base162().encode0(data);
            final byte[] data2 = Base16.Base162().decode0(enc);
            assertArrayEquals(data, data2);
        }
    }

    @Test
    public void testEncodeDecodeSmall_test0_decomposed()  {
        for (int i = 0; i < 12; i++) {
            final byte[] data = new byte[i];
            this.getRandom().nextBytes(data);
            final byte[] enc = Base16.Base162().encode0(data);
            final byte[] data2 = Base16.Base162().decode0(enc);
            assertArrayEquals(toString(data) + " equals " + toString(data2), data, data2);
        }
    }

    @Test
    public void testKnownDecodings_test0_decomposed()  {
        Base16.Base161(true);
    }

    @Test
    public void testKnownDecodings_test1_decomposed()  {
        Base16.Base161(true);
        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e".getBytes(CHARSET_UTF8);
    }

    @Test
    public void testKnownDecodings_test2_decomposed()  {
        Base16.Base161(true);
        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "The quick brown fox jumped over the lazy dogs.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e"
                                                .getBytes(CHARSET_UTF8))));
    }

    @Test
    public void testKnownDecodings_test3_decomposed()  {
        Base16.Base161(true);
        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "The quick brown fox jumped over the lazy dogs.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
    }

    @Test
    public void testKnownDecodings_test4_decomposed()  {
        Base16.Base161(true);
        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "The quick brown fox jumped over the lazy dogs.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e".getBytes(CHARSET_UTF8);
    }

    @Test
    public void testKnownDecodings_test5_decomposed()  {
        Base16.Base161(true);
        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "The quick brown fox jumped over the lazy dogs.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "It was the best of times, it was the worst of times.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e"
                                                .getBytes(CHARSET_UTF8))));
    }

    @Test
    public void testKnownDecodings_test6_decomposed()  {
        Base16.Base161(true);
        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "The quick brown fox jumped over the lazy dogs.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "It was the best of times, it was the worst of times.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
    }

    @Test
    public void testKnownDecodings_test7_decomposed()  {
        Base16.Base161(true);
        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "The quick brown fox jumped over the lazy dogs.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "It was the best of times, it was the worst of times.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73".getBytes(CHARSET_UTF8);
    }

    @Test
    public void testKnownDecodings_test8_decomposed()  {
        Base16.Base161(true);
        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "The quick brown fox jumped over the lazy dogs.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "It was the best of times, it was the worst of times.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73".getBytes(CHARSET_UTF8);
        assertEquals(
                "http://jakarta.apache.org/commmons",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73"
                                                .getBytes(CHARSET_UTF8))));
    }

    @Test
    public void testKnownDecodings_test9_decomposed()  {
        Base16.Base161(true);
        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "The quick brown fox jumped over the lazy dogs.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "It was the best of times, it was the worst of times.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73".getBytes(CHARSET_UTF8);
        assertEquals(
                "http://jakarta.apache.org/commmons",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
    }

    @Test
    public void testKnownDecodings_test10_decomposed()  {
        Base16.Base161(true);
        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "The quick brown fox jumped over the lazy dogs.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "It was the best of times, it was the worst of times.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73".getBytes(CHARSET_UTF8);
        assertEquals(
                "http://jakarta.apache.org/commmons",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a".getBytes(CHARSET_UTF8);
    }

    @Test
    public void testKnownDecodings_test11_decomposed()  {
        Base16.Base161(true);
        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "The quick brown fox jumped over the lazy dogs.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "It was the best of times, it was the worst of times.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73".getBytes(CHARSET_UTF8);
        assertEquals(
                "http://jakarta.apache.org/commmons",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a".getBytes(CHARSET_UTF8);
        assertEquals(
                "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a"
                                                .getBytes(CHARSET_UTF8))));
    }

    @Test
    public void testKnownDecodings_test12_decomposed()  {
        Base16.Base161(true);
        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "The quick brown fox jumped over the lazy dogs.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "It was the best of times, it was the worst of times.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73".getBytes(CHARSET_UTF8);
        assertEquals(
                "http://jakarta.apache.org/commmons",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a".getBytes(CHARSET_UTF8);
        assertEquals(
                "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
    }

    @Test
    public void testKnownDecodings_test13_decomposed()  {
        Base16.Base161(true);
        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "The quick brown fox jumped over the lazy dogs.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "It was the best of times, it was the worst of times.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73".getBytes(CHARSET_UTF8);
        assertEquals(
                "http://jakarta.apache.org/commmons",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a".getBytes(CHARSET_UTF8);
        assertEquals(
                "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d".getBytes(CHARSET_UTF8);
    }

    @Test
    public void testKnownDecodings_test14_decomposed()  {
        Base16.Base161(true);
        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "The quick brown fox jumped over the lazy dogs.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "It was the best of times, it was the worst of times.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73".getBytes(CHARSET_UTF8);
        assertEquals(
                "http://jakarta.apache.org/commmons",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a".getBytes(CHARSET_UTF8);
        assertEquals(
                "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d".getBytes(CHARSET_UTF8);
        assertEquals(
                "{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d"
                                                .getBytes(CHARSET_UTF8))));
    }

    @Test
    public void testKnownDecodings_test15_decomposed()  {
        Base16.Base161(true);
        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "The quick brown fox jumped over the lazy dogs.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "It was the best of times, it was the worst of times.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73".getBytes(CHARSET_UTF8);
        assertEquals(
                "http://jakarta.apache.org/commmons",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a".getBytes(CHARSET_UTF8);
        assertEquals(
                "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d".getBytes(CHARSET_UTF8);
        assertEquals(
                "{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
    }

    @Test
    public void testKnownDecodings_test16_decomposed()  {
        Base16.Base161(true);
        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "The quick brown fox jumped over the lazy dogs.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "It was the best of times, it was the worst of times.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73".getBytes(CHARSET_UTF8);
        assertEquals(
                "http://jakarta.apache.org/commmons",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a".getBytes(CHARSET_UTF8);
        assertEquals(
                "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d".getBytes(CHARSET_UTF8);
        assertEquals(
                "{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "78797a7a7921".getBytes(CHARSET_UTF8);
    }

    @Test
    public void testKnownDecodings_test17_decomposed()  {
        Base16.Base161(true);
        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "The quick brown fox jumped over the lazy dogs.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e".getBytes(CHARSET_UTF8);
        assertEquals(
                "It was the best of times, it was the worst of times.",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73".getBytes(CHARSET_UTF8);
        assertEquals(
                "http://jakarta.apache.org/commmons",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a".getBytes(CHARSET_UTF8);
        assertEquals(
                "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d".getBytes(CHARSET_UTF8);
        assertEquals(
                "{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }",
                new String(
                        Base16.Base161(true)
                                .decode0(
                                        "7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "78797a7a7921".getBytes(CHARSET_UTF8);
        assertEquals(
                "xyzzy!",
                new String(Base16.Base161(true).decode0("78797a7a7921".getBytes(CHARSET_UTF8))));
    }

    @Test
    public void testKnownEncodings_test0_decomposed()  {
        Base16.Base161(true);
    }

    @Test
    public void testKnownEncodings_test1_decomposed()  {
        Base16.Base161(true);
        "The quick brown fox jumped over the lazy dogs.".getBytes(CHARSET_UTF8);
    }

    @Test
    public void testKnownEncodings_test2_decomposed()  {
        Base16.Base161(true);
        "The quick brown fox jumped over the lazy dogs.".getBytes(CHARSET_UTF8);
        assertEquals(
                "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "The quick brown fox jumped over the lazy dogs."
                                                .getBytes(CHARSET_UTF8))));
    }

    @Test
    public void testKnownEncodings_test3_decomposed()  {
        Base16.Base161(true);
        "The quick brown fox jumped over the lazy dogs.".getBytes(CHARSET_UTF8);
        assertEquals(
                "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "The quick brown fox jumped over the lazy dogs."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
    }

    @Test
    public void testKnownEncodings_test4_decomposed()  {
        Base16.Base161(true);
        "The quick brown fox jumped over the lazy dogs.".getBytes(CHARSET_UTF8);
        assertEquals(
                "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "The quick brown fox jumped over the lazy dogs."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "It was the best of times, it was the worst of times.".getBytes(CHARSET_UTF8);
    }

    @Test
    public void testKnownEncodings_test5_decomposed()  {
        Base16.Base161(true);
        "The quick brown fox jumped over the lazy dogs.".getBytes(CHARSET_UTF8);
        assertEquals(
                "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "The quick brown fox jumped over the lazy dogs."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "It was the best of times, it was the worst of times.".getBytes(CHARSET_UTF8);
        assertEquals(
                "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "It was the best of times, it was the worst of times."
                                                .getBytes(CHARSET_UTF8))));
    }

    @Test
    public void testKnownEncodings_test6_decomposed()  {
        Base16.Base161(true);
        "The quick brown fox jumped over the lazy dogs.".getBytes(CHARSET_UTF8);
        assertEquals(
                "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "The quick brown fox jumped over the lazy dogs."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "It was the best of times, it was the worst of times.".getBytes(CHARSET_UTF8);
        assertEquals(
                "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "It was the best of times, it was the worst of times."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
    }

    @Test
    public void testKnownEncodings_test7_decomposed()  {
        Base16.Base161(true);
        "The quick brown fox jumped over the lazy dogs.".getBytes(CHARSET_UTF8);
        assertEquals(
                "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "The quick brown fox jumped over the lazy dogs."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "It was the best of times, it was the worst of times.".getBytes(CHARSET_UTF8);
        assertEquals(
                "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "It was the best of times, it was the worst of times."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "http://jakarta.apache.org/commmons".getBytes(CHARSET_UTF8);
    }

    @Test
    public void testKnownEncodings_test8_decomposed()  {
        Base16.Base161(true);
        "The quick brown fox jumped over the lazy dogs.".getBytes(CHARSET_UTF8);
        assertEquals(
                "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "The quick brown fox jumped over the lazy dogs."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "It was the best of times, it was the worst of times.".getBytes(CHARSET_UTF8);
        assertEquals(
                "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "It was the best of times, it was the worst of times."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "http://jakarta.apache.org/commmons".getBytes(CHARSET_UTF8);
        assertEquals(
                "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "http://jakarta.apache.org/commmons"
                                                .getBytes(CHARSET_UTF8))));
    }

    @Test
    public void testKnownEncodings_test9_decomposed()  {
        Base16.Base161(true);
        "The quick brown fox jumped over the lazy dogs.".getBytes(CHARSET_UTF8);
        assertEquals(
                "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "The quick brown fox jumped over the lazy dogs."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "It was the best of times, it was the worst of times.".getBytes(CHARSET_UTF8);
        assertEquals(
                "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "It was the best of times, it was the worst of times."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "http://jakarta.apache.org/commmons".getBytes(CHARSET_UTF8);
        assertEquals(
                "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "http://jakarta.apache.org/commmons"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
    }

    @Test
    public void testKnownEncodings_test10_decomposed()  {
        Base16.Base161(true);
        "The quick brown fox jumped over the lazy dogs.".getBytes(CHARSET_UTF8);
        assertEquals(
                "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "The quick brown fox jumped over the lazy dogs."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "It was the best of times, it was the worst of times.".getBytes(CHARSET_UTF8);
        assertEquals(
                "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "It was the best of times, it was the worst of times."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "http://jakarta.apache.org/commmons".getBytes(CHARSET_UTF8);
        assertEquals(
                "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "http://jakarta.apache.org/commmons"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz".getBytes(CHARSET_UTF8);
    }

    @Test
    public void testKnownEncodings_test11_decomposed()  {
        Base16.Base161(true);
        "The quick brown fox jumped over the lazy dogs.".getBytes(CHARSET_UTF8);
        assertEquals(
                "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "The quick brown fox jumped over the lazy dogs."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "It was the best of times, it was the worst of times.".getBytes(CHARSET_UTF8);
        assertEquals(
                "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "It was the best of times, it was the worst of times."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "http://jakarta.apache.org/commmons".getBytes(CHARSET_UTF8);
        assertEquals(
                "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "http://jakarta.apache.org/commmons"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz".getBytes(CHARSET_UTF8);
        assertEquals(
                "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"
                                                .getBytes(CHARSET_UTF8))));
    }

    @Test
    public void testKnownEncodings_test12_decomposed()  {
        Base16.Base161(true);
        "The quick brown fox jumped over the lazy dogs.".getBytes(CHARSET_UTF8);
        assertEquals(
                "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "The quick brown fox jumped over the lazy dogs."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "It was the best of times, it was the worst of times.".getBytes(CHARSET_UTF8);
        assertEquals(
                "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "It was the best of times, it was the worst of times."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "http://jakarta.apache.org/commmons".getBytes(CHARSET_UTF8);
        assertEquals(
                "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "http://jakarta.apache.org/commmons"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz".getBytes(CHARSET_UTF8);
        assertEquals(
                "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
    }

    @Test
    public void testKnownEncodings_test13_decomposed()  {
        Base16.Base161(true);
        "The quick brown fox jumped over the lazy dogs.".getBytes(CHARSET_UTF8);
        assertEquals(
                "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "The quick brown fox jumped over the lazy dogs."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "It was the best of times, it was the worst of times.".getBytes(CHARSET_UTF8);
        assertEquals(
                "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "It was the best of times, it was the worst of times."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "http://jakarta.apache.org/commmons".getBytes(CHARSET_UTF8);
        assertEquals(
                "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "http://jakarta.apache.org/commmons"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz".getBytes(CHARSET_UTF8);
        assertEquals(
                "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }".getBytes(CHARSET_UTF8);
    }

    @Test
    public void testKnownEncodings_test14_decomposed()  {
        Base16.Base161(true);
        "The quick brown fox jumped over the lazy dogs.".getBytes(CHARSET_UTF8);
        assertEquals(
                "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "The quick brown fox jumped over the lazy dogs."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "It was the best of times, it was the worst of times.".getBytes(CHARSET_UTF8);
        assertEquals(
                "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "It was the best of times, it was the worst of times."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "http://jakarta.apache.org/commmons".getBytes(CHARSET_UTF8);
        assertEquals(
                "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "http://jakarta.apache.org/commmons"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz".getBytes(CHARSET_UTF8);
        assertEquals(
                "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }".getBytes(CHARSET_UTF8);
        assertEquals(
                "7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"
                                                .getBytes(CHARSET_UTF8))));
    }

    @Test
    public void testKnownEncodings_test15_decomposed()  {
        Base16.Base161(true);
        "The quick brown fox jumped over the lazy dogs.".getBytes(CHARSET_UTF8);
        assertEquals(
                "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "The quick brown fox jumped over the lazy dogs."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "It was the best of times, it was the worst of times.".getBytes(CHARSET_UTF8);
        assertEquals(
                "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "It was the best of times, it was the worst of times."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "http://jakarta.apache.org/commmons".getBytes(CHARSET_UTF8);
        assertEquals(
                "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "http://jakarta.apache.org/commmons"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz".getBytes(CHARSET_UTF8);
        assertEquals(
                "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }".getBytes(CHARSET_UTF8);
        assertEquals(
                "7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
    }

    @Test
    public void testKnownEncodings_test16_decomposed()  {
        Base16.Base161(true);
        "The quick brown fox jumped over the lazy dogs.".getBytes(CHARSET_UTF8);
        assertEquals(
                "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "The quick brown fox jumped over the lazy dogs."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "It was the best of times, it was the worst of times.".getBytes(CHARSET_UTF8);
        assertEquals(
                "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "It was the best of times, it was the worst of times."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "http://jakarta.apache.org/commmons".getBytes(CHARSET_UTF8);
        assertEquals(
                "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "http://jakarta.apache.org/commmons"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz".getBytes(CHARSET_UTF8);
        assertEquals(
                "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }".getBytes(CHARSET_UTF8);
        assertEquals(
                "7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "xyzzy!".getBytes(CHARSET_UTF8);
    }

    @Test
    public void testKnownEncodings_test17_decomposed()  {
        Base16.Base161(true);
        "The quick brown fox jumped over the lazy dogs.".getBytes(CHARSET_UTF8);
        assertEquals(
                "54686520717569636b2062726f776e20666f78206a756d706564206f76657220746865206c617a7920646f67732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "The quick brown fox jumped over the lazy dogs."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "It was the best of times, it was the worst of times.".getBytes(CHARSET_UTF8);
        assertEquals(
                "497420776173207468652062657374206f662074696d65732c206974207761732074686520776f727374206f662074696d65732e",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "It was the best of times, it was the worst of times."
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "http://jakarta.apache.org/commmons".getBytes(CHARSET_UTF8);
        assertEquals(
                "687474703a2f2f6a616b617274612e6170616368652e6f72672f636f6d6d6d6f6e73",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "http://jakarta.apache.org/commmons"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz".getBytes(CHARSET_UTF8);
        assertEquals(
                "4161426243634464456546664767486849694a6a4b6b4c6c4d6d4e6e4f6f50705171527253735474557556765777587859795a7a",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }".getBytes(CHARSET_UTF8);
        assertEquals(
                "7b20302c20312c20322c20332c20342c20352c20362c20372c20382c2039207d",
                new String(
                        Base16.Base161(true)
                                .encode0(
                                        "{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"
                                                .getBytes(CHARSET_UTF8))));
        Base16.Base161(true);
        "xyzzy!".getBytes(CHARSET_UTF8);
        assertEquals(
                "78797a7a7921",
                new String(Base16.Base161(true).encode0("xyzzy!".getBytes(CHARSET_UTF8))));
    }

    @Test
    public void testNonBase16Test_test0_decomposed()  {
        final byte[] invalidEncodedChars = {'/', ':', '@', 'G', '%', '`', 'g'};
        final byte[] encoded = new byte[1];
        for (final byte invalidEncodedChar : invalidEncodedChars) {
            try {
                encoded[0] = invalidEncodedChar;
                Base16.Base162().decode0(encoded);
                fail(
                        "IllegalArgumentException should have been thrown when trying to decode"
                                + " invalid Base16 char: "
                                + (char) invalidEncodedChar);
            } catch (final Exception e) {
                assertTrue(e instanceof IllegalArgumentException);
            }
        }
    }

    @Test
    public void testObjectDecodeWithInvalidParameter_test0_decomposed()  {
        final Base16 b16 = Base16.Base162();
    }

    @Test
    public void testObjectDecodeWithInvalidParameter_test1_decomposed()  {
        final Base16 b16 = Base16.Base162();
        try {
            b16.decode2(Integer.valueOf(5));
            fail("decode(Object) didn't throw an exception when passed an Integer object");
        } catch (final DecoderException e) {
        }
    }

    @Test
    public void testObjectDecodeWithValidParameter_test0_decomposed() throws Exception {
        final String original = "Hello World!";
        Base16.Base162();
    }

    @Test
    public void testObjectDecodeWithValidParameter_test1_decomposed() throws Exception {
        final String original = "Hello World!";
        Base16.Base162();
        original.getBytes(CHARSET_UTF8);
    }

    @Test
    public void testObjectDecodeWithValidParameter_test2_decomposed() throws Exception {
        final String original = "Hello World!";
        Base16.Base162();
        original.getBytes(CHARSET_UTF8);
        final Object o = Base16.Base162().encode0(original.getBytes(CHARSET_UTF8));
    }

    @Test
    public void testObjectDecodeWithValidParameter_test3_decomposed() throws Exception {
        final String original = "Hello World!";
        Base16.Base162();
        original.getBytes(CHARSET_UTF8);
        final Object o = Base16.Base162().encode0(original.getBytes(CHARSET_UTF8));
        final Base16 b16 = Base16.Base162();
    }

    @Test
    public void testObjectDecodeWithValidParameter_test4_decomposed() throws Exception {
        final String original = "Hello World!";
        Base16.Base162();
        original.getBytes(CHARSET_UTF8);
        final Object o = Base16.Base162().encode0(original.getBytes(CHARSET_UTF8));
        final Base16 b16 = Base16.Base162();
        final Object oDecoded = b16.decode2(o);
    }

    @Test
    public void testObjectDecodeWithValidParameter_test5_decomposed() throws Exception {
        final String original = "Hello World!";
        Base16.Base162();
        original.getBytes(CHARSET_UTF8);
        final Object o = Base16.Base162().encode0(original.getBytes(CHARSET_UTF8));
        final Base16 b16 = Base16.Base162();
        final Object oDecoded = b16.decode2(o);
        final byte[] baDecoded = (byte[]) oDecoded;
        final String dest = new String(baDecoded);
        assertEquals("dest string does not equal original", original, dest);
    }

    @Test
    public void testObjectEncodeWithInvalidParameter_test0_decomposed()  {
        final Base16 b16 = Base16.Base162();
    }

    @Test
    public void testObjectEncodeWithInvalidParameter_test1_decomposed()  {
        final Base16 b16 = Base16.Base162();
        try {
            b16.encode3("Yadayadayada");
            fail("encode(Object) didn't throw an exception when passed a String object");
        } catch (final EncoderException e) {
        }
    }

    @Test
    public void testObjectEncodeWithValidParameter_test0_decomposed() throws Exception {
        final String original = "Hello World!";
        final Object origObj = original.getBytes(CHARSET_UTF8);
    }

    @Test
    public void testObjectEncodeWithValidParameter_test1_decomposed() throws Exception {
        final String original = "Hello World!";
        final Object origObj = original.getBytes(CHARSET_UTF8);
        Base16.Base162();
    }

    @Test
    public void testObjectEncodeWithValidParameter_test2_decomposed() throws Exception {
        final String original = "Hello World!";
        final Object origObj = original.getBytes(CHARSET_UTF8);
        Base16.Base162();
        final Object oEncoded = Base16.Base162().encode3(origObj);
    }

    @Test
    public void testObjectEncodeWithValidParameter_test3_decomposed() throws Exception {
        final String original = "Hello World!";
        final Object origObj = original.getBytes(CHARSET_UTF8);
        Base16.Base162();
        final Object oEncoded = Base16.Base162().encode3(origObj);
        Base16.Base162();
    }

    @Test
    public void testObjectEncodeWithValidParameter_test4_decomposed() throws Exception {
        final String original = "Hello World!";
        final Object origObj = original.getBytes(CHARSET_UTF8);
        Base16.Base162();
        final Object oEncoded = Base16.Base162().encode3(origObj);
        Base16.Base162();
        final byte[] bArray = Base16.Base162().decode0((byte[]) oEncoded);
    }

    @Test
    public void testObjectEncodeWithValidParameter_test5_decomposed() throws Exception {
        final String original = "Hello World!";
        final Object origObj = original.getBytes(CHARSET_UTF8);
        Base16.Base162();
        final Object oEncoded = Base16.Base162().encode3(origObj);
        Base16.Base162();
        final byte[] bArray = Base16.Base162().decode0((byte[]) oEncoded);
        final String dest = new String(bArray);
        assertEquals("dest string does not equal original", original, dest);
    }

    @Test
    public void testObjectEncode_test0_decomposed()  {
        final Base16 b16 = Base16.Base162();
    }

    @Test
    public void testObjectEncode_test1_decomposed()  {
        final Base16 b16 = Base16.Base162();
        "Hello World".getBytes(CHARSET_UTF8);
    }

    @Test
    public void testObjectEncode_test2_decomposed()  {
        final Base16 b16 = Base16.Base162();
        "Hello World".getBytes(CHARSET_UTF8);
        assertEquals(
                "48656C6C6F20576F726C64",
                new String(b16.encode0("Hello World".getBytes(CHARSET_UTF8))));
    }

    @Test
    public void testPairs_test0_decomposed()  {
        Base16.Base162();
    }

    @Test
    public void testPairs_test1_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
    }

    @Test
    public void testPairs_test2_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
    }

    @Test
    public void testPairs_test3_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
    }

    @Test
    public void testPairs_test4_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
    }

    @Test
    public void testPairs_test5_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
    }

    @Test
    public void testPairs_test6_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
    }

    @Test
    public void testPairs_test7_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
    }

    @Test
    public void testPairs_test8_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
    }

    @Test
    public void testPairs_test9_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
    }

    @Test
    public void testPairs_test10_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
    }

    @Test
    public void testPairs_test11_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
    }

    @Test
    public void testPairs_test12_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
    }

    @Test
    public void testPairs_test13_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
    }

    @Test
    public void testPairs_test14_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
    }

    @Test
    public void testPairs_test15_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
    }

    @Test
    public void testPairs_test16_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
    }

    @Test
    public void testPairs_test17_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
    }

    @Test
    public void testPairs_test18_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
        Base16.Base162();
    }

    @Test
    public void testPairs_test19_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals("0009", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));
    }

    @Test
    public void testPairs_test20_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals("0009", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));
        Base16.Base162();
    }

    @Test
    public void testPairs_test21_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals("0009", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "000A", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));
    }

    @Test
    public void testPairs_test22_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals("0009", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "000A", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));
        Base16.Base162();
    }

    @Test
    public void testPairs_test23_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals("0009", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "000A", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "000B", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));
    }

    @Test
    public void testPairs_test24_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals("0009", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "000A", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "000B", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));
        Base16.Base162();
    }

    @Test
    public void testPairs_test25_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals("0009", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "000A", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "000B", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));
        Base16.Base162();
        assertEquals(
                "000C", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));
    }

    @Test
    public void testPairs_test26_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals("0009", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "000A", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "000B", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));
        Base16.Base162();
        assertEquals(
                "000C", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));
        Base16.Base162();
    }

    @Test
    public void testPairs_test27_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals("0009", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "000A", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "000B", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));
        Base16.Base162();
        assertEquals(
                "000C", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));
        Base16.Base162();
        assertEquals(
                "000D", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));
    }

    @Test
    public void testPairs_test28_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals("0009", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "000A", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "000B", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));
        Base16.Base162();
        assertEquals(
                "000C", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));
        Base16.Base162();
        assertEquals(
                "000D", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));
        Base16.Base162();
    }

    @Test
    public void testPairs_test29_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals("0009", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "000A", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "000B", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));
        Base16.Base162();
        assertEquals(
                "000C", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));
        Base16.Base162();
        assertEquals(
                "000D", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));
        Base16.Base162();
        assertEquals(
                "000E", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 14})));
    }

    @Test
    public void testPairs_test30_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals("0009", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "000A", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "000B", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));
        Base16.Base162();
        assertEquals(
                "000C", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));
        Base16.Base162();
        assertEquals(
                "000D", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));
        Base16.Base162();
        assertEquals(
                "000E", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 14})));
        Base16.Base162();
    }

    @Test
    public void testPairs_test31_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals("0009", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "000A", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "000B", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));
        Base16.Base162();
        assertEquals(
                "000C", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));
        Base16.Base162();
        assertEquals(
                "000D", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));
        Base16.Base162();
        assertEquals(
                "000E", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 14})));
        Base16.Base162();
        assertEquals(
                "000F", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 15})));
    }

    @Test
    public void testPairs_test32_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals("0009", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "000A", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "000B", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));
        Base16.Base162();
        assertEquals(
                "000C", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));
        Base16.Base162();
        assertEquals(
                "000D", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));
        Base16.Base162();
        assertEquals(
                "000E", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 14})));
        Base16.Base162();
        assertEquals(
                "000F", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 15})));
        Base16.Base162();
    }

    @Test
    public void testPairs_test33_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals("0009", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "000A", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "000B", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));
        Base16.Base162();
        assertEquals(
                "000C", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));
        Base16.Base162();
        assertEquals(
                "000D", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));
        Base16.Base162();
        assertEquals(
                "000E", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 14})));
        Base16.Base162();
        assertEquals(
                "000F", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 15})));
        Base16.Base162();
        assertEquals(
                "0010", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 16})));
    }

    @Test
    public void testPairs_test34_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals("0009", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "000A", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "000B", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));
        Base16.Base162();
        assertEquals(
                "000C", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));
        Base16.Base162();
        assertEquals(
                "000D", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));
        Base16.Base162();
        assertEquals(
                "000E", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 14})));
        Base16.Base162();
        assertEquals(
                "000F", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 15})));
        Base16.Base162();
        assertEquals(
                "0010", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 16})));
        Base16.Base162();
    }

    @Test
    public void testPairs_test35_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals("0009", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "000A", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "000B", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));
        Base16.Base162();
        assertEquals(
                "000C", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));
        Base16.Base162();
        assertEquals(
                "000D", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));
        Base16.Base162();
        assertEquals(
                "000E", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 14})));
        Base16.Base162();
        assertEquals(
                "000F", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 15})));
        Base16.Base162();
        assertEquals(
                "0010", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 16})));
        Base16.Base162();
        assertEquals(
                "0011", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 17})));
    }

    @Test
    public void testPairs_test36_decomposed()  {
        Base16.Base162();
        assertEquals("0000", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals("0001", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals("0002", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals("0003", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals("0004", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals("0005", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals("0006", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals("0007", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals("0008", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals("0009", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "000A", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "000B", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 11})));
        Base16.Base162();
        assertEquals(
                "000C", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 12})));
        Base16.Base162();
        assertEquals(
                "000D", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 13})));
        Base16.Base162();
        assertEquals(
                "000E", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 14})));
        Base16.Base162();
        assertEquals(
                "000F", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 15})));
        Base16.Base162();
        assertEquals(
                "0010", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 16})));
        Base16.Base162();
        assertEquals(
                "0011", new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 17})));
        for (int i = -128; i <= 127; i++) {
            final byte test[] = {(byte) i, (byte) i};
            assertArrayEquals(test, Base16.Base162().decode0(Base16.Base162().encode0(test)));
        }
    }

    @Test
    public void testSingletons_test0_decomposed()  {
        Base16.Base162();
    }

    @Test
    public void testSingletons_test1_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
    }

    @Test
    public void testSingletons_test2_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test3_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
    }

    @Test
    public void testSingletons_test4_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test5_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
    }

    @Test
    public void testSingletons_test6_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test7_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
    }

    @Test
    public void testSingletons_test8_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test9_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
    }

    @Test
    public void testSingletons_test10_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test11_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
    }

    @Test
    public void testSingletons_test12_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test13_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
    }

    @Test
    public void testSingletons_test14_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test15_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
    }

    @Test
    public void testSingletons_test16_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test17_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
    }

    @Test
    public void testSingletons_test18_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test19_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
    }

    @Test
    public void testSingletons_test20_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test21_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
    }

    @Test
    public void testSingletons_test22_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test23_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
    }

    @Test
    public void testSingletons_test24_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test25_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
    }

    @Test
    public void testSingletons_test26_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test27_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
    }

    @Test
    public void testSingletons_test28_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test29_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
    }

    @Test
    public void testSingletons_test30_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test31_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
    }

    @Test
    public void testSingletons_test32_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test33_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
    }

    @Test
    public void testSingletons_test34_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test35_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
    }

    @Test
    public void testSingletons_test36_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test37_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
    }

    @Test
    public void testSingletons_test38_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test39_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
    }

    @Test
    public void testSingletons_test40_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test41_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
    }

    @Test
    public void testSingletons_test42_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test43_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
    }

    @Test
    public void testSingletons_test44_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test45_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
    }

    @Test
    public void testSingletons_test46_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test47_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
    }

    @Test
    public void testSingletons_test48_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test49_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
    }

    @Test
    public void testSingletons_test50_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test51_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
    }

    @Test
    public void testSingletons_test52_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test53_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
    }

    @Test
    public void testSingletons_test54_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test55_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
    }

    @Test
    public void testSingletons_test56_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test57_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
    }

    @Test
    public void testSingletons_test58_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test59_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
    }

    @Test
    public void testSingletons_test60_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test61_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
    }

    @Test
    public void testSingletons_test62_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test63_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
    }

    @Test
    public void testSingletons_test64_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test65_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
    }

    @Test
    public void testSingletons_test66_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test67_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
    }

    @Test
    public void testSingletons_test68_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test69_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
    }

    @Test
    public void testSingletons_test70_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test71_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
    }

    @Test
    public void testSingletons_test72_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test73_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
    }

    @Test
    public void testSingletons_test74_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test75_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
    }

    @Test
    public void testSingletons_test76_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test77_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
    }

    @Test
    public void testSingletons_test78_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test79_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
    }

    @Test
    public void testSingletons_test80_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test81_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
    }

    @Test
    public void testSingletons_test82_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test83_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
    }

    @Test
    public void testSingletons_test84_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test85_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
    }

    @Test
    public void testSingletons_test86_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test87_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
    }

    @Test
    public void testSingletons_test88_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test89_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
    }

    @Test
    public void testSingletons_test90_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test91_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
    }

    @Test
    public void testSingletons_test92_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test93_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
    }

    @Test
    public void testSingletons_test94_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test95_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
    }

    @Test
    public void testSingletons_test96_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test97_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
    }

    @Test
    public void testSingletons_test98_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test99_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
    }

    @Test
    public void testSingletons_test100_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test101_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
    }

    @Test
    public void testSingletons_test102_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test103_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
    }

    @Test
    public void testSingletons_test104_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test105_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
    }

    @Test
    public void testSingletons_test106_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test107_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
    }

    @Test
    public void testSingletons_test108_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test109_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
    }

    @Test
    public void testSingletons_test110_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test111_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
    }

    @Test
    public void testSingletons_test112_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test113_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
    }

    @Test
    public void testSingletons_test114_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test115_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
    }

    @Test
    public void testSingletons_test116_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test117_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
    }

    @Test
    public void testSingletons_test118_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test119_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
    }

    @Test
    public void testSingletons_test120_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test121_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
    }

    @Test
    public void testSingletons_test122_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test123_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
    }

    @Test
    public void testSingletons_test124_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test125_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
    }

    @Test
    public void testSingletons_test126_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test127_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
    }

    @Test
    public void testSingletons_test128_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test129_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
    }

    @Test
    public void testSingletons_test130_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test131_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
    }

    @Test
    public void testSingletons_test132_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test133_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
    }

    @Test
    public void testSingletons_test134_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test135_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
    }

    @Test
    public void testSingletons_test136_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test137_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
    }

    @Test
    public void testSingletons_test138_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test139_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
    }

    @Test
    public void testSingletons_test140_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test141_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
    }

    @Test
    public void testSingletons_test142_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test143_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
    }

    @Test
    public void testSingletons_test144_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test145_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
    }

    @Test
    public void testSingletons_test146_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test147_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
    }

    @Test
    public void testSingletons_test148_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test149_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
    }

    @Test
    public void testSingletons_test150_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test151_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
    }

    @Test
    public void testSingletons_test152_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test153_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
    }

    @Test
    public void testSingletons_test154_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test155_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
    }

    @Test
    public void testSingletons_test156_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test157_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
    }

    @Test
    public void testSingletons_test158_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test159_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
    }

    @Test
    public void testSingletons_test160_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test161_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
    }

    @Test
    public void testSingletons_test162_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test163_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
    }

    @Test
    public void testSingletons_test164_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test165_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
    }

    @Test
    public void testSingletons_test166_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test167_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
    }

    @Test
    public void testSingletons_test168_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test169_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
    }

    @Test
    public void testSingletons_test170_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test171_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
    }

    @Test
    public void testSingletons_test172_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test173_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
    }

    @Test
    public void testSingletons_test174_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test175_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
    }

    @Test
    public void testSingletons_test176_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test177_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
    }

    @Test
    public void testSingletons_test178_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test179_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
    }

    @Test
    public void testSingletons_test180_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test181_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
    }

    @Test
    public void testSingletons_test182_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test183_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
    }

    @Test
    public void testSingletons_test184_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test185_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
    }

    @Test
    public void testSingletons_test186_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test187_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
    }

    @Test
    public void testSingletons_test188_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test189_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
    }

    @Test
    public void testSingletons_test190_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test191_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
    }

    @Test
    public void testSingletons_test192_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test193_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
        Base16.Base162();
        assertEquals("60", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));
    }

    @Test
    public void testSingletons_test194_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
        Base16.Base162();
        assertEquals("60", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test195_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
        Base16.Base162();
        assertEquals("60", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));
        Base16.Base162();
        assertEquals("61", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));
    }

    @Test
    public void testSingletons_test196_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
        Base16.Base162();
        assertEquals("60", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));
        Base16.Base162();
        assertEquals("61", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test197_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
        Base16.Base162();
        assertEquals("60", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));
        Base16.Base162();
        assertEquals("61", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));
        Base16.Base162();
        assertEquals("62", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));
    }

    @Test
    public void testSingletons_test198_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
        Base16.Base162();
        assertEquals("60", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));
        Base16.Base162();
        assertEquals("61", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));
        Base16.Base162();
        assertEquals("62", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test199_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
        Base16.Base162();
        assertEquals("60", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));
        Base16.Base162();
        assertEquals("61", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));
        Base16.Base162();
        assertEquals("62", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));
        Base16.Base162();
        assertEquals("63", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));
    }

    @Test
    public void testSingletons_test200_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
        Base16.Base162();
        assertEquals("60", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));
        Base16.Base162();
        assertEquals("61", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));
        Base16.Base162();
        assertEquals("62", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));
        Base16.Base162();
        assertEquals("63", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test201_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
        Base16.Base162();
        assertEquals("60", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));
        Base16.Base162();
        assertEquals("61", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));
        Base16.Base162();
        assertEquals("62", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));
        Base16.Base162();
        assertEquals("63", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));
        Base16.Base162();
        assertEquals("64", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));
    }

    @Test
    public void testSingletons_test202_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
        Base16.Base162();
        assertEquals("60", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));
        Base16.Base162();
        assertEquals("61", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));
        Base16.Base162();
        assertEquals("62", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));
        Base16.Base162();
        assertEquals("63", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));
        Base16.Base162();
        assertEquals("64", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test203_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
        Base16.Base162();
        assertEquals("60", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));
        Base16.Base162();
        assertEquals("61", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));
        Base16.Base162();
        assertEquals("62", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));
        Base16.Base162();
        assertEquals("63", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));
        Base16.Base162();
        assertEquals("64", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));
        Base16.Base162();
        assertEquals("65", new String(Base16.Base162().encode0(new byte[] {(byte) 101})));
    }

    @Test
    public void testSingletons_test204_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
        Base16.Base162();
        assertEquals("60", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));
        Base16.Base162();
        assertEquals("61", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));
        Base16.Base162();
        assertEquals("62", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));
        Base16.Base162();
        assertEquals("63", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));
        Base16.Base162();
        assertEquals("64", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));
        Base16.Base162();
        assertEquals("65", new String(Base16.Base162().encode0(new byte[] {(byte) 101})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test205_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
        Base16.Base162();
        assertEquals("60", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));
        Base16.Base162();
        assertEquals("61", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));
        Base16.Base162();
        assertEquals("62", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));
        Base16.Base162();
        assertEquals("63", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));
        Base16.Base162();
        assertEquals("64", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));
        Base16.Base162();
        assertEquals("65", new String(Base16.Base162().encode0(new byte[] {(byte) 101})));
        Base16.Base162();
        assertEquals("66", new String(Base16.Base162().encode0(new byte[] {(byte) 102})));
    }

    @Test
    public void testSingletons_test206_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
        Base16.Base162();
        assertEquals("60", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));
        Base16.Base162();
        assertEquals("61", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));
        Base16.Base162();
        assertEquals("62", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));
        Base16.Base162();
        assertEquals("63", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));
        Base16.Base162();
        assertEquals("64", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));
        Base16.Base162();
        assertEquals("65", new String(Base16.Base162().encode0(new byte[] {(byte) 101})));
        Base16.Base162();
        assertEquals("66", new String(Base16.Base162().encode0(new byte[] {(byte) 102})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test207_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
        Base16.Base162();
        assertEquals("60", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));
        Base16.Base162();
        assertEquals("61", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));
        Base16.Base162();
        assertEquals("62", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));
        Base16.Base162();
        assertEquals("63", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));
        Base16.Base162();
        assertEquals("64", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));
        Base16.Base162();
        assertEquals("65", new String(Base16.Base162().encode0(new byte[] {(byte) 101})));
        Base16.Base162();
        assertEquals("66", new String(Base16.Base162().encode0(new byte[] {(byte) 102})));
        Base16.Base162();
        assertEquals("67", new String(Base16.Base162().encode0(new byte[] {(byte) 103})));
    }

    @Test
    public void testSingletons_test208_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
        Base16.Base162();
        assertEquals("60", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));
        Base16.Base162();
        assertEquals("61", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));
        Base16.Base162();
        assertEquals("62", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));
        Base16.Base162();
        assertEquals("63", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));
        Base16.Base162();
        assertEquals("64", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));
        Base16.Base162();
        assertEquals("65", new String(Base16.Base162().encode0(new byte[] {(byte) 101})));
        Base16.Base162();
        assertEquals("66", new String(Base16.Base162().encode0(new byte[] {(byte) 102})));
        Base16.Base162();
        assertEquals("67", new String(Base16.Base162().encode0(new byte[] {(byte) 103})));
        Base16.Base162();
    }

    @Test
    public void testSingletons_test209_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
        Base16.Base162();
        assertEquals("60", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));
        Base16.Base162();
        assertEquals("61", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));
        Base16.Base162();
        assertEquals("62", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));
        Base16.Base162();
        assertEquals("63", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));
        Base16.Base162();
        assertEquals("64", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));
        Base16.Base162();
        assertEquals("65", new String(Base16.Base162().encode0(new byte[] {(byte) 101})));
        Base16.Base162();
        assertEquals("66", new String(Base16.Base162().encode0(new byte[] {(byte) 102})));
        Base16.Base162();
        assertEquals("67", new String(Base16.Base162().encode0(new byte[] {(byte) 103})));
        Base16.Base162();
        assertEquals("68", new String(Base16.Base162().encode0(new byte[] {(byte) 104})));
    }

    @Test
    public void testSingletons_test210_decomposed()  {
        Base16.Base162();
        assertEquals("00", new String(Base16.Base162().encode0(new byte[] {(byte) 0})));
        Base16.Base162();
        assertEquals("01", new String(Base16.Base162().encode0(new byte[] {(byte) 1})));
        Base16.Base162();
        assertEquals("02", new String(Base16.Base162().encode0(new byte[] {(byte) 2})));
        Base16.Base162();
        assertEquals("03", new String(Base16.Base162().encode0(new byte[] {(byte) 3})));
        Base16.Base162();
        assertEquals("04", new String(Base16.Base162().encode0(new byte[] {(byte) 4})));
        Base16.Base162();
        assertEquals("05", new String(Base16.Base162().encode0(new byte[] {(byte) 5})));
        Base16.Base162();
        assertEquals("06", new String(Base16.Base162().encode0(new byte[] {(byte) 6})));
        Base16.Base162();
        assertEquals("07", new String(Base16.Base162().encode0(new byte[] {(byte) 7})));
        Base16.Base162();
        assertEquals("08", new String(Base16.Base162().encode0(new byte[] {(byte) 8})));
        Base16.Base162();
        assertEquals("09", new String(Base16.Base162().encode0(new byte[] {(byte) 9})));
        Base16.Base162();
        assertEquals("0A", new String(Base16.Base162().encode0(new byte[] {(byte) 10})));
        Base16.Base162();
        assertEquals("0B", new String(Base16.Base162().encode0(new byte[] {(byte) 11})));
        Base16.Base162();
        assertEquals("0C", new String(Base16.Base162().encode0(new byte[] {(byte) 12})));
        Base16.Base162();
        assertEquals("0D", new String(Base16.Base162().encode0(new byte[] {(byte) 13})));
        Base16.Base162();
        assertEquals("0E", new String(Base16.Base162().encode0(new byte[] {(byte) 14})));
        Base16.Base162();
        assertEquals("0F", new String(Base16.Base162().encode0(new byte[] {(byte) 15})));
        Base16.Base162();
        assertEquals("10", new String(Base16.Base162().encode0(new byte[] {(byte) 16})));
        Base16.Base162();
        assertEquals("11", new String(Base16.Base162().encode0(new byte[] {(byte) 17})));
        Base16.Base162();
        assertEquals("12", new String(Base16.Base162().encode0(new byte[] {(byte) 18})));
        Base16.Base162();
        assertEquals("13", new String(Base16.Base162().encode0(new byte[] {(byte) 19})));
        Base16.Base162();
        assertEquals("14", new String(Base16.Base162().encode0(new byte[] {(byte) 20})));
        Base16.Base162();
        assertEquals("15", new String(Base16.Base162().encode0(new byte[] {(byte) 21})));
        Base16.Base162();
        assertEquals("16", new String(Base16.Base162().encode0(new byte[] {(byte) 22})));
        Base16.Base162();
        assertEquals("17", new String(Base16.Base162().encode0(new byte[] {(byte) 23})));
        Base16.Base162();
        assertEquals("18", new String(Base16.Base162().encode0(new byte[] {(byte) 24})));
        Base16.Base162();
        assertEquals("19", new String(Base16.Base162().encode0(new byte[] {(byte) 25})));
        Base16.Base162();
        assertEquals("1A", new String(Base16.Base162().encode0(new byte[] {(byte) 26})));
        Base16.Base162();
        assertEquals("1B", new String(Base16.Base162().encode0(new byte[] {(byte) 27})));
        Base16.Base162();
        assertEquals("1C", new String(Base16.Base162().encode0(new byte[] {(byte) 28})));
        Base16.Base162();
        assertEquals("1D", new String(Base16.Base162().encode0(new byte[] {(byte) 29})));
        Base16.Base162();
        assertEquals("1E", new String(Base16.Base162().encode0(new byte[] {(byte) 30})));
        Base16.Base162();
        assertEquals("1F", new String(Base16.Base162().encode0(new byte[] {(byte) 31})));
        Base16.Base162();
        assertEquals("20", new String(Base16.Base162().encode0(new byte[] {(byte) 32})));
        Base16.Base162();
        assertEquals("21", new String(Base16.Base162().encode0(new byte[] {(byte) 33})));
        Base16.Base162();
        assertEquals("22", new String(Base16.Base162().encode0(new byte[] {(byte) 34})));
        Base16.Base162();
        assertEquals("23", new String(Base16.Base162().encode0(new byte[] {(byte) 35})));
        Base16.Base162();
        assertEquals("24", new String(Base16.Base162().encode0(new byte[] {(byte) 36})));
        Base16.Base162();
        assertEquals("25", new String(Base16.Base162().encode0(new byte[] {(byte) 37})));
        Base16.Base162();
        assertEquals("26", new String(Base16.Base162().encode0(new byte[] {(byte) 38})));
        Base16.Base162();
        assertEquals("27", new String(Base16.Base162().encode0(new byte[] {(byte) 39})));
        Base16.Base162();
        assertEquals("28", new String(Base16.Base162().encode0(new byte[] {(byte) 40})));
        Base16.Base162();
        assertEquals("29", new String(Base16.Base162().encode0(new byte[] {(byte) 41})));
        Base16.Base162();
        assertEquals("2A", new String(Base16.Base162().encode0(new byte[] {(byte) 42})));
        Base16.Base162();
        assertEquals("2B", new String(Base16.Base162().encode0(new byte[] {(byte) 43})));
        Base16.Base162();
        assertEquals("2C", new String(Base16.Base162().encode0(new byte[] {(byte) 44})));
        Base16.Base162();
        assertEquals("2D", new String(Base16.Base162().encode0(new byte[] {(byte) 45})));
        Base16.Base162();
        assertEquals("2E", new String(Base16.Base162().encode0(new byte[] {(byte) 46})));
        Base16.Base162();
        assertEquals("2F", new String(Base16.Base162().encode0(new byte[] {(byte) 47})));
        Base16.Base162();
        assertEquals("30", new String(Base16.Base162().encode0(new byte[] {(byte) 48})));
        Base16.Base162();
        assertEquals("31", new String(Base16.Base162().encode0(new byte[] {(byte) 49})));
        Base16.Base162();
        assertEquals("32", new String(Base16.Base162().encode0(new byte[] {(byte) 50})));
        Base16.Base162();
        assertEquals("33", new String(Base16.Base162().encode0(new byte[] {(byte) 51})));
        Base16.Base162();
        assertEquals("34", new String(Base16.Base162().encode0(new byte[] {(byte) 52})));
        Base16.Base162();
        assertEquals("35", new String(Base16.Base162().encode0(new byte[] {(byte) 53})));
        Base16.Base162();
        assertEquals("36", new String(Base16.Base162().encode0(new byte[] {(byte) 54})));
        Base16.Base162();
        assertEquals("37", new String(Base16.Base162().encode0(new byte[] {(byte) 55})));
        Base16.Base162();
        assertEquals("38", new String(Base16.Base162().encode0(new byte[] {(byte) 56})));
        Base16.Base162();
        assertEquals("39", new String(Base16.Base162().encode0(new byte[] {(byte) 57})));
        Base16.Base162();
        assertEquals("3A", new String(Base16.Base162().encode0(new byte[] {(byte) 58})));
        Base16.Base162();
        assertEquals("3B", new String(Base16.Base162().encode0(new byte[] {(byte) 59})));
        Base16.Base162();
        assertEquals("3C", new String(Base16.Base162().encode0(new byte[] {(byte) 60})));
        Base16.Base162();
        assertEquals("3D", new String(Base16.Base162().encode0(new byte[] {(byte) 61})));
        Base16.Base162();
        assertEquals("3E", new String(Base16.Base162().encode0(new byte[] {(byte) 62})));
        Base16.Base162();
        assertEquals("3F", new String(Base16.Base162().encode0(new byte[] {(byte) 63})));
        Base16.Base162();
        assertEquals("40", new String(Base16.Base162().encode0(new byte[] {(byte) 64})));
        Base16.Base162();
        assertEquals("41", new String(Base16.Base162().encode0(new byte[] {(byte) 65})));
        Base16.Base162();
        assertEquals("42", new String(Base16.Base162().encode0(new byte[] {(byte) 66})));
        Base16.Base162();
        assertEquals("43", new String(Base16.Base162().encode0(new byte[] {(byte) 67})));
        Base16.Base162();
        assertEquals("44", new String(Base16.Base162().encode0(new byte[] {(byte) 68})));
        Base16.Base162();
        assertEquals("45", new String(Base16.Base162().encode0(new byte[] {(byte) 69})));
        Base16.Base162();
        assertEquals("46", new String(Base16.Base162().encode0(new byte[] {(byte) 70})));
        Base16.Base162();
        assertEquals("47", new String(Base16.Base162().encode0(new byte[] {(byte) 71})));
        Base16.Base162();
        assertEquals("48", new String(Base16.Base162().encode0(new byte[] {(byte) 72})));
        Base16.Base162();
        assertEquals("49", new String(Base16.Base162().encode0(new byte[] {(byte) 73})));
        Base16.Base162();
        assertEquals("4A", new String(Base16.Base162().encode0(new byte[] {(byte) 74})));
        Base16.Base162();
        assertEquals("4B", new String(Base16.Base162().encode0(new byte[] {(byte) 75})));
        Base16.Base162();
        assertEquals("4C", new String(Base16.Base162().encode0(new byte[] {(byte) 76})));
        Base16.Base162();
        assertEquals("4D", new String(Base16.Base162().encode0(new byte[] {(byte) 77})));
        Base16.Base162();
        assertEquals("4E", new String(Base16.Base162().encode0(new byte[] {(byte) 78})));
        Base16.Base162();
        assertEquals("4F", new String(Base16.Base162().encode0(new byte[] {(byte) 79})));
        Base16.Base162();
        assertEquals("50", new String(Base16.Base162().encode0(new byte[] {(byte) 80})));
        Base16.Base162();
        assertEquals("51", new String(Base16.Base162().encode0(new byte[] {(byte) 81})));
        Base16.Base162();
        assertEquals("52", new String(Base16.Base162().encode0(new byte[] {(byte) 82})));
        Base16.Base162();
        assertEquals("53", new String(Base16.Base162().encode0(new byte[] {(byte) 83})));
        Base16.Base162();
        assertEquals("54", new String(Base16.Base162().encode0(new byte[] {(byte) 84})));
        Base16.Base162();
        assertEquals("55", new String(Base16.Base162().encode0(new byte[] {(byte) 85})));
        Base16.Base162();
        assertEquals("56", new String(Base16.Base162().encode0(new byte[] {(byte) 86})));
        Base16.Base162();
        assertEquals("57", new String(Base16.Base162().encode0(new byte[] {(byte) 87})));
        Base16.Base162();
        assertEquals("58", new String(Base16.Base162().encode0(new byte[] {(byte) 88})));
        Base16.Base162();
        assertEquals("59", new String(Base16.Base162().encode0(new byte[] {(byte) 89})));
        Base16.Base162();
        assertEquals("5A", new String(Base16.Base162().encode0(new byte[] {(byte) 90})));
        Base16.Base162();
        assertEquals("5B", new String(Base16.Base162().encode0(new byte[] {(byte) 91})));
        Base16.Base162();
        assertEquals("5C", new String(Base16.Base162().encode0(new byte[] {(byte) 92})));
        Base16.Base162();
        assertEquals("5D", new String(Base16.Base162().encode0(new byte[] {(byte) 93})));
        Base16.Base162();
        assertEquals("5E", new String(Base16.Base162().encode0(new byte[] {(byte) 94})));
        Base16.Base162();
        assertEquals("5F", new String(Base16.Base162().encode0(new byte[] {(byte) 95})));
        Base16.Base162();
        assertEquals("60", new String(Base16.Base162().encode0(new byte[] {(byte) 96})));
        Base16.Base162();
        assertEquals("61", new String(Base16.Base162().encode0(new byte[] {(byte) 97})));
        Base16.Base162();
        assertEquals("62", new String(Base16.Base162().encode0(new byte[] {(byte) 98})));
        Base16.Base162();
        assertEquals("63", new String(Base16.Base162().encode0(new byte[] {(byte) 99})));
        Base16.Base162();
        assertEquals("64", new String(Base16.Base162().encode0(new byte[] {(byte) 100})));
        Base16.Base162();
        assertEquals("65", new String(Base16.Base162().encode0(new byte[] {(byte) 101})));
        Base16.Base162();
        assertEquals("66", new String(Base16.Base162().encode0(new byte[] {(byte) 102})));
        Base16.Base162();
        assertEquals("67", new String(Base16.Base162().encode0(new byte[] {(byte) 103})));
        Base16.Base162();
        assertEquals("68", new String(Base16.Base162().encode0(new byte[] {(byte) 104})));
        for (int i = -128; i <= 127; i++) {
            final byte test[] = {(byte) i};
            assertArrayEquals(test, Base16.Base162().decode0(Base16.Base162().encode0(test)));
        }
    }

    @Test
    public void testTriplets_test0_decomposed()  {
        Base16.Base162();
    }

    @Test
    public void testTriplets_test1_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
    }

    @Test
    public void testTriplets_test2_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
    }

    @Test
    public void testTriplets_test3_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
    }

    @Test
    public void testTriplets_test4_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
    }

    @Test
    public void testTriplets_test5_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
    }

    @Test
    public void testTriplets_test6_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
    }

    @Test
    public void testTriplets_test7_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
    }

    @Test
    public void testTriplets_test8_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
    }

    @Test
    public void testTriplets_test9_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
    }

    @Test
    public void testTriplets_test10_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
    }

    @Test
    public void testTriplets_test11_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
    }

    @Test
    public void testTriplets_test12_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
    }

    @Test
    public void testTriplets_test13_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals(
                "000006",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));
    }

    @Test
    public void testTriplets_test14_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals(
                "000006",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));
        Base16.Base162();
    }

    @Test
    public void testTriplets_test15_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals(
                "000006",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals(
                "000007",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));
    }

    @Test
    public void testTriplets_test16_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals(
                "000006",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals(
                "000007",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));
        Base16.Base162();
    }

    @Test
    public void testTriplets_test17_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals(
                "000006",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals(
                "000007",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals(
                "000008",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));
    }

    @Test
    public void testTriplets_test18_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals(
                "000006",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals(
                "000007",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals(
                "000008",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));
        Base16.Base162();
    }

    @Test
    public void testTriplets_test19_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals(
                "000006",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals(
                "000007",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals(
                "000008",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals(
                "000009",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));
    }

    @Test
    public void testTriplets_test20_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals(
                "000006",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals(
                "000007",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals(
                "000008",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals(
                "000009",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));
        Base16.Base162();
    }

    @Test
    public void testTriplets_test21_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals(
                "000006",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals(
                "000007",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals(
                "000008",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals(
                "000009",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "00000A",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));
    }

    @Test
    public void testTriplets_test22_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals(
                "000006",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals(
                "000007",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals(
                "000008",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals(
                "000009",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "00000A",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));
        Base16.Base162();
    }

    @Test
    public void testTriplets_test23_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals(
                "000006",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals(
                "000007",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals(
                "000008",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals(
                "000009",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "00000A",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "00000B",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 11})));
    }

    @Test
    public void testTriplets_test24_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals(
                "000006",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals(
                "000007",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals(
                "000008",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals(
                "000009",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "00000A",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "00000B",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 11})));
        Base16.Base162();
    }

    @Test
    public void testTriplets_test25_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals(
                "000006",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals(
                "000007",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals(
                "000008",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals(
                "000009",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "00000A",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "00000B",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 11})));
        Base16.Base162();
        assertEquals(
                "00000C",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 12})));
    }

    @Test
    public void testTriplets_test26_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals(
                "000006",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals(
                "000007",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals(
                "000008",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals(
                "000009",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "00000A",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "00000B",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 11})));
        Base16.Base162();
        assertEquals(
                "00000C",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 12})));
        Base16.Base162();
    }

    @Test
    public void testTriplets_test27_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals(
                "000006",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals(
                "000007",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals(
                "000008",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals(
                "000009",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "00000A",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "00000B",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 11})));
        Base16.Base162();
        assertEquals(
                "00000C",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 12})));
        Base16.Base162();
        assertEquals(
                "00000D",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 13})));
    }

    @Test
    public void testTriplets_test28_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals(
                "000006",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals(
                "000007",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals(
                "000008",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals(
                "000009",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "00000A",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "00000B",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 11})));
        Base16.Base162();
        assertEquals(
                "00000C",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 12})));
        Base16.Base162();
        assertEquals(
                "00000D",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 13})));
        Base16.Base162();
    }

    @Test
    public void testTriplets_test29_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals(
                "000006",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals(
                "000007",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals(
                "000008",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals(
                "000009",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "00000A",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "00000B",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 11})));
        Base16.Base162();
        assertEquals(
                "00000C",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 12})));
        Base16.Base162();
        assertEquals(
                "00000D",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 13})));
        Base16.Base162();
        assertEquals(
                "00000E",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 14})));
    }

    @Test
    public void testTriplets_test30_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals(
                "000006",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals(
                "000007",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals(
                "000008",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals(
                "000009",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "00000A",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "00000B",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 11})));
        Base16.Base162();
        assertEquals(
                "00000C",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 12})));
        Base16.Base162();
        assertEquals(
                "00000D",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 13})));
        Base16.Base162();
        assertEquals(
                "00000E",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 14})));
        Base16.Base162();
    }

    @Test
    public void testTriplets_test31_decomposed()  {
        Base16.Base162();
        assertEquals(
                "000000",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 0})));
        Base16.Base162();
        assertEquals(
                "000001",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 1})));
        Base16.Base162();
        assertEquals(
                "000002",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 2})));
        Base16.Base162();
        assertEquals(
                "000003",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 3})));
        Base16.Base162();
        assertEquals(
                "000004",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 4})));
        Base16.Base162();
        assertEquals(
                "000005",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 5})));
        Base16.Base162();
        assertEquals(
                "000006",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 6})));
        Base16.Base162();
        assertEquals(
                "000007",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 7})));
        Base16.Base162();
        assertEquals(
                "000008",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 8})));
        Base16.Base162();
        assertEquals(
                "000009",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 9})));
        Base16.Base162();
        assertEquals(
                "00000A",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 10})));
        Base16.Base162();
        assertEquals(
                "00000B",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 11})));
        Base16.Base162();
        assertEquals(
                "00000C",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 12})));
        Base16.Base162();
        assertEquals(
                "00000D",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 13})));
        Base16.Base162();
        assertEquals(
                "00000E",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 14})));
        Base16.Base162();
        assertEquals(
                "00000F",
                new String(Base16.Base162().encode0(new byte[] {(byte) 0, (byte) 0, (byte) 15})));
    }

    @Test
    public void testByteToStringVariations_test0_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
    }

    @Test
    public void testByteToStringVariations_test1_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final byte[] b1 = StringUtils.getBytesUtf8("Hello World");
    }

    @Test
    public void testByteToStringVariations_test2_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final byte[] b1 = StringUtils.getBytesUtf8("Hello World");
        final byte[] b2 = {};
        final byte[] b3 = null;
        assertEquals(
                "byteToString Hello World", "48656C6C6F20576F726C64", base16.encodeToString(b1));
    }

    @Test
    public void testByteToStringVariations_test3_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final byte[] b1 = StringUtils.getBytesUtf8("Hello World");
        final byte[] b2 = {};
        final byte[] b3 = null;
        assertEquals(
                "byteToString Hello World", "48656C6C6F20576F726C64", base16.encodeToString(b1));
        Base16.Base162();
    }

    @Test
    public void testByteToStringVariations_test4_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final byte[] b1 = StringUtils.getBytesUtf8("Hello World");
        final byte[] b2 = {};
        final byte[] b3 = null;
        assertEquals(
                "byteToString Hello World", "48656C6C6F20576F726C64", base16.encodeToString(b1));
        Base16.Base162();
        Base16.Base162().encode0(b1);
    }

    @Test
    public void testByteToStringVariations_test5_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final byte[] b1 = StringUtils.getBytesUtf8("Hello World");
        final byte[] b2 = {};
        final byte[] b3 = null;
        assertEquals(
                "byteToString Hello World", "48656C6C6F20576F726C64", base16.encodeToString(b1));
        Base16.Base162();
        Base16.Base162().encode0(b1);
        assertEquals(
                "byteToString static Hello World",
                "48656C6C6F20576F726C64",
                StringUtils.newStringUtf8(Base16.Base162().encode0(b1)));
    }

    @Test
    public void testByteToStringVariations_test6_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final byte[] b1 = StringUtils.getBytesUtf8("Hello World");
        final byte[] b2 = {};
        final byte[] b3 = null;
        assertEquals(
                "byteToString Hello World", "48656C6C6F20576F726C64", base16.encodeToString(b1));
        Base16.Base162();
        Base16.Base162().encode0(b1);
        assertEquals(
                "byteToString static Hello World",
                "48656C6C6F20576F726C64",
                StringUtils.newStringUtf8(Base16.Base162().encode0(b1)));
        assertEquals("byteToString \"\"", "", base16.encodeToString(b2));
    }

    @Test
    public void testByteToStringVariations_test7_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final byte[] b1 = StringUtils.getBytesUtf8("Hello World");
        final byte[] b2 = {};
        final byte[] b3 = null;
        assertEquals(
                "byteToString Hello World", "48656C6C6F20576F726C64", base16.encodeToString(b1));
        Base16.Base162();
        Base16.Base162().encode0(b1);
        assertEquals(
                "byteToString static Hello World",
                "48656C6C6F20576F726C64",
                StringUtils.newStringUtf8(Base16.Base162().encode0(b1)));
        assertEquals("byteToString \"\"", "", base16.encodeToString(b2));
        Base16.Base162();
    }

    @Test
    public void testByteToStringVariations_test8_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final byte[] b1 = StringUtils.getBytesUtf8("Hello World");
        final byte[] b2 = {};
        final byte[] b3 = null;
        assertEquals(
                "byteToString Hello World", "48656C6C6F20576F726C64", base16.encodeToString(b1));
        Base16.Base162();
        Base16.Base162().encode0(b1);
        assertEquals(
                "byteToString static Hello World",
                "48656C6C6F20576F726C64",
                StringUtils.newStringUtf8(Base16.Base162().encode0(b1)));
        assertEquals("byteToString \"\"", "", base16.encodeToString(b2));
        Base16.Base162();
        Base16.Base162().encode0(b2);
    }

    @Test
    public void testByteToStringVariations_test9_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final byte[] b1 = StringUtils.getBytesUtf8("Hello World");
        final byte[] b2 = {};
        final byte[] b3 = null;
        assertEquals(
                "byteToString Hello World", "48656C6C6F20576F726C64", base16.encodeToString(b1));
        Base16.Base162();
        Base16.Base162().encode0(b1);
        assertEquals(
                "byteToString static Hello World",
                "48656C6C6F20576F726C64",
                StringUtils.newStringUtf8(Base16.Base162().encode0(b1)));
        assertEquals("byteToString \"\"", "", base16.encodeToString(b2));
        Base16.Base162();
        Base16.Base162().encode0(b2);
        assertEquals(
                "byteToString static \"\"",
                "",
                StringUtils.newStringUtf8(Base16.Base162().encode0(b2)));
    }

    @Test
    public void testByteToStringVariations_test10_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final byte[] b1 = StringUtils.getBytesUtf8("Hello World");
        final byte[] b2 = {};
        final byte[] b3 = null;
        assertEquals(
                "byteToString Hello World", "48656C6C6F20576F726C64", base16.encodeToString(b1));
        Base16.Base162();
        Base16.Base162().encode0(b1);
        assertEquals(
                "byteToString static Hello World",
                "48656C6C6F20576F726C64",
                StringUtils.newStringUtf8(Base16.Base162().encode0(b1)));
        assertEquals("byteToString \"\"", "", base16.encodeToString(b2));
        Base16.Base162();
        Base16.Base162().encode0(b2);
        assertEquals(
                "byteToString static \"\"",
                "",
                StringUtils.newStringUtf8(Base16.Base162().encode0(b2)));
        assertNull("byteToString null", base16.encodeToString(b3));
    }

    @Test
    public void testByteToStringVariations_test11_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final byte[] b1 = StringUtils.getBytesUtf8("Hello World");
        final byte[] b2 = {};
        final byte[] b3 = null;
        assertEquals(
                "byteToString Hello World", "48656C6C6F20576F726C64", base16.encodeToString(b1));
        Base16.Base162();
        Base16.Base162().encode0(b1);
        assertEquals(
                "byteToString static Hello World",
                "48656C6C6F20576F726C64",
                StringUtils.newStringUtf8(Base16.Base162().encode0(b1)));
        assertEquals("byteToString \"\"", "", base16.encodeToString(b2));
        Base16.Base162();
        Base16.Base162().encode0(b2);
        assertEquals(
                "byteToString static \"\"",
                "",
                StringUtils.newStringUtf8(Base16.Base162().encode0(b2)));
        assertNull("byteToString null", base16.encodeToString(b3));
        Base16.Base162();
    }

    @Test
    public void testByteToStringVariations_test12_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final byte[] b1 = StringUtils.getBytesUtf8("Hello World");
        final byte[] b2 = {};
        final byte[] b3 = null;
        assertEquals(
                "byteToString Hello World", "48656C6C6F20576F726C64", base16.encodeToString(b1));
        Base16.Base162();
        Base16.Base162().encode0(b1);
        assertEquals(
                "byteToString static Hello World",
                "48656C6C6F20576F726C64",
                StringUtils.newStringUtf8(Base16.Base162().encode0(b1)));
        assertEquals("byteToString \"\"", "", base16.encodeToString(b2));
        Base16.Base162();
        Base16.Base162().encode0(b2);
        assertEquals(
                "byteToString static \"\"",
                "",
                StringUtils.newStringUtf8(Base16.Base162().encode0(b2)));
        assertNull("byteToString null", base16.encodeToString(b3));
        Base16.Base162();
        Base16.Base162().encode0(b3);
    }

    @Test
    public void testByteToStringVariations_test13_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final byte[] b1 = StringUtils.getBytesUtf8("Hello World");
        final byte[] b2 = {};
        final byte[] b3 = null;
        assertEquals(
                "byteToString Hello World", "48656C6C6F20576F726C64", base16.encodeToString(b1));
        Base16.Base162();
        Base16.Base162().encode0(b1);
        assertEquals(
                "byteToString static Hello World",
                "48656C6C6F20576F726C64",
                StringUtils.newStringUtf8(Base16.Base162().encode0(b1)));
        assertEquals("byteToString \"\"", "", base16.encodeToString(b2));
        Base16.Base162();
        Base16.Base162().encode0(b2);
        assertEquals(
                "byteToString static \"\"",
                "",
                StringUtils.newStringUtf8(Base16.Base162().encode0(b2)));
        assertNull("byteToString null", base16.encodeToString(b3));
        Base16.Base162();
        Base16.Base162().encode0(b3);
        assertNull(
                "byteToString static null",
                StringUtils.newStringUtf8(Base16.Base162().encode0(b3)));
    }

    @Test
    public void testStringToByteVariations_test0_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
    }

    @Test
    public void testStringToByteVariations_test1_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
    }

    @Test
    public void testStringToByteVariations_test2_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8(base16.decode3(s1)));
    }

    @Test
    public void testStringToByteVariations_test3_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8(base16.decode3(s1)));
        Base16.Base162();
    }

    @Test
    public void testStringToByteVariations_test4_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8(base16.decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode2((Object) s1);
    }

    @Test
    public void testStringToByteVariations_test5_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8(base16.decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode2((Object) s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));
    }

    @Test
    public void testStringToByteVariations_test6_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8(base16.decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode2((Object) s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));
        Base16.Base162();
    }

    @Test
    public void testStringToByteVariations_test7_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8(base16.decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode2((Object) s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));
        Base16.Base162();
        Base16.Base162().decode3(s1);
    }

    @Test
    public void testStringToByteVariations_test8_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8(base16.decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode2((Object) s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));
        Base16.Base162();
        Base16.Base162().decode3(s1);
        assertEquals(
                "StringToByte static Hello World",
                "Hello World",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));
    }

    @Test
    public void testStringToByteVariations_test9_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8(base16.decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode2((Object) s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));
        Base16.Base162();
        Base16.Base162().decode3(s1);
        assertEquals(
                "StringToByte static Hello World",
                "Hello World",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));
        Base16.Base162();
    }

    @Test
    public void testStringToByteVariations_test10_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8(base16.decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode2((Object) s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));
        Base16.Base162();
        Base16.Base162().decode3(s1);
        assertEquals(
                "StringToByte static Hello World",
                "Hello World",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode3(s2);
    }

    @Test
    public void testStringToByteVariations_test11_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8(base16.decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode2((Object) s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));
        Base16.Base162();
        Base16.Base162().decode3(s1);
        assertEquals(
                "StringToByte static Hello World",
                "Hello World",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode3(s2);
        assertEquals(
                "StringToByte \"\"", "", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));
    }

    @Test
    public void testStringToByteVariations_test12_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8(base16.decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode2((Object) s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));
        Base16.Base162();
        Base16.Base162().decode3(s1);
        assertEquals(
                "StringToByte static Hello World",
                "Hello World",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode3(s2);
        assertEquals(
                "StringToByte \"\"", "", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));
        Base16.Base162();
    }

    @Test
    public void testStringToByteVariations_test13_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8(base16.decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode2((Object) s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));
        Base16.Base162();
        Base16.Base162().decode3(s1);
        assertEquals(
                "StringToByte static Hello World",
                "Hello World",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode3(s2);
        assertEquals(
                "StringToByte \"\"", "", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));
        Base16.Base162();
        Base16.Base162().decode3(s2);
    }

    @Test
    public void testStringToByteVariations_test14_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8(base16.decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode2((Object) s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));
        Base16.Base162();
        Base16.Base162().decode3(s1);
        assertEquals(
                "StringToByte static Hello World",
                "Hello World",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode3(s2);
        assertEquals(
                "StringToByte \"\"", "", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));
        Base16.Base162();
        Base16.Base162().decode3(s2);
        assertEquals(
                "StringToByte static \"\"",
                "",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));
    }

    @Test
    public void testStringToByteVariations_test15_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8(base16.decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode2((Object) s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));
        Base16.Base162();
        Base16.Base162().decode3(s1);
        assertEquals(
                "StringToByte static Hello World",
                "Hello World",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode3(s2);
        assertEquals(
                "StringToByte \"\"", "", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));
        Base16.Base162();
        Base16.Base162().decode3(s2);
        assertEquals(
                "StringToByte static \"\"",
                "",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));
        Base16.Base162();
    }

    @Test
    public void testStringToByteVariations_test16_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8(base16.decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode2((Object) s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));
        Base16.Base162();
        Base16.Base162().decode3(s1);
        assertEquals(
                "StringToByte static Hello World",
                "Hello World",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode3(s2);
        assertEquals(
                "StringToByte \"\"", "", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));
        Base16.Base162();
        Base16.Base162().decode3(s2);
        assertEquals(
                "StringToByte static \"\"",
                "",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));
        Base16.Base162();
        Base16.Base162().decode3(s3);
    }

    @Test
    public void testStringToByteVariations_test17_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8(base16.decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode2((Object) s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));
        Base16.Base162();
        Base16.Base162().decode3(s1);
        assertEquals(
                "StringToByte static Hello World",
                "Hello World",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode3(s2);
        assertEquals(
                "StringToByte \"\"", "", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));
        Base16.Base162();
        Base16.Base162().decode3(s2);
        assertEquals(
                "StringToByte static \"\"",
                "",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));
        Base16.Base162();
        Base16.Base162().decode3(s3);
        assertNull("StringToByte null", StringUtils.newStringUtf8(Base16.Base162().decode3(s3)));
    }

    @Test
    public void testStringToByteVariations_test18_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8(base16.decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode2((Object) s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));
        Base16.Base162();
        Base16.Base162().decode3(s1);
        assertEquals(
                "StringToByte static Hello World",
                "Hello World",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode3(s2);
        assertEquals(
                "StringToByte \"\"", "", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));
        Base16.Base162();
        Base16.Base162().decode3(s2);
        assertEquals(
                "StringToByte static \"\"",
                "",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));
        Base16.Base162();
        Base16.Base162().decode3(s3);
        assertNull("StringToByte null", StringUtils.newStringUtf8(Base16.Base162().decode3(s3)));
        Base16.Base162();
    }

    @Test
    public void testStringToByteVariations_test19_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8(base16.decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode2((Object) s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));
        Base16.Base162();
        Base16.Base162().decode3(s1);
        assertEquals(
                "StringToByte static Hello World",
                "Hello World",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode3(s2);
        assertEquals(
                "StringToByte \"\"", "", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));
        Base16.Base162();
        Base16.Base162().decode3(s2);
        assertEquals(
                "StringToByte static \"\"",
                "",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));
        Base16.Base162();
        Base16.Base162().decode3(s3);
        assertNull("StringToByte null", StringUtils.newStringUtf8(Base16.Base162().decode3(s3)));
        Base16.Base162();
        Base16.Base162().decode3(s3);
    }

    @Test
    public void testStringToByteVariations_test20_decomposed() throws DecoderException {
        final Base16 base16 = Base16.Base162();
        final String s1 = "48656C6C6F20576F726C64";
        final String s2 = "";
        final String s3 = null;
        base16.decode3(s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8(base16.decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode2((Object) s1);
        assertEquals(
                "StringToByte Hello World",
                "Hello World",
                StringUtils.newStringUtf8((byte[]) Base16.Base162().decode2((Object) s1)));
        Base16.Base162();
        Base16.Base162().decode3(s1);
        assertEquals(
                "StringToByte static Hello World",
                "Hello World",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s1)));
        Base16.Base162();
        Base16.Base162().decode3(s2);
        assertEquals(
                "StringToByte \"\"", "", StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));
        Base16.Base162();
        Base16.Base162().decode3(s2);
        assertEquals(
                "StringToByte static \"\"",
                "",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s2)));
        Base16.Base162();
        Base16.Base162().decode3(s3);
        assertNull("StringToByte null", StringUtils.newStringUtf8(Base16.Base162().decode3(s3)));
        Base16.Base162();
        Base16.Base162().decode3(s3);
        assertNull(
                "StringToByte static null",
                StringUtils.newStringUtf8(Base16.Base162().decode3(s3)));
    }

    @Test
    public void checkEncodeLengthBounds_test0_decomposed()  {
        final Base16 base16 = Base16.Base162();
    }

    @Test(expected = IllegalArgumentException.class)
    public void checkEncodeLengthBounds_test1_decomposed()  {
        final Base16 base16 = Base16.Base162();
        base16.encode1(new byte[10], 0, 1 << 30);
    }

    @Test
    public void testIsInAlphabet_test0_decomposed()  {
        Base16 b16 = Base16.Base161(true);
    }

    @Test
    public void testIsInAlphabet_test1_decomposed()  {
        Base16 b16 = Base16.Base161(true);
        assertFalse(b16.isInAlphabet0((byte) 0));
        assertFalse(b16.isInAlphabet0((byte) 1));
        assertFalse(b16.isInAlphabet0((byte) -1));
        assertFalse(b16.isInAlphabet0((byte) -15));
        assertFalse(b16.isInAlphabet0((byte) -16));
        assertFalse(b16.isInAlphabet0((byte) 128));
        assertFalse(b16.isInAlphabet0((byte) 255));
    }

    @Test
    public void testIsInAlphabet_test2_decomposed()  {
        Base16 b16 = Base16.Base161(true);
        assertFalse(b16.isInAlphabet0((byte) 0));
        assertFalse(b16.isInAlphabet0((byte) 1));
        assertFalse(b16.isInAlphabet0((byte) -1));
        assertFalse(b16.isInAlphabet0((byte) -15));
        assertFalse(b16.isInAlphabet0((byte) -16));
        assertFalse(b16.isInAlphabet0((byte) 128));
        assertFalse(b16.isInAlphabet0((byte) 255));
        b16 = Base16.Base161(true);
    }

    @Test
    public void testIsInAlphabet_test3_decomposed()  {
        Base16 b16 = Base16.Base161(true);
        assertFalse(b16.isInAlphabet0((byte) 0));
        assertFalse(b16.isInAlphabet0((byte) 1));
        assertFalse(b16.isInAlphabet0((byte) -1));
        assertFalse(b16.isInAlphabet0((byte) -15));
        assertFalse(b16.isInAlphabet0((byte) -16));
        assertFalse(b16.isInAlphabet0((byte) 128));
        assertFalse(b16.isInAlphabet0((byte) 255));
        b16 = Base16.Base161(true);
        for (char c = '0'; c <= '9'; c++) {
            assertTrue(b16.isInAlphabet0((byte) c));
        }
        for (char c = 'a'; c <= 'f'; c++) {
            assertTrue(b16.isInAlphabet0((byte) c));
        }
        for (char c = 'A'; c <= 'F'; c++) {
            assertFalse(b16.isInAlphabet0((byte) c));
        }
        assertFalse(b16.isInAlphabet0((byte) ('0' - 1)));
        assertFalse(b16.isInAlphabet0((byte) ('9' + 1)));
        assertFalse(b16.isInAlphabet0((byte) ('a' - 1)));
        assertFalse(b16.isInAlphabet0((byte) ('f' + 1)));
        assertFalse(b16.isInAlphabet0((byte) ('z' + 1)));
    }

    @Test
    public void testIsInAlphabet_test4_decomposed()  {
        Base16 b16 = Base16.Base161(true);
        assertFalse(b16.isInAlphabet0((byte) 0));
        assertFalse(b16.isInAlphabet0((byte) 1));
        assertFalse(b16.isInAlphabet0((byte) -1));
        assertFalse(b16.isInAlphabet0((byte) -15));
        assertFalse(b16.isInAlphabet0((byte) -16));
        assertFalse(b16.isInAlphabet0((byte) 128));
        assertFalse(b16.isInAlphabet0((byte) 255));
        b16 = Base16.Base161(true);
        for (char c = '0'; c <= '9'; c++) {
            assertTrue(b16.isInAlphabet0((byte) c));
        }
        for (char c = 'a'; c <= 'f'; c++) {
            assertTrue(b16.isInAlphabet0((byte) c));
        }
        for (char c = 'A'; c <= 'F'; c++) {
            assertFalse(b16.isInAlphabet0((byte) c));
        }
        assertFalse(b16.isInAlphabet0((byte) ('0' - 1)));
        assertFalse(b16.isInAlphabet0((byte) ('9' + 1)));
        assertFalse(b16.isInAlphabet0((byte) ('a' - 1)));
        assertFalse(b16.isInAlphabet0((byte) ('f' + 1)));
        assertFalse(b16.isInAlphabet0((byte) ('z' + 1)));
        b16 = Base16.Base161(false);
    }

    @Test
    public void testIsInAlphabet_test5_decomposed()  {
        Base16 b16 = Base16.Base161(true);
        assertFalse(b16.isInAlphabet0((byte) 0));
        assertFalse(b16.isInAlphabet0((byte) 1));
        assertFalse(b16.isInAlphabet0((byte) -1));
        assertFalse(b16.isInAlphabet0((byte) -15));
        assertFalse(b16.isInAlphabet0((byte) -16));
        assertFalse(b16.isInAlphabet0((byte) 128));
        assertFalse(b16.isInAlphabet0((byte) 255));
        b16 = Base16.Base161(true);
        for (char c = '0'; c <= '9'; c++) {
            assertTrue(b16.isInAlphabet0((byte) c));
        }
        for (char c = 'a'; c <= 'f'; c++) {
            assertTrue(b16.isInAlphabet0((byte) c));
        }
        for (char c = 'A'; c <= 'F'; c++) {
            assertFalse(b16.isInAlphabet0((byte) c));
        }
        assertFalse(b16.isInAlphabet0((byte) ('0' - 1)));
        assertFalse(b16.isInAlphabet0((byte) ('9' + 1)));
        assertFalse(b16.isInAlphabet0((byte) ('a' - 1)));
        assertFalse(b16.isInAlphabet0((byte) ('f' + 1)));
        assertFalse(b16.isInAlphabet0((byte) ('z' + 1)));
        b16 = Base16.Base161(false);
        for (char c = '0'; c <= '9'; c++) {
            assertTrue(b16.isInAlphabet0((byte) c));
        }
        for (char c = 'a'; c <= 'f'; c++) {
            assertFalse(b16.isInAlphabet0((byte) c));
        }
        for (char c = 'A'; c <= 'F'; c++) {
            assertTrue(b16.isInAlphabet0((byte) c));
        }
        assertFalse(b16.isInAlphabet0((byte) ('0' - 1)));
        assertFalse(b16.isInAlphabet0((byte) ('9' + 1)));
        assertFalse(b16.isInAlphabet0((byte) ('A' - 1)));
        assertFalse(b16.isInAlphabet0((byte) ('F' + 1)));
        assertFalse(b16.isInAlphabet0((byte) ('Z' + 1)));
    }

    @Test
    public void testDecodeSingleBytes_test0_decomposed()  {
        final String encoded = "556E74696C206E6578742074696D6521";
        final BaseNCodec.Context context = new BaseNCodec.Context();
    }

    @Test
    public void testDecodeSingleBytes_test1_decomposed()  {
        final String encoded = "556E74696C206E6578742074696D6521";
        final BaseNCodec.Context context = new BaseNCodec.Context();
        final Base16 b16 = Base16.Base162();
    }

    @Test
    public void testDecodeSingleBytes_test2_decomposed()  {
        final String encoded = "556E74696C206E6578742074696D6521";
        final BaseNCodec.Context context = new BaseNCodec.Context();
        final Base16 b16 = Base16.Base162();
        final byte[] encocdedBytes = StringUtils.getBytesUtf8(encoded);
    }

    @Test
    public void testDecodeSingleBytes_test3_decomposed()  {
        final String encoded = "556E74696C206E6578742074696D6521";
        final BaseNCodec.Context context = new BaseNCodec.Context();
        final Base16 b16 = Base16.Base162();
        final byte[] encocdedBytes = StringUtils.getBytesUtf8(encoded);
        b16.decode1(encocdedBytes, 0, 1, context);
        b16.decode1(encocdedBytes, 1, 1, context);
        b16.decode1(encocdedBytes, 2, 1, context);
        b16.decode1(encocdedBytes, 3, 1, context);
        b16.decode1(encocdedBytes, 4, 3, context);
        b16.decode1(encocdedBytes, 7, 3, context);
        b16.decode1(encocdedBytes, 10, 3, context);
        b16.decode1(encocdedBytes, 13, 19, context);
    }

    @Test
    public void testDecodeSingleBytes_test4_decomposed()  {
        final String encoded = "556E74696C206E6578742074696D6521";
        final BaseNCodec.Context context = new BaseNCodec.Context();
        final Base16 b16 = Base16.Base162();
        final byte[] encocdedBytes = StringUtils.getBytesUtf8(encoded);
        b16.decode1(encocdedBytes, 0, 1, context);
        b16.decode1(encocdedBytes, 1, 1, context);
        b16.decode1(encocdedBytes, 2, 1, context);
        b16.decode1(encocdedBytes, 3, 1, context);
        b16.decode1(encocdedBytes, 4, 3, context);
        b16.decode1(encocdedBytes, 7, 3, context);
        b16.decode1(encocdedBytes, 10, 3, context);
        b16.decode1(encocdedBytes, 13, 19, context);
        final byte[] decodedBytes = new byte[context.pos];
        System.arraycopy(context.buffer, context.readPos, decodedBytes, 0, decodedBytes.length);
        final String decoded = StringUtils.newStringUtf8(decodedBytes);
    }

    @Test
    public void testDecodeSingleBytes_test5_decomposed()  {
        final String encoded = "556E74696C206E6578742074696D6521";
        final BaseNCodec.Context context = new BaseNCodec.Context();
        final Base16 b16 = Base16.Base162();
        final byte[] encocdedBytes = StringUtils.getBytesUtf8(encoded);
        b16.decode1(encocdedBytes, 0, 1, context);
        b16.decode1(encocdedBytes, 1, 1, context);
        b16.decode1(encocdedBytes, 2, 1, context);
        b16.decode1(encocdedBytes, 3, 1, context);
        b16.decode1(encocdedBytes, 4, 3, context);
        b16.decode1(encocdedBytes, 7, 3, context);
        b16.decode1(encocdedBytes, 10, 3, context);
        b16.decode1(encocdedBytes, 13, 19, context);
        final byte[] decodedBytes = new byte[context.pos];
        System.arraycopy(context.buffer, context.readPos, decodedBytes, 0, decodedBytes.length);
        final String decoded = StringUtils.newStringUtf8(decodedBytes);
        assertEquals("Until next time!", decoded);
    }

    @Test
    public void testDecodeSingleBytesOptimisation_test0_decomposed()  {
        final BaseNCodec.Context context = new BaseNCodec.Context();
    }

    @Test
    public void testDecodeSingleBytesOptimisation_test1_decomposed()  {
        final BaseNCodec.Context context = new BaseNCodec.Context();
        assertEquals(0, context.ibitWorkArea);
        assertNull(context.buffer);
    }

    @Test
    public void testDecodeSingleBytesOptimisation_test2_decomposed()  {
        final BaseNCodec.Context context = new BaseNCodec.Context();
        assertEquals(0, context.ibitWorkArea);
        assertNull(context.buffer);
        final byte[] data = new byte[1];
        final Base16 b16 = Base16.Base162();
    }

    @Test
    public void testDecodeSingleBytesOptimisation_test3_decomposed()  {
        final BaseNCodec.Context context = new BaseNCodec.Context();
        assertEquals(0, context.ibitWorkArea);
        assertNull(context.buffer);
        final byte[] data = new byte[1];
        final Base16 b16 = Base16.Base162();
        data[0] = (byte) 'E';
        b16.decode1(data, 0, 1, context);
    }

    @Test
    public void testDecodeSingleBytesOptimisation_test4_decomposed()  {
        final BaseNCodec.Context context = new BaseNCodec.Context();
        assertEquals(0, context.ibitWorkArea);
        assertNull(context.buffer);
        final byte[] data = new byte[1];
        final Base16 b16 = Base16.Base162();
        data[0] = (byte) 'E';
        b16.decode1(data, 0, 1, context);
        assertEquals(15, context.ibitWorkArea);
        assertNull(context.buffer);
    }

    @Test
    public void testDecodeSingleBytesOptimisation_test5_decomposed()  {
        final BaseNCodec.Context context = new BaseNCodec.Context();
        assertEquals(0, context.ibitWorkArea);
        assertNull(context.buffer);
        final byte[] data = new byte[1];
        final Base16 b16 = Base16.Base162();
        data[0] = (byte) 'E';
        b16.decode1(data, 0, 1, context);
        assertEquals(15, context.ibitWorkArea);
        assertNull(context.buffer);
        data[0] = (byte) 'F';
        b16.decode1(data, 0, 1, context);
    }

    @Test
    public void testDecodeSingleBytesOptimisation_test6_decomposed()  {
        final BaseNCodec.Context context = new BaseNCodec.Context();
        assertEquals(0, context.ibitWorkArea);
        assertNull(context.buffer);
        final byte[] data = new byte[1];
        final Base16 b16 = Base16.Base162();
        data[0] = (byte) 'E';
        b16.decode1(data, 0, 1, context);
        assertEquals(15, context.ibitWorkArea);
        assertNull(context.buffer);
        data[0] = (byte) 'F';
        b16.decode1(data, 0, 1, context);
        assertEquals(0, context.ibitWorkArea);
        assertEquals((byte) 0xEF, context.buffer[0]);
    }

    @Test
    public void testStrictDecoding_test0_decomposed()  {
        final String encoded =
                "aabbccdde";
        final Base16 b16 = new Base16(true, CodecPolicy.STRICT);
    }

    @Test
    public void testStrictDecoding_test1_decomposed()  {
        final String encoded =
                "aabbccdde";
        final Base16 b16 = new Base16(true, CodecPolicy.STRICT);
        assertEquals(CodecPolicy.STRICT, b16.getCodecPolicy());
    }

    @Test
    public void testStrictDecoding_test2_decomposed()  {
        final String encoded =
                "aabbccdde";
        final Base16 b16 = new Base16(true, CodecPolicy.STRICT);
        assertEquals(CodecPolicy.STRICT, b16.getCodecPolicy());
        StringUtils.getBytesUtf8(encoded);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testStrictDecoding_test3_decomposed()  {
        final String encoded =
                "aabbccdde";
        final Base16 b16 = new Base16(true, CodecPolicy.STRICT);
        assertEquals(CodecPolicy.STRICT, b16.getCodecPolicy());
        StringUtils.getBytesUtf8(encoded);
        b16.decode0(StringUtils.getBytesUtf8(encoded));
    }

    @Test
    public void testLenientDecoding_test0_decomposed()  {
        final String encoded =
                "aabbccdde";
        final Base16 b16 = new Base16(true, CodecPolicy.LENIENT);
    }

    @Test
    public void testLenientDecoding_test1_decomposed()  {
        final String encoded =
                "aabbccdde";
        final Base16 b16 = new Base16(true, CodecPolicy.LENIENT);
        assertEquals(CodecPolicy.LENIENT, b16.getCodecPolicy());
    }

    @Test
    public void testLenientDecoding_test2_decomposed()  {
        final String encoded =
                "aabbccdde";
        final Base16 b16 = new Base16(true, CodecPolicy.LENIENT);
        assertEquals(CodecPolicy.LENIENT, b16.getCodecPolicy());
        StringUtils.getBytesUtf8(encoded);
    }

    @Test
    public void testLenientDecoding_test3_decomposed()  {
        final String encoded =
                "aabbccdde";
        final Base16 b16 = new Base16(true, CodecPolicy.LENIENT);
        assertEquals(CodecPolicy.LENIENT, b16.getCodecPolicy());
        StringUtils.getBytesUtf8(encoded);
        final byte[] decoded = b16.decode0(StringUtils.getBytesUtf8(encoded));
    }

    @Test
    public void testLenientDecoding_test4_decomposed()  {
        final String encoded =
                "aabbccdde";
        final Base16 b16 = new Base16(true, CodecPolicy.LENIENT);
        assertEquals(CodecPolicy.LENIENT, b16.getCodecPolicy());
        StringUtils.getBytesUtf8(encoded);
        final byte[] decoded = b16.decode0(StringUtils.getBytesUtf8(encoded));
        assertArrayEquals(new byte[] {(byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd}, decoded);
    }
}