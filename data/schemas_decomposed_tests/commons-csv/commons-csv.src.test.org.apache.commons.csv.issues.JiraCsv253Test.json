{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-csv/src/test/java/org/apache/commons/csv/issues/JiraCsv253Test.java",
    "imports": {
        "27-27:import IOException": {
            "start": 27,
            "end": 27,
            "body": [
                "import java.io.IOException;\n"
            ]
        },
        "28-28:import StringReader": {
            "start": 28,
            "end": 28,
            "body": [
                "import java.io.StringReader;\n"
            ]
        },
        "29-29:import Iterator": {
            "start": 29,
            "end": 29,
            "body": [
                "import java.util.Iterator;\n"
            ]
        },
        "21-21:import CSVFormat": {
            "start": 21,
            "end": 21,
            "body": [
                "import org.apache.commons.csv.CSVFormat;\n"
            ]
        },
        "24-24:import QuoteMode": {
            "start": 24,
            "end": 24,
            "body": [
                "import org.apache.commons.csv.QuoteMode;\n"
            ]
        },
        "22-22:import CSVParser": {
            "start": 22,
            "end": 22,
            "body": [
                "import org.apache.commons.csv.CSVParser;\n"
            ]
        },
        "25-25:import Test": {
            "start": 25,
            "end": 25,
            "body": [
                "import org.junit.jupiter.api.Test;\n"
            ]
        },
        "23-23:import CSVRecord": {
            "start": 23,
            "end": 23,
            "body": [
                "import org.apache.commons.csv.CSVRecord;\n"
            ]
        },
        "19-19:import static Assertions.assertEquals": {
            "start": 19,
            "end": 19,
            "body": [
                "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
            ]
        }
    },
    "classes": {
        "JiraCsv253Test": {
            "start": 35,
            "end": 35,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "69-83:testHandleAbsentValues_test3_decomposed": {
                    "start": 69,
                    "end": 83,
                    "body": [
                        "    public void testHandleAbsentValues_test3_decomposed() throws IOException {\n",
                        "        final String source =\n",
                        "                \"\\\"John\\\",,\\\"Doe\\\"\\n\" + \",\\\"AA\\\",123\\n\" + \"\\\"John\\\",90,\\n\" + \"\\\"\\\",,90\";\n",
                        "        CSVFormat.DEFAULT.builder();\n",
                        "        CSVFormat.DEFAULT.builder().setQuoteMode(QuoteMode.NON_NUMERIC);\n",
                        "        final CSVFormat csvFormat =\n",
                        "                CSVFormat.DEFAULT.builder().setQuoteMode(QuoteMode.NON_NUMERIC).build();\n",
                        "        try (final CSVParser parser = csvFormat.parse(new StringReader(source))) {\n",
                        "            final Iterator<CSVRecord> csvRecords = parser.iterator();\n",
                        "            assertArrayEqual(new String[] {\"John\", null, \"Doe\"}, csvRecords.next());\n",
                        "            assertArrayEqual(new String[] {null, \"AA\", \"123\"}, csvRecords.next());\n",
                        "            assertArrayEqual(new String[] {\"John\", \"90\", null}, csvRecords.next());\n",
                        "            assertArrayEqual(new String[] {\"\", null, \"90\"}, csvRecords.next());\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHandleAbsentValues_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "611-614:setQuoteMode"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1798-1800:parse"
                        ],
                        [
                            "library",
                            "java.base/java/io/StringReader",
                            "StringReader(java.lang.String)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "689-691:iterator"
                        ],
                        [
                            "commons-csv.src.test.org.apache.commons.csv.issues.JiraCsv253Test",
                            "JiraCsv253Test",
                            "37-41:assertArrayEqual"
                        ],
                        [
                            "library",
                            "java.base/java/util/Iterator",
                            "next()"
                        ]
                    ]
                },
                "59-66:testHandleAbsentValues_test2_decomposed": {
                    "start": 59,
                    "end": 66,
                    "body": [
                        "    public void testHandleAbsentValues_test2_decomposed() throws IOException {\n",
                        "        final String source =\n",
                        "                \"\\\"John\\\",,\\\"Doe\\\"\\n\" + \",\\\"AA\\\",123\\n\" + \"\\\"John\\\",90,\\n\" + \"\\\"\\\",,90\";\n",
                        "        CSVFormat.DEFAULT.builder();\n",
                        "        CSVFormat.DEFAULT.builder().setQuoteMode(QuoteMode.NON_NUMERIC);\n",
                        "        final CSVFormat csvFormat =\n",
                        "                CSVFormat.DEFAULT.builder().setQuoteMode(QuoteMode.NON_NUMERIC).build();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHandleAbsentValues_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "250-254:build"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "611-614:setQuoteMode"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "51-56:testHandleAbsentValues_test1_decomposed": {
                    "start": 51,
                    "end": 56,
                    "body": [
                        "    public void testHandleAbsentValues_test1_decomposed() throws IOException {\n",
                        "        final String source =\n",
                        "                \"\\\"John\\\",,\\\"Doe\\\"\\n\" + \",\\\"AA\\\",123\\n\" + \"\\\"John\\\",90,\\n\" + \"\\\"\\\",,90\";\n",
                        "        CSVFormat.DEFAULT.builder();\n",
                        "        CSVFormat.DEFAULT.builder().setQuoteMode(QuoteMode.NON_NUMERIC);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHandleAbsentValues_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "Builder",
                            "611-614:setQuoteMode"
                        ]
                    ]
                },
                "44-48:testHandleAbsentValues_test0_decomposed": {
                    "start": 44,
                    "end": 48,
                    "body": [
                        "    public void testHandleAbsentValues_test0_decomposed() throws IOException {\n",
                        "        final String source =\n",
                        "                \"\\\"John\\\",,\\\"Doe\\\"\\n\" + \",\\\"AA\\\",123\\n\" + \"\\\"John\\\",90,\\n\" + \"\\\"\\\",,90\";\n",
                        "        CSVFormat.DEFAULT.builder();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHandleAbsentValues_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "1425-1427:builder"
                        ]
                    ]
                },
                "37-41:assertArrayEqual": {
                    "start": 37,
                    "end": 41,
                    "body": [
                        "    private void assertArrayEqual(final String[] expected, final CSVRecord actual) {\n",
                        "        for (int i = 0; i < expected.length; i++) {\n",
                        "            assertEquals(expected[i], actual.get1(i));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "assertArrayEqual(String[], CSVRecord)",
                    "parameters": [
                        "expected",
                        "actual"
                    ],
                    "calls": [
                        [
                            "library",
                            "Assertions",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVRecord",
                            "CSVRecord",
                            "86-88:get1"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}