{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/benchmarktools/BenchmarkOffsettedSeries.java",
    "imports": {
        "8-8:import PrintWriter": {
            "start": 8,
            "end": 8,
            "body": [
                "import java.io.PrintWriter;\n"
            ]
        },
        "7-7:import File": {
            "start": 7,
            "end": 7,
            "body": [
                "import java.io.File;\n"
            ]
        },
        "10-10:import Random": {
            "start": 10,
            "end": 10,
            "body": [
                "import java.util.Random;\n"
            ]
        },
        "9-9:import Arrays": {
            "start": 9,
            "end": 9,
            "body": [
                "import java.util.Arrays;\n"
            ]
        },
        "18-18:import IntegerCODEC": {
            "start": 18,
            "end": 18,
            "body": [
                "import me.lemire.integercompression.IntegerCODEC;\n"
            ]
        },
        "12-12:import BinaryPacking": {
            "start": 12,
            "end": 12,
            "body": [
                "import me.lemire.integercompression.BinaryPacking;\n"
            ]
        },
        "17-17:import IntWrapper": {
            "start": 17,
            "end": 17,
            "body": [
                "import me.lemire.integercompression.IntWrapper;\n"
            ]
        },
        "13-13:import DeltaZigzagBinaryPacking": {
            "start": 13,
            "end": 13,
            "body": [
                "import me.lemire.integercompression.DeltaZigzagBinaryPacking;\n"
            ]
        },
        "14-14:import DeltaZigzagVariableByte": {
            "start": 14,
            "end": 14,
            "body": [
                "import me.lemire.integercompression.DeltaZigzagVariableByte;\n"
            ]
        },
        "15-15:import FastPFOR": {
            "start": 15,
            "end": 15,
            "body": [
                "import me.lemire.integercompression.FastPFOR;\n"
            ]
        },
        "16-16:import FastPFOR128": {
            "start": 16,
            "end": 16,
            "body": [
                "import me.lemire.integercompression.FastPFOR128;\n"
            ]
        },
        "19-19:import JustCopy": {
            "start": 19,
            "end": 19,
            "body": [
                "import me.lemire.integercompression.JustCopy;\n"
            ]
        },
        "20-20:import IntegratedBinaryPacking": {
            "start": 20,
            "end": 20,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedBinaryPacking;\n"
            ]
        },
        "21-21:import XorBinaryPacking": {
            "start": 21,
            "end": 21,
            "body": [
                "import me.lemire.integercompression.differential.XorBinaryPacking;\n"
            ]
        }
    },
    "classes": {
        "BenchmarkOffsettedSeries": {
            "start": 27,
            "end": 27,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "272-294:main": {
                    "start": 272,
                    "end": 294,
                    "body": [
                        "        public static void main(final String[] args) throws Exception {\n",
                        "                File csvFile = new File(\n",
                        "                        String.format(\n",
                        "                                \"benchmark-offsetted-%1$tY%1$tm%1$tdT%1$tH%1$tM%1$tS.csv\",\n",
                        "                                System.currentTimeMillis()));\n",
                        "                PrintWriter writer = null;\n",
                        "                try {\n",
                        "                        writer = new PrintWriter(csvFile);\n",
                        "                        System.out\n",
                        "                                .println(\"# Results will be written into a CSV file: \"\n",
                        "                                        + csvFile.getName());\n",
                        "                        System.out.println();\n",
                        "                        BenchmarkOffsettedSeries.run(writer, 8 * 1024, 1280);\n",
                        "                        System.out.println();\n",
                        "                        System.out\n",
                        "                                .println(\"# Results were written into a CSV file: \"\n",
                        "                                        + csvFile.getName());\n",
                        "                } finally {\n",
                        "                        if (writer != null) {\n",
                        "                                writer.close();\n",
                        "                        }\n",
                        "                }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "main(String[])",
                    "parameters": [
                        "args"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/File",
                            "File(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "currentTimeMillis()"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "PrintWriter(java.io.File)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "getName()"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println()"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                            "BenchmarkOffsettedSeries",
                            "44-85:run"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "close()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def main(args: typing.List[typing.List[str]]) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "44-85:run": {
                    "start": 44,
                    "end": 85,
                    "body": [
                        "        public static void run(final PrintWriter csvWriter, final int count, final int length) {\n",
                        "                IntegerCODEC[] codecs = { new JustCopy(), new BinaryPacking(),\n",
                        "                        new DeltaZigzagBinaryPacking(),\n",
                        "                        new DeltaZigzagVariableByte(),\n",
                        "                        new IntegratedBinaryPacking(), new XorBinaryPacking(),\n",
                        "                        FastPFOR128.FastPFOR1281(), FastPFOR.FastPFOR1()};\n",
                        "\n",
                        "                csvWriter\n",
                        "                        .format(\"\\\"Dataset\\\",\\\"CODEC\\\",\\\"Bits per int\\\",\"\n",
                        "                                + \"\\\"Compress speed (MiS)\\\",\\\"Decompress speed (MiS)\\\"\\n\");\n",
                        "\n",
                        "                benchmark0(csvWriter, codecs, count, length, DEFAULT_MEAN,\n",
                        "                        DEFAULT_RANGE);\n",
                        "                benchmark0(csvWriter, codecs, count, length, DEFAULT_MEAN >> 5,\n",
                        "                        DEFAULT_RANGE);\n",
                        "\n",
                        "                IntegerCODEC[] codecs2 = { new JustCopy(), new BinaryPacking(),\n",
                        "                        new DeltaZigzagBinaryPacking(),\n",
                        "                        new DeltaZigzagVariableByte(),\n",
                        "                        new IntegratedBinaryPacking(), new XorBinaryPacking(),\n",
                        "                        FastPFOR128.FastPFOR1281(),FastPFOR.FastPFOR1(), };\n",
                        "\n",
                        "                int freq = length / 4;\n",
                        "                benchmarkSine(csvWriter, codecs2, count, length,\n",
                        "                        DEFAULT_MEAN >> 0, DEFAULT_RANGE >> 0, freq);\n",
                        "                benchmarkSine(csvWriter, codecs2, count, length,\n",
                        "                        DEFAULT_MEAN >> 5, DEFAULT_RANGE >> 0, freq);\n",
                        "                benchmarkSine(csvWriter, codecs2, count, length,\n",
                        "                        DEFAULT_MEAN >> 10, DEFAULT_RANGE >> 0, freq);\n",
                        "                benchmarkSine(csvWriter, codecs2, count, length,\n",
                        "                        DEFAULT_MEAN >> 0, DEFAULT_RANGE >> 2, freq);\n",
                        "                benchmarkSine(csvWriter, codecs2, count, length,\n",
                        "                        DEFAULT_MEAN >> 5, DEFAULT_RANGE >> 2, freq);\n",
                        "                benchmarkSine(csvWriter, codecs2, count, length,\n",
                        "                        DEFAULT_MEAN >> 10, DEFAULT_RANGE >> 2, freq);\n",
                        "                benchmarkSine(csvWriter, codecs2, count, length,\n",
                        "                        DEFAULT_MEAN >> 0, DEFAULT_RANGE >> 4, freq);\n",
                        "                benchmarkSine(csvWriter, codecs2, count, length,\n",
                        "                        DEFAULT_MEAN >> 5, DEFAULT_RANGE >> 4, freq);\n",
                        "                benchmarkSine(csvWriter, codecs2, count, length,\n",
                        "                        DEFAULT_MEAN >> 10, DEFAULT_RANGE >> 4, freq);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "run(PrintWriter, int, int)",
                    "parameters": [
                        "csvWriter",
                        "count",
                        "length"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.JustCopy",
                            "JustCopy",
                            "JustCopy"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                            "BinaryPacking",
                            "BinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagVariableByte",
                            "DeltaZigzagVariableByte",
                            "DeltaZigzagVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "XorBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "71-73:FastPFOR1281"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                            "FastPFOR",
                            "90-92:FastPFOR1"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                            "BenchmarkOffsettedSeries",
                            "100-119:benchmark0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                            "BenchmarkOffsettedSeries",
                            "87-98:benchmarkSine"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def run(csvWriter: typing.Union[io.TextIOWrapper, io.StringIO], count: int, length: int) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "259-266:sortDataChunks": {
                    "start": 259,
                    "end": 266,
                    "body": [
                        "        private static int[][] sortDataChunks(int[][] src) {\n",
                        "                int[][] dst = new int[src.length][];\n",
                        "                for (int i = 0; i < src.length; ++i) {\n",
                        "                        dst[i] = Arrays.copyOf(src[i], src[i].length);\n",
                        "                        Arrays.sort(dst[i]);\n",
                        "                }\n",
                        "                return dst;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "int[][]",
                            "int[][]"
                        ]
                    ],
                    "signature": "sortDataChunks(int[][])",
                    "parameters": [
                        "src"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "sort(int[])"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __sortDataChunks(src: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "245-257:deltaDataChunks": {
                    "start": 245,
                    "end": 257,
                    "body": [
                        "        private static int[][] deltaDataChunks(int[][] src) {\n",
                        "                int[][] dst = new int[src.length][];\n",
                        "                for (int i = 0; i < src.length; ++i) {\n",
                        "                        int[] s = src[i];\n",
                        "                        int[] d = dst[i] = new int[s.length];\n",
                        "                        int prev = 0;\n",
                        "                        for (int j = 0; j < s.length; ++j) {\n",
                        "                                d[j] = s[j] - prev;\n",
                        "                                prev = s[j];\n",
                        "                        }\n",
                        "                }\n",
                        "                return dst;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "int[][]",
                            "int[][]"
                        ]
                    ],
                    "signature": "deltaDataChunks(int[][])",
                    "parameters": [
                        "src"
                    ],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __deltaDataChunks(src: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "231-243:generateDataChunks": {
                    "start": 231,
                    "end": 243,
                    "body": [
                        "        private static int[][] generateDataChunks(long seed, int count,\n",
                        "                int length, int mean, int range) {\n",
                        "                int offset = mean - range / 2;\n",
                        "                int[][] chunks = new int[count][];\n",
                        "                Random r = new Random(seed);\n",
                        "                for (int i = 0; i < count; ++i) {\n",
                        "                        int[] chunk = chunks[i] = new int[length];\n",
                        "                        for (int j = 0; j < length; ++j) {\n",
                        "                                chunk[j] = r.nextInt(range) + offset;\n",
                        "                        }\n",
                        "                }\n",
                        "                return chunks;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "int[][]",
                            "int[][]"
                        ]
                    ],
                    "signature": "generateDataChunks(long, int, int, int, int)",
                    "parameters": [
                        "seed",
                        "count",
                        "length",
                        "mean",
                        "range"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Random",
                            "Random(long)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Random",
                            "nextInt(int)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __generateDataChunks(seed: int, count: int, length: int, mean: int, range_: int) -> typing.List[typing.List[int]]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "214-229:generateSineDataChunks": {
                    "start": 214,
                    "end": 229,
                    "body": [
                        "        private static int[][] generateSineDataChunks(long seed, int count,\n",
                        "                int length, int mean, int range, int freq) {\n",
                        "                int[][] chunks = new int[count][];\n",
                        "                Random r = new Random(seed);\n",
                        "                for (int i = 0; i < count; ++i) {\n",
                        "                        int[] chunk = chunks[i] = new int[length];\n",
                        "                        int phase = r.nextInt(2 * freq);\n",
                        "                        for (int j = 0; j < length; ++j) {\n",
                        "                                double angle = 2.0 * Math.PI * (j + phase)\n",
                        "                                        / freq;\n",
                        "                                chunk[j] = (int) (mean + Math.sin(angle)\n",
                        "                                        * range);\n",
                        "                        }\n",
                        "                }\n",
                        "                return chunks;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "int[][]",
                            "int[][]"
                        ]
                    ],
                    "signature": "generateSineDataChunks(long, int, int, int, int, int)",
                    "parameters": [
                        "seed",
                        "count",
                        "length",
                        "mean",
                        "range",
                        "freq"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Random",
                            "Random(long)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Random",
                            "nextInt(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Math",
                            "sin(double)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __generateSineDataChunks(seed: int, count: int, length: int, mean: int, range_: int, freq: int) -> typing.List[typing.List[int]]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "204-212:getMaxLen": {
                    "start": 204,
                    "end": 212,
                    "body": [
                        "        private static int getMaxLen(int[][] data) {\n",
                        "                int maxLen = 0;\n",
                        "                for (int[] array : data) {\n",
                        "                        if (array.length > maxLen) {\n",
                        "                                maxLen = array.length;\n",
                        "                        }\n",
                        "                }\n",
                        "                return maxLen;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "getMaxLen(int[][])",
                    "parameters": [
                        "data"
                    ],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __getMaxLen(data: typing.List[typing.List[int]]) -> int:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "194-202:decompress": {
                    "start": 194,
                    "end": 202,
                    "body": [
                        "        private static int decompress(PerformanceLogger logger, IntegerCODEC codec,\n",
                        "                int[] src, int srcLen, int[] dst) {\n",
                        "                IntWrapper inpos = IntWrapper.IntWrapper1();\n",
                        "                IntWrapper outpos = IntWrapper.IntWrapper1();\n",
                        "                logger.decompressionTimer.start();\n",
                        "                codec.uncompress0(src, inpos, srcLen, dst, outpos);\n",
                        "                logger.decompressionTimer.end();\n",
                        "                return outpos.get();\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "decompress(PerformanceLogger, IntegerCODEC, int[], int, int[])",
                    "parameters": [
                        "logger",
                        "codec",
                        "src",
                        "srcLen",
                        "dst"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                            "Timer",
                            "20-22:start"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "57-59:uncompress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                            "Timer",
                            "24-27:end"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __decompress(logger: PerformanceLogger, codec: IntegerCODEC, src: typing.List[int], srcLen: int, dst: typing.List[int]) -> int:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "181-192:compress": {
                    "start": 181,
                    "end": 192,
                    "body": [
                        "        private static int compress(PerformanceLogger logger, IntegerCODEC codec,\n",
                        "                int[] src, int[] dst) {\n",
                        "                IntWrapper inpos = IntWrapper.IntWrapper1();\n",
                        "                IntWrapper outpos = IntWrapper.IntWrapper1();\n",
                        "                logger.compressionTimer.start();\n",
                        "                codec.compress0(src, inpos, src.length, dst, outpos);\n",
                        "                logger.compressionTimer.end();\n",
                        "                int outSize = outpos.get();\n",
                        "                logger.addOriginalSize(src.length);\n",
                        "                logger.addCompressedSize(outSize);\n",
                        "                return outSize;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "compress(PerformanceLogger, IntegerCODEC, int[], int[])",
                    "parameters": [
                        "logger",
                        "codec",
                        "src",
                        "dst"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                            "Timer",
                            "20-22:start"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                            "Timer",
                            "24-27:end"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                            "PerformanceLogger",
                            "42-44:addOriginalSize"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                            "PerformanceLogger",
                            "46-48:addCompressedSize"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __compress(logger: PerformanceLogger, codec: IntegerCODEC, src: typing.List[int], dst: typing.List[int]) -> int:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "163-179:checkArray": {
                    "start": 163,
                    "end": 179,
                    "body": [
                        "        private static void checkArray(int[] expected, int[] actualArray,\n",
                        "                int actualLen, IntegerCODEC codec) {\n",
                        "                if (actualLen != expected.length) {\n",
                        "                        throw new RuntimeException(\"Length mismatch:\"\n",
                        "                                + \" expected=\" + expected.length + \" actual=\"\n",
                        "                                + actualLen + \" codec=\" + codec.toString());\n",
                        "                }\n",
                        "                for (int i = 0; i < expected.length; ++i) {\n",
                        "                        if (actualArray[i] != expected[i]) {\n",
                        "                                throw new RuntimeException(\"Value mismatch: \"\n",
                        "                                        + \" where=\" + i + \" expected=\"\n",
                        "                                        + expected[i] + \" actual=\"\n",
                        "                                        + actualArray[i] + \" codec=\"\n",
                        "                                        + codec.toString());\n",
                        "                        }\n",
                        "                }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "checkArray(int[], int[], int, IntegerCODEC)",
                    "parameters": [
                        "expected",
                        "actualArray",
                        "actualLen",
                        "codec"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "toString()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __checkArray(expected: typing.List[int], actualArray: typing.List[int], actualLen: int, codec: IntegerCODEC) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "134-161:benchmark2": {
                    "start": 134,
                    "end": 161,
                    "body": [
                        "        private static void benchmark2(PrintWriter csvWriter, String dataName,\n",
                        "                                       String codecName, IntegerCODEC codec, int[][] data, int repeat) {\n",
                        "                PerformanceLogger logger = new PerformanceLogger();\n",
                        "\n",
                        "                int maxLen = getMaxLen(data);\n",
                        "                int[] compressBuffer = new int[4 * maxLen + 1024];\n",
                        "                int[] decompressBuffer = new int[maxLen];\n",
                        "\n",
                        "                for (int i = 0; i < repeat; ++i) {\n",
                        "                        for (int[] array : data) {\n",
                        "                                int compSize = compress(logger, codec, array,\n",
                        "                                        compressBuffer);\n",
                        "                                int decompSize = decompress(logger, codec,\n",
                        "                                        compressBuffer, compSize,\n",
                        "                                        decompressBuffer);\n",
                        "                                checkArray(array, decompressBuffer, decompSize,\n",
                        "                                        codec);\n",
                        "                        }\n",
                        "                }\n",
                        "\n",
                        "                if (csvWriter != null) {\n",
                        "                        csvWriter.format(\n",
                        "                                \"\\\"%1$s\\\",\\\"%2$s\\\",%3$.2f,%4$.0f,%5$.0f\\n\",\n",
                        "                                dataName, codecName, logger.getBitPerInt(),\n",
                        "                                logger.getCompressSpeed(),\n",
                        "                                logger.getDecompressSpeed());\n",
                        "                }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "benchmark2(PrintWriter, String, String, IntegerCODEC, int[][], int)",
                    "parameters": [
                        "csvWriter",
                        "dataName",
                        "codecName",
                        "codec",
                        "data",
                        "repeat"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                            "PerformanceLogger",
                            "PerformanceLogger"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                            "BenchmarkOffsettedSeries",
                            "204-212:getMaxLen"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                            "BenchmarkOffsettedSeries",
                            "181-192:compress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                            "BenchmarkOffsettedSeries",
                            "194-202:decompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                            "BenchmarkOffsettedSeries",
                            "163-179:checkArray"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                            "PerformanceLogger",
                            "58-60:getBitPerInt"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                            "PerformanceLogger",
                            "66-69:getCompressSpeed"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                            "PerformanceLogger",
                            "71-74:getDecompressSpeed"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __benchmark2(csvWriter: typing.Union[io.TextIOWrapper, io.StringIO], dataName: str, codecName: str, codec: IntegerCODEC, data: typing.List[typing.List[int]], repeat: int) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "121-132:benchmark1": {
                    "start": 121,
                    "end": 132,
                    "body": [
                        "        private static void benchmark1(final PrintWriter csvWriter, final String dataName,\n",
                        "                                       final IntegerCODEC[] codecs, final int[][] data, final int repeat, final int warmup) {\n",
                        "                System.out.println(\"Processing: \" + dataName);\n",
                        "                for (IntegerCODEC codec : codecs) {\n",
                        "                        String codecName = codec.toString();\n",
                        "                        for (int i = 0; i < warmup; ++i) {\n",
                        "                                benchmark2(null, null, null, codec, data, repeat);\n",
                        "                        }\n",
                        "                        benchmark2(csvWriter, dataName, codecName, codec, data,\n",
                        "                                repeat);\n",
                        "                }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "benchmark1(PrintWriter, String, IntegerCODEC[], int[][], int, int)",
                    "parameters": [
                        "csvWriter",
                        "dataName",
                        "codecs",
                        "data",
                        "repeat",
                        "warmup"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "toString()"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                            "BenchmarkOffsettedSeries",
                            "134-161:benchmark2"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __benchmark1(csvWriter: typing.Union[io.TextIOWrapper, io.StringIO], dataName: str, codecs: typing.List[IntegerCODEC], data: typing.List[typing.List[int]], repeat: int, warmup: int) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "100-119:benchmark0": {
                    "start": 100,
                    "end": 119,
                    "body": [
                        "        private static void benchmark0(final PrintWriter csvWriter, final IntegerCODEC[] codecs,\n",
                        "                                       final int count, final int length, final int mean, final int range) {\n",
                        "                String dataProp = String.format(\"(mean=%1$d range=%2$d)\", mean,\n",
                        "                        range);\n",
                        "\n",
                        "                int[][] randData = generateDataChunks(0, count, length, mean,\n",
                        "                        range);\n",
                        "                int[][] deltaData = deltaDataChunks(randData);\n",
                        "                int[][] sortedData = sortDataChunks(randData);\n",
                        "                int[][] sortedDeltaData = deltaDataChunks(sortedData);\n",
                        "\n",
                        "                benchmark1(csvWriter, \"Random \" + dataProp, codecs, randData,\n",
                        "                        DEFAULT_REPEAT, DEFAULT_WARMUP);\n",
                        "                benchmark1(csvWriter, \"Random+delta \" + dataProp, codecs,\n",
                        "                        deltaData, DEFAULT_REPEAT, DEFAULT_WARMUP);\n",
                        "                benchmark1(csvWriter, \"Sorted \" + dataProp, codecs, sortedData,\n",
                        "                        DEFAULT_REPEAT, DEFAULT_WARMUP);\n",
                        "                benchmark1(csvWriter, \"Sorted+delta \" + dataProp, codecs,\n",
                        "                        sortedDeltaData, DEFAULT_REPEAT, DEFAULT_WARMUP);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "benchmark0(PrintWriter, IntegerCODEC[], int, int, int, int)",
                    "parameters": [
                        "csvWriter",
                        "codecs",
                        "count",
                        "length",
                        "mean",
                        "range"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                            "BenchmarkOffsettedSeries",
                            "231-243:generateDataChunks"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                            "BenchmarkOffsettedSeries",
                            "245-257:deltaDataChunks"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                            "BenchmarkOffsettedSeries",
                            "259-266:sortDataChunks"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                            "BenchmarkOffsettedSeries",
                            "121-132:benchmark1"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __benchmark0(csvWriter: typing.Union[io.TextIOWrapper, io.StringIO], codecs: typing.List[IntegerCODEC], count: int, length: int, mean: int, range_: int) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "87-98:benchmarkSine": {
                    "start": 87,
                    "end": 98,
                    "body": [
                        "        private static void benchmarkSine(final PrintWriter csvWriter,\n",
                        "                final IntegerCODEC[] codecs, final int count, final int length, final int mean,\n",
                        "                final int range, final int freq) {\n",
                        "                String dataProp = String.format(\n",
                        "                        \"(mean=%1$d range=%2$d freq=%3$d)\", mean, range, freq);\n",
                        "                int[][] data = generateSineDataChunks(0, count, length, mean,\n",
                        "                        range, freq);\n",
                        "                benchmark1(csvWriter, \"Sine \" + dataProp, codecs, data,\n",
                        "                        DEFAULT_REPEAT, DEFAULT_WARMUP);\n",
                        "                benchmark1(csvWriter, \"Sine+delta \" + dataProp, codecs, data,\n",
                        "                        DEFAULT_REPEAT, DEFAULT_WARMUP);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "benchmarkSine(PrintWriter, IntegerCODEC[], int, int, int, int, int)",
                    "parameters": [
                        "csvWriter",
                        "codecs",
                        "count",
                        "length",
                        "mean",
                        "range",
                        "freq"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                            "BenchmarkOffsettedSeries",
                            "214-229:generateSineDataChunks"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                            "BenchmarkOffsettedSeries",
                            "121-132:benchmark1"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __benchmarkSine(csvWriter: typing.Union[io.TextIOWrapper, io.StringIO], codecs: typing.List[IntegerCODEC], count: int, length: int, mean: int, range_: int, freq: int) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {
                "31-31:DEFAULT_WARMUP": {
                    "start": 31,
                    "end": 31,
                    "body": [
                        "        private static final int DEFAULT_WARMUP = 2;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "partial_translation": [
                        "    __DEFAULT_WARMUP: int = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "30-30:DEFAULT_REPEAT": {
                    "start": 30,
                    "end": 30,
                    "body": [
                        "        private static final int DEFAULT_REPEAT = 5;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "partial_translation": [
                        "    __DEFAULT_REPEAT: int = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "29-29:DEFAULT_RANGE": {
                    "start": 29,
                    "end": 29,
                    "body": [
                        "        private static final int DEFAULT_RANGE = 1 << 10;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "partial_translation": [
                        "    __DEFAULT_RANGE: int = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "28-28:DEFAULT_MEAN": {
                    "start": 28,
                    "end": 28,
                    "body": [
                        "        private static final int DEFAULT_MEAN = 1 << 20;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "partial_translation": [
                        "    __DEFAULT_MEAN: int = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class BenchmarkOffsettedSeries:\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "from io import StringIO",
        "import io",
        "import typing\nfrom typing import *",
        "from src.main.me.lemire.integercompression.BinaryPacking import *",
        "from src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking import *",
        "from src.main.me.lemire.integercompression.DeltaZigzagVariableByte import *",
        "from src.main.me.lemire.integercompression.FastPFOR import *",
        "from src.main.me.lemire.integercompression.FastPFOR128 import *",
        "from src.main.me.lemire.integercompression.IntWrapper import *",
        "from src.main.me.lemire.integercompression.IntegerCODEC import *",
        "from src.main.me.lemire.integercompression.JustCopy import *",
        "from src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger import *",
        "from src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking import *",
        "from src.main.me.lemire.integercompression.differential.XorBinaryPacking import *"
    ]
}