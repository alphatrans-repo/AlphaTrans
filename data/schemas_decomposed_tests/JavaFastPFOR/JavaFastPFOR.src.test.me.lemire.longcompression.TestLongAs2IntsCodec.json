{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/longcompression/TestLongAs2IntsCodec.java",
    "imports": {
        "10-10:import LongStream": {
            "start": 10,
            "end": 10,
            "body": [
                "import java.util.stream.LongStream;\n"
            ]
        },
        "13-13:import Test": {
            "start": 13,
            "end": 13,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "12-12:import Assert": {
            "start": 12,
            "end": 12,
            "body": [
                "import org.junit.Assert;\n"
            ]
        }
    },
    "classes": {
        "TestLongAs2IntsCodec": {
            "start": 20,
            "end": 20,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "new LongUnaryOperator(...) { ... }",
                "new LongUnaryOperator(...) { ... }"
            ],
            "implements": [],
            "extends": [],
            "methods": {
                "100-102:testCodec_intermediateHighPowerOfTwo_test0_decomposed": {
                    "start": 100,
                    "end": 102,
                    "body": [
                        "    public void testCodec_intermediateHighPowerOfTwo_test0_decomposed()  {\n",
                        "        Assert.assertEquals(3, LongTestUtils.compress1((LongCODEC) codec, new long[] { 1L << 42 }).length);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testCodec_intermediateHighPowerOfTwo_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                            "LongTestUtils",
                            "79-85:compress1"
                        ]
                    ]
                },
                "93-97:testCodec_ZeroThenAllPowerOfTwo_test0_decomposed": {
                    "start": 93,
                    "end": 97,
                    "body": [
                        "    public void testCodec_ZeroThenAllPowerOfTwo_test0_decomposed()  {\n",
                        "        for (int i = 0; i < 64; i++) {\n",
                        "\t\t\tcheckConsistency(codec, new long[] { 0, 1L << i });\n",
                        "\t\t}\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testCodec_ZeroThenAllPowerOfTwo_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongAs2IntsCodec",
                            "TestLongAs2IntsCodec",
                            "23-45:checkConsistency"
                        ]
                    ]
                },
                "85-90:testCodec_allPowerOfTwo_test0_decomposed": {
                    "start": 85,
                    "end": 90,
                    "body": [
                        "    public void testCodec_allPowerOfTwo_test0_decomposed()  {\n",
                        "        checkConsistency(codec, new long[] { 1L << 42 });\n",
                        "        for (int i = 0; i < 64; i++) {\n",
                        "\t\t\tcheckConsistency(codec, new long[] { 1L << i });\n",
                        "\t\t}\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testCodec_allPowerOfTwo_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongAs2IntsCodec",
                            "TestLongAs2IntsCodec",
                            "23-45:checkConsistency"
                        ]
                    ]
                },
                "80-82:testCodec_ZeroMinValue_test0_decomposed": {
                    "start": 80,
                    "end": 82,
                    "body": [
                        "    public void testCodec_ZeroMinValue_test0_decomposed()  {\n",
                        "        checkConsistency(codec, new long[] { 0, Long.MIN_VALUE });\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testCodec_ZeroMinValue_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongAs2IntsCodec",
                            "TestLongAs2IntsCodec",
                            "23-45:checkConsistency"
                        ]
                    ]
                },
                "75-77:testCodec_MinValue_test0_decomposed": {
                    "start": 75,
                    "end": 77,
                    "body": [
                        "    public void testCodec_MinValue_test0_decomposed()  {\n",
                        "        checkConsistency(codec, new long[] { Long.MIN_VALUE });\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testCodec_MinValue_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongAs2IntsCodec",
                            "TestLongAs2IntsCodec",
                            "23-45:checkConsistency"
                        ]
                    ]
                },
                "69-72:testCodec_ZeroTimes128Minus1_test0_decomposed": {
                    "start": 69,
                    "end": 72,
                    "body": [
                        "    public void testCodec_ZeroTimes128Minus1_test0_decomposed()  {\n",
                        "        long[] array = LongStream.concat(LongStream.range(0, 128).map(l -> 0), LongStream.of(-1)).toArray();\n",
                        "        checkConsistency(codec, array);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testCodec_ZeroTimes128Minus1_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/stream/LongStream",
                            "toArray()"
                        ],
                        [
                            "library",
                            "java.base/java/util/stream/LongStream",
                            "concat(java.util.stream.LongStream,java.util.stream.LongStream)"
                        ],
                        [
                            "library",
                            "java.base/java/util/stream/LongStream",
                            "map(java.util.function.LongUnaryOperator)"
                        ],
                        [
                            "library",
                            "java.base/java/util/stream/LongStream",
                            "of(long)"
                        ],
                        [
                            "library",
                            "java.base/java/util/stream/LongStream",
                            "range(long,long)"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongAs2IntsCodec",
                            "TestLongAs2IntsCodec",
                            "23-45:checkConsistency"
                        ]
                    ]
                },
                "63-66:testCodec_ZeroTimes127Minus1_test0_decomposed": {
                    "start": 63,
                    "end": 66,
                    "body": [
                        "    public void testCodec_ZeroTimes127Minus1_test0_decomposed()  {\n",
                        "        long[] array = LongStream.concat(LongStream.range(0, 127).map(l -> 0), LongStream.of(-1)).toArray();\n",
                        "        checkConsistency(codec, array);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testCodec_ZeroTimes127Minus1_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/stream/LongStream",
                            "toArray()"
                        ],
                        [
                            "library",
                            "java.base/java/util/stream/LongStream",
                            "concat(java.util.stream.LongStream,java.util.stream.LongStream)"
                        ],
                        [
                            "library",
                            "java.base/java/util/stream/LongStream",
                            "map(java.util.function.LongUnaryOperator)"
                        ],
                        [
                            "library",
                            "java.base/java/util/stream/LongStream",
                            "of(long)"
                        ],
                        [
                            "library",
                            "java.base/java/util/stream/LongStream",
                            "range(long,long)"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongAs2IntsCodec",
                            "TestLongAs2IntsCodec",
                            "23-45:checkConsistency"
                        ]
                    ]
                },
                "58-60:testCodec_ZeroTimes8Minus1_test0_decomposed": {
                    "start": 58,
                    "end": 60,
                    "body": [
                        "    public void testCodec_ZeroTimes8Minus1_test0_decomposed()  {\n",
                        "        checkConsistency(codec, new long[] { 0, 0, 0, 0, 0, 0, 0, 0, -1 });\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testCodec_ZeroTimes8Minus1_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongAs2IntsCodec",
                            "TestLongAs2IntsCodec",
                            "23-45:checkConsistency"
                        ]
                    ]
                },
                "53-55:testCodec_Minus1_test0_decomposed": {
                    "start": 53,
                    "end": 55,
                    "body": [
                        "    public void testCodec_Minus1_test0_decomposed()  {\n",
                        "        checkConsistency(codec, new long[] { -1 });\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testCodec_Minus1_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongAs2IntsCodec",
                            "TestLongAs2IntsCodec",
                            "23-45:checkConsistency"
                        ]
                    ]
                },
                "48-50:testCodec_Zero_test0_decomposed": {
                    "start": 48,
                    "end": 50,
                    "body": [
                        "    public void testCodec_Zero_test0_decomposed()  {\n",
                        "        checkConsistency(codec, new long[] { 0 });\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testCodec_Zero_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongAs2IntsCodec",
                            "TestLongAs2IntsCodec",
                            "23-45:checkConsistency"
                        ]
                    ]
                },
                "23-45:checkConsistency": {
                    "start": 23,
                    "end": 45,
                    "body": [
                        "\tprivate void checkConsistency(LongCODEC codec, long[] array) {\n",
                        "\t\t{\n",
                        "\t\t\tlong[] compressed = LongTestUtils.compress1(codec, array);\n",
                        "\t\t\tlong[] uncompressed = LongTestUtils.uncompress0(codec, compressed, array.length);\n",
                        "\n",
                        "\t\t\tAssert.assertArrayEquals(array, uncompressed);\n",
                        "\t\t}\n",
                        "\n",
                        "\t\tif (codec instanceof ByteLongCODEC) {\n",
                        "\t\t\tbyte[] compressed = LongTestUtils.compress0((ByteLongCODEC) codec, array);\n",
                        "\t\t\tlong[] uncompressed = LongTestUtils.uncompress1((ByteLongCODEC) codec, compressed, array.length);\n",
                        "\n",
                        "\t\t\tAssert.assertArrayEquals(array, uncompressed);\n",
                        "\t\t}\n",
                        "\n",
                        "\t\tif (codec instanceof SkippableLongCODEC) {\n",
                        "\t\t\tlong[] compressed = LongTestUtils.compressHeadless((SkippableLongCODEC) codec, array);\n",
                        "\t\t\tlong[] uncompressed =\n",
                        "\t\t\t\t\tLongTestUtils.uncompressHeadless((SkippableLongCODEC) codec, compressed, array.length);\n",
                        "\n",
                        "\t\t\tAssert.assertArrayEquals(array, uncompressed);\n",
                        "\t\t}\n",
                        "\t}\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "checkConsistency(LongCODEC, long[])",
                    "parameters": [
                        "codec",
                        "array"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                            "LongTestUtils",
                            "79-85:compress1"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                            "LongTestUtils",
                            "87-93:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(long[],long[])"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                            "LongTestUtils",
                            "97-103:compress0"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                            "LongTestUtils",
                            "105-111:uncompress1"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                            "LongTestUtils",
                            "113-119:compressHeadless"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                            "LongTestUtils",
                            "121-128:uncompressHeadless"
                        ]
                    ]
                }
            },
            "fields": {
                "21-21:codec": {
                    "start": 21,
                    "end": 21,
                    "body": [
                        "\tfinal LongAs2IntsCodec codec = LongAs2IntsCodec.LongAs2IntsCodec1();\n"
                    ],
                    "modifiers": [
                        "final"
                    ],
                    "types": [
                        [
                            "LongAs2IntsCodec",
                            "LongAs2IntsCodec"
                        ]
                    ]
                }
            }
        },
        "new LongUnaryOperator(...) { ... }": {
            "start": 64,
            "end": 64,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "TestLongAs2IntsCodec",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "64-64:applyAsLong": {
                    "start": 64,
                    "end": 64,
                    "body": [
                        "        long[] array = LongStream.concat(LongStream.range(0, 127).map(l -> 0), LongStream.of(-1)).toArray();\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "long",
                            "long"
                        ]
                    ],
                    "signature": "applyAsLong(long)",
                    "parameters": [
                        "l"
                    ],
                    "calls": []
                },
                "70-70:applyAsLong": {
                    "start": 70,
                    "end": 70,
                    "body": [
                        "        long[] array = LongStream.concat(LongStream.range(0, 128).map(l -> 0), LongStream.of(-1)).toArray();\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "long",
                            "long"
                        ]
                    ],
                    "signature": "applyAsLong(long)",
                    "parameters": [
                        "l"
                    ],
                    "calls": []
                }
            },
            "fields": {}
        }
    }
}