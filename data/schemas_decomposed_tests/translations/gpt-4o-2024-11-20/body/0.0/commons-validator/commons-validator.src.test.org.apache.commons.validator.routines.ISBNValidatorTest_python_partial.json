{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-validator/src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java",
    "imports": {
        "22-22:import Pattern": {
            "start": 22,
            "end": 22,
            "body": [
                "import java.util.regex.Pattern;\n"
            ]
        },
        "20-20:import TestCase": {
            "start": 20,
            "end": 20,
            "body": [
                "import junit.framework.TestCase;\n"
            ]
        },
        "18-18:import Test": {
            "start": 18,
            "end": 18,
            "body": [
                "import org.junit.Test;\n"
            ]
        }
    },
    "classes": {
        "ISBNValidatorTest": {
            "start": 29,
            "end": 29,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "unittest.TestCase"
            ],
            "methods": {
                "538-565:testConversionErrors_test2_decomposed": {
                    "start": 538,
                    "end": 565,
                    "body": [
                        "    public void testConversionErrors_test2_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        String input = null;\n",
                        "        try {\n",
                        "            input = \"123456789 \";\n",
                        "            validator.convertToISBN13(input);\n",
                        "            fail(\"Expected IllegalArgumentException for '\" + input + \"'\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "        }\n",
                        "        try {\n",
                        "            input = \"12345678901\";\n",
                        "            validator.convertToISBN13(input);\n",
                        "            fail(\"Expected IllegalArgumentException for '\" + input + \"'\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "        }\n",
                        "        try {\n",
                        "            input = \"\";\n",
                        "            validator.convertToISBN13(input);\n",
                        "            fail(\"Expected IllegalArgumentException for '\" + input + \"'\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "        }\n",
                        "        try {\n",
                        "            input = \"X234567890\";\n",
                        "            validator.convertToISBN13(input);\n",
                        "            fail(\"Expected IllegalArgumentException for '\" + input + \"'\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testConversionErrors_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "242-263:convertToISBN13"
                        ],
                        [
                            "library",
                            "TestCase",
                            "fail(java.lang.String)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testConversionErrors_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "526-535:testConversionErrors_test1_decomposed": {
                    "start": 526,
                    "end": 535,
                    "body": [
                        "    public void testConversionErrors_test1_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        String input = null;\n",
                        "        try {\n",
                        "            input = \"123456789 \";\n",
                        "            validator.convertToISBN13(input);\n",
                        "            fail(\"Expected IllegalArgumentException for '\" + input + \"'\");\n",
                        "        } catch (IllegalArgumentException e) {\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testConversionErrors_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "242-263:convertToISBN13"
                        ],
                        [
                            "library",
                            "TestCase",
                            "fail(java.lang.String)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testConversionErrors_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "521-523:testConversionErrors_test0_decomposed": {
                    "start": 521,
                    "end": 523,
                    "body": [
                        "    public void testConversionErrors_test0_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testConversionErrors_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testConversionErrors_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "493-518:testInvalid_test4_decomposed": {
                    "start": 493,
                    "end": 518,
                    "body": [
                        "    public void testInvalid_test4_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        String baseCode = \"193011099\";\n",
                        "        assertFalse(\"ISBN10-0\", validator.isValid(baseCode + \"0\"));\n",
                        "        assertFalse(\"ISBN10-1\", validator.isValid(baseCode + \"1\"));\n",
                        "        assertFalse(\"ISBN10-2\", validator.isValid(baseCode + \"2\"));\n",
                        "        assertFalse(\"ISBN10-3\", validator.isValid(baseCode + \"3\"));\n",
                        "        assertFalse(\"ISBN10-4\", validator.isValid(baseCode + \"4\"));\n",
                        "        assertTrue(\"ISBN10-5\", validator.isValid(baseCode + \"5\"));\n",
                        "        assertFalse(\"ISBN10-6\", validator.isValid(baseCode + \"6\"));\n",
                        "        assertFalse(\"ISBN10-7\", validator.isValid(baseCode + \"7\"));\n",
                        "        assertFalse(\"ISBN10-8\", validator.isValid(baseCode + \"8\"));\n",
                        "        assertFalse(\"ISBN10-9\", validator.isValid(baseCode + \"9\"));\n",
                        "        assertFalse(\"ISBN10-X\", validator.isValid(baseCode + \"X\"));\n",
                        "        baseCode = \"978193011099\";\n",
                        "        assertFalse(\"ISBN13-0\", validator.isValid(baseCode + \"0\"));\n",
                        "        assertTrue(\"ISBN13-1\", validator.isValid(baseCode + \"1\"));\n",
                        "        assertFalse(\"ISBN13-2\", validator.isValid(baseCode + \"2\"));\n",
                        "        assertFalse(\"ISBN13-3\", validator.isValid(baseCode + \"3\"));\n",
                        "        assertFalse(\"ISBN13-4\", validator.isValid(baseCode + \"4\"));\n",
                        "        assertFalse(\"ISBN13-5\", validator.isValid(baseCode + \"5\"));\n",
                        "        assertFalse(\"ISBN13-6\", validator.isValid(baseCode + \"6\"));\n",
                        "        assertFalse(\"ISBN13-7\", validator.isValid(baseCode + \"7\"));\n",
                        "        assertFalse(\"ISBN13-8\", validator.isValid(baseCode + \"8\"));\n",
                        "        assertFalse(\"ISBN13-9\", validator.isValid(baseCode + \"9\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testInvalid_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "160-162:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testInvalid_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "474-490:testInvalid_test3_decomposed": {
                    "start": 474,
                    "end": 490,
                    "body": [
                        "    public void testInvalid_test3_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        String baseCode = \"193011099\";\n",
                        "        assertFalse(\"ISBN10-0\", validator.isValid(baseCode + \"0\"));\n",
                        "        assertFalse(\"ISBN10-1\", validator.isValid(baseCode + \"1\"));\n",
                        "        assertFalse(\"ISBN10-2\", validator.isValid(baseCode + \"2\"));\n",
                        "        assertFalse(\"ISBN10-3\", validator.isValid(baseCode + \"3\"));\n",
                        "        assertFalse(\"ISBN10-4\", validator.isValid(baseCode + \"4\"));\n",
                        "        assertTrue(\"ISBN10-5\", validator.isValid(baseCode + \"5\"));\n",
                        "        assertFalse(\"ISBN10-6\", validator.isValid(baseCode + \"6\"));\n",
                        "        assertFalse(\"ISBN10-7\", validator.isValid(baseCode + \"7\"));\n",
                        "        assertFalse(\"ISBN10-8\", validator.isValid(baseCode + \"8\"));\n",
                        "        assertFalse(\"ISBN10-9\", validator.isValid(baseCode + \"9\"));\n",
                        "        assertFalse(\"ISBN10-X\", validator.isValid(baseCode + \"X\"));\n",
                        "        baseCode = \"978193011099\";\n",
                        "        assertFalse(\"ISBN13-0\", validator.isValid(baseCode + \"0\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testInvalid_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "160-162:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testInvalid_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "457-471:testInvalid_test2_decomposed": {
                    "start": 457,
                    "end": 471,
                    "body": [
                        "    public void testInvalid_test2_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        String baseCode = \"193011099\";\n",
                        "        assertFalse(\"ISBN10-0\", validator.isValid(baseCode + \"0\"));\n",
                        "        assertFalse(\"ISBN10-1\", validator.isValid(baseCode + \"1\"));\n",
                        "        assertFalse(\"ISBN10-2\", validator.isValid(baseCode + \"2\"));\n",
                        "        assertFalse(\"ISBN10-3\", validator.isValid(baseCode + \"3\"));\n",
                        "        assertFalse(\"ISBN10-4\", validator.isValid(baseCode + \"4\"));\n",
                        "        assertTrue(\"ISBN10-5\", validator.isValid(baseCode + \"5\"));\n",
                        "        assertFalse(\"ISBN10-6\", validator.isValid(baseCode + \"6\"));\n",
                        "        assertFalse(\"ISBN10-7\", validator.isValid(baseCode + \"7\"));\n",
                        "        assertFalse(\"ISBN10-8\", validator.isValid(baseCode + \"8\"));\n",
                        "        assertFalse(\"ISBN10-9\", validator.isValid(baseCode + \"9\"));\n",
                        "        assertFalse(\"ISBN10-X\", validator.isValid(baseCode + \"X\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testInvalid_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "160-162:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testInvalid_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "450-454:testInvalid_test1_decomposed": {
                    "start": 450,
                    "end": 454,
                    "body": [
                        "    public void testInvalid_test1_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        String baseCode = \"193011099\";\n",
                        "        assertFalse(\"ISBN10-0\", validator.isValid(baseCode + \"0\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testInvalid_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "160-162:isValid"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testInvalid_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "445-447:testInvalid_test0_decomposed": {
                    "start": 445,
                    "end": 447,
                    "body": [
                        "    public void testInvalid_test0_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testInvalid_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testInvalid_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "433-442:testNull_test7_decomposed": {
                    "start": 433,
                    "end": 442,
                    "body": [
                        "    public void testNull_test7_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        assertFalse(\"isValid\", validator.isValid(null));\n",
                        "        assertFalse(\"isValidISBN10\", validator.isValidISBN10(null));\n",
                        "        assertFalse(\"isValidISBN13\", validator.isValidISBN13(null));\n",
                        "        assertNull(\"validate\", validator.validate(null));\n",
                        "        assertNull(\"validateISBN10\", validator.validateISBN10(null));\n",
                        "        assertNull(\"validateISBN13\", validator.validateISBN13(null));\n",
                        "        assertNull(\"convertToISBN13\", validator.convertToISBN13(null));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNull_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "160-162:isValid"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "170-172:isValidISBN10"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "180-182:isValidISBN13"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "195-204:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "215-218:validateISBN10"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "229-232:validateISBN13"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "242-263:convertToISBN13"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNull_test7_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "422-430:testNull_test6_decomposed": {
                    "start": 422,
                    "end": 430,
                    "body": [
                        "    public void testNull_test6_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        assertFalse(\"isValid\", validator.isValid(null));\n",
                        "        assertFalse(\"isValidISBN10\", validator.isValidISBN10(null));\n",
                        "        assertFalse(\"isValidISBN13\", validator.isValidISBN13(null));\n",
                        "        assertNull(\"validate\", validator.validate(null));\n",
                        "        assertNull(\"validateISBN10\", validator.validateISBN10(null));\n",
                        "        assertNull(\"validateISBN13\", validator.validateISBN13(null));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNull_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "160-162:isValid"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "170-172:isValidISBN10"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "180-182:isValidISBN13"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "195-204:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "215-218:validateISBN10"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "229-232:validateISBN13"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNull_test6_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "412-419:testNull_test5_decomposed": {
                    "start": 412,
                    "end": 419,
                    "body": [
                        "    public void testNull_test5_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        assertFalse(\"isValid\", validator.isValid(null));\n",
                        "        assertFalse(\"isValidISBN10\", validator.isValidISBN10(null));\n",
                        "        assertFalse(\"isValidISBN13\", validator.isValidISBN13(null));\n",
                        "        assertNull(\"validate\", validator.validate(null));\n",
                        "        assertNull(\"validateISBN10\", validator.validateISBN10(null));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNull_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "160-162:isValid"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "170-172:isValidISBN10"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "180-182:isValidISBN13"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "195-204:validate"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "215-218:validateISBN10"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNull_test5_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "403-409:testNull_test4_decomposed": {
                    "start": 403,
                    "end": 409,
                    "body": [
                        "    public void testNull_test4_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        assertFalse(\"isValid\", validator.isValid(null));\n",
                        "        assertFalse(\"isValidISBN10\", validator.isValidISBN10(null));\n",
                        "        assertFalse(\"isValidISBN13\", validator.isValidISBN13(null));\n",
                        "        assertNull(\"validate\", validator.validate(null));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNull_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "160-162:isValid"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "170-172:isValidISBN10"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "180-182:isValidISBN13"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "195-204:validate"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNull_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "395-400:testNull_test3_decomposed": {
                    "start": 395,
                    "end": 400,
                    "body": [
                        "    public void testNull_test3_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        assertFalse(\"isValid\", validator.isValid(null));\n",
                        "        assertFalse(\"isValidISBN10\", validator.isValidISBN10(null));\n",
                        "        assertFalse(\"isValidISBN13\", validator.isValidISBN13(null));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNull_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "160-162:isValid"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "170-172:isValidISBN10"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "180-182:isValidISBN13"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNull_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "388-392:testNull_test2_decomposed": {
                    "start": 388,
                    "end": 392,
                    "body": [
                        "    public void testNull_test2_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        assertFalse(\"isValid\", validator.isValid(null));\n",
                        "        assertFalse(\"isValidISBN10\", validator.isValidISBN10(null));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNull_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "160-162:isValid"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "170-172:isValidISBN10"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNull_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "382-385:testNull_test1_decomposed": {
                    "start": 382,
                    "end": 385,
                    "body": [
                        "    public void testNull_test1_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        assertFalse(\"isValid\", validator.isValid(null));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNull_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "160-162:isValid"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNull_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "377-379:testNull_test0_decomposed": {
                    "start": 377,
                    "end": 379,
                    "body": [
                        "    public void testNull_test0_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNull_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNull_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "354-374:testValidateISBN13_test2_decomposed": {
                    "start": 354,
                    "end": 374,
                    "body": [
                        "    public void testValidateISBN13_test2_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        assertEquals(\n",
                        "                \"validateISBN13-1\", \"9781930110991\", validator.validateISBN13(\"9781930110991\"));\n",
                        "        assertEquals(\n",
                        "                \"validateISBN13-2\", \"9781930110991\", validator.validateISBN13(\"978-1-930110-99-1\"));\n",
                        "        assertEquals(\n",
                        "                \"validateISBN13-3\", \"9781930110991\", validator.validateISBN13(\"978 1 930110 99 1\"));\n",
                        "        assertEquals(\n",
                        "                \"validateISBN13-4\", \"9780201633856\", validator.validateISBN13(\"9780201633856\"));\n",
                        "        assertEquals(\n",
                        "                \"validateISBN13-5\", \"9780201633856\", validator.validateISBN13(\"978-0-201-63385-6\"));\n",
                        "        assertEquals(\n",
                        "                \"validateISBN13-6\", \"9780201633856\", validator.validateISBN13(\"978 0 201 63385 6\"));\n",
                        "        assertEquals(\"validate-1\", \"9781930110991\", validator.validate(\"9781930110991\"));\n",
                        "        assertEquals(\"validate-2\", \"9781930110991\", validator.validate(\"978-1-930110-99-1\"));\n",
                        "        assertEquals(\"validate-3\", \"9781930110991\", validator.validate(\"978 1 930110 99 1\"));\n",
                        "        assertEquals(\"validate-4\", \"9780201633856\", validator.validate(\"9780201633856\"));\n",
                        "        assertEquals(\"validate-5\", \"9780201633856\", validator.validate(\"978-0-201-63385-6\"));\n",
                        "        assertEquals(\"validate-6\", \"9780201633856\", validator.validate(\"978 0 201 63385 6\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testValidateISBN13_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "229-232:validateISBN13"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "195-204:validate"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testValidateISBN13_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "337-351:testValidateISBN13_test1_decomposed": {
                    "start": 337,
                    "end": 351,
                    "body": [
                        "    public void testValidateISBN13_test1_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        assertEquals(\n",
                        "                \"validateISBN13-1\", \"9781930110991\", validator.validateISBN13(\"9781930110991\"));\n",
                        "        assertEquals(\n",
                        "                \"validateISBN13-2\", \"9781930110991\", validator.validateISBN13(\"978-1-930110-99-1\"));\n",
                        "        assertEquals(\n",
                        "                \"validateISBN13-3\", \"9781930110991\", validator.validateISBN13(\"978 1 930110 99 1\"));\n",
                        "        assertEquals(\n",
                        "                \"validateISBN13-4\", \"9780201633856\", validator.validateISBN13(\"9780201633856\"));\n",
                        "        assertEquals(\n",
                        "                \"validateISBN13-5\", \"9780201633856\", validator.validateISBN13(\"978-0-201-63385-6\"));\n",
                        "        assertEquals(\n",
                        "                \"validateISBN13-6\", \"9780201633856\", validator.validateISBN13(\"978 0 201 63385 6\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testValidateISBN13_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "229-232:validateISBN13"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testValidateISBN13_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "332-334:testValidateISBN13_test0_decomposed": {
                    "start": 332,
                    "end": 334,
                    "body": [
                        "    public void testValidateISBN13_test0_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testValidateISBN13_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testValidateISBN13_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "321-329:testValidateISBN10Convert_test1_decomposed": {
                    "start": 321,
                    "end": 329,
                    "body": [
                        "    public void testValidateISBN10Convert_test1_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        assertEquals(\"validate-1\", \"9781930110991\", validator.validate(\"1930110995\"));\n",
                        "        assertEquals(\"validate-2\", \"9781930110991\", validator.validate(\"1-930110-99-5\"));\n",
                        "        assertEquals(\"validate-3\", \"9781930110991\", validator.validate(\"1 930110 99 5\"));\n",
                        "        assertEquals(\"validate-4\", \"9780201633856\", validator.validate(\"020163385X\"));\n",
                        "        assertEquals(\"validate-5\", \"9780201633856\", validator.validate(\"0-201-63385-X\"));\n",
                        "        assertEquals(\"validate-6\", \"9780201633856\", validator.validate(\"0 201 63385 X\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testValidateISBN10Convert_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "195-204:validate"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testValidateISBN10Convert_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "316-318:testValidateISBN10Convert_test0_decomposed": {
                    "start": 316,
                    "end": 318,
                    "body": [
                        "    public void testValidateISBN10Convert_test0_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testValidateISBN10Convert_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testValidateISBN10Convert_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "299-313:testValidateISBN10_test2_decomposed": {
                    "start": 299,
                    "end": 313,
                    "body": [
                        "    public void testValidateISBN10_test2_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance1(false);\n",
                        "        assertEquals(\"validateISBN10-1\", \"1930110995\", validator.validateISBN10(\"1930110995\"));\n",
                        "        assertEquals(\"validateISBN10-2\", \"1930110995\", validator.validateISBN10(\"1-930110-99-5\"));\n",
                        "        assertEquals(\"validateISBN10-3\", \"1930110995\", validator.validateISBN10(\"1 930110 99 5\"));\n",
                        "        assertEquals(\"validateISBN10-4\", \"020163385X\", validator.validateISBN10(\"020163385X\"));\n",
                        "        assertEquals(\"validateISBN10-5\", \"020163385X\", validator.validateISBN10(\"0-201-63385-X\"));\n",
                        "        assertEquals(\"validateISBN10-6\", \"020163385X\", validator.validateISBN10(\"0 201 63385 X\"));\n",
                        "        assertEquals(\"validate-1\", \"1930110995\", validator.validate(\"1930110995\"));\n",
                        "        assertEquals(\"validate-2\", \"1930110995\", validator.validate(\"1-930110-99-5\"));\n",
                        "        assertEquals(\"validate-3\", \"1930110995\", validator.validate(\"1 930110 99 5\"));\n",
                        "        assertEquals(\"validate-4\", \"020163385X\", validator.validate(\"020163385X\"));\n",
                        "        assertEquals(\"validate-5\", \"020163385X\", validator.validate(\"0-201-63385-X\"));\n",
                        "        assertEquals(\"validate-6\", \"020163385X\", validator.validate(\"0 201 63385 X\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testValidateISBN10_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "134-136:getInstance1"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "215-218:validateISBN10"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "195-204:validate"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testValidateISBN10_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "288-296:testValidateISBN10_test1_decomposed": {
                    "start": 288,
                    "end": 296,
                    "body": [
                        "    public void testValidateISBN10_test1_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance1(false);\n",
                        "        assertEquals(\"validateISBN10-1\", \"1930110995\", validator.validateISBN10(\"1930110995\"));\n",
                        "        assertEquals(\"validateISBN10-2\", \"1930110995\", validator.validateISBN10(\"1-930110-99-5\"));\n",
                        "        assertEquals(\"validateISBN10-3\", \"1930110995\", validator.validateISBN10(\"1 930110 99 5\"));\n",
                        "        assertEquals(\"validateISBN10-4\", \"020163385X\", validator.validateISBN10(\"020163385X\"));\n",
                        "        assertEquals(\"validateISBN10-5\", \"020163385X\", validator.validateISBN10(\"0-201-63385-X\"));\n",
                        "        assertEquals(\"validateISBN10-6\", \"020163385X\", validator.validateISBN10(\"0 201 63385 X\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testValidateISBN10_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "134-136:getInstance1"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "215-218:validateISBN10"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testValidateISBN10_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "283-285:testValidateISBN10_test0_decomposed": {
                    "start": 283,
                    "end": 285,
                    "body": [
                        "    public void testValidateISBN10_test0_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance1(false);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testValidateISBN10_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "134-136:getInstance1"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testValidateISBN10_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "266-280:testIsValidISBN13_test2_decomposed": {
                    "start": 266,
                    "end": 280,
                    "body": [
                        "    public void testIsValidISBN13_test2_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        assertTrue(\"isValidISBN13-1\", validator.isValidISBN13(\"9781930110991\"));\n",
                        "        assertTrue(\"isValidISBN13-2\", validator.isValidISBN13(\"978-1-930110-99-1\"));\n",
                        "        assertTrue(\"isValidISBN13-3\", validator.isValidISBN13(\"978 1 930110 99 1\"));\n",
                        "        assertTrue(\"isValidISBN13-4\", validator.isValidISBN13(\"9780201633856\"));\n",
                        "        assertTrue(\"isValidISBN13-5\", validator.isValidISBN13(\"978-0-201-63385-6\"));\n",
                        "        assertTrue(\"isValidISBN13-6\", validator.isValidISBN13(\"978 0 201 63385 6\"));\n",
                        "        assertTrue(\"isValid-1\", validator.isValid(\"9781930110991\"));\n",
                        "        assertTrue(\"isValid-2\", validator.isValid(\"978-1-930110-99-1\"));\n",
                        "        assertTrue(\"isValid-3\", validator.isValid(\"978 1 930110 99 1\"));\n",
                        "        assertTrue(\"isValid-4\", validator.isValid(\"9780201633856\"));\n",
                        "        assertTrue(\"isValid-5\", validator.isValid(\"978-0-201-63385-6\"));\n",
                        "        assertTrue(\"isValid-6\", validator.isValid(\"978 0 201 63385 6\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsValidISBN13_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "180-182:isValidISBN13"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "160-162:isValid"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testIsValidISBN13_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "255-263:testIsValidISBN13_test1_decomposed": {
                    "start": 255,
                    "end": 263,
                    "body": [
                        "    public void testIsValidISBN13_test1_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        assertTrue(\"isValidISBN13-1\", validator.isValidISBN13(\"9781930110991\"));\n",
                        "        assertTrue(\"isValidISBN13-2\", validator.isValidISBN13(\"978-1-930110-99-1\"));\n",
                        "        assertTrue(\"isValidISBN13-3\", validator.isValidISBN13(\"978 1 930110 99 1\"));\n",
                        "        assertTrue(\"isValidISBN13-4\", validator.isValidISBN13(\"9780201633856\"));\n",
                        "        assertTrue(\"isValidISBN13-5\", validator.isValidISBN13(\"978-0-201-63385-6\"));\n",
                        "        assertTrue(\"isValidISBN13-6\", validator.isValidISBN13(\"978 0 201 63385 6\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsValidISBN13_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "180-182:isValidISBN13"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testIsValidISBN13_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "250-252:testIsValidISBN13_test0_decomposed": {
                    "start": 250,
                    "end": 252,
                    "body": [
                        "    public void testIsValidISBN13_test0_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsValidISBN13_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testIsValidISBN13_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "233-247:testIsValidISBN10_test2_decomposed": {
                    "start": 233,
                    "end": 247,
                    "body": [
                        "    public void testIsValidISBN10_test2_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        assertTrue(\"isValidISBN10-1\", validator.isValidISBN10(\"1930110995\"));\n",
                        "        assertTrue(\"isValidISBN10-2\", validator.isValidISBN10(\"1-930110-99-5\"));\n",
                        "        assertTrue(\"isValidISBN10-3\", validator.isValidISBN10(\"1 930110 99 5\"));\n",
                        "        assertTrue(\"isValidISBN10-4\", validator.isValidISBN10(\"020163385X\"));\n",
                        "        assertTrue(\"isValidISBN10-5\", validator.isValidISBN10(\"0-201-63385-X\"));\n",
                        "        assertTrue(\"isValidISBN10-6\", validator.isValidISBN10(\"0 201 63385 X\"));\n",
                        "        assertTrue(\"isValid-1\", validator.isValid(\"1930110995\"));\n",
                        "        assertTrue(\"isValid-2\", validator.isValid(\"1-930110-99-5\"));\n",
                        "        assertTrue(\"isValid-3\", validator.isValid(\"1 930110 99 5\"));\n",
                        "        assertTrue(\"isValid-4\", validator.isValid(\"020163385X\"));\n",
                        "        assertTrue(\"isValid-5\", validator.isValid(\"0-201-63385-X\"));\n",
                        "        assertTrue(\"isValid-6\", validator.isValid(\"0 201 63385 X\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsValidISBN10_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "170-172:isValidISBN10"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "160-162:isValid"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testIsValidISBN10_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "222-230:testIsValidISBN10_test1_decomposed": {
                    "start": 222,
                    "end": 230,
                    "body": [
                        "    public void testIsValidISBN10_test1_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        assertTrue(\"isValidISBN10-1\", validator.isValidISBN10(\"1930110995\"));\n",
                        "        assertTrue(\"isValidISBN10-2\", validator.isValidISBN10(\"1-930110-99-5\"));\n",
                        "        assertTrue(\"isValidISBN10-3\", validator.isValidISBN10(\"1 930110 99 5\"));\n",
                        "        assertTrue(\"isValidISBN10-4\", validator.isValidISBN10(\"020163385X\"));\n",
                        "        assertTrue(\"isValidISBN10-5\", validator.isValidISBN10(\"0-201-63385-X\"));\n",
                        "        assertTrue(\"isValidISBN10-6\", validator.isValidISBN10(\"0 201 63385 X\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsValidISBN10_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "170-172:isValidISBN10"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testIsValidISBN10_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "217-219:testIsValidISBN10_test0_decomposed": {
                    "start": 217,
                    "end": 219,
                    "body": [
                        "    public void testIsValidISBN10_test0_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsValidISBN10_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testIsValidISBN10_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "200-214:testInvalidISBN13Format_test1_decomposed": {
                    "start": 200,
                    "end": 214,
                    "body": [
                        "    public void testInvalidISBN13Format_test1_decomposed()  {\n",
                        "        Pattern pattern = Pattern.compile(ISBNValidator.ISBN13_REGEX);\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        for (int i = 0; i < invalidISBN13Format.length; i++) {\n",
                        "            assertFalse(\n",
                        "                    \"Pattern[\" + i + \"]=\" + invalidISBN13Format[i],\n",
                        "                    pattern.matcher(invalidISBN13Format[i]).matches());\n",
                        "            assertFalse(\n",
                        "                    \"isValidISBN13[\" + i + \"]=\" + invalidISBN13Format[i],\n",
                        "                    validator.isValidISBN13(invalidISBN13Format[i]));\n",
                        "            assertNull(\n",
                        "                    \"validateISBN13[\" + i + \"]=\" + invalidISBN13Format[i],\n",
                        "                    validator.validateISBN13(invalidISBN13Format[i]));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testInvalidISBN13Format_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "compile(java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Matcher",
                            "matches()"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "matcher(java.lang.CharSequence)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "180-182:isValidISBN13"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "229-232:validateISBN13"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testInvalidISBN13Format_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "194-197:testInvalidISBN13Format_test0_decomposed": {
                    "start": 194,
                    "end": 197,
                    "body": [
                        "    public void testInvalidISBN13Format_test0_decomposed()  {\n",
                        "        Pattern pattern = Pattern.compile(ISBNValidator.ISBN13_REGEX);\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testInvalidISBN13Format_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "compile(java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testInvalidISBN13Format_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "184-191:testValidISBN13Format_test0_decomposed": {
                    "start": 184,
                    "end": 191,
                    "body": [
                        "    public void testValidISBN13Format_test0_decomposed()  {\n",
                        "        Pattern pattern = Pattern.compile(ISBNValidator.ISBN13_REGEX);\n",
                        "        for (int i = 0; i < validISBN13Format.length; i++) {\n",
                        "            assertTrue(\n",
                        "                    \"Pattern[\" + i + \"]=\" + validISBN13Format[i],\n",
                        "                    pattern.matcher(validISBN13Format[i]).matches());\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testValidISBN13Format_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "compile(java.lang.String)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Matcher",
                            "matches()"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "matcher(java.lang.CharSequence)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testValidISBN13Format_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "167-181:testInvalidISBN10Format_test1_decomposed": {
                    "start": 167,
                    "end": 181,
                    "body": [
                        "    public void testInvalidISBN10Format_test1_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "        Pattern pattern = Pattern.compile(ISBNValidator.ISBN10_REGEX);\n",
                        "        for (int i = 0; i < invalidISBN10Format.length; i++) {\n",
                        "            assertFalse(\n",
                        "                    \"Pattern[\" + i + \"]=\" + invalidISBN10Format[i],\n",
                        "                    pattern.matcher(invalidISBN10Format[i]).matches());\n",
                        "            assertFalse(\n",
                        "                    \"isValidISBN10[\" + i + \"]=\" + invalidISBN10Format[i],\n",
                        "                    validator.isValidISBN10(invalidISBN10Format[i]));\n",
                        "            assertNull(\n",
                        "                    \"validateISBN10[\" + i + \"]=\" + invalidISBN10Format[i],\n",
                        "                    validator.validateISBN10(invalidISBN10Format[i]));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testInvalidISBN10Format_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "compile(java.lang.String)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Matcher",
                            "matches()"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "matcher(java.lang.CharSequence)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "170-172:isValidISBN10"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "215-218:validateISBN10"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testInvalidISBN10Format_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "162-164:testInvalidISBN10Format_test0_decomposed": {
                    "start": 162,
                    "end": 164,
                    "body": [
                        "    public void testInvalidISBN10Format_test0_decomposed()  {\n",
                        "        ISBNValidator validator = ISBNValidator.getInstance0();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testInvalidISBN10Format_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.ISBNValidator",
                            "ISBNValidator",
                            "122-124:getInstance0"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testInvalidISBN10Format_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "152-159:testValidISBN10Format_test0_decomposed": {
                    "start": 152,
                    "end": 159,
                    "body": [
                        "    public void testValidISBN10Format_test0_decomposed()  {\n",
                        "        Pattern pattern = Pattern.compile(ISBNValidator.ISBN10_REGEX);\n",
                        "        for (int i = 0; i < validISBN10Format.length; i++) {\n",
                        "            assertTrue(\n",
                        "                    \"Pattern[\" + i + \"]=\" + validISBN10Format[i],\n",
                        "                    pattern.matcher(validISBN10Format[i]).matches());\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testValidISBN10Format_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "compile(java.lang.String)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Matcher",
                            "matches()"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "matcher(java.lang.CharSequence)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testValidISBN10Format_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "109-111:ISBNValidatorTest": {
                    "start": 109,
                    "end": 111,
                    "body": [
                        "    public ISBNValidatorTest(String name) {\n",
                        "        super(name);\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "ISBNValidatorTest(String)",
                    "parameters": [
                        "name"
                    ],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "TestCase(java.lang.String)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __init__(self, name: str) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                }
            },
            "fields": {
                "79-102:invalidISBN13Format": {
                    "start": 79,
                    "end": 102,
                    "body": [
                        "    private final String[] invalidISBN13Format =\n",
                        "            new String[] {\n",
                        "                \"\", // empty\n",
                        "                \"   \", // empty\n",
                        "                \"1\", // too short\n",
                        "                \"978123456789\", // too short\n",
                        "                \"97812345678901\", // too long\n",
                        "                \"978-123456-1234567-123456-1\", // Group too long\n",
                        "                \"978-12345-12345678-123456-1\", // Publisher too long\n",
                        "                \"978-12345-1234567-1234567-1\", // Title too long\n",
                        "                \"978-12345-1234567-123456-12\", // Check Digit too long\n",
                        "                \"--978 1 930110 99 1\", // format\n",
                        "                \"978 1 930110 99 1--\", // format\n",
                        "                \"978 1 930110-99 1-\", // format\n",
                        "                \"123-4-567890-12-8\", // format\n",
                        "                \"978.1.2.3.4\", // Invalid Separator\n",
                        "                \"978=1=2=3=4\", // Invalid Separator\n",
                        "                \"978_1_2_3_4\", // Invalid Separator\n",
                        "                \"978123456789X\", // invalid character\n",
                        "                \"978-0-201-63385-X\", // invalid character\n",
                        "                \"dsasdsadsadsa\", // invalid characters\n",
                        "                \"I love sparrows!\", // invalid characters\n",
                        "                \"979-1-234-567-89-6\" // format\n",
                        "            };\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "String[]",
                            "java.lang.String[]"
                        ]
                    ],
                    "partial_translation": [
                        "    __invalidISBN13Format: typing.List[typing.List[str]] = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "65-77:validISBN13Format": {
                    "start": 65,
                    "end": 77,
                    "body": [
                        "    private final String[] validISBN13Format =\n",
                        "            new String[] {\n",
                        "                \"9781234567890\",\n",
                        "                \"9791234567890\",\n",
                        "                \"978-12345-1234567-123456-1\",\n",
                        "                \"979-12345-1234567-123456-1\",\n",
                        "                \"978 12345 1234567 123456 1\",\n",
                        "                \"979 12345 1234567 123456 1\",\n",
                        "                \"978-1-2-3-4\",\n",
                        "                \"979-1-2-3-4\",\n",
                        "                \"978 1 2 3 4\",\n",
                        "                \"979 1 2 3 4\",\n",
                        "            };\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "String[]",
                            "java.lang.String[]"
                        ]
                    ],
                    "partial_translation": [
                        "    __validISBN13Format: typing.List[typing.List[str]] = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "41-63:invalidISBN10Format": {
                    "start": 41,
                    "end": 63,
                    "body": [
                        "    private final String[] invalidISBN10Format =\n",
                        "            new String[] {\n",
                        "                \"\", // empty\n",
                        "                \"   \", // empty\n",
                        "                \"1\", // too short\n",
                        "                \"123456789\", // too short\n",
                        "                \"12345678901\", // too long\n",
                        "                \"12345678X0\", // X not at end\n",
                        "                \"123456-1234567-123456-X\", // Group too long\n",
                        "                \"12345-12345678-123456-X\", // Publisher too long\n",
                        "                \"12345-1234567-1234567-X\", // Title too long\n",
                        "                \"12345-1234567-123456-X2\", // Check Digit too long\n",
                        "                \"--1 930110 99 5\", // format\n",
                        "                \"1 930110 99 5--\", // format\n",
                        "                \"1 930110-99 5-\", // format\n",
                        "                \"1.2.3.4\", // Invalid Separator\n",
                        "                \"1=2=3=4\", // Invalid Separator\n",
                        "                \"1_2_3_4\", // Invalid Separator\n",
                        "                \"123456789Y\", // Other character at the end\n",
                        "                \"dsasdsadsa\", // invalid characters\n",
                        "                \"I love sparrows!\", // invalid characters\n",
                        "                \"068-556-98-45\" // format\n",
                        "            };\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "String[]",
                            "java.lang.String[]"
                        ]
                    ],
                    "partial_translation": [
                        "    __invalidISBN10Format: typing.List[typing.List[str]] = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "31-39:validISBN10Format": {
                    "start": 31,
                    "end": 39,
                    "body": [
                        "    private final String[] validISBN10Format =\n",
                        "            new String[] {\n",
                        "                \"1234567890\",\n",
                        "                \"123456789X\",\n",
                        "                \"12345-1234567-123456-X\",\n",
                        "                \"12345 1234567 123456 X\",\n",
                        "                \"1-2-3-4\",\n",
                        "                \"1 2 3 4\",\n",
                        "            };\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "String[]",
                            "java.lang.String[]"
                        ]
                    ],
                    "partial_translation": [
                        "    __validISBN10Format: typing.List[typing.List[str]] = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class ISBNValidatorTest(unittest.TestCase):\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import unittest",
        "import pytest",
        "import io",
        "import typing\nfrom typing import *",
        "import os",
        "import unittest",
        "from src.main.org.apache.commons.validator.ISBNValidator import *",
        "from src.main.org.apache.commons.validator.routines.ISBNValidator import *"
    ]
}