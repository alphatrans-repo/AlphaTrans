{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-graph/src/test/java/org/apache/commons/graph/shortestpath/AStarTestCase.java",
    "imports": {
        "37-37:import Map": {
            "start": 37,
            "end": 37,
            "body": [
                "import java.util.Map;\n"
            ]
        },
        "36-36:import HashMap": {
            "start": 36,
            "end": 36,
            "body": [
                "import java.util.HashMap;\n"
            ]
        },
        "26-26:import Graph": {
            "start": 26,
            "end": 26,
            "body": [
                "import org.apache.commons.graph.Graph;\n"
            ]
        },
        "32-32:import UndirectedMutableGraph": {
            "start": 32,
            "end": 32,
            "body": [
                "import org.apache.commons.graph.model.UndirectedMutableGraph;\n"
            ]
        },
        "27-27:import Path": {
            "start": 27,
            "end": 27,
            "body": [
                "import org.apache.commons.graph.Path;\n"
            ]
        },
        "34-34:import Test": {
            "start": 34,
            "end": 34,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "29-29:import BaseLabeledWeightedEdge": {
            "start": 29,
            "end": 29,
            "body": [
                "import org.apache.commons.graph.model.BaseLabeledWeightedEdge;\n"
            ]
        },
        "28-28:import BaseLabeledVertex": {
            "start": 28,
            "end": 28,
            "body": [
                "import org.apache.commons.graph.model.BaseLabeledVertex;\n"
            ]
        },
        "30-30:import BaseWeightedEdge": {
            "start": 30,
            "end": 30,
            "body": [
                "import org.apache.commons.graph.model.BaseWeightedEdge;\n"
            ]
        },
        "31-31:import InMemoryWeightedPath": {
            "start": 31,
            "end": 31,
            "body": [
                "import org.apache.commons.graph.model.InMemoryWeightedPath;\n"
            ]
        },
        "33-33:import DoubleWeightBaseOperations": {
            "start": 33,
            "end": 33,
            "body": [
                "import org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations;\n"
            ]
        },
        "23-23:import static Assert.assertEquals": {
            "start": 23,
            "end": 23,
            "body": [
                "import static org.junit.Assert.assertEquals;\n"
            ]
        },
        "22-22:import static CommonsGraph.findShortestPath": {
            "start": 22,
            "end": 22,
            "body": [
                "import static org.apache.commons.graph.CommonsGraph.findShortestPath;\n"
            ]
        },
        "24-24:import static Assert.fail": {
            "start": 24,
            "end": 24,
            "body": [
                "import static org.junit.Assert.fail;\n"
            ]
        }
    },
    "classes": {
        "AStarTestCase": {
            "start": 39,
            "end": 39,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }",
                "new Heuristic<BaseLabeledVertex,Double>(...) { ... }"
            ],
            "implements": [],
            "extends": [],
            "methods": {
                "1233-1247:testNullVertices_test5_decomposed": {
                    "start": 1233,
                    "end": 1247,
                    "body": [
                        "    public void testNullVertices_test5_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null).to(null);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null).to(null).applyingAStar(new DoubleWeightBaseOperations());\n",
                        "        findShortestPath(graph)\n",
                        "                .whereEdgesHaveWeights(new BaseWeightedEdge<Double>())\n",
                        "                .from(null)\n",
                        "                .to(null)\n",
                        "                .applyingAStar(new DoubleWeightBaseOperations())\n",
                        "                .withHeuristic(null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/ShortestPathAlgorithmSelector",
                            "applyingAStar(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/HeuristicBuilder",
                            "withHeuristic(org.apache.commons.graph.shortestpath.Heuristic)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test5_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "1222-1230:testNullVertices_test4_decomposed": {
                    "start": 1222,
                    "end": 1230,
                    "body": [
                        "    public void testNullVertices_test4_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null).to(null);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null).to(null).applyingAStar(new DoubleWeightBaseOperations());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/ShortestPathAlgorithmSelector",
                            "applyingAStar(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "1212-1219:testNullVertices_test3_decomposed": {
                    "start": 1212,
                    "end": 1219,
                    "body": [
                        "    public void testNullVertices_test3_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null).to(null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "1203-1209:testNullVertices_test2_decomposed": {
                    "start": 1203,
                    "end": 1209,
                    "body": [
                        "    public void testNullVertices_test2_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "1195-1200:testNullVertices_test1_decomposed": {
                    "start": 1195,
                    "end": 1200,
                    "body": [
                        "    public void testNullVertices_test1_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "1188-1192:testNullVertices_test0_decomposed": {
                    "start": 1188,
                    "end": 1192,
                    "body": [
                        "    public void testNullVertices_test0_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        findShortestPath(graph);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "1152-1185:testNullMonoid_test8_decomposed": {
                    "start": 1152,
                    "end": 1185,
                    "body": [
                        "    public void testNullMonoid_test8_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic = null;\n",
                        "        try {\n",
                        "            graph.addVertex(a);\n",
                        "            graph.addVertex(b);\n",
                        "\n",
                        "            heuristic =\n",
                        "                    new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                        public Double applyHeuristic(\n",
                        "                                BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                            return heuristics.get(current);\n",
                        "                        }\n",
                        "                    };\n",
                        "        } catch (NullPointerException e) {\n",
                        "            fail(e.getMessage());\n",
                        "        }\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a).to(b);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a).to(b).applyingAStar(null);\n",
                        "        findShortestPath(graph)\n",
                        "                .whereEdgesHaveWeights(new BaseWeightedEdge<Double>())\n",
                        "                .from(a)\n",
                        "                .to(b)\n",
                        "                .applyingAStar(null)\n",
                        "                .withHeuristic(heuristic);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullMonoid_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/ShortestPathAlgorithmSelector",
                            "applyingAStar(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/HeuristicBuilder",
                            "withHeuristic(org.apache.commons.graph.shortestpath.Heuristic)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullMonoid_test8_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "1122-1149:testNullMonoid_test7_decomposed": {
                    "start": 1122,
                    "end": 1149,
                    "body": [
                        "    public void testNullMonoid_test7_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic = null;\n",
                        "        try {\n",
                        "            graph.addVertex(a);\n",
                        "            graph.addVertex(b);\n",
                        "\n",
                        "            heuristic =\n",
                        "                    new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                        public Double applyHeuristic(\n",
                        "                                BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                            return heuristics.get(current);\n",
                        "                        }\n",
                        "                    };\n",
                        "        } catch (NullPointerException e) {\n",
                        "            fail(e.getMessage());\n",
                        "        }\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a).to(b);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a).to(b).applyingAStar(null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullMonoid_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/ShortestPathAlgorithmSelector",
                            "applyingAStar(org.apache.commons.graph.weight.OrderedMonoid)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullMonoid_test7_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "1093-1119:testNullMonoid_test6_decomposed": {
                    "start": 1093,
                    "end": 1119,
                    "body": [
                        "    public void testNullMonoid_test6_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic = null;\n",
                        "        try {\n",
                        "            graph.addVertex(a);\n",
                        "            graph.addVertex(b);\n",
                        "\n",
                        "            heuristic =\n",
                        "                    new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                        public Double applyHeuristic(\n",
                        "                                BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                            return heuristics.get(current);\n",
                        "                        }\n",
                        "                    };\n",
                        "        } catch (NullPointerException e) {\n",
                        "            fail(e.getMessage());\n",
                        "        }\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a).to(b);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullMonoid_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullMonoid_test6_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "1065-1090:testNullMonoid_test5_decomposed": {
                    "start": 1065,
                    "end": 1090,
                    "body": [
                        "    public void testNullMonoid_test5_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic = null;\n",
                        "        try {\n",
                        "            graph.addVertex(a);\n",
                        "            graph.addVertex(b);\n",
                        "\n",
                        "            heuristic =\n",
                        "                    new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                        public Double applyHeuristic(\n",
                        "                                BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                            return heuristics.get(current);\n",
                        "                        }\n",
                        "                    };\n",
                        "        } catch (NullPointerException e) {\n",
                        "            fail(e.getMessage());\n",
                        "        }\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullMonoid_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullMonoid_test5_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "1038-1062:testNullMonoid_test4_decomposed": {
                    "start": 1038,
                    "end": 1062,
                    "body": [
                        "    public void testNullMonoid_test4_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic = null;\n",
                        "        try {\n",
                        "            graph.addVertex(a);\n",
                        "            graph.addVertex(b);\n",
                        "\n",
                        "            heuristic =\n",
                        "                    new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                        public Double applyHeuristic(\n",
                        "                                BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                            return heuristics.get(current);\n",
                        "                        }\n",
                        "                    };\n",
                        "        } catch (NullPointerException e) {\n",
                        "            fail(e.getMessage());\n",
                        "        }\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullMonoid_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullMonoid_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "1012-1035:testNullMonoid_test3_decomposed": {
                    "start": 1012,
                    "end": 1035,
                    "body": [
                        "    public void testNullMonoid_test3_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic = null;\n",
                        "        try {\n",
                        "            graph.addVertex(a);\n",
                        "            graph.addVertex(b);\n",
                        "\n",
                        "            heuristic =\n",
                        "                    new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                        public Double applyHeuristic(\n",
                        "                                BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                            return heuristics.get(current);\n",
                        "                        }\n",
                        "                    };\n",
                        "        } catch (NullPointerException e) {\n",
                        "            fail(e.getMessage());\n",
                        "        }\n",
                        "        findShortestPath(graph);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullMonoid_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullMonoid_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "987-1009:testNullMonoid_test2_decomposed": {
                    "start": 987,
                    "end": 1009,
                    "body": [
                        "    public void testNullMonoid_test2_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic = null;\n",
                        "        try {\n",
                        "            graph.addVertex(a);\n",
                        "            graph.addVertex(b);\n",
                        "\n",
                        "            heuristic =\n",
                        "                    new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                        public Double applyHeuristic(\n",
                        "                                BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                            return heuristics.get(current);\n",
                        "                        }\n",
                        "                    };\n",
                        "        } catch (NullPointerException e) {\n",
                        "            fail(e.getMessage());\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullMonoid_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "getMessage()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullMonoid_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "979-984:testNullMonoid_test1_decomposed": {
                    "start": 979,
                    "end": 984,
                    "body": [
                        "    public void testNullMonoid_test1_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullMonoid_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullMonoid_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "972-976:testNullMonoid_test0_decomposed": {
                    "start": 972,
                    "end": 976,
                    "body": [
                        "    public void testNullMonoid_test0_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullMonoid_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullMonoid_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "955-969:testNullHeuristic_test5_decomposed": {
                    "start": 955,
                    "end": 969,
                    "body": [
                        "    public void testNullHeuristic_test5_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(new BaseLabeledVertex(\"a\"));\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(new BaseLabeledVertex(\"a\")).to(new BaseLabeledVertex(\"b\"));\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(new BaseLabeledVertex(\"a\")).to(new BaseLabeledVertex(\"b\")).applyingAStar(new DoubleWeightBaseOperations());\n",
                        "        findShortestPath(graph)\n",
                        "                .whereEdgesHaveWeights(new BaseWeightedEdge<Double>())\n",
                        "                .from(new BaseLabeledVertex(\"a\"))\n",
                        "                .to(new BaseLabeledVertex(\"b\"))\n",
                        "                .applyingAStar(new DoubleWeightBaseOperations())\n",
                        "                .withHeuristic(null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullHeuristic_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/ShortestPathAlgorithmSelector",
                            "applyingAStar(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/HeuristicBuilder",
                            "withHeuristic(org.apache.commons.graph.shortestpath.Heuristic)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullHeuristic_test5_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "944-952:testNullHeuristic_test4_decomposed": {
                    "start": 944,
                    "end": 952,
                    "body": [
                        "    public void testNullHeuristic_test4_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(new BaseLabeledVertex(\"a\"));\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(new BaseLabeledVertex(\"a\")).to(new BaseLabeledVertex(\"b\"));\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(new BaseLabeledVertex(\"a\")).to(new BaseLabeledVertex(\"b\")).applyingAStar(new DoubleWeightBaseOperations());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullHeuristic_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/ShortestPathAlgorithmSelector",
                            "applyingAStar(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullHeuristic_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "934-941:testNullHeuristic_test3_decomposed": {
                    "start": 934,
                    "end": 941,
                    "body": [
                        "    public void testNullHeuristic_test3_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(new BaseLabeledVertex(\"a\"));\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(new BaseLabeledVertex(\"a\")).to(new BaseLabeledVertex(\"b\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullHeuristic_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullHeuristic_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "925-931:testNullHeuristic_test2_decomposed": {
                    "start": 925,
                    "end": 931,
                    "body": [
                        "    public void testNullHeuristic_test2_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(new BaseLabeledVertex(\"a\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullHeuristic_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullHeuristic_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "917-922:testNullHeuristic_test1_decomposed": {
                    "start": 917,
                    "end": 922,
                    "body": [
                        "    public void testNullHeuristic_test1_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullHeuristic_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullHeuristic_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "910-914:testNullHeuristic_test0_decomposed": {
                    "start": 910,
                    "end": 914,
                    "body": [
                        "    public void testNullHeuristic_test0_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        findShortestPath(graph);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullHeuristic_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullHeuristic_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "895-907:testNullGraph_test5_decomposed": {
                    "start": 895,
                    "end": 907,
                    "body": [
                        "    public void testNullGraph_test5_decomposed()  {\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null);\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null);\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null).to(null);\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null).to(null).applyingAStar(new DoubleWeightBaseOperations());\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null)\n",
                        "                .whereEdgesHaveWeights(new BaseWeightedEdge<Double>())\n",
                        "                .from(null)\n",
                        "                .to(null)\n",
                        "                .applyingAStar(new DoubleWeightBaseOperations())\n",
                        "                .withHeuristic(null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/ShortestPathAlgorithmSelector",
                            "applyingAStar(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/HeuristicBuilder",
                            "withHeuristic(org.apache.commons.graph.shortestpath.Heuristic)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test5_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "886-892:testNullGraph_test4_decomposed": {
                    "start": 886,
                    "end": 892,
                    "body": [
                        "    public void testNullGraph_test4_decomposed()  {\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null);\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null);\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null).to(null);\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null).to(null).applyingAStar(new DoubleWeightBaseOperations());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/ShortestPathAlgorithmSelector",
                            "applyingAStar(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "878-883:testNullGraph_test3_decomposed": {
                    "start": 878,
                    "end": 883,
                    "body": [
                        "    public void testNullGraph_test3_decomposed()  {\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null);\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null);\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null).to(null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "871-875:testNullGraph_test2_decomposed": {
                    "start": 871,
                    "end": 875,
                    "body": [
                        "    public void testNullGraph_test2_decomposed()  {\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null);\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "865-868:testNullGraph_test1_decomposed": {
                    "start": 865,
                    "end": 868,
                    "body": [
                        "    public void testNullGraph_test1_decomposed()  {\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null);\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "860-862:testNullGraph_test0_decomposed": {
                    "start": 860,
                    "end": 862,
                    "body": [
                        "    public void testNullGraph_test0_decomposed()  {\n",
                        "        findShortestPath((Graph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>) null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "830-857:testNotConnectGraph_test8_decomposed": {
                    "start": 830,
                    "end": 857,
                    "body": [
                        "    public void testNotConnectGraph_test8_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        graph.addVertex(a);\n",
                        "        graph.addVertex(b);\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n",
                        "                };\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a).to(b);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a).to(b).applyingAStar(new DoubleWeightBaseOperations());\n",
                        "        findShortestPath(graph)\n",
                        "                .whereEdgesHaveWeights(new BaseWeightedEdge<Double>())\n",
                        "                .from(a)\n",
                        "                .to(b)\n",
                        "                .applyingAStar(new DoubleWeightBaseOperations())\n",
                        "                .withHeuristic(heuristic);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = PathNotFoundException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnectGraph_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/ShortestPathAlgorithmSelector",
                            "applyingAStar(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/HeuristicBuilder",
                            "withHeuristic(org.apache.commons.graph.shortestpath.Heuristic)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnectGraph_test8_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "806-827:testNotConnectGraph_test7_decomposed": {
                    "start": 806,
                    "end": 827,
                    "body": [
                        "    public void testNotConnectGraph_test7_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        graph.addVertex(a);\n",
                        "        graph.addVertex(b);\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n",
                        "                };\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a).to(b);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a).to(b).applyingAStar(new DoubleWeightBaseOperations());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnectGraph_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/ShortestPathAlgorithmSelector",
                            "applyingAStar(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnectGraph_test7_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "783-803:testNotConnectGraph_test6_decomposed": {
                    "start": 783,
                    "end": 803,
                    "body": [
                        "    public void testNotConnectGraph_test6_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        graph.addVertex(a);\n",
                        "        graph.addVertex(b);\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n",
                        "                };\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a).to(b);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnectGraph_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnectGraph_test6_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "761-780:testNotConnectGraph_test5_decomposed": {
                    "start": 761,
                    "end": 780,
                    "body": [
                        "    public void testNotConnectGraph_test5_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        graph.addVertex(a);\n",
                        "        graph.addVertex(b);\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n",
                        "                };\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(a);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnectGraph_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnectGraph_test5_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "740-758:testNotConnectGraph_test4_decomposed": {
                    "start": 740,
                    "end": 758,
                    "body": [
                        "    public void testNotConnectGraph_test4_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        graph.addVertex(a);\n",
                        "        graph.addVertex(b);\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n",
                        "                };\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnectGraph_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnectGraph_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "720-737:testNotConnectGraph_test3_decomposed": {
                    "start": 720,
                    "end": 737,
                    "body": [
                        "    public void testNotConnectGraph_test3_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        graph.addVertex(a);\n",
                        "        graph.addVertex(b);\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n",
                        "                };\n",
                        "        findShortestPath(graph);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnectGraph_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnectGraph_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "710-717:testNotConnectGraph_test2_decomposed": {
                    "start": 710,
                    "end": 717,
                    "body": [
                        "    public void testNotConnectGraph_test2_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        graph.addVertex(a);\n",
                        "        graph.addVertex(b);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnectGraph_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnectGraph_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "702-707:testNotConnectGraph_test1_decomposed": {
                    "start": 702,
                    "end": 707,
                    "body": [
                        "    public void testNotConnectGraph_test1_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        final BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnectGraph_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnectGraph_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "695-699:testNotConnectGraph_test0_decomposed": {
                    "start": 695,
                    "end": 699,
                    "body": [
                        "    public void testNotConnectGraph_test0_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnectGraph_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnectGraph_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "627-692:testFindShortestPathAndVerify_test17_decomposed": {
                    "start": 627,
                    "end": 692,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test17_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex start = new BaseLabeledVertex(\"start\");\n",
                        "        BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        BaseLabeledVertex c = new BaseLabeledVertex(\"c\");\n",
                        "        BaseLabeledVertex d = new BaseLabeledVertex(\"d\");\n",
                        "        BaseLabeledVertex e = new BaseLabeledVertex(\"e\");\n",
                        "        BaseLabeledVertex goal = new BaseLabeledVertex(\"goal\");\n",
                        "        graph.addVertex(start);\n",
                        "        graph.addVertex(a);\n",
                        "        graph.addVertex(b);\n",
                        "        graph.addVertex(c);\n",
                        "        graph.addVertex(d);\n",
                        "        graph.addVertex(e);\n",
                        "        graph.addVertex(goal);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> a\", 1.5D), a);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> d\", 2D), d);\n",
                        "        graph.addEdge(a, new BaseLabeledWeightedEdge<Double>(\"a <-> b\", 2D), b);\n",
                        "        graph.addEdge(b, new BaseLabeledWeightedEdge<Double>(\"b <-> c\", 3D), c);\n",
                        "        graph.addEdge(c, new BaseLabeledWeightedEdge<Double>(\"c <-> goal\", 3D), goal);\n",
                        "        graph.addEdge(d, new BaseLabeledWeightedEdge<Double>(\"d <-> e\", 3D), e);\n",
                        "        graph.addEdge(e, new BaseLabeledWeightedEdge<Double>(\"e <-> goal\", 2D), goal);\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        heuristics.put(a, 4D);\n",
                        "        heuristics.put(b, 2D);\n",
                        "        heuristics.put(c, 4D);\n",
                        "        heuristics.put(d, 4.5D);\n",
                        "        heuristics.put(e, 2D);\n",
                        "        heuristics.put(goal, 6D);\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n",
                        "                };\n",
                        "        InMemoryWeightedPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> expected =\n",
                        "                new InMemoryWeightedPath<\n",
                        "                        BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>(\n",
                        "                        start,\n",
                        "                        goal,\n",
                        "                        new DoubleWeightBaseOperations(),\n",
                        "                        new BaseWeightedEdge<Double>());\n",
                        "        expected.addConnectionInTail(\n",
                        "                start, new BaseLabeledWeightedEdge<Double>(\"start <-> a\", 1.5D), a);\n",
                        "        expected.addConnectionInTail(a, new BaseLabeledWeightedEdge<Double>(\"a <-> b\", 2D), b);\n",
                        "        expected.addConnectionInTail(b, new BaseLabeledWeightedEdge<Double>(\"b <-> c\", 3D), c);\n",
                        "        expected.addConnectionInTail(\n",
                        "                c, new BaseLabeledWeightedEdge<Double>(\"c <-> goal\", 3D), goal);\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(start);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(start).to(goal);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(start).to(goal).applyingAStar(new DoubleWeightBaseOperations());\n",
                        "        Path<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> actual =\n",
                        "                findShortestPath(graph)\n",
                        "                        .whereEdgesHaveWeights(new BaseWeightedEdge<Double>())\n",
                        "                        .from(start)\n",
                        "                        .to(goal)\n",
                        "                        .applyingAStar(new DoubleWeightBaseOperations())\n",
                        "                        .withHeuristic(heuristic);\n",
                        "        assertEquals(expected, actual);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test17_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "InMemoryWeightedPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.weight.Monoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/HeuristicBuilder",
                            "withHeuristic(org.apache.commons.graph.shortestpath.Heuristic)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/ShortestPathAlgorithmSelector",
                            "applyingAStar(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>(java.lang.String,java.lang.Double)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(org.apache.commons.graph.model.BaseLabeledVertex,java.lang.Double)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "addConnectionInTail(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test17_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "560-624:testFindShortestPathAndVerify_test16_decomposed": {
                    "start": 560,
                    "end": 624,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test16_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex start = new BaseLabeledVertex(\"start\");\n",
                        "        BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        BaseLabeledVertex c = new BaseLabeledVertex(\"c\");\n",
                        "        BaseLabeledVertex d = new BaseLabeledVertex(\"d\");\n",
                        "        BaseLabeledVertex e = new BaseLabeledVertex(\"e\");\n",
                        "        BaseLabeledVertex goal = new BaseLabeledVertex(\"goal\");\n",
                        "        graph.addVertex(start);\n",
                        "        graph.addVertex(a);\n",
                        "        graph.addVertex(b);\n",
                        "        graph.addVertex(c);\n",
                        "        graph.addVertex(d);\n",
                        "        graph.addVertex(e);\n",
                        "        graph.addVertex(goal);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> a\", 1.5D), a);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> d\", 2D), d);\n",
                        "        graph.addEdge(a, new BaseLabeledWeightedEdge<Double>(\"a <-> b\", 2D), b);\n",
                        "        graph.addEdge(b, new BaseLabeledWeightedEdge<Double>(\"b <-> c\", 3D), c);\n",
                        "        graph.addEdge(c, new BaseLabeledWeightedEdge<Double>(\"c <-> goal\", 3D), goal);\n",
                        "        graph.addEdge(d, new BaseLabeledWeightedEdge<Double>(\"d <-> e\", 3D), e);\n",
                        "        graph.addEdge(e, new BaseLabeledWeightedEdge<Double>(\"e <-> goal\", 2D), goal);\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        heuristics.put(a, 4D);\n",
                        "        heuristics.put(b, 2D);\n",
                        "        heuristics.put(c, 4D);\n",
                        "        heuristics.put(d, 4.5D);\n",
                        "        heuristics.put(e, 2D);\n",
                        "        heuristics.put(goal, 6D);\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n",
                        "                };\n",
                        "        InMemoryWeightedPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> expected =\n",
                        "                new InMemoryWeightedPath<\n",
                        "                        BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>(\n",
                        "                        start,\n",
                        "                        goal,\n",
                        "                        new DoubleWeightBaseOperations(),\n",
                        "                        new BaseWeightedEdge<Double>());\n",
                        "        expected.addConnectionInTail(\n",
                        "                start, new BaseLabeledWeightedEdge<Double>(\"start <-> a\", 1.5D), a);\n",
                        "        expected.addConnectionInTail(a, new BaseLabeledWeightedEdge<Double>(\"a <-> b\", 2D), b);\n",
                        "        expected.addConnectionInTail(b, new BaseLabeledWeightedEdge<Double>(\"b <-> c\", 3D), c);\n",
                        "        expected.addConnectionInTail(\n",
                        "                c, new BaseLabeledWeightedEdge<Double>(\"c <-> goal\", 3D), goal);\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(start);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(start).to(goal);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(start).to(goal).applyingAStar(new DoubleWeightBaseOperations());\n",
                        "        Path<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> actual =\n",
                        "                findShortestPath(graph)\n",
                        "                        .whereEdgesHaveWeights(new BaseWeightedEdge<Double>())\n",
                        "                        .from(start)\n",
                        "                        .to(goal)\n",
                        "                        .applyingAStar(new DoubleWeightBaseOperations())\n",
                        "                        .withHeuristic(heuristic);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test16_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "InMemoryWeightedPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.weight.Monoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/HeuristicBuilder",
                            "withHeuristic(org.apache.commons.graph.shortestpath.Heuristic)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/ShortestPathAlgorithmSelector",
                            "applyingAStar(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>(java.lang.String,java.lang.Double)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(org.apache.commons.graph.model.BaseLabeledVertex,java.lang.Double)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "addConnectionInTail(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test16_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "500-557:testFindShortestPathAndVerify_test15_decomposed": {
                    "start": 500,
                    "end": 557,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test15_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex start = new BaseLabeledVertex(\"start\");\n",
                        "        BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        BaseLabeledVertex c = new BaseLabeledVertex(\"c\");\n",
                        "        BaseLabeledVertex d = new BaseLabeledVertex(\"d\");\n",
                        "        BaseLabeledVertex e = new BaseLabeledVertex(\"e\");\n",
                        "        BaseLabeledVertex goal = new BaseLabeledVertex(\"goal\");\n",
                        "        graph.addVertex(start);\n",
                        "        graph.addVertex(a);\n",
                        "        graph.addVertex(b);\n",
                        "        graph.addVertex(c);\n",
                        "        graph.addVertex(d);\n",
                        "        graph.addVertex(e);\n",
                        "        graph.addVertex(goal);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> a\", 1.5D), a);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> d\", 2D), d);\n",
                        "        graph.addEdge(a, new BaseLabeledWeightedEdge<Double>(\"a <-> b\", 2D), b);\n",
                        "        graph.addEdge(b, new BaseLabeledWeightedEdge<Double>(\"b <-> c\", 3D), c);\n",
                        "        graph.addEdge(c, new BaseLabeledWeightedEdge<Double>(\"c <-> goal\", 3D), goal);\n",
                        "        graph.addEdge(d, new BaseLabeledWeightedEdge<Double>(\"d <-> e\", 3D), e);\n",
                        "        graph.addEdge(e, new BaseLabeledWeightedEdge<Double>(\"e <-> goal\", 2D), goal);\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        heuristics.put(a, 4D);\n",
                        "        heuristics.put(b, 2D);\n",
                        "        heuristics.put(c, 4D);\n",
                        "        heuristics.put(d, 4.5D);\n",
                        "        heuristics.put(e, 2D);\n",
                        "        heuristics.put(goal, 6D);\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n",
                        "                };\n",
                        "        InMemoryWeightedPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> expected =\n",
                        "                new InMemoryWeightedPath<\n",
                        "                        BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>(\n",
                        "                        start,\n",
                        "                        goal,\n",
                        "                        new DoubleWeightBaseOperations(),\n",
                        "                        new BaseWeightedEdge<Double>());\n",
                        "        expected.addConnectionInTail(\n",
                        "                start, new BaseLabeledWeightedEdge<Double>(\"start <-> a\", 1.5D), a);\n",
                        "        expected.addConnectionInTail(a, new BaseLabeledWeightedEdge<Double>(\"a <-> b\", 2D), b);\n",
                        "        expected.addConnectionInTail(b, new BaseLabeledWeightedEdge<Double>(\"b <-> c\", 3D), c);\n",
                        "        expected.addConnectionInTail(\n",
                        "                c, new BaseLabeledWeightedEdge<Double>(\"c <-> goal\", 3D), goal);\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(start);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(start).to(goal);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(start).to(goal).applyingAStar(new DoubleWeightBaseOperations());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test15_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "InMemoryWeightedPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.weight.Monoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>(java.lang.String,java.lang.Double)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(org.apache.commons.graph.model.BaseLabeledVertex,java.lang.Double)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "addConnectionInTail(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/ShortestPathAlgorithmSelector",
                            "applyingAStar(org.apache.commons.graph.weight.OrderedMonoid)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test15_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "441-497:testFindShortestPathAndVerify_test14_decomposed": {
                    "start": 441,
                    "end": 497,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test14_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex start = new BaseLabeledVertex(\"start\");\n",
                        "        BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        BaseLabeledVertex c = new BaseLabeledVertex(\"c\");\n",
                        "        BaseLabeledVertex d = new BaseLabeledVertex(\"d\");\n",
                        "        BaseLabeledVertex e = new BaseLabeledVertex(\"e\");\n",
                        "        BaseLabeledVertex goal = new BaseLabeledVertex(\"goal\");\n",
                        "        graph.addVertex(start);\n",
                        "        graph.addVertex(a);\n",
                        "        graph.addVertex(b);\n",
                        "        graph.addVertex(c);\n",
                        "        graph.addVertex(d);\n",
                        "        graph.addVertex(e);\n",
                        "        graph.addVertex(goal);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> a\", 1.5D), a);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> d\", 2D), d);\n",
                        "        graph.addEdge(a, new BaseLabeledWeightedEdge<Double>(\"a <-> b\", 2D), b);\n",
                        "        graph.addEdge(b, new BaseLabeledWeightedEdge<Double>(\"b <-> c\", 3D), c);\n",
                        "        graph.addEdge(c, new BaseLabeledWeightedEdge<Double>(\"c <-> goal\", 3D), goal);\n",
                        "        graph.addEdge(d, new BaseLabeledWeightedEdge<Double>(\"d <-> e\", 3D), e);\n",
                        "        graph.addEdge(e, new BaseLabeledWeightedEdge<Double>(\"e <-> goal\", 2D), goal);\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        heuristics.put(a, 4D);\n",
                        "        heuristics.put(b, 2D);\n",
                        "        heuristics.put(c, 4D);\n",
                        "        heuristics.put(d, 4.5D);\n",
                        "        heuristics.put(e, 2D);\n",
                        "        heuristics.put(goal, 6D);\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n",
                        "                };\n",
                        "        InMemoryWeightedPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> expected =\n",
                        "                new InMemoryWeightedPath<\n",
                        "                        BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>(\n",
                        "                        start,\n",
                        "                        goal,\n",
                        "                        new DoubleWeightBaseOperations(),\n",
                        "                        new BaseWeightedEdge<Double>());\n",
                        "        expected.addConnectionInTail(\n",
                        "                start, new BaseLabeledWeightedEdge<Double>(\"start <-> a\", 1.5D), a);\n",
                        "        expected.addConnectionInTail(a, new BaseLabeledWeightedEdge<Double>(\"a <-> b\", 2D), b);\n",
                        "        expected.addConnectionInTail(b, new BaseLabeledWeightedEdge<Double>(\"b <-> c\", 3D), c);\n",
                        "        expected.addConnectionInTail(\n",
                        "                c, new BaseLabeledWeightedEdge<Double>(\"c <-> goal\", 3D), goal);\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(start);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(start).to(goal);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test14_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "InMemoryWeightedPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.weight.Monoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>(java.lang.String,java.lang.Double)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(org.apache.commons.graph.model.BaseLabeledVertex,java.lang.Double)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "addConnectionInTail(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test14_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "383-438:testFindShortestPathAndVerify_test13_decomposed": {
                    "start": 383,
                    "end": 438,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test13_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex start = new BaseLabeledVertex(\"start\");\n",
                        "        BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        BaseLabeledVertex c = new BaseLabeledVertex(\"c\");\n",
                        "        BaseLabeledVertex d = new BaseLabeledVertex(\"d\");\n",
                        "        BaseLabeledVertex e = new BaseLabeledVertex(\"e\");\n",
                        "        BaseLabeledVertex goal = new BaseLabeledVertex(\"goal\");\n",
                        "        graph.addVertex(start);\n",
                        "        graph.addVertex(a);\n",
                        "        graph.addVertex(b);\n",
                        "        graph.addVertex(c);\n",
                        "        graph.addVertex(d);\n",
                        "        graph.addVertex(e);\n",
                        "        graph.addVertex(goal);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> a\", 1.5D), a);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> d\", 2D), d);\n",
                        "        graph.addEdge(a, new BaseLabeledWeightedEdge<Double>(\"a <-> b\", 2D), b);\n",
                        "        graph.addEdge(b, new BaseLabeledWeightedEdge<Double>(\"b <-> c\", 3D), c);\n",
                        "        graph.addEdge(c, new BaseLabeledWeightedEdge<Double>(\"c <-> goal\", 3D), goal);\n",
                        "        graph.addEdge(d, new BaseLabeledWeightedEdge<Double>(\"d <-> e\", 3D), e);\n",
                        "        graph.addEdge(e, new BaseLabeledWeightedEdge<Double>(\"e <-> goal\", 2D), goal);\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        heuristics.put(a, 4D);\n",
                        "        heuristics.put(b, 2D);\n",
                        "        heuristics.put(c, 4D);\n",
                        "        heuristics.put(d, 4.5D);\n",
                        "        heuristics.put(e, 2D);\n",
                        "        heuristics.put(goal, 6D);\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n",
                        "                };\n",
                        "        InMemoryWeightedPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> expected =\n",
                        "                new InMemoryWeightedPath<\n",
                        "                        BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>(\n",
                        "                        start,\n",
                        "                        goal,\n",
                        "                        new DoubleWeightBaseOperations(),\n",
                        "                        new BaseWeightedEdge<Double>());\n",
                        "        expected.addConnectionInTail(\n",
                        "                start, new BaseLabeledWeightedEdge<Double>(\"start <-> a\", 1.5D), a);\n",
                        "        expected.addConnectionInTail(a, new BaseLabeledWeightedEdge<Double>(\"a <-> b\", 2D), b);\n",
                        "        expected.addConnectionInTail(b, new BaseLabeledWeightedEdge<Double>(\"b <-> c\", 3D), c);\n",
                        "        expected.addConnectionInTail(\n",
                        "                c, new BaseLabeledWeightedEdge<Double>(\"c <-> goal\", 3D), goal);\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>()).from(start);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test13_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "InMemoryWeightedPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.weight.Monoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>(java.lang.String,java.lang.Double)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(org.apache.commons.graph.model.BaseLabeledVertex,java.lang.Double)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "addConnectionInTail(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test13_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "326-380:testFindShortestPathAndVerify_test12_decomposed": {
                    "start": 326,
                    "end": 380,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test12_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex start = new BaseLabeledVertex(\"start\");\n",
                        "        BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        BaseLabeledVertex c = new BaseLabeledVertex(\"c\");\n",
                        "        BaseLabeledVertex d = new BaseLabeledVertex(\"d\");\n",
                        "        BaseLabeledVertex e = new BaseLabeledVertex(\"e\");\n",
                        "        BaseLabeledVertex goal = new BaseLabeledVertex(\"goal\");\n",
                        "        graph.addVertex(start);\n",
                        "        graph.addVertex(a);\n",
                        "        graph.addVertex(b);\n",
                        "        graph.addVertex(c);\n",
                        "        graph.addVertex(d);\n",
                        "        graph.addVertex(e);\n",
                        "        graph.addVertex(goal);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> a\", 1.5D), a);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> d\", 2D), d);\n",
                        "        graph.addEdge(a, new BaseLabeledWeightedEdge<Double>(\"a <-> b\", 2D), b);\n",
                        "        graph.addEdge(b, new BaseLabeledWeightedEdge<Double>(\"b <-> c\", 3D), c);\n",
                        "        graph.addEdge(c, new BaseLabeledWeightedEdge<Double>(\"c <-> goal\", 3D), goal);\n",
                        "        graph.addEdge(d, new BaseLabeledWeightedEdge<Double>(\"d <-> e\", 3D), e);\n",
                        "        graph.addEdge(e, new BaseLabeledWeightedEdge<Double>(\"e <-> goal\", 2D), goal);\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        heuristics.put(a, 4D);\n",
                        "        heuristics.put(b, 2D);\n",
                        "        heuristics.put(c, 4D);\n",
                        "        heuristics.put(d, 4.5D);\n",
                        "        heuristics.put(e, 2D);\n",
                        "        heuristics.put(goal, 6D);\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n",
                        "                };\n",
                        "        InMemoryWeightedPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> expected =\n",
                        "                new InMemoryWeightedPath<\n",
                        "                        BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>(\n",
                        "                        start,\n",
                        "                        goal,\n",
                        "                        new DoubleWeightBaseOperations(),\n",
                        "                        new BaseWeightedEdge<Double>());\n",
                        "        expected.addConnectionInTail(\n",
                        "                start, new BaseLabeledWeightedEdge<Double>(\"start <-> a\", 1.5D), a);\n",
                        "        expected.addConnectionInTail(a, new BaseLabeledWeightedEdge<Double>(\"a <-> b\", 2D), b);\n",
                        "        expected.addConnectionInTail(b, new BaseLabeledWeightedEdge<Double>(\"b <-> c\", 3D), c);\n",
                        "        expected.addConnectionInTail(\n",
                        "                c, new BaseLabeledWeightedEdge<Double>(\"c <-> goal\", 3D), goal);\n",
                        "        findShortestPath(graph);\n",
                        "        findShortestPath(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Double>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test12_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "InMemoryWeightedPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.weight.Monoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>(java.lang.String,java.lang.Double)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(org.apache.commons.graph.model.BaseLabeledVertex,java.lang.Double)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "addConnectionInTail(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test12_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "270-323:testFindShortestPathAndVerify_test11_decomposed": {
                    "start": 270,
                    "end": 323,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test11_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex start = new BaseLabeledVertex(\"start\");\n",
                        "        BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        BaseLabeledVertex c = new BaseLabeledVertex(\"c\");\n",
                        "        BaseLabeledVertex d = new BaseLabeledVertex(\"d\");\n",
                        "        BaseLabeledVertex e = new BaseLabeledVertex(\"e\");\n",
                        "        BaseLabeledVertex goal = new BaseLabeledVertex(\"goal\");\n",
                        "        graph.addVertex(start);\n",
                        "        graph.addVertex(a);\n",
                        "        graph.addVertex(b);\n",
                        "        graph.addVertex(c);\n",
                        "        graph.addVertex(d);\n",
                        "        graph.addVertex(e);\n",
                        "        graph.addVertex(goal);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> a\", 1.5D), a);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> d\", 2D), d);\n",
                        "        graph.addEdge(a, new BaseLabeledWeightedEdge<Double>(\"a <-> b\", 2D), b);\n",
                        "        graph.addEdge(b, new BaseLabeledWeightedEdge<Double>(\"b <-> c\", 3D), c);\n",
                        "        graph.addEdge(c, new BaseLabeledWeightedEdge<Double>(\"c <-> goal\", 3D), goal);\n",
                        "        graph.addEdge(d, new BaseLabeledWeightedEdge<Double>(\"d <-> e\", 3D), e);\n",
                        "        graph.addEdge(e, new BaseLabeledWeightedEdge<Double>(\"e <-> goal\", 2D), goal);\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        heuristics.put(a, 4D);\n",
                        "        heuristics.put(b, 2D);\n",
                        "        heuristics.put(c, 4D);\n",
                        "        heuristics.put(d, 4.5D);\n",
                        "        heuristics.put(e, 2D);\n",
                        "        heuristics.put(goal, 6D);\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n",
                        "                };\n",
                        "        InMemoryWeightedPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> expected =\n",
                        "                new InMemoryWeightedPath<\n",
                        "                        BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>(\n",
                        "                        start,\n",
                        "                        goal,\n",
                        "                        new DoubleWeightBaseOperations(),\n",
                        "                        new BaseWeightedEdge<Double>());\n",
                        "        expected.addConnectionInTail(\n",
                        "                start, new BaseLabeledWeightedEdge<Double>(\"start <-> a\", 1.5D), a);\n",
                        "        expected.addConnectionInTail(a, new BaseLabeledWeightedEdge<Double>(\"a <-> b\", 2D), b);\n",
                        "        expected.addConnectionInTail(b, new BaseLabeledWeightedEdge<Double>(\"b <-> c\", 3D), c);\n",
                        "        expected.addConnectionInTail(\n",
                        "                c, new BaseLabeledWeightedEdge<Double>(\"c <-> goal\", 3D), goal);\n",
                        "        findShortestPath(graph);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test11_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "InMemoryWeightedPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.weight.Monoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>(java.lang.String,java.lang.Double)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(org.apache.commons.graph.model.BaseLabeledVertex,java.lang.Double)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "addConnectionInTail(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test11_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "215-267:testFindShortestPathAndVerify_test10_decomposed": {
                    "start": 215,
                    "end": 267,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test10_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex start = new BaseLabeledVertex(\"start\");\n",
                        "        BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        BaseLabeledVertex c = new BaseLabeledVertex(\"c\");\n",
                        "        BaseLabeledVertex d = new BaseLabeledVertex(\"d\");\n",
                        "        BaseLabeledVertex e = new BaseLabeledVertex(\"e\");\n",
                        "        BaseLabeledVertex goal = new BaseLabeledVertex(\"goal\");\n",
                        "        graph.addVertex(start);\n",
                        "        graph.addVertex(a);\n",
                        "        graph.addVertex(b);\n",
                        "        graph.addVertex(c);\n",
                        "        graph.addVertex(d);\n",
                        "        graph.addVertex(e);\n",
                        "        graph.addVertex(goal);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> a\", 1.5D), a);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> d\", 2D), d);\n",
                        "        graph.addEdge(a, new BaseLabeledWeightedEdge<Double>(\"a <-> b\", 2D), b);\n",
                        "        graph.addEdge(b, new BaseLabeledWeightedEdge<Double>(\"b <-> c\", 3D), c);\n",
                        "        graph.addEdge(c, new BaseLabeledWeightedEdge<Double>(\"c <-> goal\", 3D), goal);\n",
                        "        graph.addEdge(d, new BaseLabeledWeightedEdge<Double>(\"d <-> e\", 3D), e);\n",
                        "        graph.addEdge(e, new BaseLabeledWeightedEdge<Double>(\"e <-> goal\", 2D), goal);\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        heuristics.put(a, 4D);\n",
                        "        heuristics.put(b, 2D);\n",
                        "        heuristics.put(c, 4D);\n",
                        "        heuristics.put(d, 4.5D);\n",
                        "        heuristics.put(e, 2D);\n",
                        "        heuristics.put(goal, 6D);\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n",
                        "                };\n",
                        "        InMemoryWeightedPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> expected =\n",
                        "                new InMemoryWeightedPath<\n",
                        "                        BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>(\n",
                        "                        start,\n",
                        "                        goal,\n",
                        "                        new DoubleWeightBaseOperations(),\n",
                        "                        new BaseWeightedEdge<Double>());\n",
                        "        expected.addConnectionInTail(\n",
                        "                start, new BaseLabeledWeightedEdge<Double>(\"start <-> a\", 1.5D), a);\n",
                        "        expected.addConnectionInTail(a, new BaseLabeledWeightedEdge<Double>(\"a <-> b\", 2D), b);\n",
                        "        expected.addConnectionInTail(b, new BaseLabeledWeightedEdge<Double>(\"b <-> c\", 3D), c);\n",
                        "        expected.addConnectionInTail(\n",
                        "                c, new BaseLabeledWeightedEdge<Double>(\"c <-> goal\", 3D), goal);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test10_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "InMemoryWeightedPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.weight.Monoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>(java.lang.String,java.lang.Double)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(org.apache.commons.graph.model.BaseLabeledVertex,java.lang.Double)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "addConnectionInTail(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test10_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "164-212:testFindShortestPathAndVerify_test9_decomposed": {
                    "start": 164,
                    "end": 212,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test9_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex start = new BaseLabeledVertex(\"start\");\n",
                        "        BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        BaseLabeledVertex c = new BaseLabeledVertex(\"c\");\n",
                        "        BaseLabeledVertex d = new BaseLabeledVertex(\"d\");\n",
                        "        BaseLabeledVertex e = new BaseLabeledVertex(\"e\");\n",
                        "        BaseLabeledVertex goal = new BaseLabeledVertex(\"goal\");\n",
                        "        graph.addVertex(start);\n",
                        "        graph.addVertex(a);\n",
                        "        graph.addVertex(b);\n",
                        "        graph.addVertex(c);\n",
                        "        graph.addVertex(d);\n",
                        "        graph.addVertex(e);\n",
                        "        graph.addVertex(goal);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> a\", 1.5D), a);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> d\", 2D), d);\n",
                        "        graph.addEdge(a, new BaseLabeledWeightedEdge<Double>(\"a <-> b\", 2D), b);\n",
                        "        graph.addEdge(b, new BaseLabeledWeightedEdge<Double>(\"b <-> c\", 3D), c);\n",
                        "        graph.addEdge(c, new BaseLabeledWeightedEdge<Double>(\"c <-> goal\", 3D), goal);\n",
                        "        graph.addEdge(d, new BaseLabeledWeightedEdge<Double>(\"d <-> e\", 3D), e);\n",
                        "        graph.addEdge(e, new BaseLabeledWeightedEdge<Double>(\"e <-> goal\", 2D), goal);\n",
                        "        final Map<BaseLabeledVertex, Double> heuristics = new HashMap<BaseLabeledVertex, Double>();\n",
                        "        heuristics.put(a, 4D);\n",
                        "        heuristics.put(b, 2D);\n",
                        "        heuristics.put(c, 4D);\n",
                        "        heuristics.put(d, 4.5D);\n",
                        "        heuristics.put(e, 2D);\n",
                        "        heuristics.put(goal, 6D);\n",
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n",
                        "\n",
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n",
                        "                };\n",
                        "        InMemoryWeightedPath<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double> expected =\n",
                        "                new InMemoryWeightedPath<\n",
                        "                        BaseLabeledVertex, BaseLabeledWeightedEdge<Double>, Double>(\n",
                        "                        start,\n",
                        "                        goal,\n",
                        "                        new DoubleWeightBaseOperations(),\n",
                        "                        new BaseWeightedEdge<Double>());\n",
                        "        expected.addConnectionInTail(\n",
                        "                start, new BaseLabeledWeightedEdge<Double>(\"start <-> a\", 1.5D), a);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test9_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<BaseLabeledVertex,Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "InMemoryWeightedPath<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>,Double>(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.weight.Monoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations",
                            "DoubleWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Double>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>(java.lang.String,java.lang.Double)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(org.apache.commons.graph.model.BaseLabeledVertex,java.lang.Double)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/InMemoryWeightedPath",
                            "addConnectionInTail(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test9_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "137-161:testFindShortestPathAndVerify_test8_decomposed": {
                    "start": 137,
                    "end": 161,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test8_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex start = new BaseLabeledVertex(\"start\");\n",
                        "        BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        BaseLabeledVertex c = new BaseLabeledVertex(\"c\");\n",
                        "        BaseLabeledVertex d = new BaseLabeledVertex(\"d\");\n",
                        "        BaseLabeledVertex e = new BaseLabeledVertex(\"e\");\n",
                        "        BaseLabeledVertex goal = new BaseLabeledVertex(\"goal\");\n",
                        "        graph.addVertex(start);\n",
                        "        graph.addVertex(a);\n",
                        "        graph.addVertex(b);\n",
                        "        graph.addVertex(c);\n",
                        "        graph.addVertex(d);\n",
                        "        graph.addVertex(e);\n",
                        "        graph.addVertex(goal);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> a\", 1.5D), a);\n",
                        "        graph.addEdge(start, new BaseLabeledWeightedEdge<Double>(\"start <-> d\", 2D), d);\n",
                        "        graph.addEdge(a, new BaseLabeledWeightedEdge<Double>(\"a <-> b\", 2D), b);\n",
                        "        graph.addEdge(b, new BaseLabeledWeightedEdge<Double>(\"b <-> c\", 3D), c);\n",
                        "        graph.addEdge(c, new BaseLabeledWeightedEdge<Double>(\"c <-> goal\", 3D), goal);\n",
                        "        graph.addEdge(d, new BaseLabeledWeightedEdge<Double>(\"d <-> e\", 3D), e);\n",
                        "        graph.addEdge(e, new BaseLabeledWeightedEdge<Double>(\"e <-> goal\", 2D), goal);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(org.apache.commons.graph.model.BaseLabeledVertex,org.apache.commons.graph.model.BaseLabeledWeightedEdge,org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Double>(java.lang.String,java.lang.Double)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test8_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "117-134:testFindShortestPathAndVerify_test7_decomposed": {
                    "start": 117,
                    "end": 134,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test7_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex start = new BaseLabeledVertex(\"start\");\n",
                        "        BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        BaseLabeledVertex c = new BaseLabeledVertex(\"c\");\n",
                        "        BaseLabeledVertex d = new BaseLabeledVertex(\"d\");\n",
                        "        BaseLabeledVertex e = new BaseLabeledVertex(\"e\");\n",
                        "        BaseLabeledVertex goal = new BaseLabeledVertex(\"goal\");\n",
                        "        graph.addVertex(start);\n",
                        "        graph.addVertex(a);\n",
                        "        graph.addVertex(b);\n",
                        "        graph.addVertex(c);\n",
                        "        graph.addVertex(d);\n",
                        "        graph.addVertex(e);\n",
                        "        graph.addVertex(goal);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test7_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "104-114:testFindShortestPathAndVerify_test6_decomposed": {
                    "start": 104,
                    "end": 114,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test6_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex start = new BaseLabeledVertex(\"start\");\n",
                        "        BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        BaseLabeledVertex c = new BaseLabeledVertex(\"c\");\n",
                        "        BaseLabeledVertex d = new BaseLabeledVertex(\"d\");\n",
                        "        BaseLabeledVertex e = new BaseLabeledVertex(\"e\");\n",
                        "        BaseLabeledVertex goal = new BaseLabeledVertex(\"goal\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test6_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "92-101:testFindShortestPathAndVerify_test5_decomposed": {
                    "start": 92,
                    "end": 101,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test5_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex start = new BaseLabeledVertex(\"start\");\n",
                        "        BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        BaseLabeledVertex c = new BaseLabeledVertex(\"c\");\n",
                        "        BaseLabeledVertex d = new BaseLabeledVertex(\"d\");\n",
                        "        BaseLabeledVertex e = new BaseLabeledVertex(\"e\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test5_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "81-89:testFindShortestPathAndVerify_test4_decomposed": {
                    "start": 81,
                    "end": 89,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test4_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex start = new BaseLabeledVertex(\"start\");\n",
                        "        BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        BaseLabeledVertex c = new BaseLabeledVertex(\"c\");\n",
                        "        BaseLabeledVertex d = new BaseLabeledVertex(\"d\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "71-78:testFindShortestPathAndVerify_test3_decomposed": {
                    "start": 71,
                    "end": 78,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test3_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex start = new BaseLabeledVertex(\"start\");\n",
                        "        BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "        BaseLabeledVertex c = new BaseLabeledVertex(\"c\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "62-68:testFindShortestPathAndVerify_test2_decomposed": {
                    "start": 62,
                    "end": 68,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test2_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex start = new BaseLabeledVertex(\"start\");\n",
                        "        BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "        BaseLabeledVertex b = new BaseLabeledVertex(\"b\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "54-59:testFindShortestPathAndVerify_test1_decomposed": {
                    "start": 54,
                    "end": 59,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test1_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex start = new BaseLabeledVertex(\"start\");\n",
                        "        BaseLabeledVertex a = new BaseLabeledVertex(\"a\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "47-51:testFindShortestPathAndVerify_test0_decomposed": {
                    "start": 47,
                    "end": 51,
                    "body": [
                        "    public void testFindShortestPathAndVerify_test0_decomposed()  {\n",
                        "        UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>> graph =\n",
                        "                new UndirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Double>>();\n",
                        "        BaseLabeledVertex start = new BaseLabeledVertex(\"start\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindShortestPathAndVerify_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/UndirectedMutableGraph",
                            "UndirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Double>>()"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindShortestPathAndVerify_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                }
            },
            "fields": {},
            "is_enum": false,
            "python_class_declaration": "class AStarTestCase(unittest.TestCase):\n\n"
        },
        "new Heuristic<BaseLabeledVertex,Double>(...) { ... }": {
            "start": 196,
            "end": 196,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "AStarTestCase",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "198-201:applyHeuristic": {
                    "start": 198,
                    "end": 201,
                    "body": [
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "249-252:applyHeuristic": {
                    "start": 249,
                    "end": 252,
                    "body": [
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "304-307:applyHeuristic": {
                    "start": 304,
                    "end": 307,
                    "body": [
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "360-363:applyHeuristic": {
                    "start": 360,
                    "end": 363,
                    "body": [
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "417-420:applyHeuristic": {
                    "start": 417,
                    "end": 420,
                    "body": [
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "475-478:applyHeuristic": {
                    "start": 475,
                    "end": 478,
                    "body": [
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "534-537:applyHeuristic": {
                    "start": 534,
                    "end": 537,
                    "body": [
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "594-597:applyHeuristic": {
                    "start": 594,
                    "end": 597,
                    "body": [
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "661-664:applyHeuristic": {
                    "start": 661,
                    "end": 664,
                    "body": [
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "731-734:applyHeuristic": {
                    "start": 731,
                    "end": 734,
                    "body": [
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "751-754:applyHeuristic": {
                    "start": 751,
                    "end": 754,
                    "body": [
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "772-775:applyHeuristic": {
                    "start": 772,
                    "end": 775,
                    "body": [
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "794-797:applyHeuristic": {
                    "start": 794,
                    "end": 797,
                    "body": [
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "817-820:applyHeuristic": {
                    "start": 817,
                    "end": 820,
                    "body": [
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "841-844:applyHeuristic": {
                    "start": 841,
                    "end": 844,
                    "body": [
                        "                    public Double applyHeuristic(\n",
                        "                            BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                        return heuristics.get(current);\n",
                        "                    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "1001-1004:applyHeuristic": {
                    "start": 1001,
                    "end": 1004,
                    "body": [
                        "                        public Double applyHeuristic(\n",
                        "                                BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                            return heuristics.get(current);\n",
                        "                        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "1026-1029:applyHeuristic": {
                    "start": 1026,
                    "end": 1029,
                    "body": [
                        "                        public Double applyHeuristic(\n",
                        "                                BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                            return heuristics.get(current);\n",
                        "                        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "1052-1055:applyHeuristic": {
                    "start": 1052,
                    "end": 1055,
                    "body": [
                        "                        public Double applyHeuristic(\n",
                        "                                BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                            return heuristics.get(current);\n",
                        "                        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "1079-1082:applyHeuristic": {
                    "start": 1079,
                    "end": 1082,
                    "body": [
                        "                        public Double applyHeuristic(\n",
                        "                                BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                            return heuristics.get(current);\n",
                        "                        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "1107-1110:applyHeuristic": {
                    "start": 1107,
                    "end": 1110,
                    "body": [
                        "                        public Double applyHeuristic(\n",
                        "                                BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                            return heuristics.get(current);\n",
                        "                        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "1136-1139:applyHeuristic": {
                    "start": 1136,
                    "end": 1139,
                    "body": [
                        "                        public Double applyHeuristic(\n",
                        "                                BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                            return heuristics.get(current);\n",
                        "                        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "1166-1169:applyHeuristic": {
                    "start": 1166,
                    "end": 1169,
                    "body": [
                        "                        public Double applyHeuristic(\n",
                        "                                BaseLabeledVertex current, BaseLabeledVertex goal) {\n",
                        "                            return heuristics.get(current);\n",
                        "                        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Double",
                            "java.lang.Double"
                        ]
                    ],
                    "signature": "applyHeuristic(BaseLabeledVertex, BaseLabeledVertex)",
                    "parameters": [
                        "current",
                        "goal"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get"
                        ]
                    ],
                    "is_overload": true
                },
                "195-196:": {
                    "start": 195,
                    "end": 196,
                    "body": [
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "246-247:": {
                    "start": 246,
                    "end": 247,
                    "body": [
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "301-302:": {
                    "start": 301,
                    "end": 302,
                    "body": [
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "357-358:": {
                    "start": 357,
                    "end": 358,
                    "body": [
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "414-415:": {
                    "start": 414,
                    "end": 415,
                    "body": [
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "472-473:": {
                    "start": 472,
                    "end": 473,
                    "body": [
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "531-532:": {
                    "start": 531,
                    "end": 532,
                    "body": [
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "591-592:": {
                    "start": 591,
                    "end": 592,
                    "body": [
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "658-659:": {
                    "start": 658,
                    "end": 659,
                    "body": [
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "728-729:": {
                    "start": 728,
                    "end": 729,
                    "body": [
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "748-749:": {
                    "start": 748,
                    "end": 749,
                    "body": [
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "769-770:": {
                    "start": 769,
                    "end": 770,
                    "body": [
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "791-792:": {
                    "start": 791,
                    "end": 792,
                    "body": [
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "814-815:": {
                    "start": 814,
                    "end": 815,
                    "body": [
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "838-839:": {
                    "start": 838,
                    "end": 839,
                    "body": [
                        "        Heuristic<BaseLabeledVertex, Double> heuristic =\n",
                        "                new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "998-999:": {
                    "start": 998,
                    "end": 999,
                    "body": [
                        "            heuristic =\n",
                        "                    new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "1023-1024:": {
                    "start": 1023,
                    "end": 1024,
                    "body": [
                        "            heuristic =\n",
                        "                    new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "1049-1050:": {
                    "start": 1049,
                    "end": 1050,
                    "body": [
                        "            heuristic =\n",
                        "                    new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "1076-1077:": {
                    "start": 1076,
                    "end": 1077,
                    "body": [
                        "            heuristic =\n",
                        "                    new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "1104-1105:": {
                    "start": 1104,
                    "end": 1105,
                    "body": [
                        "            heuristic =\n",
                        "                    new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "1133-1134:": {
                    "start": 1133,
                    "end": 1134,
                    "body": [
                        "            heuristic =\n",
                        "                    new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "1163-1164:": {
                    "start": 1163,
                    "end": 1164,
                    "body": [
                        "            heuristic =\n",
                        "                    new Heuristic<BaseLabeledVertex, Double>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                }
            },
            "fields": {}
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import unittest",
        "import pytest",
        "import pathlib",
        "import io",
        "import os",
        "import unittest",
        "from src.main.org.apache.commons.graph.CommonsGraph import *",
        "from src.main.org.apache.commons.graph.Graph import *",
        "from src.main.org.apache.commons.graph.Mapper import *",
        "from src.main.org.apache.commons.graph.WeightedPath import *",
        "from src.test.org.apache.commons.graph.model.BaseLabeledVertex import *",
        "from src.test.org.apache.commons.graph.model.BaseLabeledWeightedEdge import *",
        "from src.test.org.apache.commons.graph.model.BaseWeightedEdge import *",
        "from src.main.org.apache.commons.graph.model.InMemoryWeightedPath import *",
        "from src.main.org.apache.commons.graph.model.UndirectedMutableGraph import *",
        "from src.main.org.apache.commons.graph.shortestpath.Heuristic import *",
        "from src.main.org.apache.commons.graph.shortestpath.HeuristicBuilder import *",
        "from src.main.org.apache.commons.graph.shortestpath.PathSourceSelector import *",
        "from src.main.org.apache.commons.graph.shortestpath.PathWeightedEdgesBuilder import *",
        "from src.main.org.apache.commons.graph.shortestpath.ShortestPathAlgorithmSelector import *",
        "from src.main.org.apache.commons.graph.shortestpath.TargetSourceSelector import *",
        "from src.main.org.apache.commons.graph.weight.Monoid import *",
        "from src.main.org.apache.commons.graph.weight.OrderedMonoid import *",
        "from src.main.org.apache.commons.graph.weight.primitive.DoubleWeightBaseOperations import *"
    ]
}