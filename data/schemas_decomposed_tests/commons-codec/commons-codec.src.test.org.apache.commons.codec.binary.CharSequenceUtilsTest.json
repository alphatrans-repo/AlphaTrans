{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-codec/src/test/java/org/apache/commons/codec/binary/CharSequenceUtilsTest.java",
    "imports": {
        "24-24:import Test": {
            "start": 24,
            "end": 24,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "23-23:import Assert": {
            "start": 23,
            "end": 23,
            "body": [
                "import org.junit.Assert;\n"
            ]
        },
        "20-20:import static Assert.assertEquals": {
            "start": 20,
            "end": 20,
            "body": [
                "import static org.junit.Assert.assertEquals;\n"
            ]
        },
        "21-21:import static Assert.assertTrue": {
            "start": 21,
            "end": 21,
            "body": [
                "import static org.junit.Assert.assertTrue;\n"
            ]
        }
    },
    "classes": {
        "CharSequenceUtilsTest": {
            "start": 33,
            "end": 33,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "RunTest",
                "TestData",
                "new RunTest(...) { ... }",
                "new RunTest(...) { ... }",
                "new RunTest(...) { ... }"
            ],
            "implements": [],
            "extends": [],
            "methods": {
                "170-172:testConstructor_test0_decomposed": {
                    "start": 170,
                    "end": 172,
                    "body": [
                        "    public void testConstructor_test0_decomposed()  {\n",
                        "        new CharSequenceUtils();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testConstructor_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.CharSequenceUtils",
                            "CharSequenceUtils",
                            "CharSequenceUtils"
                        ]
                    ]
                },
                "133-167:testRegionMatches_test0_decomposed": {
                    "start": 133,
                    "end": 167,
                    "body": [
                        "    public void testRegionMatches_test0_decomposed()  {\n",
                        "        for (final TestData data : TEST_DATA) {\n",
                        "            new RunTest() {\n",
                        "                @Override\n",
                        "                boolean invoke() {\n",
                        "                    return data.source.regionMatches(\n",
                        "                            data.ignoreCase, data.toffset, data.other, data.ooffset, data.len);\n",
                        "                }\n",
                        "            }.run(data, \"String\");\n",
                        "            new RunTest() {\n",
                        "                @Override\n",
                        "                boolean invoke() {\n",
                        "                    return CharSequenceUtils.regionMatches(\n",
                        "                            data.source,\n",
                        "                            data.ignoreCase,\n",
                        "                            data.toffset,\n",
                        "                            data.other,\n",
                        "                            data.ooffset,\n",
                        "                            data.len);\n",
                        "                }\n",
                        "            }.run(data, \"CSString\");\n",
                        "            new RunTest() {\n",
                        "                @Override\n",
                        "                boolean invoke() {\n",
                        "                    return CharSequenceUtils.regionMatches(\n",
                        "                            new StringBuilder(data.source),\n",
                        "                            data.ignoreCase,\n",
                        "                            data.toffset,\n",
                        "                            data.other,\n",
                        "                            data.ooffset,\n",
                        "                            data.len);\n",
                        "                }\n",
                        "            }.run(data, \"CSNonString\");\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testRegionMatches_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.CharSequenceUtilsTest",
                            "RunTest",
                            "107-122:run"
                        ]
                    ]
                }
            },
            "fields": {
                "92-101:TEST_DATA": {
                    "start": 92,
                    "end": 101,
                    "body": [
                        "    private static final TestData[] TEST_DATA = {\n",
                        "        new TestData(1, true, 0, \"a\", null, 0, true, \"abc\", 0),\n",
                        "        new TestData(1, true, 0, \"a\", null, 0, true, \"abc\", 1),\n",
                        "        new TestData(1, true, 0, \"Abc\", null, 0, true, \"abc\", 3),\n",
                        "        new TestData(1, false, 0, \"Abc\", null, 0, false, \"abc\", 3),\n",
                        "        new TestData(1, true, 1, \"Abc\", null, 1, true, \"abc\", 2),\n",
                        "        new TestData(1, true, 1, \"Abc\", null, 1, false, \"abc\", 2),\n",
                        "        new TestData(1, true, 1, \"Abcd\", null, 1, true, \"abcD\", 2),\n",
                        "        new TestData(1, true, 1, \"Abcd\", null, 1, false, \"abcD\", 2),\n",
                        "    };\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "TestData[]",
                            "TestData[]"
                        ]
                    ]
                }
            }
        },
        "TestData": {
            "start": 35,
            "end": 35,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "CharSequenceUtilsTest",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "77-89:toString": {
                    "start": 77,
                    "end": 89,
                    "body": [
                        "        public String toString() {\n",
                        "            final StringBuilder sb = new StringBuilder();\n",
                        "            sb.append(source).append(\"[\").append(toffset).append(\"]\");\n",
                        "            sb.append(ignoreCase ? \" caseblind \" : \" samecase \");\n",
                        "            sb.append(other).append(\"[\").append(ooffset).append(\"]\");\n",
                        "            sb.append(\" \").append(len).append(\" => \");\n",
                        "            if (throwable != null) {\n",
                        "                sb.append(throwable);\n",
                        "            } else {\n",
                        "                sb.append(expected);\n",
                        "            }\n",
                        "            return sb.toString();\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "toString()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ]
                    ]
                },
                "45-74:TestData": {
                    "start": 45,
                    "end": 74,
                    "body": [
                        "        public TestData(\n",
                        "                int constructorId,\n",
                        "                final boolean expected,\n",
                        "                final int ooffset,\n",
                        "                final String source,\n",
                        "                final Class<? extends Throwable> throwable,\n",
                        "                final int toffset,\n",
                        "                final boolean ignoreCase,\n",
                        "                final String other,\n",
                        "                final int len) {\n",
                        "            if (constructorId == 0) {\n",
                        "                this.source = source;\n",
                        "                this.ignoreCase = ignoreCase;\n",
                        "                this.toffset = toffset;\n",
                        "                this.other = other;\n",
                        "                this.ooffset = ooffset;\n",
                        "                this.len = len;\n",
                        "                this.expected = false;\n",
                        "                this.throwable = throwable;\n",
                        "            } else {\n",
                        "                this.source = source;\n",
                        "                this.ignoreCase = ignoreCase;\n",
                        "                this.toffset = toffset;\n",
                        "                this.other = other;\n",
                        "                this.ooffset = ooffset;\n",
                        "                this.len = len;\n",
                        "                this.expected = expected;\n",
                        "                this.throwable = null;\n",
                        "            }\n",
                        "        }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "TestData(int, boolean, int, String, Class<? extends Throwable>, int, boolean, String, int)",
                    "parameters": [
                        "constructorId",
                        "expected",
                        "ooffset",
                        "source",
                        "throwable",
                        "toffset",
                        "ignoreCase",
                        "other",
                        "len"
                    ],
                    "calls": []
                }
            },
            "fields": {
                "43-43:throwable": {
                    "start": 43,
                    "end": 43,
                    "body": [
                        "        final Class<? extends Throwable> throwable;\n"
                    ],
                    "modifiers": [
                        "final"
                    ],
                    "types": [
                        [
                            "Class<? extends Throwable>",
                            "java.lang.Class<? extends Throwable>"
                        ]
                    ]
                },
                "42-42:expected": {
                    "start": 42,
                    "end": 42,
                    "body": [
                        "        final boolean expected;\n"
                    ],
                    "modifiers": [
                        "final"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "41-41:len": {
                    "start": 41,
                    "end": 41,
                    "body": [
                        "        final int len;\n"
                    ],
                    "modifiers": [
                        "final"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                },
                "40-40:ooffset": {
                    "start": 40,
                    "end": 40,
                    "body": [
                        "        final int ooffset;\n"
                    ],
                    "modifiers": [
                        "final"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                },
                "39-39:other": {
                    "start": 39,
                    "end": 39,
                    "body": [
                        "        final String other;\n"
                    ],
                    "modifiers": [
                        "final"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "38-38:toffset": {
                    "start": 38,
                    "end": 38,
                    "body": [
                        "        final int toffset;\n"
                    ],
                    "modifiers": [
                        "final"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                },
                "37-37:ignoreCase": {
                    "start": 37,
                    "end": 37,
                    "body": [
                        "        final boolean ignoreCase;\n"
                    ],
                    "modifiers": [
                        "final"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                },
                "36-36:source": {
                    "start": 36,
                    "end": 36,
                    "body": [
                        "        final String source;\n"
                    ],
                    "modifiers": [
                        "final"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                }
            }
        },
        "RunTest": {
            "start": 103,
            "end": 103,
            "is_abstract": true,
            "is_interface": false,
            "nested_inside": "CharSequenceUtilsTest",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "107-122:run": {
                    "start": 107,
                    "end": 122,
                    "body": [
                        "        void run(final TestData data, final String id) {\n",
                        "            if (data.throwable != null) {\n",
                        "                final String msg = id + \" Expected \" + data.throwable;\n",
                        "                try {\n",
                        "                    invoke();\n",
                        "                    Assert.fail(msg + \" but nothing was thrown.\");\n",
                        "                } catch (final Exception ex) {\n",
                        "                    assertTrue(\n",
                        "                            msg + \" but was \" + ex.getClass().getSimpleName(),\n",
                        "                            data.throwable.isAssignableFrom(ex.getClass()));\n",
                        "                }\n",
                        "            } else {\n",
                        "                final boolean stringCheck = invoke();\n",
                        "                assertEquals(id + \" Failed test \" + data, data.expected, stringCheck);\n",
                        "            }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "run(TestData, String)",
                    "parameters": [
                        "data",
                        "id"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.test.org.apache.commons.codec.binary.CharSequenceUtilsTest",
                            "RunTest",
                            "105-105:invoke"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail(java.lang.String)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "isAssignableFrom(java.lang.Class)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "getSimpleName()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "getClass()"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,java.lang.Object,java.lang.Object)"
                        ]
                    ]
                },
                "105-105:invoke": {
                    "start": 105,
                    "end": 105,
                    "body": [
                        "        abstract boolean invoke();\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "abstract"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "invoke()",
                    "parameters": [],
                    "calls": []
                }
            },
            "fields": {}
        },
        "new RunTest(...) { ... }": {
            "start": 135,
            "end": 135,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "CharSequenceUtilsTest",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "137-140:invoke": {
                    "start": 137,
                    "end": 140,
                    "body": [
                        "                boolean invoke() {\n",
                        "                    return data.source.regionMatches(\n",
                        "                            data.ignoreCase, data.toffset, data.other, data.ooffset, data.len);\n",
                        "                }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "invoke()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "regionMatches"
                        ]
                    ]
                },
                "135-135:": {
                    "start": 135,
                    "end": 135,
                    "body": [
                        "            new RunTest() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": []
                },
                "144-152:invoke": {
                    "start": 144,
                    "end": 152,
                    "body": [
                        "                boolean invoke() {\n",
                        "                    return CharSequenceUtils.regionMatches(\n",
                        "                            data.source,\n",
                        "                            data.ignoreCase,\n",
                        "                            data.toffset,\n",
                        "                            data.other,\n",
                        "                            data.ooffset,\n",
                        "                            data.len);\n",
                        "                }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "invoke()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.CharSequenceUtils",
                            "CharSequenceUtils",
                            "43-77:regionMatches"
                        ]
                    ]
                },
                "142-142:": {
                    "start": 142,
                    "end": 142,
                    "body": [
                        "            new RunTest() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": []
                },
                "156-164:invoke": {
                    "start": 156,
                    "end": 164,
                    "body": [
                        "                boolean invoke() {\n",
                        "                    return CharSequenceUtils.regionMatches(\n",
                        "                            new StringBuilder(data.source),\n",
                        "                            data.ignoreCase,\n",
                        "                            data.toffset,\n",
                        "                            data.other,\n",
                        "                            data.ooffset,\n",
                        "                            data.len);\n",
                        "                }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "invoke()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.CharSequenceUtils",
                            "CharSequenceUtils",
                            "43-77:regionMatches"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder"
                        ]
                    ]
                },
                "154-154:": {
                    "start": 154,
                    "end": 154,
                    "body": [
                        "            new RunTest() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": []
                }
            },
            "fields": {}
        }
    }
}