{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/benchmarktools/Benchmark.java",
    "imports": {
        "9-9:import PForDelta": {
            "start": 9,
            "end": 9,
            "body": [
                "import com.kamikaze.pfordelta.PForDelta;\n"
            ]
        },
        "42-42:import PrintWriter": {
            "start": 42,
            "end": 42,
            "body": [
                "import java.io.PrintWriter;\n"
            ]
        },
        "40-40:import File": {
            "start": 40,
            "end": 40,
            "body": [
                "import java.io.File;\n"
            ]
        },
        "41-41:import FileNotFoundException": {
            "start": 41,
            "end": 41,
            "body": [
                "import java.io.FileNotFoundException;\n"
            ]
        },
        "43-43:import DecimalFormat": {
            "start": 43,
            "end": 43,
            "body": [
                "import java.text.DecimalFormat;\n"
            ]
        },
        "44-44:import ArrayList": {
            "start": 44,
            "end": 44,
            "body": [
                "import java.util.ArrayList;\n"
            ]
        },
        "45-45:import Arrays": {
            "start": 45,
            "end": 45,
            "body": [
                "import java.util.Arrays;\n"
            ]
        },
        "20-20:import IntegerCODEC": {
            "start": 20,
            "end": 20,
            "body": [
                "import me.lemire.integercompression.IntegerCODEC;\n"
            ]
        },
        "11-11:import BinaryPacking": {
            "start": 11,
            "end": 11,
            "body": [
                "import me.lemire.integercompression.BinaryPacking;\n"
            ]
        },
        "19-19:import IntWrapper": {
            "start": 19,
            "end": 19,
            "body": [
                "import me.lemire.integercompression.IntWrapper;\n"
            ]
        },
        "12-12:import ByteIntegerCODEC": {
            "start": 12,
            "end": 12,
            "body": [
                "import me.lemire.integercompression.ByteIntegerCODEC;\n"
            ]
        },
        "13-13:import Composition": {
            "start": 13,
            "end": 13,
            "body": [
                "import me.lemire.integercompression.Composition;\n"
            ]
        },
        "14-14:import DeltaZigzagBinaryPacking": {
            "start": 14,
            "end": 14,
            "body": [
                "import me.lemire.integercompression.DeltaZigzagBinaryPacking;\n"
            ]
        },
        "15-15:import DeltaZigzagVariableByte": {
            "start": 15,
            "end": 15,
            "body": [
                "import me.lemire.integercompression.DeltaZigzagVariableByte;\n"
            ]
        },
        "16-16:import FastPFOR": {
            "start": 16,
            "end": 16,
            "body": [
                "import me.lemire.integercompression.FastPFOR;\n"
            ]
        },
        "17-17:import FastPFOR128": {
            "start": 17,
            "end": 17,
            "body": [
                "import me.lemire.integercompression.FastPFOR128;\n"
            ]
        },
        "18-18:import GroupSimple9": {
            "start": 18,
            "end": 18,
            "body": [
                "import me.lemire.integercompression.GroupSimple9;\n"
            ]
        },
        "21-21:import JustCopy": {
            "start": 21,
            "end": 21,
            "body": [
                "import me.lemire.integercompression.JustCopy;\n"
            ]
        },
        "22-22:import NewPFD": {
            "start": 22,
            "end": 22,
            "body": [
                "import me.lemire.integercompression.NewPFD;\n"
            ]
        },
        "23-23:import NewPFDS16": {
            "start": 23,
            "end": 23,
            "body": [
                "import me.lemire.integercompression.NewPFDS16;\n"
            ]
        },
        "24-24:import NewPFDS9": {
            "start": 24,
            "end": 24,
            "body": [
                "import me.lemire.integercompression.NewPFDS9;\n"
            ]
        },
        "25-25:import OptPFD": {
            "start": 25,
            "end": 25,
            "body": [
                "import me.lemire.integercompression.OptPFD;\n"
            ]
        },
        "26-26:import OptPFDS16": {
            "start": 26,
            "end": 26,
            "body": [
                "import me.lemire.integercompression.OptPFDS16;\n"
            ]
        },
        "27-27:import OptPFDS9": {
            "start": 27,
            "end": 27,
            "body": [
                "import me.lemire.integercompression.OptPFDS9;\n"
            ]
        },
        "28-28:import Simple16": {
            "start": 28,
            "end": 28,
            "body": [
                "import me.lemire.integercompression.Simple16;\n"
            ]
        },
        "29-29:import Simple9": {
            "start": 29,
            "end": 29,
            "body": [
                "import me.lemire.integercompression.Simple9;\n"
            ]
        },
        "30-30:import VariableByte": {
            "start": 30,
            "end": 30,
            "body": [
                "import me.lemire.integercompression.VariableByte;\n"
            ]
        },
        "33-33:import IntegratedByteIntegerCODEC": {
            "start": 33,
            "end": 33,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedByteIntegerCODEC;\n"
            ]
        },
        "35-35:import IntegratedIntegerCODEC": {
            "start": 35,
            "end": 35,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedIntegerCODEC;\n"
            ]
        },
        "31-31:import Delta": {
            "start": 31,
            "end": 31,
            "body": [
                "import me.lemire.integercompression.differential.Delta;\n"
            ]
        },
        "32-32:import IntegratedBinaryPacking": {
            "start": 32,
            "end": 32,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedBinaryPacking;\n"
            ]
        },
        "34-34:import IntegratedComposition": {
            "start": 34,
            "end": 34,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedComposition;\n"
            ]
        },
        "36-36:import IntegratedVariableByte": {
            "start": 36,
            "end": 36,
            "body": [
                "import me.lemire.integercompression.differential.IntegratedVariableByte;\n"
            ]
        },
        "37-37:import XorBinaryPacking": {
            "start": 37,
            "end": 37,
            "body": [
                "import me.lemire.integercompression.differential.XorBinaryPacking;\n"
            ]
        },
        "38-38:import ClusteredDataGenerator": {
            "start": 38,
            "end": 38,
            "body": [
                "import me.lemire.integercompression.synth.ClusteredDataGenerator;\n"
            ]
        }
    },
    "classes": {
        "Benchmark": {
            "start": 54,
            "end": 54,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "350-447:testKamikaze": {
                    "start": 350,
                    "end": 447,
                    "body": [
                        "        public static void testKamikaze(int[][] data, int repeat,\n",
                        "                boolean verbose) {\n",
                        "                DecimalFormat df = new DecimalFormat(\"0.00\");\n",
                        "                DecimalFormat dfspeed = new DecimalFormat(\"0\");\n",
                        "                if (verbose)\n",
                        "                        System.out.println(\"# kamikaze PForDelta\");\n",
                        "                if (verbose)\n",
                        "                        System.out\n",
                        "                                .println(\"# bits per int, compress speed (mis), decompression speed (mis) \");\n",
                        "                long bef, aft;\n",
                        "                String line = \"\";\n",
                        "                int N = data.length;\n",
                        "                int totalsize = 0;\n",
                        "                int maxlength = 0;\n",
                        "                for (int k = 0; k < N; ++k) {\n",
                        "                        totalsize += data[k].length;\n",
                        "                        if (data[k].length > maxlength)\n",
                        "                                maxlength = data[k].length;\n",
                        "                }\n",
                        "                int[] buffer = new int[maxlength + 1024];\n",
                        "                /*\n",
                        "                 * 4x + 1024 to account for the possibility of some negative\n",
                        "                 * compression\n",
                        "                 */\n",
                        "                int size = 0;\n",
                        "                int comptime = 0;\n",
                        "                long decomptime = 0;\n",
                        "                for (int r = 0; r < repeat; ++r) {\n",
                        "                        size = 0;\n",
                        "                        for (int k = 0; k < N; ++k) {\n",
                        "                                int outpos = 0;\n",
                        "                                int[] backupdata = Arrays.copyOf(data[k],\n",
                        "                                        data[k].length);\n",
                        "                                //\n",
                        "                                bef = System.nanoTime() / 1000;\n",
                        "                                Delta.delta0(backupdata);\n",
                        "                                ArrayList<int[]> dataout = new ArrayList<int[]>(\n",
                        "                                        data[k].length / 128);\n",
                        "                                for (int K = 0; K < data[k].length; K += 128) {\n",
                        "                                        final int[] compressedbuf = PForDelta\n",
                        "                                                .compressOneBlockOpt(Arrays\n",
                        "                                                        .copyOfRange(\n",
                        "                                                                backupdata, K,\n",
                        "                                                                K + 128), 128);\n",
                        "                                        dataout.add(compressedbuf);\n",
                        "                                        outpos += compressedbuf.length;\n",
                        "                                }\n",
                        "                                aft = System.nanoTime() / 1000;\n",
                        "                                //\n",
                        "                                comptime += aft - bef;\n",
                        "                                final int thiscompsize = outpos;\n",
                        "                                size += thiscompsize;\n",
                        "                                //\n",
                        "                                bef = System.nanoTime() / 1000;\n",
                        "                                ArrayList<int[]> datauncomp = new ArrayList<int[]>(\n",
                        "                                        dataout.size());\n",
                        "                                int deltaoffset = 0;\n",
                        "\n",
                        "                                for (int[] compbuf : dataout) {\n",
                        "                                        int[] tmpbuf = new int[128];\n",
                        "                                        PForDelta.decompressOneBlock(tmpbuf,\n",
                        "                                                compbuf, 128);\n",
                        "                                        tmpbuf[0] += deltaoffset;\n",
                        "                                        Delta.fastinverseDelta0(tmpbuf);\n",
                        "                                        deltaoffset = tmpbuf[127];\n",
                        "                                        datauncomp.add(tmpbuf);\n",
                        "                                }\n",
                        "                                aft = System.nanoTime() / 1000;\n",
                        "                                //\n",
                        "                                decomptime += aft - bef;\n",
                        "                                if (datauncomp.size() * 128 != data[k].length)\n",
                        "                                        throw new RuntimeException(\n",
                        "                                                \"we have a bug (diff length) \"\n",
                        "                                                        + \" expected \"\n",
                        "                                                        + data[k].length\n",
                        "                                                        + \" got \"\n",
                        "                                                        + datauncomp.size()\n",
                        "                                                        * 128);\n",
                        "                                for (int m = 0; m < data[k].length; ++m)\n",
                        "                                        if (datauncomp.get(m / 128)[m % 128] != data[k][m]) {\n",
                        "                                                throw new RuntimeException(\n",
                        "                                                        \"we have a bug (actual difference), expected \"\n",
                        "                                                                + data[k][m]\n",
                        "                                                                + \" found \"\n",
                        "                                                                + buffer[m]\n",
                        "                                                                + \" at \" + m);\n",
                        "                                        }\n",
                        "\n",
                        "                        }\n",
                        "                }\n",
                        "\n",
                        "                line += \"\\t\" + df.format(size * 32.0 / totalsize);\n",
                        "                line += \"\\t\" + dfspeed.format(totalsize * repeat / (comptime));\n",
                        "                line += \"\\t\"\n",
                        "                        + dfspeed.format(totalsize * repeat / (decomptime));\n",
                        "                if (verbose)\n",
                        "                        System.out.println(line);\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testKamikaze(int[][], int, boolean)",
                    "parameters": [
                        "data",
                        "repeat",
                        "verbose"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/text/DecimalFormat",
                            "DecimalFormat(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "library",
                            "java.base/java/util/ArrayList",
                            "ArrayList<int[]>(int)"
                        ],
                        [
                            "library",
                            "java.base/java/util/ArrayList",
                            "size()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "nanoTime()"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                            "Delta",
                            "24-28:delta0"
                        ],
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDelta",
                            "PForDelta",
                            "70-102:compressOneBlockOpt"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOfRange(int[],int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/util/ArrayList",
                            "add(int[])"
                        ],
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDelta",
                            "PForDelta",
                            "115-152:decompressOneBlock"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                            "Delta",
                            "97-113:fastinverseDelta0"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/ArrayList",
                            "get(int)"
                        ],
                        [
                            "library",
                            "java.base/java/text/NumberFormat",
                            "format(double)"
                        ],
                        [
                            "library",
                            "java.base/java/text/NumberFormat",
                            "format(long)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def testKamikaze(data: typing.List[typing.List[int]], repeat: int, verbose: bool) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "308-338:main": {
                    "start": 308,
                    "end": 338,
                    "body": [
                        "        public static void main(String args[]) throws FileNotFoundException  {\n",
                        "                System.out\n",
                        "                        .println(\"# benchmark based on the ClusterData model from:\");\n",
                        "                System.out.println(\"# \t Vo Ngoc Anh and Alistair Moffat. \");\n",
                        "                System.out.println(\"#\t Index compression using 64-bit words.\");\n",
                        "                System.out\n",
                        "                        .println(\"# \t Softw. Pract. Exper.40, 2 (February 2010), 131-147. \");\n",
                        "                System.out.println();\n",
                        "\n",
                        "                PrintWriter writer = null;\n",
                        "                try {\n",
                        "                        File csvFile = new File(\n",
                        "                                String.format(\n",
                        "                                        \"benchmark-%1$tY%1$tm%1$tdT%1$tH%1$tM%1$tS.csv\",\n",
                        "                                        System.currentTimeMillis()));\n",
                        "                        writer = new PrintWriter(csvFile);\n",
                        "                        System.out\n",
                        "                                .println(\"# Results will be written into a CSV file: \"\n",
                        "                                        + csvFile.getName());\n",
                        "                        System.out.println();\n",
                        "                        test(writer, 20, 18, 10);\n",
                        "                        System.out.println();\n",
                        "                        System.out\n",
                        "                                .println(\"Results were written into a CSV file: \"\n",
                        "                                        + csvFile.getName());\n",
                        "                } finally {\n",
                        "                        if (writer != null) {\n",
                        "                                writer.close();\n",
                        "                        }\n",
                        "                }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "main(String[])",
                    "parameters": [
                        "args"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println()"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "File(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "currentTimeMillis()"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "PrintWriter(java.io.File)"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "getName()"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.Benchmark",
                            "Benchmark",
                            "482-690:test"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "close()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def main(args: typing.List[typing.List[str]]) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "482-690:test": {
                    "start": 482,
                    "end": 690,
                    "body": [
                        "        private static void test(PrintWriter csvLog, int N, int nbr, int repeat) {\n",
                        "                csvLog.format(\"\\\"Algorithm\\\",\\\"Sparsity\\\",\\\"Bits per int\\\",\\\"Compress speed (MiS)\\\",\\\"Decompress speed (MiS)\\\"\\n\");\n",
                        "                ClusteredDataGenerator cdg = new ClusteredDataGenerator();\n",
                        "                final int max_sparsity = 31 - nbr;\n",
                        "                for (int sparsity = 1; sparsity < max_sparsity; ++sparsity) {\n",
                        "                        System.out.println(\"# sparsity \" + sparsity);\n",
                        "                        System.out.println(\"# generating random data...\");\n",
                        "                        int[][] data = generateTestData(cdg, N, nbr, sparsity);\n",
                        "                        System.out.println(\"# generating random data... ok.\");\n",
                        "\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                FastPFOR128.FastPFOR1281(), new VariableByte()), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                FastPFOR128.FastPFOR1281(), new VariableByte()), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                FastPFOR128.FastPFOR1281(), new VariableByte()), data,\n",
                        "                                repeat, true);\n",
                        "                        System.out.println();\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                FastPFOR.FastPFOR1(), new VariableByte()), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                FastPFOR.FastPFOR1(), new VariableByte()), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                FastPFOR.FastPFOR1(), new VariableByte()), data,\n",
                        "                                repeat, true);\n",
                        "                        System.out.println();\n",
                        "                        \n",
                        "                        \n",
                        "                        // TODO: support CSV log output.\n",
                        "                        testKamikaze(data, repeat, false);\n",
                        "                        testKamikaze(data, repeat, false);\n",
                        "                        testKamikaze(data, repeat, true);\n",
                        "                        System.out.println();\n",
                        "\n",
                        "                        testCodec(csvLog, sparsity, new IntegratedComposition(\n",
                        "                                new IntegratedBinaryPacking(),\n",
                        "                                new IntegratedVariableByte()), data, repeat,\n",
                        "                                false);\n",
                        "                        testCodec(csvLog, sparsity, new IntegratedComposition(\n",
                        "                                new IntegratedBinaryPacking(),\n",
                        "                                new IntegratedVariableByte()), data, repeat,\n",
                        "                                false);\n",
                        "                        testCodec(csvLog, sparsity, new IntegratedComposition(\n",
                        "                                new IntegratedBinaryPacking(),\n",
                        "                                new IntegratedVariableByte()), data, repeat,\n",
                        "                                true);\n",
                        "                        System.out.println();\n",
                        "\n",
                        "                        testCodec(csvLog, sparsity, new JustCopy(), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new JustCopy(), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new JustCopy(), data,\n",
                        "                                repeat, true);\n",
                        "                        System.out.println();\n",
                        "\n",
                        "                        testByteCodec(csvLog, sparsity, new VariableByte(),\n",
                        "                                data, repeat, false);\n",
                        "                        testByteCodec(csvLog, sparsity, new VariableByte(),\n",
                        "                                data, repeat, false);\n",
                        "                        testByteCodec(csvLog, sparsity, new VariableByte(),\n",
                        "                                data, repeat, true);\n",
                        "                        System.out.println();\n",
                        "\n",
                        "                        testByteCodec(csvLog, sparsity,\n",
                        "                                new IntegratedVariableByte(), data, repeat,\n",
                        "                                false);\n",
                        "                        testByteCodec(csvLog, sparsity,\n",
                        "                                new IntegratedVariableByte(), data, repeat,\n",
                        "                                false);\n",
                        "                        testByteCodec(csvLog, sparsity,\n",
                        "                                new IntegratedVariableByte(), data, repeat,\n",
                        "                                true);\n",
                        "                        System.out.println();\n",
                        "\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new BinaryPacking(), new VariableByte()), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new BinaryPacking(), new VariableByte()), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new BinaryPacking(), new VariableByte()), data,\n",
                        "                                repeat, true);\n",
                        "                        System.out.println();\n",
                        "\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new NewPFD(), new VariableByte()), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new NewPFD(), new VariableByte()), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new NewPFD(), new VariableByte()), data,\n",
                        "                                repeat, true);\n",
                        "                        System.out.println();\n",
                        "\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new NewPFDS9(), new VariableByte()), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new NewPFDS9(), new VariableByte()), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new NewPFDS9(), new VariableByte()), data,\n",
                        "                                repeat, true);\n",
                        "                        System.out.println();\n",
                        "\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new NewPFDS16(), new VariableByte()), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new NewPFDS16(), new VariableByte()), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new NewPFDS16(), new VariableByte()), data,\n",
                        "                                repeat, true);\n",
                        "                        System.out.println();\n",
                        "\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new OptPFD(), new VariableByte()), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new OptPFD(), new VariableByte()), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new OptPFD(), new VariableByte()), data,\n",
                        "                                repeat, true);\n",
                        "                        System.out.println();\n",
                        "\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new OptPFDS9(), new VariableByte()), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new OptPFDS9(), new VariableByte()), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new OptPFDS9(), new VariableByte()), data,\n",
                        "                                repeat, true);\n",
                        "                        System.out.println();\n",
                        "\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new OptPFDS16(), new VariableByte()), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new OptPFDS16(), new VariableByte()), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Composition(\n",
                        "                                new OptPFDS16(), new VariableByte()), data,\n",
                        "                                repeat, true);\n",
                        "                        System.out.println();\n",
                        "\n",
                        "\n",
                        "                        testCodec(csvLog, sparsity, new Simple16(), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Simple16(), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Simple16(), data,\n",
                        "                                repeat, true);\n",
                        "                        System.out.println();\n",
                        "\n",
                        "                        testCodec(csvLog, sparsity, new Simple9(), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Simple9(), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new Simple9(), data,\n",
                        "                                repeat, true);\n",
                        "                        System.out.println();\n",
                        "\n",
                        "                        testCodec(csvLog, sparsity, new GroupSimple9(), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new GroupSimple9(), data,\n",
                        "                                repeat, false);\n",
                        "                        testCodec(csvLog, sparsity, new GroupSimple9(), data,\n",
                        "                                repeat, true);\n",
                        "                        System.out.println();\n",
                        "\n",
                        "                        {\n",
                        "                                IntegerCODEC c = new Composition(\n",
                        "                                        new XorBinaryPacking(),\n",
                        "                                        new VariableByte());\n",
                        "                                testCodec(csvLog, sparsity, c, data, repeat,\n",
                        "                                        false);\n",
                        "                                testCodec(csvLog, sparsity, c, data, repeat,\n",
                        "                                        false);\n",
                        "                                testCodec(csvLog, sparsity, c, data, repeat,\n",
                        "                                        true);\n",
                        "                                System.out.println();\n",
                        "                        }\n",
                        "\n",
                        "                        {\n",
                        "                                IntegerCODEC c = new Composition(\n",
                        "                                        new DeltaZigzagBinaryPacking(),\n",
                        "                                        new DeltaZigzagVariableByte());\n",
                        "                                testCodec(csvLog, sparsity, c, data, repeat,\n",
                        "                                        false);\n",
                        "                                testCodec(csvLog, sparsity, c, data, repeat,\n",
                        "                                        false);\n",
                        "                                testCodec(csvLog, sparsity, c, data, repeat,\n",
                        "                                        true);\n",
                        "                                System.out.println();\n",
                        "                        }\n",
                        "\n",
                        "                }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test(PrintWriter, int, int, int)",
                    "parameters": [
                        "csvLog",
                        "N",
                        "nbr",
                        "repeat"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.synth.ClusteredDataGenerator",
                            "ClusteredDataGenerator",
                            "25-26:ClusteredDataGenerator"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.Benchmark",
                            "Benchmark",
                            "459-468:generateTestData"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.Benchmark",
                            "Benchmark",
                            "70-178:testCodec"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "71-73:FastPFOR1281"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println()"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                            "FastPFOR",
                            "90-92:FastPFOR1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.Benchmark",
                            "Benchmark",
                            "350-447:testKamikaze"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                            "IntegratedComposition",
                            "33-37:IntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.JustCopy",
                            "JustCopy",
                            "JustCopy"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.Benchmark",
                            "Benchmark",
                            "194-299:testByteCodec"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                            "BinaryPacking",
                            "BinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                            "NewPFD",
                            "45-46:NewPFD"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                            "NewPFDS9",
                            "43-44:NewPFDS9"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                            "NewPFDS16",
                            "44-45:NewPFDS16"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                            "OptPFD",
                            "43-44:OptPFD"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                            "OptPFDS9",
                            "42-43:OptPFDS9"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                            "OptPFDS16",
                            "42-43:OptPFDS16"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Simple16",
                            "Simple16",
                            "Simple16"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Simple9",
                            "Simple9",
                            "Simple9"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                            "GroupSimple9",
                            "GroupSimple9"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                            "XorBinaryPacking",
                            "XorBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking",
                            "DeltaZigzagBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagVariableByte",
                            "DeltaZigzagVariableByte",
                            "DeltaZigzagVariableByte"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __test(csvLog: typing.Union[io.TextIOWrapper, io.StringIO], N: int, nbr: int, repeat: int) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "459-468:generateTestData": {
                    "start": 459,
                    "end": 468,
                    "body": [
                        "        private static int[][] generateTestData(ClusteredDataGenerator dataGen,\n",
                        "                int N, int nbr, int sparsity) {\n",
                        "                final int[][] data = new int[N][];\n",
                        "                final int dataSize = (1 << (nbr + sparsity));\n",
                        "                for (int i = 0; i < N; ++i) {\n",
                        "                        data[i] = dataGen.generateClustered((1 << nbr),\n",
                        "                                dataSize);\n",
                        "                }\n",
                        "                return data;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "int[][]",
                            "int[][]"
                        ]
                    ],
                    "signature": "generateTestData(ClusteredDataGenerator, int, int, int)",
                    "parameters": [
                        "dataGen",
                        "N",
                        "nbr",
                        "sparsity"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.synth.ClusteredDataGenerator",
                            "ClusteredDataGenerator",
                            "69-73:generateClustered"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __generateTestData(dataGen: ClusteredDataGenerator, N: int, nbr: int, sparsity: int) -> typing.List[typing.List[int]]:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "194-299:testByteCodec": {
                    "start": 194,
                    "end": 299,
                    "body": [
                        "        private static void testByteCodec(PrintWriter csvLog, int sparsity,\n",
                        "                ByteIntegerCODEC c, int[][] data, int repeat, boolean verbose) {\n",
                        "                if (verbose) {\n",
                        "                        System.out.println(\"# \" + c.toString());\n",
                        "                        System.out\n",
                        "                                .println(\"# bits per int, compress speed (mis), decompression speed (mis) \");\n",
                        "                }\n",
                        "\n",
                        "                int N = data.length;\n",
                        "\n",
                        "                int totalSize = 0;\n",
                        "                int maxLength = 0;\n",
                        "                for (int k = 0; k < N; ++k) {\n",
                        "                        totalSize += data[k].length;\n",
                        "                        if (data[k].length > maxLength) {\n",
                        "                                maxLength = data[k].length;\n",
                        "                        }\n",
                        "                }\n",
                        "\n",
                        "                byte[] compressBuffer = new byte[8 * maxLength + 1024];\n",
                        "                int[] decompressBuffer = new int[maxLength + 1024];\n",
                        "\n",
                        "                // These variables hold time in microseconds (10^-6).\n",
                        "                long compressTime = 0;\n",
                        "                long decompressTime = 0;\n",
                        "\n",
                        "                int size = 0;\n",
                        "                IntWrapper inpos = IntWrapper.IntWrapper1();\n",
                        "                IntWrapper outpos = IntWrapper.IntWrapper1();\n",
                        "\n",
                        "                for (int r = 0; r < repeat; ++r) {\n",
                        "                        size = 0;\n",
                        "                        for (int k = 0; k < N; ++k) {\n",
                        "                                int[] backupdata = Arrays.copyOf(data[k],\n",
                        "                                        data[k].length);\n",
                        "\n",
                        "                                // compress data.\n",
                        "                                long beforeCompress = System.nanoTime() / 1000;\n",
                        "                                inpos.set(1);\n",
                        "                                outpos.set(0);\n",
                        "                                if (!(c instanceof IntegratedByteIntegerCODEC)) {\n",
                        "                                        Delta.delta0(backupdata);\n",
                        "                                }\n",
                        "                                c.compress1(backupdata, inpos, backupdata.length\n",
                        "                                        - inpos.get(), compressBuffer, outpos);\n",
                        "                                long afterCompress = System.nanoTime() / 1000;\n",
                        "\n",
                        "                                // measure time of compression.\n",
                        "                                compressTime += afterCompress - beforeCompress;\n",
                        "                                final int thiscompsize = outpos.get() + 1;\n",
                        "                                size += thiscompsize;\n",
                        "\n",
                        "                                // extract (uncompress) data\n",
                        "                                long beforeDecompress = System.nanoTime() / 1000;\n",
                        "                                inpos.set(0);\n",
                        "                                outpos.set(1);\n",
                        "                                decompressBuffer[0] = backupdata[0];\n",
                        "                                c.uncompress1(compressBuffer, inpos,\n",
                        "                                        thiscompsize - 1, decompressBuffer,\n",
                        "                                        outpos);\n",
                        "                                if (!(c instanceof IntegratedByteIntegerCODEC))\n",
                        "                                        Delta.fastinverseDelta0(decompressBuffer);\n",
                        "                                long afterDecompress = System.nanoTime() / 1000;\n",
                        "\n",
                        "                                // measure time of extraction (uncompression).\n",
                        "                                decompressTime += afterDecompress\n",
                        "                                        - beforeDecompress;\n",
                        "                                if (outpos.get() != data[k].length)\n",
                        "                                        throw new RuntimeException(\n",
                        "                                                \"we have a bug (diff length) \"\n",
                        "                                                        + c + \" expected \"\n",
                        "                                                        + data[k].length\n",
                        "                                                        + \" got \"\n",
                        "                                                        + outpos.get());\n",
                        "\n",
                        "                                // verify: compare original array with\n",
                        "                                // compressed and\n",
                        "                                // uncompressed.\n",
                        "                                for (int m = 0; m < outpos.get(); ++m) {\n",
                        "                                        if (decompressBuffer[m] != data[k][m]) {\n",
                        "                                                throw new RuntimeException(\n",
                        "                                                        \"we have a bug (actual difference), expected \"\n",
                        "                                                                + data[k][m]\n",
                        "                                                                + \" found \"\n",
                        "                                                                + decompressBuffer[m]\n",
                        "                                                                + \" at \" + m);\n",
                        "                                        }\n",
                        "                                }\n",
                        "                        }\n",
                        "                }\n",
                        "\n",
                        "                if (verbose) {\n",
                        "                        double bitsPerInt = size * 8.0 / totalSize;\n",
                        "                        long compressSpeed = totalSize * repeat\n",
                        "                                / (compressTime);\n",
                        "                        long decompressSpeed = totalSize * repeat\n",
                        "                                / (decompressTime);\n",
                        "                        System.out.println(String.format(\n",
                        "                                \"\\t%1$.2f\\t%2$d\\t%3$d\", bitsPerInt,\n",
                        "                                compressSpeed, decompressSpeed));\n",
                        "                        csvLog.format(\"\\\"%1$s\\\",%2$d,%3$.2f,%4$d,%5$d\\n\",\n",
                        "                                c.toString(), sparsity, bitsPerInt,\n",
                        "                                compressSpeed, decompressSpeed);\n",
                        "                        csvLog.flush();\n",
                        "                }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testByteCodec(PrintWriter, int, ByteIntegerCODEC, int[][], int, boolean)",
                    "parameters": [
                        "csvLog",
                        "sparsity",
                        "c",
                        "data",
                        "repeat",
                        "verbose"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "toString()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "nanoTime()"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "89-91:set"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                            "Delta",
                            "24-28:delta0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.ByteIntegerCODEC",
                            "ByteIntegerCODEC",
                            "36-38:compress1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.ByteIntegerCODEC",
                            "ByteIntegerCODEC",
                            "57-59:uncompress1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                            "Delta",
                            "97-113:fastinverseDelta0"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "flush()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __testByteCodec(csvLog: typing.Union[io.TextIOWrapper, io.StringIO], sparsity: int, c: ByteIntegerCODEC, data: typing.List[typing.List[int]], repeat: int, verbose: bool) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "70-178:testCodec": {
                    "start": 70,
                    "end": 178,
                    "body": [
                        "        private static void testCodec(PrintWriter csvLog, int sparsity,\n",
                        "                IntegerCODEC c, int[][] data, int repeat, boolean verbose) {\n",
                        "                if (verbose) {\n",
                        "                        System.out.println(\"# \" + c.toString());\n",
                        "                        System.out\n",
                        "                                .println(\"# bits per int, compress speed (mis), decompression speed (mis) \");\n",
                        "                }\n",
                        "\n",
                        "                int N = data.length;\n",
                        "\n",
                        "                int totalSize = 0;\n",
                        "                int maxLength = 0;\n",
                        "                for (int k = 0; k < N; ++k) {\n",
                        "                        totalSize += data[k].length;\n",
                        "                        if (data[k].length > maxLength) {\n",
                        "                                maxLength = data[k].length;\n",
                        "                        }\n",
                        "                }\n",
                        "\n",
                        "                // 4x + 1024 to account for the possibility of some negative\n",
                        "                // compression.\n",
                        "                int[] compressBuffer = new int[4 * maxLength + 1024];\n",
                        "                int[] decompressBuffer = new int[maxLength + 1024];\n",
                        "\n",
                        "                // These variables hold time in microseconds (10^-6).\n",
                        "                long compressTime = 0;\n",
                        "                long decompressTime = 0;\n",
                        "\n",
                        "                int size = 0;\n",
                        "                IntWrapper inpos = IntWrapper.IntWrapper1();\n",
                        "                IntWrapper outpos = IntWrapper.IntWrapper1();\n",
                        "\n",
                        "                for (int r = 0; r < repeat; ++r) {\n",
                        "                        size = 0;\n",
                        "                        for (int k = 0; k < N; ++k) {\n",
                        "                                int[] backupdata = Arrays.copyOf(data[k],\n",
                        "                                        data[k].length);\n",
                        "\n",
                        "                                // compress data.\n",
                        "                                long beforeCompress = System.nanoTime() / 1000;\n",
                        "                                inpos.set(1);\n",
                        "                                outpos.set(0);\n",
                        "                                if (!(c instanceof IntegratedIntegerCODEC)) {\n",
                        "                                        Delta.delta0(backupdata);\n",
                        "                                }\n",
                        "                                c.compress0(backupdata, inpos, backupdata.length\n",
                        "                                        - inpos.get(), compressBuffer, outpos);\n",
                        "                                long afterCompress = System.nanoTime() / 1000;\n",
                        "\n",
                        "                                // measure time of compression.\n",
                        "                                compressTime += afterCompress - beforeCompress;\n",
                        "                                final int thiscompsize = outpos.get() + 1;\n",
                        "                                size += thiscompsize;\n",
                        "\n",
                        "                                // extract (uncompress) data\n",
                        "                                long beforeDecompress = System.nanoTime() / 1000;\n",
                        "                                inpos.set(0);\n",
                        "                                outpos.set(1);\n",
                        "                                decompressBuffer[0] = backupdata[0];\n",
                        "                                c.uncompress0(compressBuffer, inpos,\n",
                        "                                        thiscompsize - 1, decompressBuffer,\n",
                        "                                        outpos);\n",
                        "                                if (!(c instanceof IntegratedIntegerCODEC))\n",
                        "                                        Delta.fastinverseDelta0(decompressBuffer);\n",
                        "                                long afterDecompress = System.nanoTime() / 1000;\n",
                        "\n",
                        "                                // measure time of extraction (uncompression).\n",
                        "                                decompressTime += afterDecompress\n",
                        "                                        - beforeDecompress;\n",
                        "                                if (outpos.get() != data[k].length)\n",
                        "                                        throw new RuntimeException(\n",
                        "                                                \"we have a bug (diff length) \"\n",
                        "                                                        + c + \" expected \"\n",
                        "                                                        + data[k].length\n",
                        "                                                        + \" got \"\n",
                        "                                                        + outpos.get());\n",
                        "\n",
                        "                                // verify: compare original array with\n",
                        "                                // compressed and\n",
                        "                                // uncompressed.\n",
                        "\n",
                        "                                for (int m = 0; m < outpos.get(); ++m) {\n",
                        "                                        if (decompressBuffer[m] != data[k][m]) {\n",
                        "                                                throw new RuntimeException(\n",
                        "                                                        \"we have a bug (actual difference), expected \"\n",
                        "                                                                + data[k][m]\n",
                        "                                                                + \" found \"\n",
                        "                                                                + decompressBuffer[m]\n",
                        "                                                                + \" at \" + m + \" out of \" + outpos.get());\n",
                        "                                        }\n",
                        "                                }\n",
                        "                        }\n",
                        "                }\n",
                        "\n",
                        "                if (verbose) {\n",
                        "                        double bitsPerInt = size * 32.0 / totalSize;\n",
                        "                        long compressSpeed = totalSize * repeat\n",
                        "                                / (compressTime);\n",
                        "                        long decompressSpeed = totalSize * repeat\n",
                        "                                / (decompressTime);\n",
                        "                        System.out.println(String.format(\n",
                        "                                \"\\t%1$.2f\\t%2$d\\t%3$d\", bitsPerInt,\n",
                        "                                compressSpeed, decompressSpeed));\n",
                        "                        csvLog.format(\"\\\"%1$s\\\",%2$d,%3$.2f,%4$d,%5$d\\n\",\n",
                        "                                c.toString(), sparsity, bitsPerInt,\n",
                        "                                compressSpeed, decompressSpeed);\n",
                        "                        csvLog.flush();\n",
                        "                }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testCodec(PrintWriter, int, IntegerCODEC, int[][], int, boolean)",
                    "parameters": [
                        "csvLog",
                        "sparsity",
                        "c",
                        "data",
                        "repeat",
                        "verbose"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "toString()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "nanoTime()"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "89-91:set"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                            "Delta",
                            "24-28:delta0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "57-59:uncompress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                            "Delta",
                            "97-113:fastinverseDelta0"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "flush()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    @staticmethod\n",
                        "    def __testCodec(csvLog: typing.Union[io.TextIOWrapper, io.StringIO], sparsity: int, c: IntegerCODEC, data: typing.List[typing.List[int]], repeat: int, verbose: bool) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                }
            },
            "fields": {},
            "is_enum": false,
            "python_class_declaration": "class Benchmark:\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "from io import StringIO",
        "import io",
        "import typing\nfrom typing import *",
        "import os",
        "from src.main.com.kamikaze.pfordelta.PForDelta import *",
        "from src.main.me.lemire.integercompression.BinaryPacking import *",
        "from src.main.me.lemire.integercompression.ByteIntegerCODEC import *",
        "from src.main.me.lemire.integercompression.Composition import *",
        "from src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking import *",
        "from src.main.me.lemire.integercompression.DeltaZigzagVariableByte import *",
        "from src.main.me.lemire.integercompression.FastPFOR import *",
        "from src.main.me.lemire.integercompression.FastPFOR128 import *",
        "from src.main.me.lemire.integercompression.GroupSimple9 import *",
        "from src.main.me.lemire.integercompression.IntWrapper import *",
        "from src.main.me.lemire.integercompression.IntegerCODEC import *",
        "from src.main.me.lemire.integercompression.JustCopy import *",
        "from src.main.me.lemire.integercompression.NewPFD import *",
        "from src.main.me.lemire.integercompression.NewPFDS16 import *",
        "from src.main.me.lemire.integercompression.NewPFDS9 import *",
        "from src.main.me.lemire.integercompression.OptPFD import *",
        "from src.main.me.lemire.integercompression.OptPFDS16 import *",
        "from src.main.me.lemire.integercompression.OptPFDS9 import *",
        "from src.main.me.lemire.integercompression.Simple16 import *",
        "from src.main.me.lemire.integercompression.Simple9 import *",
        "from src.main.me.lemire.integercompression.VariableByte import *",
        "from src.main.me.lemire.integercompression.differential.Delta import *",
        "from src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking import *",
        "from src.main.me.lemire.integercompression.differential.IntegratedByteIntegerCODEC import *",
        "from src.main.me.lemire.integercompression.differential.IntegratedComposition import *",
        "from src.main.me.lemire.integercompression.differential.IntegratedIntegerCODEC import *",
        "from src.main.me.lemire.integercompression.differential.IntegratedVariableByte import *",
        "from src.main.me.lemire.integercompression.differential.XorBinaryPacking import *",
        "from src.main.me.lemire.integercompression.synth.ClusteredDataGenerator import *"
    ]
}