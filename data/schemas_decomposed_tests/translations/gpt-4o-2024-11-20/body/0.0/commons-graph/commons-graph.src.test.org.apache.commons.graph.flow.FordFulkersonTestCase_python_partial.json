{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-graph/src/test/java/org/apache/commons/graph/flow/FordFulkersonTestCase.java",
    "imports": {
        "30-30:import DirectedMutableGraph": {
            "start": 30,
            "end": 30,
            "body": [
                "import org.apache.commons.graph.model.DirectedMutableGraph;\n"
            ]
        },
        "26-26:import AbstractGraphConnection": {
            "start": 26,
            "end": 26,
            "body": [
                "import org.apache.commons.graph.builder.AbstractGraphConnection;\n"
            ]
        },
        "32-32:import Test": {
            "start": 32,
            "end": 32,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "28-28:import BaseLabeledWeightedEdge": {
            "start": 28,
            "end": 28,
            "body": [
                "import org.apache.commons.graph.model.BaseLabeledWeightedEdge;\n"
            ]
        },
        "27-27:import BaseLabeledVertex": {
            "start": 27,
            "end": 27,
            "body": [
                "import org.apache.commons.graph.model.BaseLabeledVertex;\n"
            ]
        },
        "29-29:import BaseWeightedEdge": {
            "start": 29,
            "end": 29,
            "body": [
                "import org.apache.commons.graph.model.BaseWeightedEdge;\n"
            ]
        },
        "31-31:import IntegerWeightBaseOperations": {
            "start": 31,
            "end": 31,
            "body": [
                "import org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations;\n"
            ]
        },
        "24-24:import static Assert.assertEquals": {
            "start": 24,
            "end": 24,
            "body": [
                "import static org.junit.Assert.assertEquals;\n"
            ]
        },
        "23-23:import static CommonsGraph.newDirectedMutableGraph": {
            "start": 23,
            "end": 23,
            "body": [
                "import static org.apache.commons.graph.CommonsGraph.newDirectedMutableGraph;\n"
            ]
        },
        "22-22:import static CommonsGraph.findMaxFlow": {
            "start": 22,
            "end": 22,
            "body": [
                "import static org.apache.commons.graph.CommonsGraph.findMaxFlow;\n"
            ]
        }
    },
    "classes": {
        "FordFulkersonTestCase": {
            "start": 38,
            "end": 38,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }",
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }"
            ],
            "implements": [],
            "extends": [],
            "methods": {
                "861-873:testNullVertices_test4_decomposed": {
                    "start": 861,
                    "end": 873,
                    "body": [
                        "    public void testNullVertices_test4_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>();\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(null);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(null).to(null);\n",
                        "        findMaxFlow(graph)\n",
                        "                .whereEdgesHaveWeights(new BaseWeightedEdge<Integer>())\n",
                        "                .from(null)\n",
                        "                .to(null)\n",
                        "                .applyingFordFulkerson(new IntegerWeightBaseOperations());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/MaxFlowAlgorithmSelector",
                            "applyingFordFulkerson(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "851-858:testNullVertices_test3_decomposed": {
                    "start": 851,
                    "end": 858,
                    "body": [
                        "    public void testNullVertices_test3_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>();\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(null);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(null).to(null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "842-848:testNullVertices_test2_decomposed": {
                    "start": 842,
                    "end": 848,
                    "body": [
                        "    public void testNullVertices_test2_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>();\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "834-839:testNullVertices_test1_decomposed": {
                    "start": 834,
                    "end": 839,
                    "body": [
                        "    public void testNullVertices_test1_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>();\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "827-831:testNullVertices_test0_decomposed": {
                    "start": 827,
                    "end": 831,
                    "body": [
                        "    public void testNullVertices_test0_decomposed()  {\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                new DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>();\n",
                        "        findMaxFlow(graph);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullVertices_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/DirectedMutableGraph",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullVertices_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "808-824:testNullGraphAndVertices_test4_decomposed": {
                    "start": 808,
                    "end": 824,
                    "body": [
                        "    public void testNullGraphAndVertices_test4_decomposed()  {\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null);\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(null);\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(null).to(null);\n",
                        "        findMaxFlow(\n",
                        "                        (DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null)\n",
                        "                .whereEdgesHaveWeights(new BaseWeightedEdge<Integer>())\n",
                        "                .from(null)\n",
                        "                .to(null)\n",
                        "                .applyingFordFulkerson(new IntegerWeightBaseOperations());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraphAndVertices_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/MaxFlowAlgorithmSelector",
                            "applyingFordFulkerson(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraphAndVertices_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "796-805:testNullGraphAndVertices_test3_decomposed": {
                    "start": 796,
                    "end": 805,
                    "body": [
                        "    public void testNullGraphAndVertices_test3_decomposed()  {\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null);\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(null);\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(null).to(null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraphAndVertices_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraphAndVertices_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "786-793:testNullGraphAndVertices_test2_decomposed": {
                    "start": 786,
                    "end": 793,
                    "body": [
                        "    public void testNullGraphAndVertices_test2_decomposed()  {\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null);\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraphAndVertices_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraphAndVertices_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "778-783:testNullGraphAndVertices_test1_decomposed": {
                    "start": 778,
                    "end": 783,
                    "body": [
                        "    public void testNullGraphAndVertices_test1_decomposed()  {\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null);\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraphAndVertices_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraphAndVertices_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "772-775:testNullGraphAndVertices_test0_decomposed": {
                    "start": 772,
                    "end": 775,
                    "body": [
                        "    public void testNullGraphAndVertices_test0_decomposed()  {\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraphAndVertices_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraphAndVertices_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "751-769:testNullGraph_test6_decomposed": {
                    "start": 751,
                    "end": 769,
                    "body": [
                        "    public void testNullGraph_test6_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null);\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(d);\n",
                        "        findMaxFlow(\n",
                        "                        (DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null)\n",
                        "                .whereEdgesHaveWeights(new BaseWeightedEdge<Integer>())\n",
                        "                .from(a)\n",
                        "                .to(d)\n",
                        "                .applyingFordFulkerson(new IntegerWeightBaseOperations());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/MaxFlowAlgorithmSelector",
                            "applyingFordFulkerson(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test6_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "737-748:testNullGraph_test5_decomposed": {
                    "start": 737,
                    "end": 748,
                    "body": [
                        "    public void testNullGraph_test5_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null);\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(d);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test5_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "725-734:testNullGraph_test4_decomposed": {
                    "start": 725,
                    "end": 734,
                    "body": [
                        "    public void testNullGraph_test4_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null);\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "715-722:testNullGraph_test3_decomposed": {
                    "start": 715,
                    "end": 722,
                    "body": [
                        "    public void testNullGraph_test3_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null);\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "707-712:testNullGraph_test2_decomposed": {
                    "start": 707,
                    "end": 712,
                    "body": [
                        "    public void testNullGraph_test2_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        findMaxFlow((DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>)\n",
                        "                                null);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = NullPointerException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "701-704:testNullGraph_test1_decomposed": {
                    "start": 701,
                    "end": 704,
                    "body": [
                        "    public void testNullGraph_test1_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "696-698:testNullGraph_test0_decomposed": {
                    "start": 696,
                    "end": 698,
                    "body": [
                        "    public void testNullGraph_test0_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNullGraph_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNullGraph_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "663-693:testNotConnected_2_test8_decomposed": {
                    "start": 663,
                    "end": 693,
                    "body": [
                        "    public void testNotConnected_2_test8_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 0;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(d);\n",
                        "        Integer actual =\n",
                        "                findMaxFlow(graph)\n",
                        "                        .whereEdgesHaveWeights(new BaseWeightedEdge<Integer>())\n",
                        "                        .from(a)\n",
                        "                        .to(d)\n",
                        "                        .applyingFordFulkerson(new IntegerWeightBaseOperations());\n",
                        "        assertEquals(actual, expected);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnected_2_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/MaxFlowAlgorithmSelector",
                            "applyingFordFulkerson(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnected_2_test8_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "631-660:testNotConnected_2_test7_decomposed": {
                    "start": 631,
                    "end": 660,
                    "body": [
                        "    public void testNotConnected_2_test7_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 0;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(d);\n",
                        "        Integer actual =\n",
                        "                findMaxFlow(graph)\n",
                        "                        .whereEdgesHaveWeights(new BaseWeightedEdge<Integer>())\n",
                        "                        .from(a)\n",
                        "                        .to(d)\n",
                        "                        .applyingFordFulkerson(new IntegerWeightBaseOperations());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnected_2_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/MaxFlowAlgorithmSelector",
                            "applyingFordFulkerson(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnected_2_test7_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "605-628:testNotConnected_2_test6_decomposed": {
                    "start": 605,
                    "end": 628,
                    "body": [
                        "    public void testNotConnected_2_test6_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 0;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(d);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnected_2_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnected_2_test6_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "580-602:testNotConnected_2_test5_decomposed": {
                    "start": 580,
                    "end": 602,
                    "body": [
                        "    public void testNotConnected_2_test5_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 0;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnected_2_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnected_2_test5_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "556-577:testNotConnected_2_test4_decomposed": {
                    "start": 556,
                    "end": 577,
                    "body": [
                        "    public void testNotConnected_2_test4_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 0;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnected_2_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnected_2_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "533-553:testNotConnected_2_test3_decomposed": {
                    "start": 533,
                    "end": 553,
                    "body": [
                        "    public void testNotConnected_2_test3_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 0;\n",
                        "        findMaxFlow(graph);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnected_2_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnected_2_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "512-530:testNotConnected_2_test2_decomposed": {
                    "start": 512,
                    "end": 530,
                    "body": [
                        "    public void testNotConnected_2_test2_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                            }\n",
                        "                        });\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnected_2_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnected_2_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "506-509:testNotConnected_2_test1_decomposed": {
                    "start": 506,
                    "end": 509,
                    "body": [
                        "    public void testNotConnected_2_test1_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnected_2_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnected_2_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "501-503:testNotConnected_2_test0_decomposed": {
                    "start": 501,
                    "end": 503,
                    "body": [
                        "    public void testNotConnected_2_test0_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnected_2_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnected_2_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "471-498:testNotConnected_test8_decomposed": {
                    "start": 471,
                    "end": 498,
                    "body": [
                        "    public void testNotConnected_test8_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 0;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(d);\n",
                        "        Integer actual =\n",
                        "                findMaxFlow(graph)\n",
                        "                        .whereEdgesHaveWeights(new BaseWeightedEdge<Integer>())\n",
                        "                        .from(a)\n",
                        "                        .to(d)\n",
                        "                        .applyingFordFulkerson(new IntegerWeightBaseOperations());\n",
                        "        assertEquals(actual, expected);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnected_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/MaxFlowAlgorithmSelector",
                            "applyingFordFulkerson(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnected_test8_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "442-468:testNotConnected_test7_decomposed": {
                    "start": 442,
                    "end": 468,
                    "body": [
                        "    public void testNotConnected_test7_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 0;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(d);\n",
                        "        Integer actual =\n",
                        "                findMaxFlow(graph)\n",
                        "                        .whereEdgesHaveWeights(new BaseWeightedEdge<Integer>())\n",
                        "                        .from(a)\n",
                        "                        .to(d)\n",
                        "                        .applyingFordFulkerson(new IntegerWeightBaseOperations());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnected_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/MaxFlowAlgorithmSelector",
                            "applyingFordFulkerson(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnected_test7_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "419-439:testNotConnected_test6_decomposed": {
                    "start": 419,
                    "end": 439,
                    "body": [
                        "    public void testNotConnected_test6_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 0;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(d);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnected_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnected_test6_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "397-416:testNotConnected_test5_decomposed": {
                    "start": 397,
                    "end": 416,
                    "body": [
                        "    public void testNotConnected_test5_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 0;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnected_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnected_test5_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "376-394:testNotConnected_test4_decomposed": {
                    "start": 376,
                    "end": 394,
                    "body": [
                        "    public void testNotConnected_test4_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 0;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnected_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnected_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "356-373:testNotConnected_test3_decomposed": {
                    "start": 356,
                    "end": 373,
                    "body": [
                        "    public void testNotConnected_test3_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 0;\n",
                        "        findMaxFlow(graph);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnected_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnected_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "338-353:testNotConnected_test2_decomposed": {
                    "start": 338,
                    "end": 353,
                    "body": [
                        "    public void testNotConnected_test2_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                            }\n",
                        "                        });\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnected_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnected_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "332-335:testNotConnected_test1_decomposed": {
                    "start": 332,
                    "end": 335,
                    "body": [
                        "    public void testNotConnected_test1_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnected_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnected_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "327-329:testNotConnected_test0_decomposed": {
                    "start": 327,
                    "end": 329,
                    "body": [
                        "    public void testNotConnected_test0_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNotConnected_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testNotConnected_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "281-324:testFindMaxFlowAndVerify_test8_decomposed": {
                    "start": 281,
                    "end": 324,
                    "body": [
                        "    public void testFindMaxFlowAndVerify_test8_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> C\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 1))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> D\", 1000))\n",
                        "                                        .from(b)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1000))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 2000;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(d);\n",
                        "        Integer actual =\n",
                        "                findMaxFlow(graph)\n",
                        "                        .whereEdgesHaveWeights(new BaseWeightedEdge<Integer>())\n",
                        "                        .from(a)\n",
                        "                        .to(d)\n",
                        "                        .applyingFordFulkerson(new IntegerWeightBaseOperations());\n",
                        "        assertEquals(expected, actual);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindMaxFlowAndVerify_test8_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/MaxFlowAlgorithmSelector",
                            "applyingFordFulkerson(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindMaxFlowAndVerify_test8_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "236-278:testFindMaxFlowAndVerify_test7_decomposed": {
                    "start": 236,
                    "end": 278,
                    "body": [
                        "    public void testFindMaxFlowAndVerify_test7_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> C\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 1))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> D\", 1000))\n",
                        "                                        .from(b)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1000))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 2000;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(d);\n",
                        "        Integer actual =\n",
                        "                findMaxFlow(graph)\n",
                        "                        .whereEdgesHaveWeights(new BaseWeightedEdge<Integer>())\n",
                        "                        .from(a)\n",
                        "                        .to(d)\n",
                        "                        .applyingFordFulkerson(new IntegerWeightBaseOperations());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindMaxFlowAndVerify_test7_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/MaxFlowAlgorithmSelector",
                            "applyingFordFulkerson(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations",
                            "IntegerWeightBaseOperations"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindMaxFlowAndVerify_test7_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "197-233:testFindMaxFlowAndVerify_test6_decomposed": {
                    "start": 197,
                    "end": 233,
                    "body": [
                        "    public void testFindMaxFlowAndVerify_test6_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> C\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 1))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> D\", 1000))\n",
                        "                                        .from(b)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1000))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 2000;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a).to(d);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindMaxFlowAndVerify_test6_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/ToTailBuilder",
                            "to(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindMaxFlowAndVerify_test6_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "159-194:testFindMaxFlowAndVerify_test5_decomposed": {
                    "start": 159,
                    "end": 194,
                    "body": [
                        "    public void testFindMaxFlowAndVerify_test5_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> C\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 1))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> D\", 1000))\n",
                        "                                        .from(b)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1000))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 2000;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>()).from(a);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindMaxFlowAndVerify_test5_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FromHeadBuilder",
                            "from(org.apache.commons.graph.model.BaseLabeledVertex)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindMaxFlowAndVerify_test5_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "122-156:testFindMaxFlowAndVerify_test4_decomposed": {
                    "start": 122,
                    "end": 156,
                    "body": [
                        "    public void testFindMaxFlowAndVerify_test4_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> C\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 1))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> D\", 1000))\n",
                        "                                        .from(b)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1000))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 2000;\n",
                        "        findMaxFlow(graph);\n",
                        "        findMaxFlow(graph).whereEdgesHaveWeights(new BaseWeightedEdge<Integer>());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindMaxFlowAndVerify_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/flow/FlowWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseWeightedEdge",
                            "BaseWeightedEdge<Integer>()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindMaxFlowAndVerify_test4_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "86-119:testFindMaxFlowAndVerify_test3_decomposed": {
                    "start": 86,
                    "end": 119,
                    "body": [
                        "    public void testFindMaxFlowAndVerify_test3_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> C\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 1))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> D\", 1000))\n",
                        "                                        .from(b)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1000))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                            }\n",
                        "                        });\n",
                        "        final Integer expected = 2000;\n",
                        "        findMaxFlow(graph);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindMaxFlowAndVerify_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "124-128:findMaxFlow"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindMaxFlowAndVerify_test3_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "52-83:testFindMaxFlowAndVerify_test2_decomposed": {
                    "start": 52,
                    "end": 83,
                    "body": [
                        "    public void testFindMaxFlowAndVerify_test2_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n",
                        "\n",
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> C\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 1))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> D\", 1000))\n",
                        "                                        .from(b)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1000))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                            }\n",
                        "                        });\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindMaxFlowAndVerify_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindMaxFlowAndVerify_test2_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "46-49:testFindMaxFlowAndVerify_test1_decomposed": {
                    "start": 46,
                    "end": 49,
                    "body": [
                        "    public void testFindMaxFlowAndVerify_test1_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "        final BaseLabeledVertex d = new BaseLabeledVertex(\"D\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindMaxFlowAndVerify_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindMaxFlowAndVerify_test1_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "41-43:testFindMaxFlowAndVerify_test0_decomposed": {
                    "start": 41,
                    "end": 43,
                    "body": [
                        "    public void testFindMaxFlowAndVerify_test0_decomposed()  {\n",
                        "        final BaseLabeledVertex a = new BaseLabeledVertex(\"A\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testFindMaxFlowAndVerify_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testFindMaxFlowAndVerify_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                }
            },
            "fields": {},
            "is_enum": false,
            "python_class_declaration": "class FordFulkersonTestCase(unittest.TestCase):\n\n"
        },
        "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledWeightedEdge<Integer>>(...) { ... }": {
            "start": 57,
            "end": 58,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "FordFulkersonTestCase",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "60-81:connect0": {
                    "start": 60,
                    "end": 81,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> C\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 1))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> D\", 1000))\n",
                        "                                        .from(b)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1000))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "94-115:connect0": {
                    "start": 94,
                    "end": 115,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> C\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 1))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> D\", 1000))\n",
                        "                                        .from(b)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1000))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "130-151:connect0": {
                    "start": 130,
                    "end": 151,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> C\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 1))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> D\", 1000))\n",
                        "                                        .from(b)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1000))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "167-188:connect0": {
                    "start": 167,
                    "end": 188,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> C\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 1))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> D\", 1000))\n",
                        "                                        .from(b)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1000))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "205-226:connect0": {
                    "start": 205,
                    "end": 226,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> C\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 1))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> D\", 1000))\n",
                        "                                        .from(b)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1000))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "244-265:connect0": {
                    "start": 244,
                    "end": 265,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> C\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 1))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> D\", 1000))\n",
                        "                                        .from(b)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1000))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "289-310:connect0": {
                    "start": 289,
                    "end": 310,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                BaseLabeledVertex c = addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> C\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> C\", 1))\n",
                        "                                        .from(b)\n",
                        "                                        .to(c);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"B -> D\", 1000))\n",
                        "                                        .from(b)\n",
                        "                                        .to(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"C -> D\", 1000))\n",
                        "                                        .from(c)\n",
                        "                                        .to(d);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "346-351:connect0": {
                    "start": 346,
                    "end": 351,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": true
                },
                "364-369:connect0": {
                    "start": 364,
                    "end": 369,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": true
                },
                "384-389:connect0": {
                    "start": 384,
                    "end": 389,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": true
                },
                "405-410:connect0": {
                    "start": 405,
                    "end": 410,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": true
                },
                "427-432:connect0": {
                    "start": 427,
                    "end": 432,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": true
                },
                "450-455:connect0": {
                    "start": 450,
                    "end": 455,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": true
                },
                "479-484:connect0": {
                    "start": 479,
                    "end": 484,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ]
                    ],
                    "is_overload": true
                },
                "520-528:connect0": {
                    "start": 520,
                    "end": 528,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "541-549:connect0": {
                    "start": 541,
                    "end": 549,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "564-572:connect0": {
                    "start": 564,
                    "end": 572,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "588-596:connect0": {
                    "start": 588,
                    "end": 596,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "613-621:connect0": {
                    "start": 613,
                    "end": 621,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "639-647:connect0": {
                    "start": 639,
                    "end": 647,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "671-679:connect0": {
                    "start": 671,
                    "end": 679,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                addVertex(a);\n",
                        "                                BaseLabeledVertex b = addVertex(new BaseLabeledVertex(\"B\"));\n",
                        "                                addVertex(new BaseLabeledVertex(\"C\"));\n",
                        "                                addVertex(d);\n",
                        "                                addEdge(new BaseLabeledWeightedEdge<Integer>(\"A -> B\", 1000))\n",
                        "                                        .from(a)\n",
                        "                                        .to(b);\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseLabeledWeightedEdge",
                            "BaseLabeledWeightedEdge<Integer>"
                        ]
                    ],
                    "is_overload": true
                },
                "55-58:": {
                    "start": 55,
                    "end": 58,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "89-92:": {
                    "start": 89,
                    "end": 92,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "125-128:": {
                    "start": 125,
                    "end": 128,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "162-165:": {
                    "start": 162,
                    "end": 165,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "200-203:": {
                    "start": 200,
                    "end": 203,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "239-242:": {
                    "start": 239,
                    "end": 242,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "284-287:": {
                    "start": 284,
                    "end": 287,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "341-344:": {
                    "start": 341,
                    "end": 344,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "359-362:": {
                    "start": 359,
                    "end": 362,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "379-382:": {
                    "start": 379,
                    "end": 382,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "400-403:": {
                    "start": 400,
                    "end": 403,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "422-425:": {
                    "start": 422,
                    "end": 425,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "445-448:": {
                    "start": 445,
                    "end": 448,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "474-477:": {
                    "start": 474,
                    "end": 477,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "515-518:": {
                    "start": 515,
                    "end": 518,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "536-539:": {
                    "start": 536,
                    "end": 539,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "559-562:": {
                    "start": 559,
                    "end": 562,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "583-586:": {
                    "start": 583,
                    "end": 586,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "608-611:": {
                    "start": 608,
                    "end": 611,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "634-637:": {
                    "start": 634,
                    "end": 637,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                },
                "666-669:": {
                    "start": 666,
                    "end": 669,
                    "body": [
                        "        DirectedMutableGraph<BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>> graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<\n",
                        "                                BaseLabeledVertex, BaseLabeledWeightedEdge<Integer>>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": true
                }
            },
            "fields": {}
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import unittest",
        "import pytest",
        "import io",
        "import os",
        "import unittest",
        "from src.main.org.apache.commons.graph.CommonsGraph import *",
        "from src.main.org.apache.commons.graph.DirectedGraph import *",
        "from src.main.org.apache.commons.graph.Mapper import *",
        "from src.main.org.apache.commons.graph.builder.GraphConnection import *",
        "from src.main.org.apache.commons.graph.flow.FlowWeightedEdgesBuilder import *",
        "from src.main.org.apache.commons.graph.flow.FromHeadBuilder import *",
        "from src.main.org.apache.commons.graph.flow.MaxFlowAlgorithmSelector import *",
        "from src.main.org.apache.commons.graph.flow.ToTailBuilder import *",
        "from src.test.org.apache.commons.graph.model.BaseLabeledVertex import *",
        "from src.test.org.apache.commons.graph.model.BaseWeightedEdge import *",
        "from src.main.org.apache.commons.graph.model.DirectedMutableGraph import *",
        "from src.main.org.apache.commons.graph.weight.OrderedMonoid import *",
        "from src.main.org.apache.commons.graph.weight.primitive.IntegerWeightBaseOperations import *",
        "from src.main.org.apache.commons.graph.builder.AbstractGraphConnection import *",
        "from src.main.org.apache.commons.graph.builder.HeadVertexConnector import *",
        "from src.main.org.apache.commons.graph.builder.TailVertexConnector import *",
        "from src.test.org.apache.commons.graph.model.BaseLabeledWeightedEdge import *"
    ]
}