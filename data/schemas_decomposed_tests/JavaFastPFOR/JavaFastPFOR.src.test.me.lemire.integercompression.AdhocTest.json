{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/integercompression/AdhocTest.java",
    "imports": {
        "17-17:import Arrays": {
            "start": 17,
            "end": 17,
            "body": [
                "import java.util.Arrays;\n"
            ]
        },
        "11-11:import Test": {
            "start": 11,
            "end": 11,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "10-10:import Assert": {
            "start": 10,
            "end": 10,
            "body": [
                "import org.junit.Assert;\n"
            ]
        },
        "15-15:import static TestUtils.*": {
            "start": 15,
            "end": 15,
            "body": [
                "import static me.lemire.integercompression.TestUtils.*;\n"
            ]
        },
        "13-13:import me.lemire.integercompression.differential.*": {
            "start": 13,
            "end": 13,
            "body": [
                "import me.lemire.integercompression.differential.*;\n"
            ]
        }
    },
    "classes": {
        "AdhocTest": {
            "start": 23,
            "end": 23,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "171-176:biggerCompressedArray2_test3_decomposed": {
                    "start": 171,
                    "end": 176,
                    "body": [
                        "    public void biggerCompressedArray2_test3_decomposed()  {\n",
                        "        IntegerCODEC c = new Composition(FastPFOR128.FastPFOR1281(), new VariableByte());\n",
                        "        assertSymmetry(c, 65535, 65535);\n",
                        "        c = new Composition(FastPFOR.FastPFOR1(), new VariableByte());\n",
                        "        assertSymmetry(c, 65535, 65535);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "biggerCompressedArray2_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "71-73:FastPFOR1281"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                            "TestUtils",
                            "58-85:assertSymmetry"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                            "FastPFOR",
                            "90-92:FastPFOR1"
                        ]
                    ]
                },
                "164-168:biggerCompressedArray2_test2_decomposed": {
                    "start": 164,
                    "end": 168,
                    "body": [
                        "    public void biggerCompressedArray2_test2_decomposed()  {\n",
                        "        IntegerCODEC c = new Composition(FastPFOR128.FastPFOR1281(), new VariableByte());\n",
                        "        assertSymmetry(c, 65535, 65535);\n",
                        "        c = new Composition(FastPFOR.FastPFOR1(), new VariableByte());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "biggerCompressedArray2_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "71-73:FastPFOR1281"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                            "TestUtils",
                            "58-85:assertSymmetry"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                            "FastPFOR",
                            "90-92:FastPFOR1"
                        ]
                    ]
                },
                "158-161:biggerCompressedArray2_test1_decomposed": {
                    "start": 158,
                    "end": 161,
                    "body": [
                        "    public void biggerCompressedArray2_test1_decomposed()  {\n",
                        "        IntegerCODEC c = new Composition(FastPFOR128.FastPFOR1281(), new VariableByte());\n",
                        "        assertSymmetry(c, 65535, 65535);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "biggerCompressedArray2_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "71-73:FastPFOR1281"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                            "TestUtils",
                            "58-85:assertSymmetry"
                        ]
                    ]
                },
                "153-155:biggerCompressedArray2_test0_decomposed": {
                    "start": 153,
                    "end": 155,
                    "body": [
                        "    public void biggerCompressedArray2_test0_decomposed()  {\n",
                        "        IntegerCODEC c = new Composition(FastPFOR128.FastPFOR1281(), new VariableByte());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "biggerCompressedArray2_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "71-73:FastPFOR1281"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ]
                    ]
                },
                "147-150:biggerCompressedArray1_test1_decomposed": {
                    "start": 147,
                    "end": 150,
                    "body": [
                        "    public void biggerCompressedArray1_test1_decomposed()  {\n",
                        "        IntegerCODEC c = new VariableByte();\n",
                        "        assertSymmetry(c, -1);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "biggerCompressedArray1_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                            "TestUtils",
                            "58-85:assertSymmetry"
                        ]
                    ]
                },
                "142-144:biggerCompressedArray1_test0_decomposed": {
                    "start": 142,
                    "end": 144,
                    "body": [
                        "    public void biggerCompressedArray1_test0_decomposed()  {\n",
                        "        IntegerCODEC c = new VariableByte();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "biggerCompressedArray1_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ]
                    ]
                },
                "134-139:biggerCompressedArray0_test3_decomposed": {
                    "start": 134,
                    "end": 139,
                    "body": [
                        "    public void biggerCompressedArray0_test3_decomposed()  {\n",
                        "        IntegerCODEC c = new Composition(FastPFOR128.FastPFOR1281(), new VariableByte());\n",
                        "        assertSymmetry(c, 0, 16384);\n",
                        "        c = new Composition(FastPFOR.FastPFOR1(), new VariableByte());\n",
                        "        assertSymmetry(c, 0, 16384);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "biggerCompressedArray0_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "71-73:FastPFOR1281"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                            "TestUtils",
                            "58-85:assertSymmetry"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                            "FastPFOR",
                            "90-92:FastPFOR1"
                        ]
                    ]
                },
                "127-131:biggerCompressedArray0_test2_decomposed": {
                    "start": 127,
                    "end": 131,
                    "body": [
                        "    public void biggerCompressedArray0_test2_decomposed()  {\n",
                        "        IntegerCODEC c = new Composition(FastPFOR128.FastPFOR1281(), new VariableByte());\n",
                        "        assertSymmetry(c, 0, 16384);\n",
                        "        c = new Composition(FastPFOR.FastPFOR1(), new VariableByte());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "biggerCompressedArray0_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "71-73:FastPFOR1281"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                            "TestUtils",
                            "58-85:assertSymmetry"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                            "FastPFOR",
                            "90-92:FastPFOR1"
                        ]
                    ]
                },
                "121-124:biggerCompressedArray0_test1_decomposed": {
                    "start": 121,
                    "end": 124,
                    "body": [
                        "    public void biggerCompressedArray0_test1_decomposed()  {\n",
                        "        IntegerCODEC c = new Composition(FastPFOR128.FastPFOR1281(), new VariableByte());\n",
                        "        assertSymmetry(c, 0, 16384);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "biggerCompressedArray0_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "71-73:FastPFOR1281"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                            "TestUtils",
                            "58-85:assertSymmetry"
                        ]
                    ]
                },
                "116-118:biggerCompressedArray0_test0_decomposed": {
                    "start": 116,
                    "end": 118,
                    "body": [
                        "    public void biggerCompressedArray0_test0_decomposed()  {\n",
                        "        IntegerCODEC c = new Composition(FastPFOR128.FastPFOR1281(), new VariableByte());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "biggerCompressedArray0_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                            "FastPFOR128",
                            "71-73:FastPFOR1281"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ]
                    ]
                },
                "94-113:testIssue41_test0_decomposed": {
                    "start": 94,
                    "end": 113,
                    "body": [
                        "    public void testIssue41_test0_decomposed()  {\n",
                        "        for (int x = 0; x < 64; x++) {\n",
                        "\t\t\tint[] a = { 2, 3, 4, 5 };\n",
                        "\t\t\tint[] b = new int[90];\n",
                        "\t\t\tint[] c = new int[a.length];\n",
                        "\t\t\tSkippableIntegratedIntegerCODEC codec = new SkippableIntegratedComposition(new IntegratedBinaryPacking(),\n",
                        "\t\t\t\t\tnew IntegratedVariableByte());\n",
                        "\t\t\tIntWrapper aOffset = new IntWrapper(0);\n",
                        "\t\t\tIntWrapper bOffset = new IntWrapper(x);\n",
                        "\t\t\tIntWrapper initValue = new IntWrapper(0);\n",
                        "\n",
                        "\t\t\tcodec.headlessCompress(a, aOffset, a.length, b, bOffset, initValue);\n",
                        "\t\t\tint len = bOffset.get() - x;\n",
                        "\t\t\tbOffset.set(x);\n",
                        "\t\t\tIntWrapper cOffset = new IntWrapper(0);\n",
                        "\t\t\tinitValue = new IntWrapper(0);\n",
                        "\t\t\tcodec.headlessUncompress(b, bOffset, len, c, cOffset, a.length, initValue);\n",
                        "\t\t\tAssert.assertArrayEquals(a, c);\n",
                        "\t\t}\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIssue41_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                            "SkippableIntegratedComposition",
                            "33-37:SkippableIntegratedComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                            "IntegratedBinaryPacking",
                            "IntegratedBinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                            "IntegratedVariableByte",
                            "IntegratedVariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC",
                            "SkippableIntegratedIntegerCODEC",
                            "48-50:headlessCompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "89-91:set"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC",
                            "SkippableIntegratedIntegerCODEC",
                            "71-73:headlessUncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(int[],int[])"
                        ]
                    ]
                },
                "76-91:testIssue29b_test0_decomposed": {
                    "start": 76,
                    "end": 91,
                    "body": [
                        "    public void testIssue29b_test0_decomposed()  {\n",
                        "        for(int x = 0; x < 64; x++) {\n",
                        "          int[] a = {2, 3, 4, 5};\n",
                        "          int[] b = new int[90];\n",
                        "          int[] c = new int[a.length];\n",
                        "          SkippableIntegerCODEC codec = new SkippableComposition(new BinaryPacking(), new VariableByte());\n",
                        "          IntWrapper aOffset = new IntWrapper(0);\n",
                        "          IntWrapper bOffset = new IntWrapper(x);\n",
                        "          codec.headlessCompress(a, aOffset, a.length, b, bOffset);\n",
                        "          int len = bOffset.get() - x;\n",
                        "          bOffset.set(x);\n",
                        "          IntWrapper cOffset = new IntWrapper(0);\n",
                        "          codec.headlessUncompress(b, bOffset, len, c, cOffset, a.length);\n",
                        "          Assert.assertArrayEquals(a,c);\n",
                        "    \t    }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIssue29b_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                            "SkippableComposition",
                            "31-35:SkippableComposition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                            "BinaryPacking",
                            "BinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                            "SkippableIntegerCODEC",
                            "44-46:headlessCompress"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "89-91:set"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                            "SkippableIntegerCODEC",
                            "66-68:headlessUncompress"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(int[],int[])"
                        ]
                    ]
                },
                "57-73:testIssue29_test0_decomposed": {
                    "start": 57,
                    "end": 73,
                    "body": [
                        "    public void testIssue29_test0_decomposed()  {\n",
                        "        for(int x = 0; x < 64; x++) {\n",
                        "          int[] a = {2, 3, 4, 5};\n",
                        "          int[] b = new int[90];\n",
                        "          int[] c = new int[a.length];\n",
                        "          IntegerCODEC codec = new Composition(new BinaryPacking(), new VariableByte());\n",
                        "\n",
                        "          IntWrapper aOffset = new IntWrapper(0);\n",
                        "          IntWrapper bOffset = new IntWrapper(x);\n",
                        "          codec.compress0(a, aOffset, a.length, b, bOffset);\n",
                        "          int len = bOffset.get() - x;\n",
                        "          bOffset.set(x);\n",
                        "          IntWrapper cOffset = new IntWrapper(0);\n",
                        "          codec.uncompress0(b, bOffset, len, c, cOffset);\n",
                        "          Assert.assertArrayEquals(a,c);\n",
                        "    \t    }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIssue29_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                            "Composition",
                            "31-34:Composition"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                            "BinaryPacking",
                            "BinaryPacking"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                            "VariableByte",
                            "VariableByte"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "36-38:compress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "89-91:set"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                            "IntegerCODEC",
                            "57-59:uncompress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(int[],int[])"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}