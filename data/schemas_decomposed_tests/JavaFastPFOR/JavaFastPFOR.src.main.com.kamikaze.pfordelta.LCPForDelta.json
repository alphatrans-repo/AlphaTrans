{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/com/kamikaze/pfordelta/LCPForDelta.java",
    "imports": {
        "26-26:import IntBuffer": {
            "start": 26,
            "end": 26,
            "body": [
                "import java.nio.IntBuffer;\n"
            ]
        },
        "27-27:import Arrays": {
            "start": 27,
            "end": 27,
            "body": [
                "import java.util.Arrays;\n"
            ]
        }
    },
    "classes": {
        "LCPForDelta": {
            "start": 54,
            "end": 54,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "619-628:readBitsWithBuffer": {
                    "start": 619,
                    "end": 628,
                    "body": [
                        "        protected static final int readBitsWithBuffer(int[] in,\n",
                        "                final int inOffset, final int bits) {\n",
                        "                final int index = inOffset >>> 5;\n",
                        "                final int skip = inOffset & 0x1f;\n",
                        "                int val = in[index] >>> skip;\n",
                        "                if (32 - skip < bits) {\n",
                        "                        val |= (in[index + 1] << (32 - skip));\n",
                        "                }\n",
                        "                return val & (0xffffffff >>> (32 - bits));\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "final",
                        "protected",
                        "static"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "readBitsWithBuffer(int[], int, int)",
                    "parameters": [
                        "in",
                        "inOffset",
                        "bits"
                    ],
                    "calls": []
                },
                "608-617:readBits": {
                    "start": 608,
                    "end": 617,
                    "body": [
                        "        public static final int readBits(int[] in, final int inOffset,\n",
                        "                final int bits) {\n",
                        "                final int index = inOffset >>> 5;\n",
                        "                final int skip = inOffset & 0x1f;\n",
                        "                int val = in[index] >>> skip;\n",
                        "                if (32 - skip < bits) {\n",
                        "                        val |= (in[index + 1] << (32 - skip));\n",
                        "                }\n",
                        "                return val & (0xffffffff >>> (32 - bits));\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "final",
                        "static"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "readBits(int[], int, int)",
                    "parameters": [
                        "in",
                        "inOffset",
                        "bits"
                    ],
                    "calls": []
                },
                "579-590:writeBits": {
                    "start": 579,
                    "end": 590,
                    "body": [
                        "        public static final void writeBits(int[] out, int val, int outOffset,\n",
                        "                int bits) {\n",
                        "                if (bits == 0)\n",
                        "                        return;\n",
                        "                final int index = outOffset >>> 5;\n",
                        "                final int skip = outOffset & 0x1f;\n",
                        "                val &= (0xffffffff >>> (32 - bits));\n",
                        "                out[index] |= (val << skip);\n",
                        "                if (32 - skip < bits) {\n",
                        "                        out[index + 1] |= (val >>> (32 - skip));\n",
                        "                }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "final",
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "writeBits(int[], int, int, int)",
                    "parameters": [
                        "out",
                        "val",
                        "outOffset",
                        "bits"
                    ],
                    "calls": []
                },
                "552-564:decompressBlockByS16WithIntBufferIntegrated": {
                    "start": 552,
                    "end": 564,
                    "body": [
                        "        protected static void decompressBlockByS16WithIntBufferIntegrated(\n",
                        "                final int[] outDecompBlock, final IntBuffer inCompBlock,\n",
                        "                final int blockSize, int[] expPosBuffer, int oribits) {\n",
                        "                int num, outOffset = 0, numLeft;\n",
                        "                for (numLeft = blockSize; numLeft > 0; numLeft -= num) {\n",
                        "                        num = Simple16WithHardCodes\n",
                        "                                .s16DecompressWithIntBufferIntegrated(\n",
                        "                                        outDecompBlock, outOffset,\n",
                        "                                        inCompBlock.get(), numLeft,\n",
                        "                                        expPosBuffer, oribits);\n",
                        "                        outOffset += num;\n",
                        "                }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected",
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "decompressBlockByS16WithIntBufferIntegrated(int[], IntBuffer, int, int[], int)",
                    "parameters": [
                        "outDecompBlock",
                        "inCompBlock",
                        "blockSize",
                        "expPosBuffer",
                        "oribits"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.Simple16WithHardCodes",
                            "Simple16WithHardCodes",
                            "209-223:s16DecompressWithIntBufferIntegrated"
                        ],
                        [
                            "library",
                            "java.base/java/nio/IntBuffer",
                            "get()"
                        ]
                    ]
                },
                "540-550:decompressBlockByS16WithIntBuffer": {
                    "start": 540,
                    "end": 550,
                    "body": [
                        "        protected static void decompressBlockByS16WithIntBuffer(\n",
                        "                final int[] outDecompBlock, final IntBuffer inCompBlock,\n",
                        "                final int blockSize) {\n",
                        "                int num, outOffset = 0, numLeft;\n",
                        "                for (numLeft = blockSize; numLeft > 0; numLeft -= num) {\n",
                        "                        num = Simple16WithHardCodes.s16DecompressWithIntBuffer(\n",
                        "                                outDecompBlock, outOffset, inCompBlock.get(),\n",
                        "                                numLeft);\n",
                        "                        outOffset += num;\n",
                        "                }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected",
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "decompressBlockByS16WithIntBuffer(int[], IntBuffer, int)",
                    "parameters": [
                        "outDecompBlock",
                        "inCompBlock",
                        "blockSize"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.Simple16WithHardCodes",
                            "Simple16WithHardCodes",
                            "186-200:s16DecompressWithIntBuffer"
                        ],
                        [
                            "library",
                            "java.base/java/nio/IntBuffer",
                            "get()"
                        ]
                    ]
                },
                "526-538:decompressBlockByS16": {
                    "start": 526,
                    "end": 538,
                    "body": [
                        "        public static int decompressBlockByS16(int[] outDecompBlock,\n",
                        "                int[] inCompBlock, int inStartOffsetInBits, int blockSize) {\n",
                        "                int inOffset = (inStartOffsetInBits + 31) >>> 5;\n",
                        "                int num, outOffset = 0, numLeft;\n",
                        "                for (numLeft = blockSize; numLeft > 0; numLeft -= num) {\n",
                        "                        num = Simple16.s16Decompress(outDecompBlock, outOffset,\n",
                        "                                inCompBlock, inOffset, numLeft);\n",
                        "                        outOffset += num;\n",
                        "                        inOffset++;\n",
                        "                }\n",
                        "                int compressedBitSize = (inOffset << 5) - inStartOffsetInBits;\n",
                        "                return compressedBitSize;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "decompressBlockByS16(int[], int[], int, int)",
                    "parameters": [
                        "outDecompBlock",
                        "inCompBlock",
                        "inStartOffsetInBits",
                        "blockSize"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.Simple16",
                            "Simple16",
                            "128-139:s16Decompress"
                        ]
                    ]
                },
                "475-481:decompressBBitSlotsWithHardCodesWithIntBuffer": {
                    "start": 475,
                    "end": 481,
                    "body": [
                        "        protected static int decompressBBitSlotsWithHardCodesWithIntBuffer(\n",
                        "                final int[] outDecompSlots, final IntBuffer inCompBlock,\n",
                        "                final int blockSize, final int bits) {\n",
                        "                PForDeltaUnpack128WIthIntBuffer.unpack(outDecompSlots,\n",
                        "                        inCompBlock, bits);\n",
                        "                return bits * blockSize;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected",
                        "static"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "decompressBBitSlotsWithHardCodesWithIntBuffer(int[], IntBuffer, int, int)",
                    "parameters": [
                        "outDecompSlots",
                        "inCompBlock",
                        "blockSize",
                        "bits"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                            "PForDeltaUnpack128WIthIntBuffer",
                            "17-73:unpack"
                        ]
                    ]
                },
                "466-473:decompressBBitSlotsWithHardCodes": {
                    "start": 466,
                    "end": 473,
                    "body": [
                        "        protected static int decompressBBitSlotsWithHardCodes(\n",
                        "                final int[] outDecompSlots, final int[] inCompBlock,\n",
                        "                final int blockSize, final int bits) {\n",
                        "                int compressedBitSize = 0;\n",
                        "                PForDeltaUnpack128.unpack(outDecompSlots, inCompBlock, bits);\n",
                        "                compressedBitSize = bits * blockSize;\n",
                        "                return compressedBitSize;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected",
                        "static"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "decompressBBitSlotsWithHardCodes(int[], int[], int, int)",
                    "parameters": [
                        "outDecompSlots",
                        "inCompBlock",
                        "blockSize",
                        "bits"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                            "PForDeltaUnpack128",
                            "10-66:unpack"
                        ]
                    ]
                },
                "453-464:decompressBBitSlots": {
                    "start": 453,
                    "end": 464,
                    "body": [
                        "        public static int decompressBBitSlots(int[] outDecompSlots,\n",
                        "                int[] inCompBlock, int blockSize, int bits) {\n",
                        "                int compressedBitSize = 0;\n",
                        "                int offset = HEADER_SIZE;\n",
                        "                for (int i = 0; i < blockSize; i++) {\n",
                        "                        outDecompSlots[i] = readBits(inCompBlock, offset, bits);\n",
                        "                        offset += bits;\n",
                        "                }\n",
                        "                compressedBitSize = bits * blockSize;\n",
                        "\n",
                        "                return compressedBitSize;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "decompressBBitSlots(int[], int[], int, int)",
                    "parameters": [
                        "outDecompSlots",
                        "inCompBlock",
                        "blockSize",
                        "bits"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                            "LCPForDelta",
                            "608-617:readBits"
                        ]
                    ]
                },
                "429-437:checkBigNumbers": {
                    "start": 429,
                    "end": 437,
                    "body": [
                        "        public static boolean checkBigNumbers(int[] inputBlock, int blockSize,\n",
                        "                int bits)  {\n",
                        "                int maxNoExp = (1 << bits) - 1;\n",
                        "                for (int i = 0; i < blockSize; ++i) {\n",
                        "                        if (inputBlock[i] > maxNoExp)\n",
                        "                                return true;\n",
                        "                }\n",
                        "                return false;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "checkBigNumbers(int[], int, int)",
                    "parameters": [
                        "inputBlock",
                        "blockSize",
                        "bits"
                    ],
                    "calls": []
                },
                "399-414:estimateCompressedSize": {
                    "start": 399,
                    "end": 414,
                    "body": [
                        "        public static int estimateCompressedSize(int[] inputBlock,\n",
                        "                int blockSize, int bits)  {\n",
                        "                int maxNoExp = (1 << bits) - 1;\n",
                        "                // Size of the header and the bits-bit slots\n",
                        "                int outputOffset = HEADER_SIZE + bits * blockSize;\n",
                        "                int expNum = 0;\n",
                        "\n",
                        "                for (int i = 0; i < blockSize; ++i) {\n",
                        "                        if (inputBlock[i] > maxNoExp) {\n",
                        "                                expNum++;\n",
                        "                        }\n",
                        "                }\n",
                        "                outputOffset += (expNum << 5);\n",
                        "\n",
                        "                return outputOffset;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "estimateCompressedSize(int[], int, int)",
                    "parameters": [
                        "inputBlock",
                        "blockSize",
                        "bits"
                    ],
                    "calls": []
                },
                "350-386:decompressOneBlockWithSizeWithIntBuffer": {
                    "start": 350,
                    "end": 386,
                    "body": [
                        "        protected static void decompressOneBlockWithSizeWithIntBuffer(\n",
                        "                final int[] decompBlock, final IntBuffer inBlock,\n",
                        "                final int blockSize, final int[] expPosBuffer,\n",
                        "                final int[] expHighBitsBuffer, final int inBlockLen) {\n",
                        "                final int flag = inBlock.get();\n",
                        "                final int expNum = flag & MASK[31 - POSSIBLE_B_BITS];\n",
                        "                final int bits = (flag >>> (31 - POSSIBLE_B_BITS)) & (0x1f);\n",
                        "                if (bits == 0) {\n",
                        "                        Arrays.fill(decompBlock, 0, inBlockLen, 0);\n",
                        "                } else {\n",
                        "                        PForDeltaUnpack128WIthIntBuffer.unpack(decompBlock,\n",
                        "                                inBlock, bits);\n",
                        "                }\n",
                        "\n",
                        "                if (expNum > 0) {\n",
                        "                        // decompress expPos\n",
                        "                        int num, outOffset = 0, numLeft;\n",
                        "                        for (numLeft = expNum; numLeft > 0; numLeft -= num) {\n",
                        "                                num = Simple16WithHardCodes\n",
                        "                                        .s16DecompressWithIntBufferWithHardCodes(\n",
                        "                                                expPosBuffer, outOffset,\n",
                        "                                                inBlock.get(), numLeft);\n",
                        "                                outOffset += num;\n",
                        "                        }\n",
                        "\n",
                        "                        // decompress expHighBits and decompBlock at the same\n",
                        "                        // time\n",
                        "                        for (outOffset = 0, numLeft = expNum; numLeft > 0; numLeft -= num) {\n",
                        "                                num = Simple16WithHardCodes\n",
                        "                                        .s16DecompressWithIntBufferIntegrated2(\n",
                        "                                                decompBlock, outOffset,\n",
                        "                                                inBlock.get(), numLeft,\n",
                        "                                                expPosBuffer, bits);\n",
                        "                                outOffset += num;\n",
                        "                        }\n",
                        "                }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected",
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "decompressOneBlockWithSizeWithIntBuffer(int[], IntBuffer, int, int[], int[], int)",
                    "parameters": [
                        "decompBlock",
                        "inBlock",
                        "blockSize",
                        "expPosBuffer",
                        "expHighBitsBuffer",
                        "inBlockLen"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/IntBuffer",
                            "get()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "fill(int[],int,int,int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                            "PForDeltaUnpack128WIthIntBuffer",
                            "17-73:unpack"
                        ],
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.Simple16WithHardCodes",
                            "Simple16WithHardCodes",
                            "202-207:s16DecompressWithIntBufferWithHardCodes"
                        ],
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.Simple16WithHardCodes",
                            "Simple16WithHardCodes",
                            "225-231:s16DecompressWithIntBufferIntegrated2"
                        ]
                    ]
                },
                "312-348:decompressOneBlockWithSize": {
                    "start": 312,
                    "end": 348,
                    "body": [
                        "        protected static void decompressOneBlockWithSize(int[] decompBlock,\n",
                        "                int[] inBlock, int blockSize, int[] expPosBuffer,\n",
                        "                int[] expHighBitsBuffer, int inBlockLen) {\n",
                        "                int expNum = inBlock[0] & MASK[31 - POSSIBLE_B_BITS];\n",
                        "                int bits = (inBlock[0] >>> (31 - POSSIBLE_B_BITS)) & (0x1f);\n",
                        "\n",
                        "                // decompress the b-bit slots\n",
                        "                int offset = HEADER_SIZE;\n",
                        "                int compressedBits = 0;\n",
                        "                if (bits == 0) {\n",
                        "                        Arrays.fill(decompBlock, 0, inBlockLen, 0);\n",
                        "                } else {\n",
                        "                        // compressedBits =\n",
                        "                        // decompressBBitSlotsWithHardCodes(decompBlock,\n",
                        "                        // inBlock, blockSize, bits);\n",
                        "                        compressedBits = decompressBBitSlots(decompBlock,\n",
                        "                                inBlock, blockSize, bits);\n",
                        "                }\n",
                        "                offset += compressedBits;\n",
                        "\n",
                        "                // decompress exceptions\n",
                        "                if (expNum > 0) {\n",
                        "                        compressedBits = decompressBlockByS16(expPosBuffer,\n",
                        "                                inBlock, offset, expNum);\n",
                        "                        offset += compressedBits;\n",
                        "                        compressedBits = decompressBlockByS16(\n",
                        "                                expHighBitsBuffer, inBlock, offset, expNum);\n",
                        "                        offset += compressedBits;\n",
                        "\n",
                        "                        for (int i = 0; i < expNum; i++) {\n",
                        "                                int curExpPos = expPosBuffer[i];\n",
                        "                                int curHighBits = expHighBitsBuffer[i];\n",
                        "                                decompBlock[curExpPos] = (decompBlock[curExpPos] & MASK[bits])\n",
                        "                                        | ((curHighBits & MASK[32 - bits]) << bits);\n",
                        "                        }\n",
                        "                }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected",
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "decompressOneBlockWithSize(int[], int[], int, int[], int[], int)",
                    "parameters": [
                        "decompBlock",
                        "inBlock",
                        "blockSize",
                        "expPosBuffer",
                        "expHighBitsBuffer",
                        "inBlockLen"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "fill(int[],int,int,int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                            "LCPForDelta",
                            "453-464:decompressBBitSlots"
                        ],
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                            "LCPForDelta",
                            "526-538:decompressBlockByS16"
                        ]
                    ]
                },
                "272-310:decompressOneBlock": {
                    "start": 272,
                    "end": 310,
                    "body": [
                        "        public static void decompressOneBlock(int[] decompBlock, int[] inBlock,\n",
                        "                int blockSize) {\n",
                        "                int expNum = inBlock[0] & MASK[31 - POSSIBLE_B_BITS];\n",
                        "                int bits = (inBlock[0] >>> (31 - POSSIBLE_B_BITS)) & (0x1f);\n",
                        "\n",
                        "                int[] expPosBuffer = new int[blockSize];\n",
                        "                int[] expHighBitsBuffer = new int[blockSize];\n",
                        "\n",
                        "                // decompress the b-bit slots\n",
                        "                int offset = HEADER_SIZE;\n",
                        "                int compressedBits = 0;\n",
                        "                if (bits == 0) {\n",
                        "                        Arrays.fill(decompBlock, 0);\n",
                        "                } else {\n",
                        "                        compressedBits = decompressBBitSlots(decompBlock,\n",
                        "                                inBlock, blockSize, bits);\n",
                        "                        // compressedBits =\n",
                        "                        // decompressBBitSlotsWithHardCodes(decompBlock,\n",
                        "                        // inBlock, blockSize, bits);\n",
                        "                }\n",
                        "                offset += compressedBits;\n",
                        "\n",
                        "                // decompress exceptions\n",
                        "                if (expNum > 0) {\n",
                        "                        compressedBits = decompressBlockByS16(expPosBuffer,\n",
                        "                                inBlock, offset, expNum);\n",
                        "                        offset += compressedBits;\n",
                        "                        compressedBits = decompressBlockByS16(\n",
                        "                                expHighBitsBuffer, inBlock, offset, expNum);\n",
                        "                        offset += compressedBits;\n",
                        "\n",
                        "                        for (int i = 0; i < expNum; i++) {\n",
                        "                                int curExpPos = expPosBuffer[i];\n",
                        "                                int curHighBits = expHighBitsBuffer[i];\n",
                        "                                decompBlock[curExpPos] = (decompBlock[curExpPos] & MASK[bits])\n",
                        "                                        | ((curHighBits & MASK[32 - bits]) << bits);\n",
                        "                        }\n",
                        "                }\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "decompressOneBlock(int[], int[], int)",
                    "parameters": [
                        "decompBlock",
                        "inBlock",
                        "blockSize"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "fill(int[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                            "LCPForDelta",
                            "453-464:decompressBBitSlots"
                        ],
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                            "LCPForDelta",
                            "526-538:decompressBlockByS16"
                        ]
                    ]
                },
                "203-260:compressOneBlockCore2": {
                    "start": 203,
                    "end": 260,
                    "body": [
                        "        protected int compressOneBlockCore2(int[] inputBlock, int blockSize,\n",
                        "                int bits) throws IllegalArgumentException {\n",
                        "                int outputOffset = HEADER_SIZE;\n",
                        "                int expUpperBound = 1 << bits;\n",
                        "                int expNum = 0;\n",
                        "                int maxCompBitSize = HEADER_SIZE + blockSize\n",
                        "                        * (MAX_BITS + MAX_BITS + MAX_BITS) + 32;\n",
                        "                int[] tmpCompBuffer = new int[(maxCompBitSize >>> 5)];\n",
                        "\n",
                        "                int[] expPosBuffer = new int[blockSize];\n",
                        "                int[] expHighBitsBuffer = new int[blockSize];\n",
                        "\n",
                        "                // compress the b-bit slots\n",
                        "                for (int i = 0; i < blockSize; ++i) {\n",
                        "                        int value = inputBlock[i];\n",
                        "                        if (value < expUpperBound) {\n",
                        "                                writeBits(tmpCompBuffer, value, outputOffset,\n",
                        "                                        bits);\n",
                        "                        } else // exp\n",
                        "                        {\n",
                        "                                // store the lower bits-bits of the exception\n",
                        "                                writeBits(tmpCompBuffer, value & MASK[bits],\n",
                        "                                        outputOffset, bits);\n",
                        "                                // write the position of exception\n",
                        "                                expPosBuffer[expNum] = i;\n",
                        "                                // write the higher 32-bits bits of the\n",
                        "                                // exception\n",
                        "                                expHighBitsBuffer[expNum] = (value >>> bits)\n",
                        "                                        & MASK[32 - bits];\n",
                        "                                expNum++;\n",
                        "                        }\n",
                        "                        outputOffset += bits;\n",
                        "                }\n",
                        "\n",
                        "                tmpCompBuffer[0] = ((bits & MASK[POSSIBLE_B_BITS]) << (31 - POSSIBLE_B_BITS))\n",
                        "                        | (expNum & MASK[31 - POSSIBLE_B_BITS]);\n",
                        "\n",
                        "                // compress exceptions\n",
                        "                if (expNum > 0) {\n",
                        "                        int compressedBitSize;\n",
                        "\n",
                        "                        int[] expBuffer = new int[expNum * 2];\n",
                        "                        System.arraycopy(expPosBuffer, 0, expBuffer, 0, expNum);\n",
                        "                        System.arraycopy(expHighBitsBuffer, 0, expBuffer,\n",
                        "                                expNum, expNum);\n",
                        "\n",
                        "                        compressedBitSize = compressBlockByS16(tmpCompBuffer,\n",
                        "                                outputOffset, expBuffer, expNum * 2, blockSize,\n",
                        "                                inputBlock);\n",
                        "                        outputOffset += compressedBitSize;\n",
                        "                }\n",
                        "\n",
                        "                // discard the redundant parts in the tmpCompressedBlock\n",
                        "                int compressedSizeInInts = (outputOffset + 31) >>> 5;\n",
                        "\n",
                        "                compBuffer = tmpCompBuffer;\n",
                        "                return compressedSizeInInts;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "compressOneBlockCore2(int[], int, int)",
                    "parameters": [
                        "inputBlock",
                        "blockSize",
                        "bits"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                            "LCPForDelta",
                            "579-590:writeBits"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                            "LCPForDelta",
                            "496-510:compressBlockByS16"
                        ]
                    ]
                },
                "144-201:compressOneBlockCore": {
                    "start": 144,
                    "end": 201,
                    "body": [
                        "        public int compressOneBlockCore(int[] inputBlock, int blockSize,\n",
                        "                int bits)  {\n",
                        "                int outputOffset = HEADER_SIZE;\n",
                        "                int expUpperBound = 1 << bits;\n",
                        "                int expNum = 0;\n",
                        "                int maxCompBitSize = HEADER_SIZE + blockSize\n",
                        "                        * (MAX_BITS + MAX_BITS + MAX_BITS) + 32;\n",
                        "                int[] tmpCompBuffer = new int[(maxCompBitSize >>> 5)];\n",
                        "\n",
                        "                int[] expPosBuffer = new int[blockSize];\n",
                        "                int[] expHighBitsBuffer = new int[blockSize];\n",
                        "\n",
                        "                // compress the b-bit slots\n",
                        "                for (int i = 0; i < blockSize; ++i) {\n",
                        "                        int value = inputBlock[i];\n",
                        "                        if (value < expUpperBound) {\n",
                        "                                writeBits(tmpCompBuffer, value, outputOffset,\n",
                        "                                        bits);\n",
                        "                        } else // exp\n",
                        "                        {\n",
                        "                                // store the lower bits-bits of the exception\n",
                        "                                writeBits(tmpCompBuffer, value & MASK[bits],\n",
                        "                                        outputOffset, bits);\n",
                        "                                // write the position of exception\n",
                        "                                expPosBuffer[expNum] = i;\n",
                        "                                // write the higher 32-bits bits of the\n",
                        "                                // exception\n",
                        "                                expHighBitsBuffer[expNum] = (value >>> bits)\n",
                        "                                        & MASK[32 - bits];\n",
                        "                                expNum++;\n",
                        "                        }\n",
                        "                        outputOffset += bits;\n",
                        "                }\n",
                        "\n",
                        "                tmpCompBuffer[0] = ((bits & MASK[POSSIBLE_B_BITS]) << (31 - POSSIBLE_B_BITS))\n",
                        "                        | (expNum & MASK[31 - POSSIBLE_B_BITS]);\n",
                        "\n",
                        "                // compress exceptions\n",
                        "                if (expNum > 0) {\n",
                        "                        int compressedBitSize;\n",
                        "\n",
                        "                        compressedBitSize = compressBlockByS16(tmpCompBuffer,\n",
                        "                                outputOffset, expPosBuffer, expNum, blockSize,\n",
                        "                                inputBlock);\n",
                        "                        outputOffset += compressedBitSize;\n",
                        "\n",
                        "                        compressedBitSize = compressBlockByS16(tmpCompBuffer,\n",
                        "                                outputOffset, expHighBitsBuffer, expNum,\n",
                        "                                blockSize, inputBlock);\n",
                        "                        outputOffset += compressedBitSize;\n",
                        "                }\n",
                        "\n",
                        "                // discard the redundant parts in the tmpCompressedBlock\n",
                        "                int compressedSizeInInts = (outputOffset + 31) >>> 5;\n",
                        "\n",
                        "                compBuffer = tmpCompBuffer;\n",
                        "                return compressedSizeInInts;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "compressOneBlockCore(int[], int, int)",
                    "parameters": [
                        "inputBlock",
                        "blockSize",
                        "bits"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                            "LCPForDelta",
                            "579-590:writeBits"
                        ],
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                            "LCPForDelta",
                            "496-510:compressBlockByS16"
                        ]
                    ]
                },
                "102-130:compress": {
                    "start": 102,
                    "end": 130,
                    "body": [
                        "        public int compress(int[] inBlock, int blockSize) {\n",
                        "                // find the best b that can lead to the smallest overall\n",
                        "                // compressed size\n",
                        "                int currentB = POSSIBLE_B[0];\n",
                        "                int tmpB = currentB;\n",
                        "                boolean hasBigNum = checkBigNumbers(inBlock, blockSize,\n",
                        "                        POSSIBLE_B[POSSIBLE_B.length - 1]);\n",
                        "                if (hasBigNum) {\n",
                        "                        currentB = 4;\n",
                        "                } else {\n",
                        "                        int optSize = estimateCompressedSize(inBlock,\n",
                        "                                blockSize, tmpB);\n",
                        "                        for (int i = 1; i < POSSIBLE_B.length; ++i) {\n",
                        "                                tmpB = POSSIBLE_B[i];\n",
                        "                                int curSize = estimateCompressedSize(inBlock,\n",
                        "                                        blockSize, tmpB);\n",
                        "                                if (curSize < optSize) {\n",
                        "                                        currentB = tmpB;\n",
                        "                                        optSize = curSize;\n",
                        "                                }\n",
                        "                        }\n",
                        "                }\n",
                        "\n",
                        "                // compress the block using the above best b\n",
                        "                int compressedSizeInInts = compressOneBlockCore(inBlock,\n",
                        "                        blockSize, currentB);\n",
                        "\n",
                        "                return compressedSizeInInts;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "compress(int[], int)",
                    "parameters": [
                        "inBlock",
                        "blockSize"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                            "LCPForDelta",
                            "429-437:checkBigNumbers"
                        ],
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                            "LCPForDelta",
                            "144-201:compressOneBlockCore"
                        ],
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                            "LCPForDelta",
                            "399-414:estimateCompressedSize"
                        ]
                    ]
                },
                "88-90:setCompBuffer": {
                    "start": 88,
                    "end": 90,
                    "body": [
                        "        protected void setCompBuffer(int[] buffer) {\n",
                        "                compBuffer = buffer;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "setCompBuffer(int[])",
                    "parameters": [
                        "buffer"
                    ],
                    "calls": []
                },
                "84-86:getCompBuffer": {
                    "start": 84,
                    "end": 86,
                    "body": [
                        "        protected int[] getCompBuffer() {\n",
                        "                return compBuffer;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "int[]",
                            "int[]"
                        ]
                    ],
                    "signature": "getCompBuffer()",
                    "parameters": [],
                    "calls": []
                },
                "496-510:compressBlockByS16": {
                    "start": 496,
                    "end": 510,
                    "body": [
                        "        private static int compressBlockByS16(int[] outCompBlock,\n",
                        "                int outStartOffsetInBits, int[] inBlock, int blockSize,\n",
                        "                int oriBlockSize, int[] oriInputBlock) {\n",
                        "                int outOffset = (outStartOffsetInBits + 31) >>> 5;\n",
                        "                int num, inOffset = 0, numLeft;\n",
                        "                for (numLeft = blockSize; numLeft > 0; numLeft -= num) {\n",
                        "                        num = Simple16WithHardCodes.s16Compress(outCompBlock,\n",
                        "                                outOffset, inBlock, inOffset, numLeft,\n",
                        "                                blockSize, oriBlockSize, oriInputBlock);\n",
                        "                        outOffset++;\n",
                        "                        inOffset += num;\n",
                        "                }\n",
                        "                int compressedBitSize = (outOffset << 5) - outStartOffsetInBits;\n",
                        "                return compressedBitSize;\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "compressBlockByS16(int[], int, int[], int, int, int[])",
                    "parameters": [
                        "outCompBlock",
                        "outStartOffsetInBits",
                        "inBlock",
                        "blockSize",
                        "oriBlockSize",
                        "oriInputBlock"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.com.kamikaze.pfordelta.Simple16WithHardCodes",
                            "Simple16WithHardCodes",
                            "92-117:s16Compress"
                        ]
                    ]
                }
            },
            "fields": {
                "82-82:compBuffer": {
                    "start": 82,
                    "end": 82,
                    "body": [
                        "        private int[] compBuffer; // buffer to hold the compressed data\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "int[]",
                            "int[]"
                        ]
                    ]
                },
                "74-80:MASK": {
                    "start": 74,
                    "end": 80,
                    "body": [
                        "        private static final int[] MASK = { 0x00000000, 0x00000001, 0x00000003,\n",
                        "                0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f,\n",
                        "                0x000000ff, 0x000001ff, 0x000003ff, 0x000007ff, 0x00000fff,\n",
                        "                0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff, 0x0001ffff,\n",
                        "                0x0003ffff, 0x0007ffff, 0x000fffff, 0x001fffff, 0x003fffff,\n",
                        "                0x007fffff, 0x00ffffff, 0x01ffffff, 0x03ffffff, 0x07ffffff,\n",
                        "                0x0fffffff, 0x1fffffff, 0x3fffffff, 0x7fffffff, 0xffffffff };\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int[]",
                            "int[]"
                        ]
                    ]
                },
                "72-72:HEADER_SIZE": {
                    "start": 72,
                    "end": 72,
                    "body": [
                        "        private static final int HEADER_SIZE = MAX_BITS * HEADER_NUM;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                },
                "70-70:HEADER_NUM": {
                    "start": 70,
                    "end": 70,
                    "body": [
                        "        private static final int HEADER_NUM = 1;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                },
                "67-67:MAX_BITS": {
                    "start": 67,
                    "end": 67,
                    "body": [
                        "        private static final int MAX_BITS = 32;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                },
                "65-65:POSSIBLE_B_BITS": {
                    "start": 65,
                    "end": 65,
                    "body": [
                        "        private static final int POSSIBLE_B_BITS = 5;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                },
                "61-62:POSSIBLE_B": {
                    "start": 61,
                    "end": 62,
                    "body": [
                        "        private static final int[] POSSIBLE_B = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n",
                        "                10, 11, 12, 13, 16, 20, 28 };\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int[]",
                            "int[]"
                        ]
                    ]
                }
            }
        }
    }
}