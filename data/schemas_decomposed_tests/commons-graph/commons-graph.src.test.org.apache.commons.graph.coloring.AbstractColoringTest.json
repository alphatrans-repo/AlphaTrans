{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-graph/src/test/java/org/apache/commons/graph/coloring/AbstractColoringTest.java",
    "imports": {
        "30-30:import Map": {
            "start": 30,
            "end": 30,
            "body": [
                "import java.util.Map;\n"
            ]
        },
        "31-31:import Random": {
            "start": 31,
            "end": 31,
            "body": [
                "import java.util.Random;\n"
            ]
        },
        "32-32:import Set": {
            "start": 32,
            "end": 32,
            "body": [
                "import java.util.Set;\n"
            ]
        },
        "28-28:import HashMap": {
            "start": 28,
            "end": 28,
            "body": [
                "import java.util.HashMap;\n"
            ]
        },
        "29-29:import HashSet": {
            "start": 29,
            "end": 29,
            "body": [
                "import java.util.HashSet;\n"
            ]
        },
        "26-26:import UndirectedMutableGraph": {
            "start": 26,
            "end": 26,
            "body": [
                "import org.apache.commons.graph.model.UndirectedMutableGraph;\n"
            ]
        },
        "25-25:import VertexPair": {
            "start": 25,
            "end": 25,
            "body": [
                "import org.apache.commons.graph.VertexPair;\n"
            ]
        },
        "23-23:import static Assert.assertTrue": {
            "start": 23,
            "end": 23,
            "body": [
                "import static org.junit.Assert.assertTrue;\n"
            ]
        },
        "22-22:import static Assert.assertNotNull": {
            "start": 22,
            "end": 22,
            "body": [
                "import static org.junit.Assert.assertNotNull;\n"
            ]
        }
    },
    "classes": {
        "AbstractColoringTest": {
            "start": 35,
            "end": 35,
            "is_abstract": true,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "78-84:createColorsList": {
                    "start": 78,
                    "end": 84,
                    "body": [
                        "    protected Set<Integer> createColorsList(int colorNumber) {\n",
                        "        Set<Integer> colors = new HashSet<Integer>();\n",
                        "        for (int j = 0; j < colorNumber; j++) {\n",
                        "            colors.add(j);\n",
                        "        }\n",
                        "        return colors;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "Set<Integer>",
                            "java.util.Set<Integer>"
                        ]
                    ],
                    "signature": "createColorsList(int)",
                    "parameters": [
                        "colorNumber"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "HashSet<Integer>()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Set",
                            "add(java.lang.Integer)"
                        ]
                    ]
                },
                "59-70:createColorMap": {
                    "start": 59,
                    "end": 70,
                    "body": [
                        "    protected Map<Integer, String> createColorMap(int numColor) {\n",
                        "        Map<Integer, String> colorCodes = new HashMap<Integer, String>();\n",
                        "        for (int i = 0; i < 100; i++) {\n",
                        "            Random rnd = new Random(i);\n",
                        "            colorCodes.put(\n",
                        "                    i,\n",
                        "                    String.format(\n",
                        "                            \"\\\"#%2x%2x%2x\\\"\",\n",
                        "                            rnd.nextInt(255), rnd.nextInt(255), rnd.nextInt(255)));\n",
                        "        }\n",
                        "        return colorCodes;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "Map<Integer,String>",
                            "java.util.Map<Integer,String>"
                        ]
                    ],
                    "signature": "createColorMap(int)",
                    "parameters": [
                        "numColor"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<Integer,String>()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Random",
                            "Random(long)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(java.lang.Integer,java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/util/Random",
                            "nextInt(int)"
                        ]
                    ]
                },
                "45-56:checkColoring": {
                    "start": 45,
                    "end": 56,
                    "body": [
                        "    protected <V, E, C> void checkColoring(\n",
                        "            UndirectedMutableGraph<V, E> g, ColoredVertices<V, C> coloredVertices) {\n",
                        "        for (E e : g.getEdges()) {\n",
                        "            VertexPair<V> vp = g.getVertices1(e);\n",
                        "            C h = coloredVertices.getColor(vp.getHead());\n",
                        "            C t = coloredVertices.getColor(vp.getTail());\n",
                        "\n",
                        "            assertNotNull(h);\n",
                        "            assertNotNull(t);\n",
                        "            assertTrue(!h.equals(t));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "checkColoring(UndirectedMutableGraph<V,E>, ColoredVertices<V,C>)",
                    "parameters": [
                        "g",
                        "coloredVertices"
                    ],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseGraph",
                            "getEdges()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseGraph",
                            "getVertices1(java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/coloring/ColoredVertices",
                            "getColor(java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/VertexPair",
                            "getHead()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/VertexPair",
                            "getTail()"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull(java.lang.Object)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals(java.lang.Object)"
                        ]
                    ]
                },
                "37-37:AbstractColoringTest": {
                    "start": 37,
                    "end": 37,
                    "body": [
                        "    AbstractColoringTest() {}\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "AbstractColoringTest()",
                    "parameters": [],
                    "calls": []
                }
            },
            "fields": {}
        }
    }
}