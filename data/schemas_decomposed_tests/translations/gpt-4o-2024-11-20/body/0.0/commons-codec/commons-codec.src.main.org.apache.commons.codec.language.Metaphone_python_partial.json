{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-codec/src/main/java/org/apache/commons/codec/language/Metaphone.java",
    "imports": {
        "20-20:import EncoderException": {
            "start": 20,
            "end": 20,
            "body": [
                "import org.apache.commons.codec.EncoderException;\n"
            ]
        },
        "21-21:import StringEncoder": {
            "start": 21,
            "end": 21,
            "body": [
                "import org.apache.commons.codec.StringEncoder;\n"
            ]
        }
    },
    "classes": {
        "Metaphone": {
            "start": 53,
            "end": 53,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [
                "StringEncoder"
            ],
            "extends": [],
            "methods": {
                "370-372:encode": {
                    "start": 370,
                    "end": 372,
                    "body": [
                        "    public String encode(final String str) {\n",
                        "        return encode1(str);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "encode(String)",
                    "parameters": [
                        "str"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.Metaphone",
                            "Metaphone",
                            "374-376:encode1"
                        ]
                    ],
                    "is_overload": true,
                    "partial_translation": [
                        "    def encode(self, str_: str) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "351-353:encode": {
                    "start": 351,
                    "end": 353,
                    "body": [
                        "    public Object encode(final Object obj) throws EncoderException {\n",
                        "        return encode0(obj);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Object",
                            "java.lang.Object"
                        ]
                    ],
                    "signature": "encode(Object)",
                    "parameters": [
                        "obj"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.Metaphone",
                            "Metaphone",
                            "355-361:encode0"
                        ]
                    ],
                    "is_overload": true,
                    "partial_translation": [
                        "    def encode(self, obj: typing.Any) -> typing.Any:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "404-406:setMaxCodeLen": {
                    "start": 404,
                    "end": 406,
                    "body": [
                        "    public void setMaxCodeLen(final int maxCodeLen) {\n",
                        "        this.maxCodeLen = maxCodeLen;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "setMaxCodeLen(int)",
                    "parameters": [
                        "maxCodeLen"
                    ],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def setMaxCodeLen(self, maxCodeLen: int) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "395-397:getMaxCodeLen": {
                    "start": 395,
                    "end": 397,
                    "body": [
                        "    public int getMaxCodeLen() {\n",
                        "        return this.maxCodeLen;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "getMaxCodeLen()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def getMaxCodeLen(self) -> int:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "386-388:isMetaphoneEqual": {
                    "start": 386,
                    "end": 388,
                    "body": [
                        "    public boolean isMetaphoneEqual(final String str1, final String str2) {\n",
                        "        return metaphone(str1).equals(metaphone(str2));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isMetaphoneEqual(String, String)",
                    "parameters": [
                        "str1",
                        "str2"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.Metaphone",
                            "Metaphone",
                            "79-305:metaphone"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def isMetaphoneEqual(self, str1: str, str2: str) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "374-376:encode1": {
                    "start": 374,
                    "end": 376,
                    "body": [
                        "    public String encode1(final String str) {\n",
                        "        return metaphone(str);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "encode1(String)",
                    "parameters": [
                        "str"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.Metaphone",
                            "Metaphone",
                            "79-305:metaphone"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def encode1(self, str_: str) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "355-361:encode0": {
                    "start": 355,
                    "end": 361,
                    "body": [
                        "    public Object encode0(final Object obj) throws EncoderException {\n",
                        "        if (!(obj instanceof String)) {\n",
                        "            throw new EncoderException(\n",
                        "                    \"Parameter supplied to Metaphone encode is not of type java.lang.String\", null);\n",
                        "        }\n",
                        "        return metaphone((String) obj);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Object",
                            "java.lang.Object"
                        ]
                    ],
                    "signature": "encode0(Object)",
                    "parameters": [
                        "obj"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.EncoderException",
                            "EncoderException",
                            "62-64:EncoderException"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.Metaphone",
                            "Metaphone",
                            "79-305:metaphone"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def encode0(self, obj: typing.Any) -> typing.Any:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "79-305:metaphone": {
                    "start": 79,
                    "end": 305,
                    "body": [
                        "    public String metaphone(final String txt) {\n",
                        "        boolean hard = false;\n",
                        "        final int txtLength;\n",
                        "        if (txt == null || (txtLength = txt.length()) == 0) {\n",
                        "            return \"\";\n",
                        "        }\n",
                        "        if (txtLength == 1) {\n",
                        "            return txt.toUpperCase(java.util.Locale.ENGLISH);\n",
                        "        }\n",
                        "\n",
                        "        final char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n",
                        "\n",
                        "        final StringBuilder local = new StringBuilder(40); // manipulate\n",
                        "        final StringBuilder code = new StringBuilder(10); //   output\n",
                        "        switch (inwd[0]) {\n",
                        "            case 'K':\n",
                        "            case 'G':\n",
                        "            case 'P': /* looking for KN, etc*/\n",
                        "                if (inwd[1] == 'N') {\n",
                        "                    local.append(inwd, 1, inwd.length - 1);\n",
                        "                } else {\n",
                        "                    local.append(inwd);\n",
                        "                }\n",
                        "                break;\n",
                        "            case 'A': /* looking for AE */\n",
                        "                if (inwd[1] == 'E') {\n",
                        "                    local.append(inwd, 1, inwd.length - 1);\n",
                        "                } else {\n",
                        "                    local.append(inwd);\n",
                        "                }\n",
                        "                break;\n",
                        "            case 'W': /* looking for WR or WH */\n",
                        "                if (inwd[1] == 'R') { // WR -> R\n",
                        "                    local.append(inwd, 1, inwd.length - 1);\n",
                        "                    break;\n",
                        "                }\n",
                        "                if (inwd[1] == 'H') {\n",
                        "                    local.append(inwd, 1, inwd.length - 1);\n",
                        "                    local.setCharAt(0, 'W'); // WH -> W\n",
                        "                } else {\n",
                        "                    local.append(inwd);\n",
                        "                }\n",
                        "                break;\n",
                        "            case 'X': /* initial X becomes S */\n",
                        "                inwd[0] = 'S';\n",
                        "                local.append(inwd);\n",
                        "                break;\n",
                        "            default:\n",
                        "                local.append(inwd);\n",
                        "        } // now local has working string with initials fixed\n",
                        "\n",
                        "        final int wdsz = local.length();\n",
                        "        int n = 0;\n",
                        "\n",
                        "        while (code.length() < this.getMaxCodeLen() && n < wdsz) { // max code size of 4 works well\n",
                        "            final char symb = local.charAt(n);\n",
                        "            if (symb != 'C' && isPreviousChar(local, n, symb)) {\n",
                        "                n++;\n",
                        "            } else { // not dup\n",
                        "                switch (symb) {\n",
                        "                    case 'A':\n",
                        "                    case 'E':\n",
                        "                    case 'I':\n",
                        "                    case 'O':\n",
                        "                    case 'U':\n",
                        "                        if (n == 0) {\n",
                        "                            code.append(symb);\n",
                        "                        }\n",
                        "                        break; // only use vowel if leading char\n",
                        "                    case 'B':\n",
                        "                        if (isPreviousChar(local, n, 'M')\n",
                        "                                && isLastChar(wdsz, n)) { // B is silent if word ends in MB\n",
                        "                            break;\n",
                        "                        }\n",
                        "                        code.append(symb);\n",
                        "                        break;\n",
                        "                    case 'C': // lots of C special cases\n",
                        "                        /* discard if SCI, SCE or SCY */\n",
                        "                        if (isPreviousChar(local, n, 'S')\n",
                        "                                && !isLastChar(wdsz, n)\n",
                        "                                && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\n",
                        "                            break;\n",
                        "                        }\n",
                        "                        if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n",
                        "                            code.append('X');\n",
                        "                            break;\n",
                        "                        }\n",
                        "                        if (!isLastChar(wdsz, n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\n",
                        "                            code.append('S');\n",
                        "                            break; // CI,CE,CY -> S\n",
                        "                        }\n",
                        "                        if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) { // SCH->sk\n",
                        "                            code.append('K');\n",
                        "                            break;\n",
                        "                        }\n",
                        "                        if (isNextChar(local, n, 'H')) { // detect CH\n",
                        "                            if (n == 0\n",
                        "                                    && wdsz >= 3\n",
                        "                                    && isVowel(local, 2)) { // CH consonant -> K consonant\n",
                        "                                code.append('K');\n",
                        "                            } else {\n",
                        "                                code.append('X'); // CHvowel -> X\n",
                        "                            }\n",
                        "                        } else {\n",
                        "                            code.append('K');\n",
                        "                        }\n",
                        "                        break;\n",
                        "                    case 'D':\n",
                        "                        if (!isLastChar(wdsz, n + 1)\n",
                        "                                && isNextChar(local, n, 'G')\n",
                        "                                && FRONTV.indexOf(local.charAt(n + 2)) >= 0) { // DGE DGI DGY -> J\n",
                        "                            code.append('J');\n",
                        "                            n += 2;\n",
                        "                        } else {\n",
                        "                            code.append('T');\n",
                        "                        }\n",
                        "                        break;\n",
                        "                    case 'G': // GH silent at end or before consonant\n",
                        "                        if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n",
                        "                            break;\n",
                        "                        }\n",
                        "                        if (!isLastChar(wdsz, n + 1)\n",
                        "                                && isNextChar(local, n, 'H')\n",
                        "                                && !isVowel(local, n + 2)) {\n",
                        "                            break;\n",
                        "                        }\n",
                        "                        if (n > 0\n",
                        "                                && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n",
                        "                            break; // silent G\n",
                        "                        }\n",
                        "                        hard = isPreviousChar(local, n, 'G');\n",
                        "                        if (!isLastChar(wdsz, n)\n",
                        "                                && FRONTV.indexOf(local.charAt(n + 1)) >= 0\n",
                        "                                && !hard) {\n",
                        "                            code.append('J');\n",
                        "                        } else {\n",
                        "                            code.append('K');\n",
                        "                        }\n",
                        "                        break;\n",
                        "                    case 'H':\n",
                        "                        if (isLastChar(wdsz, n)) {\n",
                        "                            break; // terminal H\n",
                        "                        }\n",
                        "                        if (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {\n",
                        "                            break;\n",
                        "                        }\n",
                        "                        if (isVowel(local, n + 1)) {\n",
                        "                            code.append('H'); // Hvowel\n",
                        "                        }\n",
                        "                        break;\n",
                        "                    case 'F':\n",
                        "                    case 'J':\n",
                        "                    case 'L':\n",
                        "                    case 'M':\n",
                        "                    case 'N':\n",
                        "                    case 'R':\n",
                        "                        code.append(symb);\n",
                        "                        break;\n",
                        "                    case 'K':\n",
                        "                        if (n > 0) { // not initial\n",
                        "                            if (!isPreviousChar(local, n, 'C')) {\n",
                        "                                code.append(symb);\n",
                        "                            }\n",
                        "                        } else {\n",
                        "                            code.append(symb); // initial K\n",
                        "                        }\n",
                        "                        break;\n",
                        "                    case 'P':\n",
                        "                        if (isNextChar(local, n, 'H')) {\n",
                        "                            code.append('F');\n",
                        "                        } else {\n",
                        "                            code.append(symb);\n",
                        "                        }\n",
                        "                        break;\n",
                        "                    case 'Q':\n",
                        "                        code.append('K');\n",
                        "                        break;\n",
                        "                    case 'S':\n",
                        "                        if (regionMatch(local, n, \"SH\")\n",
                        "                                || regionMatch(local, n, \"SIO\")\n",
                        "                                || regionMatch(local, n, \"SIA\")) {\n",
                        "                            code.append('X');\n",
                        "                        } else {\n",
                        "                            code.append('S');\n",
                        "                        }\n",
                        "                        break;\n",
                        "                    case 'T':\n",
                        "                        if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n",
                        "                            code.append('X');\n",
                        "                            break;\n",
                        "                        }\n",
                        "                        if (regionMatch(local, n, \"TCH\")) {\n",
                        "                            break;\n",
                        "                        }\n",
                        "                        if (regionMatch(local, n, \"TH\")) {\n",
                        "                            code.append('0');\n",
                        "                        } else {\n",
                        "                            code.append('T');\n",
                        "                        }\n",
                        "                        break;\n",
                        "                    case 'V':\n",
                        "                        code.append('F');\n",
                        "                        break;\n",
                        "                    case 'W':\n",
                        "                    case 'Y': // silent if not followed by vowel\n",
                        "                        if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n",
                        "                            code.append(symb);\n",
                        "                        }\n",
                        "                        break;\n",
                        "                    case 'X':\n",
                        "                        code.append('K');\n",
                        "                        code.append('S');\n",
                        "                        break;\n",
                        "                    case 'Z':\n",
                        "                        code.append('S');\n",
                        "                        break;\n",
                        "                    default:\n",
                        "                        break;\n",
                        "                } // end switch\n",
                        "                n++;\n",
                        "            } // end else from symb != 'C'\n",
                        "            if (code.length() > this.getMaxCodeLen()) {\n",
                        "                code.setLength(this.getMaxCodeLen());\n",
                        "            }\n",
                        "        }\n",
                        "        return code.toString();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "metaphone(String)",
                    "parameters": [
                        "txt"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "toCharArray()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "toUpperCase(java.util.Locale)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/AbstractStringBuilder",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(char[],int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(char[])"
                        ],
                        [
                            "library",
                            "java.base/java/lang/AbstractStringBuilder",
                            "setCharAt(int,char)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.Metaphone",
                            "Metaphone",
                            "395-397:getMaxCodeLen"
                        ],
                        [
                            "library",
                            "java.base/java/lang/AbstractStringBuilder",
                            "charAt(int)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.Metaphone",
                            "Metaphone",
                            "311-317:isPreviousChar"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(char)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.Metaphone",
                            "Metaphone",
                            "336-338:isLastChar"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "indexOf(int)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.Metaphone",
                            "Metaphone",
                            "327-334:regionMatch"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.Metaphone",
                            "Metaphone",
                            "319-325:isNextChar"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.Metaphone",
                            "Metaphone",
                            "307-309:isVowel"
                        ],
                        [
                            "library",
                            "java.base/java/lang/AbstractStringBuilder",
                            "setLength(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def metaphone(self, txt: str) -> str:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "68-68:Metaphone": {
                    "start": 68,
                    "end": 68,
                    "body": [
                        "    public Metaphone() {}\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "Metaphone()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __init__(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "336-338:isLastChar": {
                    "start": 336,
                    "end": 338,
                    "body": [
                        "    private boolean isLastChar(final int wdsz, final int n) {\n",
                        "        return n + 1 == wdsz;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isLastChar(int, int)",
                    "parameters": [
                        "wdsz",
                        "n"
                    ],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __isLastChar(self, wdsz: int, n: int) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "327-334:regionMatch": {
                    "start": 327,
                    "end": 334,
                    "body": [
                        "    private boolean regionMatch(final StringBuilder string, final int index, final String test) {\n",
                        "        boolean matches = false;\n",
                        "        if (index >= 0 && index + test.length() - 1 < string.length()) {\n",
                        "            final String substring = string.substring(index, index + test.length());\n",
                        "            matches = substring.equals(test);\n",
                        "        }\n",
                        "        return matches;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "regionMatch(StringBuilder, int, String)",
                    "parameters": [
                        "string",
                        "index",
                        "test"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/AbstractStringBuilder",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/AbstractStringBuilder",
                            "substring(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "equals(java.lang.Object)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __regionMatch(self, string: typing.Union[typing.List[str], io.StringIO], index: int, test: str) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "319-325:isNextChar": {
                    "start": 319,
                    "end": 325,
                    "body": [
                        "    private boolean isNextChar(final StringBuilder string, final int index, final char c) {\n",
                        "        boolean matches = false;\n",
                        "        if (index >= 0 && index < string.length() - 1) {\n",
                        "            matches = string.charAt(index + 1) == c;\n",
                        "        }\n",
                        "        return matches;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isNextChar(StringBuilder, int, char)",
                    "parameters": [
                        "string",
                        "index",
                        "c"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/AbstractStringBuilder",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/AbstractStringBuilder",
                            "charAt(int)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __isNextChar(self, string: typing.Union[typing.List[str], io.StringIO], index: int, c: str) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "311-317:isPreviousChar": {
                    "start": 311,
                    "end": 317,
                    "body": [
                        "    private boolean isPreviousChar(final StringBuilder string, final int index, final char c) {\n",
                        "        boolean matches = false;\n",
                        "        if (index > 0 && index < string.length()) {\n",
                        "            matches = string.charAt(index - 1) == c;\n",
                        "        }\n",
                        "        return matches;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isPreviousChar(StringBuilder, int, char)",
                    "parameters": [
                        "string",
                        "index",
                        "c"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/AbstractStringBuilder",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/AbstractStringBuilder",
                            "charAt(int)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __isPreviousChar(self, string: typing.Union[typing.List[str], io.StringIO], index: int, c: str) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "307-309:isVowel": {
                    "start": 307,
                    "end": 309,
                    "body": [
                        "    private boolean isVowel(final StringBuilder string, final int index) {\n",
                        "        return VOWELS.indexOf(string.charAt(index)) >= 0;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isVowel(StringBuilder, int)",
                    "parameters": [
                        "string",
                        "index"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "indexOf(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/AbstractStringBuilder",
                            "charAt(int)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __isVowel(self, string: typing.Union[typing.List[str], io.StringIO], index: int) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                }
            },
            "fields": {
                "65-65:maxCodeLen": {
                    "start": 65,
                    "end": 65,
                    "body": [
                        "    private int maxCodeLen = 4;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "partial_translation": [
                        "    __maxCodeLen: int = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "62-62:VARSON": {
                    "start": 62,
                    "end": 62,
                    "body": [
                        "    private static final String VARSON = \"CSPTG\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "partial_translation": [
                        "    __VARSON: str = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "59-59:FRONTV": {
                    "start": 59,
                    "end": 59,
                    "body": [
                        "    private static final String FRONTV = \"EIY\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "partial_translation": [
                        "    __FRONTV: str = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "56-56:VOWELS": {
                    "start": 56,
                    "end": 56,
                    "body": [
                        "    private static final String VOWELS = \"AEIOU\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "partial_translation": [
                        "    __VOWELS: str = <placeholder>",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class Metaphone(StringEncoder):\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "from io import StringIO",
        "import io",
        "import typing\nfrom typing import *",
        "from src.main.org.apache.commons.codec.EncoderException import *",
        "from src.main.org.apache.commons.codec.StringEncoder import *"
    ]
}