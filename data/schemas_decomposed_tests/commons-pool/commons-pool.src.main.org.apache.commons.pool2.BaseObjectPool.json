{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-pool/src/main/java/org/apache/commons/pool2/BaseObjectPool.java",
    "imports": {},
    "classes": {
        "BaseObjectPool": {
            "start": 29,
            "end": 29,
            "is_abstract": true,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "BaseObject",
                "ObjectPool<T>"
            ],
            "methods": {
                "114-117:toStringAppendFields": {
                    "start": 114,
                    "end": 117,
                    "body": [
                        "    protected void toStringAppendFields(final StringBuilder builder) {\n",
                        "        builder.append(\"closed=\");\n",
                        "        builder.append(closed);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "toStringAppendFields(StringBuilder)",
                    "parameters": [
                        "builder"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(boolean)"
                        ]
                    ]
                },
                "94-96:getNumIdle": {
                    "start": 94,
                    "end": 96,
                    "body": [
                        "    public int getNumIdle() {\n",
                        "        return -1;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "getNumIdle()",
                    "parameters": [],
                    "calls": []
                },
                "84-86:getNumActive": {
                    "start": 84,
                    "end": 86,
                    "body": [
                        "    public int getNumActive() {\n",
                        "        return -1;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "int",
                            "int"
                        ]
                    ],
                    "signature": "getNumActive()",
                    "parameters": [],
                    "calls": []
                },
                "74-76:close": {
                    "start": 74,
                    "end": 76,
                    "body": [
                        "    public void close() {\n",
                        "        closed = true;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "close()",
                    "parameters": [],
                    "calls": []
                },
                "64-66:clear": {
                    "start": 64,
                    "end": 66,
                    "body": [
                        "    public void clear() throws Exception, UnsupportedOperationException {\n",
                        "        throw new UnsupportedOperationException();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "clear()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/UnsupportedOperationException",
                            "UnsupportedOperationException()"
                        ]
                    ]
                },
                "39-41:addObject": {
                    "start": 39,
                    "end": 41,
                    "body": [
                        "    public void addObject() throws Exception, UnsupportedOperationException {\n",
                        "        throw new UnsupportedOperationException();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "addObject()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/UnsupportedOperationException",
                            "UnsupportedOperationException()"
                        ]
                    ]
                },
                "106-108:isClosed": {
                    "start": 106,
                    "end": 108,
                    "body": [
                        "    public final boolean isClosed() {\n",
                        "        return closed;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "final"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isClosed()",
                    "parameters": [],
                    "calls": []
                },
                "49-53:assertOpen": {
                    "start": 49,
                    "end": 53,
                    "body": [
                        "    protected final void assertOpen() throws IllegalStateException {\n",
                        "        if (isClosed()) {\n",
                        "            throw new IllegalStateException(\"Pool not open\");\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "final",
                        "protected"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "assertOpen()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-pool.src.main.org.apache.commons.pool2.BaseObjectPool",
                            "BaseObjectPool",
                            "106-108:isClosed"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalStateException",
                            "IllegalStateException(java.lang.String)"
                        ]
                    ]
                },
                "111-111:returnObject": {
                    "start": 111,
                    "end": 111,
                    "body": [
                        "    public abstract void returnObject(T obj) throws Exception;\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "abstract"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "returnObject(T)",
                    "parameters": [
                        "obj"
                    ],
                    "calls": []
                },
                "99-99:invalidateObject0": {
                    "start": 99,
                    "end": 99,
                    "body": [
                        "    public abstract void invalidateObject0(T obj) throws Exception;\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "abstract"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "invalidateObject0(T)",
                    "parameters": [
                        "obj"
                    ],
                    "calls": []
                },
                "56-56:borrowObject": {
                    "start": 56,
                    "end": 56,
                    "body": [
                        "    public abstract T borrowObject() throws Exception;\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "abstract"
                    ],
                    "return_types": [
                        [
                            "T",
                            "T"
                        ]
                    ],
                    "signature": "borrowObject()",
                    "parameters": [],
                    "calls": []
                }
            },
            "fields": {
                "31-31:closed": {
                    "start": 31,
                    "end": 31,
                    "body": [
                        "    private volatile boolean closed;\n"
                    ],
                    "modifiers": [
                        "volatile",
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                }
            }
        }
    }
}