{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/longcompression/LongBasicTest.java",
    "imports": {
        "13-13:import Arrays": {
            "start": 13,
            "end": 13,
            "body": [
                "import java.util.Arrays;\n"
            ]
        },
        "15-15:import Test": {
            "start": 15,
            "end": 15,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "19-19:import IntWrapper": {
            "start": 19,
            "end": 19,
            "body": [
                "import me.lemire.integercompression.IntWrapper;\n"
            ]
        },
        "17-17:import FastPFOR": {
            "start": 17,
            "end": 17,
            "body": [
                "import me.lemire.integercompression.FastPFOR;\n"
            ]
        },
        "18-18:import FastPFOR128": {
            "start": 18,
            "end": 18,
            "body": [
                "import me.lemire.integercompression.FastPFOR128;\n"
            ]
        },
        "20-20:import LongDelta": {
            "start": 20,
            "end": 20,
            "body": [
                "import me.lemire.longcompression.differential.LongDelta;\n"
            ]
        },
        "10-10:import static Assert.assertArrayEquals": {
            "start": 10,
            "end": 10,
            "body": [
                "import static org.junit.Assert.assertArrayEquals;\n"
            ]
        },
        "11-11:import static Assert.assertEquals": {
            "start": 11,
            "end": 11,
            "body": [
                "import static org.junit.Assert.assertEquals;\n"
            ]
        }
    },
    "classes": {
        "LongBasicTest": {
            "start": 28,
            "end": 28,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "322-336:fastPfor128Test_test0_decomposed": {
                    "start": 322,
                    "end": 336,
                    "body": [
                        "    public void fastPfor128Test_test0_decomposed()  {\n",
                        "        for (LongCODEC codec : codecs) {\n",
                        "\t        int N = FastPFOR128.BLOCK_SIZE;\n",
                        "\t        long[] data = new long[N];\n",
                        "\t        for (int i = 0; i < N; i++)\n",
                        "\t            data[i] = 0;\n",
                        "\t        data[126] = -1;\n",
                        "\t        long[] comp = LongTestUtils.compress1(codec, Arrays.copyOf(data, N));\n",
                        "\t        long[] answer = LongTestUtils.uncompress0(codec, comp, N);\n",
                        "\t        for (int k = 0; k < N; ++k)\n",
                        "\t            if (answer[k] != data[k])\n",
                        "\t                throw new RuntimeException(\"bug \" + k + \" \" + answer[k]\n",
                        "\t                        + \" != \" + data[k]);\n",
                        "    \t}\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "fastPfor128Test_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                            "LongTestUtils",
                            "79-85:compress1"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(long[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                            "LongTestUtils",
                            "87-93:uncompress0"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ]
                    ]
                },
                "305-319:fastPforTest_test0_decomposed": {
                    "start": 305,
                    "end": 319,
                    "body": [
                        "    public void fastPforTest_test0_decomposed()  {\n",
                        "        for (LongCODEC codec : codecs) {\n",
                        "\t        int N = FastPFOR.BLOCK_SIZE;\n",
                        "\t        long[] data = new long[N];\n",
                        "\t        for (int i = 0; i < N; i++)\n",
                        "\t            data[i] = 0;\n",
                        "\t        data[126] = -1;\n",
                        "\t        long[] comp = LongTestUtils.compress1(codec, Arrays.copyOf(data, N));\n",
                        "\t        long[] answer = LongTestUtils.uncompress0(codec, comp, N);\n",
                        "\t        for (int k = 0; k < N; ++k)\n",
                        "\t            if (answer[k] != data[k])\n",
                        "\t                throw new RuntimeException(\"bug \" + k + \" \" + answer[k]\n",
                        "\t                        + \" != \" + data[k]);\n",
                        "    \t}\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "fastPforTest_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                            "LongTestUtils",
                            "79-85:compress1"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(long[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                            "LongTestUtils",
                            "87-93:uncompress0"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ]
                    ]
                },
                "255-302:varyingLengthTest2_test0_decomposed": {
                    "start": 255,
                    "end": 302,
                    "body": [
                        "    public void varyingLengthTest2_test0_decomposed()  {\n",
                        "        int N = 128;\n",
                        "        long[] data = new long[N];\n",
                        "        data[127] = -1;\n",
                        "        for (LongCODEC c : codecs) {\n",
                        "            System.out.println(\"[BasicTest.varyingLengthTest2] codec = \" + c);\n",
                        "            try {\n",
                        "                // CODEC Simple9 is limited to \"small\" integers.\n",
                        "                if (c.getClass().equals(\n",
                        "                        Class.forName(\"me.lemire.integercompression.Simple9\")))\n",
                        "                    continue;\n",
                        "            } catch (ClassNotFoundException e) {\n",
                        "                e.printStackTrace();\n",
                        "            }\n",
                        "            try {\n",
                        "                // CODEC Simple16 is limited to \"small\" integers.\n",
                        "                if (c.getClass().equals(\n",
                        "                        Class.forName(\"me.lemire.integercompression.Simple16\")))\n",
                        "                    continue;\n",
                        "            } catch (ClassNotFoundException e) {\n",
                        "                e.printStackTrace();\n",
                        "            }\n",
                        "            try {\n",
                        "                // CODEC GroupSimple9 is limited to \"small\" integers.\n",
                        "                if (c.getClass().equals(\n",
                        "                        Class.forName(\"me.lemire.integercompression.GroupSimple9\")))\n",
                        "                    continue;\n",
                        "            } catch (ClassNotFoundException e) {\n",
                        "                e.printStackTrace();\n",
                        "            }\n",
                        "\n",
                        "            for (int L = 1; L <= 128; L++) {\n",
                        "                long[] comp = LongTestUtils.compress1(c, Arrays.copyOf(data, L));\n",
                        "                long[] answer = LongTestUtils.uncompress0(c, comp, L);\n",
                        "                for (int k = 0; k < L; ++k)\n",
                        "                    if (answer[k] != data[k])\n",
                        "                        throw new RuntimeException(\"bug\");\n",
                        "            }\n",
                        "            for (int L = 128; L <= N; L *= 2) {\n",
                        "                long[] comp = LongTestUtils.compress1(c, Arrays.copyOf(data, L));\n",
                        "                long[] answer = LongTestUtils.uncompress0(c, comp, L);\n",
                        "                for (int k = 0; k < L; ++k)\n",
                        "                    if (answer[k] != data[k])\n",
                        "                        throw new RuntimeException(\"bug\");\n",
                        "            }\n",
                        "\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "varyingLengthTest2_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "getClass()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "forName(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Throwable",
                            "printStackTrace()"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                            "LongTestUtils",
                            "79-85:compress1"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(long[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                            "LongTestUtils",
                            "87-93:uncompress0"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ]
                    ]
                },
                "224-252:varyingLengthTest_test0_decomposed": {
                    "start": 224,
                    "end": 252,
                    "body": [
                        "    public void varyingLengthTest_test0_decomposed()  {\n",
                        "        int N = 4096;\n",
                        "        long[] data = new long[N];\n",
                        "        for (int k = 0; k < N; ++k)\n",
                        "            data[k] = k;\n",
                        "        for (LongCODEC c : codecs) {\n",
                        "            System.out.println(\"[BasicTest.varyingLengthTest] codec = \" + c);\n",
                        "            for (int L = 1; L <= 128; L++) {\n",
                        "                long[] comp = LongTestUtils.compress1(c, Arrays.copyOf(data, L));\n",
                        "                long[] answer = LongTestUtils.uncompress0(c, comp, L);\n",
                        "                for (int k = 0; k < L; ++k)\n",
                        "                    if (answer[k] != data[k])\n",
                        "                        throw new RuntimeException(\"bug\");\n",
                        "            }\n",
                        "            for (int L = 128; L <= N; L *= 2) {\n",
                        "                long[] comp = LongTestUtils.compress1(c, Arrays.copyOf(data, L));\n",
                        "                long[] answer = LongTestUtils.uncompress0(c, comp, L);\n",
                        "                for (int k = 0; k < L; ++k)\n",
                        "                    if (answer[k] != data[k]) {\n",
                        "                        System.out.println(Arrays.toString(Arrays.copyOf(\n",
                        "                                answer, L)));\n",
                        "                        System.out.println(Arrays.toString(Arrays.copyOf(data,\n",
                        "                                L)));\n",
                        "                        throw new RuntimeException(\"bug\");\n",
                        "                    }\n",
                        "            }\n",
                        "\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "varyingLengthTest_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                            "LongTestUtils",
                            "79-85:compress1"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(long[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                            "LongTestUtils",
                            "87-93:uncompress0"
                        ],
                        [
                            "library",
                            "java.base/java/lang/RuntimeException",
                            "RuntimeException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "toString(long[])"
                        ]
                    ]
                },
                "199-221:saulTest_test0_decomposed": {
                    "start": 199,
                    "end": 221,
                    "body": [
                        "    public void saulTest_test0_decomposed()  {\n",
                        "        for (LongCODEC C : codecs) {\n",
                        "\t\t\tfor (int x = 0; x < 50; ++x) {\n",
                        "\t\t\t\tlong[] a = { 2, 3, 4, 5 };\n",
                        "\t\t\t\tlong[] b = new long[90];\n",
                        "\t\t\t\tlong[] c = new long[a.length];\n",
                        "\n",
                        "\t\t\t\tIntWrapper aOffset = new IntWrapper(0);\n",
                        "\t\t\t\tIntWrapper bOffset = new IntWrapper(x);\n",
                        "\t\t\t\tC.compress0(a, aOffset, a.length, b, bOffset);\n",
                        "\t\t\t\tint len = bOffset.get() - x;\n",
                        "\n",
                        "\t\t\t\tbOffset.set(x);\n",
                        "\t\t\t\tIntWrapper cOffset = new IntWrapper(0);\n",
                        "\t\t\t\tC.uncompress1(b, bOffset, len, c, cOffset);\n",
                        "\t\t\t\tif(!Arrays.equals(a, c)) {\n",
                        "\t\t\t\t\tSystem.out.println(\"Problem with \"+C);\n",
                        "\t\t\t\t}\n",
                        "\t\t\t\tassertArrayEquals(a, c);\n",
                        "\n",
                        "\t\t\t}\n",
                        "\t\t}\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "saulTest_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                            "LongCODEC",
                            "38-40:compress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "89-91:set"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                            "LongCODEC",
                            "59-61:uncompress1"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "equals(long[],long[])"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(long[],long[])"
                        ]
                    ]
                },
                "125-153:testUnsorted": {
                    "start": 125,
                    "end": 153,
                    "body": [
                        "    public void testUnsorted(LongCODEC codec) {\n",
                        "        int[] lengths = { 133, 1026, 1333333 };\n",
                        "        for (int N : lengths) {\n",
                        "            long[] data = new long[N];\n",
                        "            // initialize the data (most will be small)\n",
                        "            for (int k = 0; k < N; k += 1)\n",
                        "                data[k] = 3;\n",
                        "            // throw some larger values\n",
                        "            for (int k = 0; k < N; k += 5)\n",
                        "                data[k] = 100;\n",
                        "            for (int k = 0; k < N; k += 533)\n",
                        "                data[k] = 10000;\n",
                        "            data[5] = -311;\n",
                        "            // could need more compressing\n",
                        "            long[] compressed = new long[(int) Math.ceil(N * 1.01) + 1024];\n",
                        "            IntWrapper inputoffset = new IntWrapper(0);\n",
                        "            IntWrapper outputoffset = new IntWrapper(0);\n",
                        "            codec.compress0(data, inputoffset, data.length, compressed,\n",
                        "                    outputoffset);\n",
                        "            // we can repack the data: (optional)\n",
                        "            compressed = Arrays.copyOf(compressed, outputoffset.intValue());\n",
                        "\n",
                        "            long[] recovered = new long[N];\n",
                        "            IntWrapper recoffset = new IntWrapper(0);\n",
                        "            codec.uncompress1(compressed, new IntWrapper(0), compressed.length,\n",
                        "                    recovered, recoffset);\n",
                        "            assertArrayEquals(data, recovered);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testUnsorted(LongCODEC)",
                    "parameters": [
                        "codec"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Math",
                            "ceil(double)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                            "LongCODEC",
                            "38-40:compress0"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(long[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                            "LongCODEC",
                            "59-61:uncompress1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(long[],long[])"
                        ]
                    ]
                },
                "172-187:testUnsorted3": {
                    "start": 172,
                    "end": 187,
                    "body": [
                        "    private void testUnsorted3(LongCODEC codec) {\n",
                        "        long[] data = new long[128];\n",
                        "        data[127] = -1;\n",
                        "        long[] compressed = new long[1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "        codec.compress0(data, inputoffset, data.length, compressed, outputoffset);\n",
                        "        // we can repack the data: (optional)\n",
                        "        compressed = Arrays.copyOf(compressed, outputoffset.intValue());\n",
                        "\n",
                        "        long[] recovered = new long[128];\n",
                        "        IntWrapper recoffset = new IntWrapper(0);\n",
                        "        codec.uncompress1(compressed, new IntWrapper(0), compressed.length,\n",
                        "                recovered, recoffset);\n",
                        "        assertArrayEquals(data, recovered);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testUnsorted3(LongCODEC)",
                    "parameters": [
                        "codec"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                            "LongCODEC",
                            "38-40:compress0"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(long[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                            "LongCODEC",
                            "59-61:uncompress1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(long[],long[])"
                        ]
                    ]
                },
                "155-170:testUnsorted2": {
                    "start": 155,
                    "end": 170,
                    "body": [
                        "    private void testUnsorted2(LongCODEC codec) {\n",
                        "        long[] data = new long[128];\n",
                        "        data[5] = -1;\n",
                        "        long[] compressed = new long[1024];\n",
                        "        IntWrapper inputoffset = new IntWrapper(0);\n",
                        "        IntWrapper outputoffset = new IntWrapper(0);\n",
                        "        codec.compress0(data, inputoffset, data.length, compressed, outputoffset);\n",
                        "        // we can repack the data: (optional)\n",
                        "        compressed = Arrays.copyOf(compressed, outputoffset.intValue());\n",
                        "\n",
                        "        long[] recovered = new long[128];\n",
                        "        IntWrapper recoffset = new IntWrapper(0);\n",
                        "        codec.uncompress1(compressed, new IntWrapper(0), compressed.length,\n",
                        "                recovered, recoffset);\n",
                        "        assertArrayEquals(data, recovered);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testUnsorted2(LongCODEC)",
                    "parameters": [
                        "codec"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                            "LongCODEC",
                            "38-40:compress0"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(long[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                            "LongCODEC",
                            "59-61:uncompress1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(long[],long[])"
                        ]
                    ]
                },
                "81-119:testCodec": {
                    "start": 81,
                    "end": 119,
                    "body": [
                        "    private static void testCodec(LongCODEC c, LongCODEC co,\n",
                        "            long[][] data, long max) {\n",
                        "        int N = data.length;\n",
                        "        int maxlength = 0;\n",
                        "        for (int k = 0; k < N; ++k) {\n",
                        "            if (data[k].length > maxlength)\n",
                        "                maxlength = data[k].length;\n",
                        "        }\n",
                        "        long[] buffer = new long[maxlength + 1024];\n",
                        "        long[] dataout = new long[4 * maxlength + 1024];\n",
                        "        // 4x + 1024 to account for the possibility of some negative\n",
                        "        // compression.\n",
                        "        IntWrapper inpos = IntWrapper.IntWrapper1();\n",
                        "        IntWrapper outpos = IntWrapper.IntWrapper1();\n",
                        "        for (int k = 0; k < N; ++k) {\n",
                        "            long[] backupdata = Arrays.copyOf(data[k], data[k].length);\n",
                        "\n",
                        "            inpos.set(1);\n",
                        "            outpos.set(0);\n",
                        "            if (!(c instanceof IntegratedLongCODEC)) {\n",
                        "                LongDelta.delta0(backupdata);\n",
                        "            }\n",
                        "            c.compress0(backupdata, inpos, backupdata.length - inpos.get(),\n",
                        "                    dataout, outpos);\n",
                        "            final int thiscompsize = outpos.get() + 1;\n",
                        "            inpos.set(0);\n",
                        "            outpos.set(1);\n",
                        "            buffer[0] = backupdata[0];\n",
                        "            co.uncompress1(dataout, inpos, thiscompsize - 1, buffer, outpos);\n",
                        "            if (!(c instanceof IntegratedLongCODEC))\n",
                        "            \tLongDelta.fastinverseDelta0(buffer);\n",
                        "\n",
                        "            // Check assertions.\n",
                        "            assertEquals(\"length is not match\", outpos.get(), data[k].length);\n",
                        "            long[] bufferCutout = Arrays.copyOf(buffer, outpos.get());\n",
                        "            assertArrayEquals(\"failed to reconstruct original data\", data[k],\n",
                        "                    bufferCutout);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testCodec(LongCODEC, LongCODEC, long[][], long)",
                    "parameters": [
                        "c",
                        "co",
                        "data",
                        "max"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "24-26:IntWrapper1"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(long[],int)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "62-64:get"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "89-91:set"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "24-28:delta0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                            "LongCODEC",
                            "38-40:compress0"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                            "LongCODEC",
                            "59-61:uncompress1"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                            "LongDelta",
                            "97-113:fastinverseDelta0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(java.lang.String,long[],long[])"
                        ]
                    ]
                },
                "67-79:testZeroInZeroOut": {
                    "start": 67,
                    "end": 79,
                    "body": [
                        "    private static void testZeroInZeroOut(LongCODEC c) {\n",
                        "        long[] x = new long[0];\n",
                        "        long[] y = new long[0];\n",
                        "        IntWrapper i0 = new IntWrapper(0);\n",
                        "        IntWrapper i1 = new IntWrapper(0);\n",
                        "        c.compress0(x, i0, 0, y, i1);\n",
                        "        assertEquals(0, i1.intValue());\n",
                        "\n",
                        "        long[] out = new long[0];\n",
                        "        IntWrapper outpos = new IntWrapper(0);\n",
                        "        c.uncompress1(y, i1, 0, out, outpos);\n",
                        "        assertEquals(0, outpos.intValue());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testZeroInZeroOut(LongCODEC)",
                    "parameters": [
                        "c"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                            "LongCODEC",
                            "38-40:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                            "LongCODEC",
                            "59-61:uncompress1"
                        ]
                    ]
                },
                "56-65:testSpurious": {
                    "start": 56,
                    "end": 65,
                    "body": [
                        "    private static void testSpurious(LongCODEC c) {\n",
                        "        long[] x = new long[1024];\n",
                        "        long[] y = new long[0];\n",
                        "        IntWrapper i0 = new IntWrapper(0);\n",
                        "        IntWrapper i1 = new IntWrapper(0);\n",
                        "        for (int inlength = 0; inlength < 32; ++inlength) {\n",
                        "            c.compress0(x, i0, inlength, y, i1);\n",
                        "            assertEquals(0, i1.intValue());\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSpurious(LongCODEC)",
                    "parameters": [
                        "c"
                    ],
                    "calls": [
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "21-23:IntWrapper"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                            "LongCODEC",
                            "38-40:compress0"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                            "IntWrapper",
                            "74-76:intValue"
                        ]
                    ]
                }
            },
            "fields": {
                "29-32:codecs": {
                    "start": 29,
                    "end": 32,
                    "body": [
                        "    final LongCODEC[] codecs = {\n",
                        "            new LongJustCopy(),\n",
                        "            new LongVariableByte(),\n",
                        "            LongAs2IntsCodec.LongAs2IntsCodec1()};\n"
                    ],
                    "modifiers": [
                        "final"
                    ],
                    "types": [
                        [
                            "LongCODEC[]",
                            "LongCODEC[]"
                        ]
                    ]
                }
            }
        }
    }
}