{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-validator/src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java",
    "imports": {
        "29-29:import Matcher": {
            "start": 29,
            "end": 29,
            "body": [
                "import java.util.regex.Matcher;\n"
            ]
        },
        "30-30:import Pattern": {
            "start": 30,
            "end": 30,
            "body": [
                "import java.util.regex.Pattern;\n"
            ]
        },
        "27-27:import Test": {
            "start": 27,
            "end": 27,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "25-25:import Validator": {
            "start": 25,
            "end": 25,
            "body": [
                "import org.apache.commons.validator.routines.IBANValidator.Validator;\n"
            ]
        },
        "26-26:import IBANCheckDigit": {
            "start": 26,
            "end": 26,
            "body": [
                "import org.apache.commons.validator.routines.checkdigit.IBANCheckDigit;\n"
            ]
        },
        "19-19:import static Assert.assertFalse": {
            "start": 19,
            "end": 19,
            "body": [
                "import static org.junit.Assert.assertFalse;\n"
            ]
        },
        "20-20:import static Assert.assertNotNull": {
            "start": 20,
            "end": 20,
            "body": [
                "import static org.junit.Assert.assertNotNull;\n"
            ]
        },
        "21-21:import static Assert.assertNull": {
            "start": 21,
            "end": 21,
            "body": [
                "import static org.junit.Assert.assertNull;\n"
            ]
        },
        "22-22:import static Assert.assertTrue": {
            "start": 22,
            "end": 22,
            "body": [
                "import static org.junit.Assert.assertTrue;\n"
            ]
        },
        "23-23:import static Assert.fail": {
            "start": 23,
            "end": 23,
            "body": [
                "import static org.junit.Assert.fail;\n"
            ]
        }
    },
    "classes": {
        "IBANValidatorTest": {
            "start": 37,
            "end": 37,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "345-354:testSorted_test2_decomposed": {
                    "start": 345,
                    "end": 354,
                    "body": [
                        "    public void testSorted_test2_decomposed()  {\n",
                        "        IBANValidator validator = IBANValidator.IBANValidator1();\n",
                        "        Validator[] vals = validator.getDefaultValidators();\n",
                        "        assertNotNull(vals);\n",
                        "        for (int i = 1; i < vals.length; i++) {\n",
                        "            if (vals[i].countryCode.compareTo(vals[i - 1].countryCode) <= 0) {\n",
                        "                fail(\"Not sorted: \" + vals[i].countryCode + \" <= \" + vals[i - 1].countryCode);\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSorted_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "206-208:IBANValidator1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "254-256:getDefaultValidators"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "compareTo(java.lang.String)"
                        ],
                        [
                            "library",
                            "Assert",
                            "fail(java.lang.String)"
                        ]
                    ]
                },
                "339-342:testSorted_test1_decomposed": {
                    "start": 339,
                    "end": 342,
                    "body": [
                        "    public void testSorted_test1_decomposed()  {\n",
                        "        IBANValidator validator = IBANValidator.IBANValidator1();\n",
                        "        Validator[] vals = validator.getDefaultValidators();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSorted_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "206-208:IBANValidator1"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "254-256:getDefaultValidators"
                        ]
                    ]
                },
                "334-336:testSorted_test0_decomposed": {
                    "start": 334,
                    "end": 336,
                    "body": [
                        "    public void testSorted_test0_decomposed()  {\n",
                        "        IBANValidator validator = IBANValidator.IBANValidator1();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSorted_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "206-208:IBANValidator1"
                        ]
                    ]
                },
                "327-331:testSetValidatorLen_1_test1_decomposed": {
                    "start": 327,
                    "end": 331,
                    "body": [
                        "    public void testSetValidatorLen_1_test1_decomposed()  {\n",
                        "        IBANValidator validator = IBANValidator.IBANValidator1();\n",
                        "        assertNotNull(\"should be present\", validator.setValidator1(\"GB\", -1, \"\"));\n",
                        "        assertNull(\"no longer present\", validator.setValidator1(\"GB\", -1, \"\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSetValidatorLen_1_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "206-208:IBANValidator1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "297-305:setValidator1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "322-324:testSetValidatorLen_1_test0_decomposed": {
                    "start": 322,
                    "end": 324,
                    "body": [
                        "    public void testSetValidatorLen_1_test0_decomposed()  {\n",
                        "        IBANValidator validator = IBANValidator.IBANValidator1();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSetValidatorLen_1_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "206-208:IBANValidator1"
                        ]
                    ]
                },
                "315-319:testSetValidatorLen35_test1_decomposed": {
                    "start": 315,
                    "end": 319,
                    "body": [
                        "    public void testSetValidatorLen35_test1_decomposed()  {\n",
                        "        IBANValidator validator = IBANValidator.IBANValidator1();\n",
                        "        assertNotNull(\n",
                        "                validator.setValidator1(\"GB\", 35, \"GB\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = IllegalArgumentException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSetValidatorLen35_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "206-208:IBANValidator1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull(java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "297-305:setValidator1"
                        ]
                    ]
                },
                "310-312:testSetValidatorLen35_test0_decomposed": {
                    "start": 310,
                    "end": 312,
                    "body": [
                        "    public void testSetValidatorLen35_test0_decomposed()  {\n",
                        "        IBANValidator validator = IBANValidator.IBANValidator1();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSetValidatorLen35_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "206-208:IBANValidator1"
                        ]
                    ]
                },
                "304-307:testSetValidatorLen7_test1_decomposed": {
                    "start": 304,
                    "end": 307,
                    "body": [
                        "    public void testSetValidatorLen7_test1_decomposed()  {\n",
                        "        IBANValidator validator = IBANValidator.IBANValidator1();\n",
                        "        assertNotNull(validator.setValidator1(\"GB\", 7, \"GB\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = IllegalArgumentException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSetValidatorLen7_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "206-208:IBANValidator1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull(java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "297-305:setValidator1"
                        ]
                    ]
                },
                "299-301:testSetValidatorLen7_test0_decomposed": {
                    "start": 299,
                    "end": 301,
                    "body": [
                        "    public void testSetValidatorLen7_test0_decomposed()  {\n",
                        "        IBANValidator validator = IBANValidator.IBANValidator1();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSetValidatorLen7_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "206-208:IBANValidator1"
                        ]
                    ]
                },
                "293-296:testSetValidatorLC_test1_decomposed": {
                    "start": 293,
                    "end": 296,
                    "body": [
                        "    public void testSetValidatorLC_test1_decomposed()  {\n",
                        "        IBANValidator validator = IBANValidator.IBANValidator1();\n",
                        "        assertNotNull(validator.setValidator1(\"gb\", 15, \"GB\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = IllegalArgumentException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSetValidatorLC_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "206-208:IBANValidator1"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotNull(java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "297-305:setValidator1"
                        ]
                    ]
                },
                "288-290:testSetValidatorLC_test0_decomposed": {
                    "start": 288,
                    "end": 290,
                    "body": [
                        "    public void testSetValidatorLC_test0_decomposed()  {\n",
                        "        IBANValidator validator = IBANValidator.IBANValidator1();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSetValidatorLC_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "206-208:IBANValidator1"
                        ]
                    ]
                },
                "283-285:testSetDefaultValidator2_test0_decomposed": {
                    "start": 283,
                    "end": 285,
                    "body": [
                        "    public void testSetDefaultValidator2_test0_decomposed()  {\n",
                        "        assertNotNull(VALIDATOR.setValidator1(\"GB\", -1, \"GB\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = IllegalStateException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSetDefaultValidator2_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertNotNull(java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "297-305:setValidator1"
                        ]
                    ]
                },
                "278-280:testSetDefaultValidator1_test0_decomposed": {
                    "start": 278,
                    "end": 280,
                    "body": [
                        "    public void testSetDefaultValidator1_test0_decomposed()  {\n",
                        "        assertNotNull(VALIDATOR.setValidator1(\"GB\", 15, \"GB\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test(expected = IllegalStateException.class)"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testSetDefaultValidator1_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertNotNull(java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "297-305:setValidator1"
                        ]
                    ]
                },
                "272-275:testGetValidator_test0_decomposed": {
                    "start": 272,
                    "end": 275,
                    "body": [
                        "    public void testGetValidator_test0_decomposed()  {\n",
                        "        assertNotNull(\"GB\", VALIDATOR.getValidator(\"GB\"));\n",
                        "        assertNull(\"gb\", VALIDATOR.getValidator(\"gb\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testGetValidator_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertNotNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "264-270:getValidator"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNull(java.lang.String,java.lang.Object)"
                        ]
                    ]
                },
                "266-269:testHasValidator_test0_decomposed": {
                    "start": 266,
                    "end": 269,
                    "body": [
                        "    public void testHasValidator_test0_decomposed()  {\n",
                        "        assertTrue(\"GB\", VALIDATOR.hasValidator(\"GB\"));\n",
                        "        assertFalse(\"gb\", VALIDATOR.hasValidator(\"gb\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHasValidator_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "245-247:hasValidator"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ]
                },
                "261-263:testNull_test0_decomposed": {
                    "start": 261,
                    "end": 263,
                    "body": [
                        "    public void testNull_test0_decomposed()  {\n",
                        "        assertFalse(\"isValid(null)\", VALIDATOR.isValid(null));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testNull_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "229-237:isValid"
                        ]
                    ]
                },
                "254-258:testInValid_test0_decomposed": {
                    "start": 254,
                    "end": 258,
                    "body": [
                        "    public void testInValid_test0_decomposed()  {\n",
                        "        for (String f : invalidIBANFormat) {\n",
                        "            assertFalse(f, VALIDATOR.isValid(f));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testInValid_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "229-237:isValid"
                        ]
                    ]
                },
                "245-251:testValid_test0_decomposed": {
                    "start": 245,
                    "end": 251,
                    "body": [
                        "    public void testValid_test0_decomposed()  {\n",
                        "        for (String f : validIBANFormat) {\n",
                        "            assertTrue(\"Checksum fail: \" + f, IBANCheckDigit.IBAN_CHECK_DIGIT.isValid(f));\n",
                        "            assertTrue(\"Missing validator: \" + f, VALIDATOR.hasValidator(f));\n",
                        "            assertTrue(f, VALIDATOR.isValid(f));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testValid_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.checkdigit.CheckDigit",
                            "CheckDigit",
                            "63-63:isValid"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "245-247:hasValidator"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.IBANValidator",
                            "IBANValidator",
                            "229-237:isValid"
                        ]
                    ]
                },
                "208-242:fmtRE": {
                    "start": 208,
                    "end": 242,
                    "body": [
                        "    private static String fmtRE(String iban_pat, int iban_len) {\n",
                        "        Matcher m = IBAN_PAT.matcher(iban_pat);\n",
                        "        if (m.matches()) {\n",
                        "            StringBuilder sb = new StringBuilder();\n",
                        "            String cc = m.group(1); // country code\n",
                        "            int totalLen = cc.length();\n",
                        "            sb.append(cc);\n",
                        "            int len = Integer.parseInt(m.group(2)); // length of part\n",
                        "            String curType = m.group(3); // part type\n",
                        "            for (int i = 4; i <= m.groupCount(); i += 2) {\n",
                        "                if (m.group(i) == null) { // reached an optional group\n",
                        "                    break;\n",
                        "                }\n",
                        "                int count = Integer.parseInt(m.group(i));\n",
                        "                String type = m.group(i + 1);\n",
                        "                if (type.equals(curType)) { // more of the same type\n",
                        "                    len += count;\n",
                        "                } else {\n",
                        "                    sb.append(formatToRE(curType, len));\n",
                        "                    totalLen += len;\n",
                        "                    curType = type;\n",
                        "                    len = count;\n",
                        "                }\n",
                        "            }\n",
                        "            sb.append(formatToRE(curType, len));\n",
                        "            totalLen += len;\n",
                        "            if (iban_len != totalLen) {\n",
                        "                throw new IllegalArgumentException(\n",
                        "                        \"IBAN pattern \" + iban_pat + \" does not match length \" + iban_len);\n",
                        "            }\n",
                        "            return sb.toString();\n",
                        "        } else {\n",
                        "            throw new IllegalArgumentException(\"Unexpected IBAN pattern \" + iban_pat);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "fmtRE(String, int)",
                    "parameters": [
                        "iban_pat",
                        "iban_len"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "matcher(java.lang.CharSequence)"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Matcher",
                            "matches()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder()"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Matcher",
                            "group(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Integer",
                            "parseInt(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Matcher",
                            "groupCount()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.IBANValidatorTest",
                            "IBANValidatorTest",
                            "194-206:formatToRE"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalArgumentException",
                            "IllegalArgumentException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ]
                    ]
                },
                "194-206:formatToRE": {
                    "start": 194,
                    "end": 206,
                    "body": [
                        "    private static String formatToRE(String type, int len) {\n",
                        "        char ctype = type.charAt(0); // assume type.length() == 1\n",
                        "        switch (ctype) {\n",
                        "            case 'n':\n",
                        "                return String.format(\"\\\\\\\\d{%d}\", len);\n",
                        "            case 'a':\n",
                        "                return String.format(\"[A-Z]{%d}\", len);\n",
                        "            case 'c':\n",
                        "                return String.format(\"[A-Z0-9]{%d}\", len);\n",
                        "            default:\n",
                        "                throw new IllegalArgumentException(\"Unexpected type \" + type);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "formatToRE(String, int)",
                    "parameters": [
                        "type",
                        "len"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "charAt(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalArgumentException",
                            "IllegalArgumentException(java.lang.String)"
                        ]
                    ]
                },
                "170-175:printEntry": {
                    "start": 170,
                    "end": 175,
                    "body": [
                        "    private static void printEntry(String ccode, String length, String ib, String country) {\n",
                        "        String fmt = String.format(\"\\\"%s\\\"\", ib);\n",
                        "        System.out.printf(\n",
                        "                \"            new Validator(\\\"%s\\\", %s, %-40s), // %s\\n\",\n",
                        "                ccode, length, fmt, country);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "printEntry(String, String, String, String)",
                    "parameters": [
                        "ccode",
                        "length",
                        "ib",
                        "country"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format(java.lang.String,java.lang.Object[])"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "printf(java.lang.String,java.lang.Object[])"
                        ]
                    ]
                }
            },
            "fields": {
                "179-192:IBAN_PAT": {
                    "start": 179,
                    "end": 192,
                    "body": [
                        "    private static final Pattern IBAN_PAT =\n",
                        "            Pattern.compile(\n",
                        "                    \"([A-Z]{2})\"\n",
                        "                            + IBAN_PART\n",
                        "                            + IBAN_PART\n",
                        "                            + IBAN_PART\n",
                        "                            + IBAN_PART\n",
                        "                            + \"?\"\n",
                        "                            + IBAN_PART\n",
                        "                            + \"?\"\n",
                        "                            + IBAN_PART\n",
                        "                            + \"?\"\n",
                        "                            + IBAN_PART\n",
                        "                            + \"?\");\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "Pattern",
                            "java.util.regex.Pattern"
                        ]
                    ]
                },
                "177-178:IBAN_PART": {
                    "start": 177,
                    "end": 178,
                    "body": [
                        "    private static final String IBAN_PART =\n",
                        "            \"(?:(\\\\d+)!([acn]))\"; // Assume all parts are fixed length\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "144-144:VALIDATOR": {
                    "start": 144,
                    "end": 144,
                    "body": [
                        "    private static final IBANValidator VALIDATOR = IBANValidator.getInstance();\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "IBANValidator",
                            "IBANValidator"
                        ]
                    ]
                },
                "127-142:invalidIBANFormat": {
                    "start": 127,
                    "end": 142,
                    "body": [
                        "    private final String[] invalidIBANFormat =\n",
                        "            new String[] {\n",
                        "                \"\", // empty\n",
                        "                \"   \", // empty\n",
                        "                \"A\", // too short\n",
                        "                \"AB\", // too short\n",
                        "                \"FR1420041010050500013m02606\", // lowercase version\n",
                        "                \"MT84MALT011000012345mtlcast001s\", // lowercase version\n",
                        "                \"LI21088100002324013aa\", // lowercase version\n",
                        "                \"QA58DOHB00001234567890abcdefg\", // lowercase version\n",
                        "                \"RO49AAAA1b31007593840000\", // lowercase version\n",
                        "                \"LC62HEMM000100010012001200023015\", // wrong in SWIFT\n",
                        "                \"BY00NBRB3600000000000Z00AB00\", // Wrong in SWIFT v73\n",
                        "                \"ST68000200010192194210112\", // ditto\n",
                        "                \"SV62CENR0000000000000700025\", // ditto\n",
                        "            };\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "String[]",
                            "java.lang.String[]"
                        ]
                    ]
                },
                "39-125:validIBANFormat": {
                    "start": 39,
                    "end": 125,
                    "body": [
                        "    private final String[] validIBANFormat =\n",
                        "            new String[] {\n",
                        "                \"AD1200012030200359100100\",\n",
                        "                \"AE070331234567890123456\",\n",
                        "                \"AL47212110090000000235698741\",\n",
                        "                \"AT611904300234573201\",\n",
                        "                \"AZ21NABZ00000000137010001944\",\n",
                        "                \"BA391290079401028494\",\n",
                        "                \"BE68539007547034\",\n",
                        "                \"BG80BNBG96611020345678\",\n",
                        "                \"BH67BMAG00001299123456\",\n",
                        "                \"BR1800000000141455123924100C2\",\n",
                        "                \"BR1800360305000010009795493C1\",\n",
                        "                \"BR9700360305000010009795493P1\",\n",
                        "                \"BY13NBRB3600900000002Z00AB00\",\n",
                        "                \"CH9300762011623852957\",\n",
                        "                \"CR05015202001026284066\",\n",
                        "                \"CY17002001280000001200527600\",\n",
                        "                \"CZ6508000000192000145399\",\n",
                        "                \"CZ9455000000001011038930\",\n",
                        "                \"DE89370400440532013000\",\n",
                        "                \"DK5000400440116243\",\n",
                        "                \"DO28BAGR00000001212453611324\",\n",
                        "                \"EE382200221020145685\",\n",
                        "                \"EG380019000500000000263180002\",\n",
                        "                \"ES9121000418450200051332\",\n",
                        "                \"FI2112345600000785\",\n",
                        "                \"FI5542345670000081\",\n",
                        "                \"FO6264600001631634\",\n",
                        "                \"FR1420041010050500013M02606\",\n",
                        "                \"GB29NWBK60161331926819\",\n",
                        "                \"GE29NB0000000101904917\",\n",
                        "                \"GI75NWBK000000007099453\",\n",
                        "                \"GL8964710001000206\",\n",
                        "                \"GR1601101250000000012300695\",\n",
                        "                \"GT82TRAJ01020000001210029690\",\n",
                        "                \"HR1210010051863000160\",\n",
                        "                \"HU42117730161111101800000000\",\n",
                        "                \"IE29AIBK93115212345678\",\n",
                        "                \"IL620108000000099999999\",\n",
                        "                \"IQ98NBIQ850123456789012\",\n",
                        "                \"IS140159260076545510730339\",\n",
                        "                \"IT60X0542811101000000123456\",\n",
                        "                \"JO94CBJO0010000000000131000302\",\n",
                        "                \"KW81CBKU0000000000001234560101\",\n",
                        "                \"KZ86125KZT5004100100\",\n",
                        "                \"LB62099900000001001901229114\",\n",
                        "                \"LC55HEMM000100010012001200023015\",\n",
                        "                \"LI21088100002324013AA\",\n",
                        "                \"LT121000011101001000\",\n",
                        "                \"LU280019400644750000\",\n",
                        "                \"LV80BANK0000435195001\",\n",
                        "                \"MC5811222000010123456789030\",\n",
                        "                \"MD24AG000225100013104168\",\n",
                        "                \"ME25505000012345678951\",\n",
                        "                \"MK07250120000058984\",\n",
                        "                \"MR1300020001010000123456753\",\n",
                        "                \"MT84MALT011000012345MTLCAST001S\",\n",
                        "                \"MU17BOMM0101101030300200000MUR\",\n",
                        "                \"NL91ABNA0417164300\",\n",
                        "                \"NO9386011117947\",\n",
                        "                \"PK36SCBL0000001123456702\",\n",
                        "                \"PL61109010140000071219812874\",\n",
                        "                \"PS92PALS000000000400123456702\",\n",
                        "                \"PT50000201231234567890154\",\n",
                        "                \"QA58DOHB00001234567890ABCDEFG\",\n",
                        "                \"RO49AAAA1B31007593840000\",\n",
                        "                \"RS35260005601001611379\",\n",
                        "                \"SA0380000000608010167519\",\n",
                        "                \"SC18SSCB11010000000000001497USD\",\n",
                        "                \"SE4550000000058398257466\",\n",
                        "                \"SI56191000000123438\",\n",
                        "                \"SI56263300012039086\",\n",
                        "                \"SK3112000000198742637541\",\n",
                        "                \"SM86U0322509800000000270100\",\n",
                        "                \"ST68000100010051845310112\",\n",
                        "                \"SV62CENR00000000000000700025\",\n",
                        "                \"SV43ACAT00000000000000123123\",\n",
                        "                \"TL380080012345678910157\",\n",
                        "                \"TN5910006035183598478831\",\n",
                        "                \"TR330006100519786457841326\",\n",
                        "                \"UA213223130000026007233566001\",\n",
                        "                \"UA213996220000026007233566001\",\n",
                        "                \"VA59001123000012345678\",\n",
                        "                \"VG96VPVG0000012345678901\",\n",
                        "                \"XK051212012345678906\",\n",
                        "            };\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "String[]",
                            "java.lang.String[]"
                        ]
                    ]
                }
            }
        }
    }
}