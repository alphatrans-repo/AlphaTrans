{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-codec/src/main/java/org/apache/commons/codec/language/bm/Lang.java",
    "imports": {
        "28-28:import Locale": {
            "start": 28,
            "end": 28,
            "body": [
                "import java.util.Locale;\n"
            ]
        },
        "29-29:import Map": {
            "start": 29,
            "end": 29,
            "body": [
                "import java.util.Map;\n"
            ]
        },
        "27-27:import List": {
            "start": 27,
            "end": 27,
            "body": [
                "import java.util.List;\n"
            ]
        },
        "31-31:import Set": {
            "start": 31,
            "end": 31,
            "body": [
                "import java.util.Set;\n"
            ]
        },
        "22-22:import ArrayList": {
            "start": 22,
            "end": 22,
            "body": [
                "import java.util.ArrayList;\n"
            ]
        },
        "23-23:import Arrays": {
            "start": 23,
            "end": 23,
            "body": [
                "import java.util.Arrays;\n"
            ]
        },
        "24-24:import Collections": {
            "start": 24,
            "end": 24,
            "body": [
                "import java.util.Collections;\n"
            ]
        },
        "25-25:import EnumMap": {
            "start": 25,
            "end": 25,
            "body": [
                "import java.util.EnumMap;\n"
            ]
        },
        "26-26:import HashSet": {
            "start": 26,
            "end": 26,
            "body": [
                "import java.util.HashSet;\n"
            ]
        },
        "30-30:import Scanner": {
            "start": 30,
            "end": 30,
            "body": [
                "import java.util.Scanner;\n"
            ]
        },
        "32-32:import Pattern": {
            "start": 32,
            "end": 32,
            "body": [
                "import java.util.regex.Pattern;\n"
            ]
        },
        "20-20:import Resources": {
            "start": 20,
            "end": 20,
            "body": [
                "import org.apache.commons.codec.Resources;\n"
            ]
        }
    },
    "classes": {
        "LangRule": {
            "start": 81,
            "end": 81,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "Lang",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "93-95:matches": {
                    "start": 93,
                    "end": 95,
                    "body": [
                        "        public boolean matches(final String txt) {\n",
                        "            return this.pattern.matcher(txt).find();\n",
                        "        }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "matches(String)",
                    "parameters": [
                        "txt"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/regex/Matcher",
                            "find()"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "matcher(java.lang.CharSequence)"
                        ]
                    ]
                },
                "86-91:LangRule": {
                    "start": 86,
                    "end": 91,
                    "body": [
                        "        private LangRule(\n",
                        "                final Pattern pattern, final Set<String> languages, final boolean acceptOnMatch) {\n",
                        "            this.pattern = pattern;\n",
                        "            this.languages = languages;\n",
                        "            this.acceptOnMatch = acceptOnMatch;\n",
                        "        }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "LangRule(Pattern, Set<String>, boolean)",
                    "parameters": [
                        "pattern",
                        "languages",
                        "acceptOnMatch"
                    ],
                    "calls": []
                }
            },
            "fields": {
                "84-84:pattern": {
                    "start": 84,
                    "end": 84,
                    "body": [
                        "        private final Pattern pattern;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Pattern",
                            "java.util.regex.Pattern"
                        ]
                    ]
                },
                "83-83:languages": {
                    "start": 83,
                    "end": 83,
                    "body": [
                        "        private final Set<String> languages;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Set<String>",
                            "java.util.Set<String>"
                        ]
                    ]
                },
                "82-82:acceptOnMatch": {
                    "start": 82,
                    "end": 82,
                    "body": [
                        "        private final boolean acceptOnMatch;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ]
                }
            }
        },
        "Lang": {
            "start": 79,
            "end": 79,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "LangRule"
            ],
            "implements": [],
            "extends": [],
            "methods": {
                "211-227:guessLanguages": {
                    "start": 211,
                    "end": 227,
                    "body": [
                        "    public Languages.LanguageSet guessLanguages(final String input) {\n",
                        "        final String text = input.toLowerCase(Locale.ENGLISH);\n",
                        "\n",
                        "        final Set<String> langs = new HashSet<>(this.languages.getLanguages());\n",
                        "        for (final LangRule rule : this.rules) {\n",
                        "            if (rule.matches(text)) {\n",
                        "                if (rule.acceptOnMatch) {\n",
                        "                    langs.retainAll(rule.languages);\n",
                        "                } else {\n",
                        "                    langs.removeAll(rule.languages);\n",
                        "                }\n",
                        "            }\n",
                        "        }\n",
                        "\n",
                        "        final Languages.LanguageSet ls = Languages.LanguageSet.from(langs);\n",
                        "        return ls.equals(Languages.NO_LANGUAGES) ? Languages.ANY_LANGUAGE : ls;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "LanguageSet",
                            "LanguageSet"
                        ]
                    ],
                    "signature": "guessLanguages(String)",
                    "parameters": [
                        "input"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "toLowerCase(java.util.Locale)"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "HashSet<String>(java.util.Collection)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Languages",
                            "Languages",
                            "276-278:getLanguages"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Languages",
                            "LanguageSet",
                            "64-66:from"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Lang",
                            "LangRule",
                            "93-95:matches"
                        ],
                        [
                            "library",
                            "java.base/java/util/Set",
                            "retainAll(java.util.Collection)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Set",
                            "removeAll(java.util.Collection)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals(java.lang.Object)"
                        ]
                    ]
                },
                "200-203:guessLanguage": {
                    "start": 200,
                    "end": 203,
                    "body": [
                        "    public String guessLanguage(final String text) {\n",
                        "        final Languages.LanguageSet ls = guessLanguages(text);\n",
                        "        return ls.isSingleton() ? ls.getAny() : Languages.ANY;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ],
                    "signature": "guessLanguage(String)",
                    "parameters": [
                        "text"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Lang",
                            "Lang",
                            "211-227:guessLanguages"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Languages",
                            "LanguageSet",
                            "74-74:isSingleton"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Languages",
                            "LanguageSet",
                            "70-70:getAny"
                        ]
                    ]
                },
                "134-183:loadFromResource": {
                    "start": 134,
                    "end": 183,
                    "body": [
                        "    public static Lang loadFromResource(\n",
                        "            final String languageRulesResourceName, final Languages languages) {\n",
                        "        final List<LangRule> rules = new ArrayList<>();\n",
                        "        try (final Scanner scanner =\n",
                        "                new Scanner(\n",
                        "                        Resources.getInputStream(languageRulesResourceName),\n",
                        "                        ResourceConstants.ENCODING)) {\n",
                        "            boolean inExtendedComment = false;\n",
                        "            while (scanner.hasNextLine()) {\n",
                        "                final String rawLine = scanner.nextLine();\n",
                        "                String line = rawLine;\n",
                        "                if (inExtendedComment) {\n",
                        "                    if (line.endsWith(ResourceConstants.EXT_CMT_END)) {\n",
                        "                        inExtendedComment = false;\n",
                        "                    }\n",
                        "                } else if (line.startsWith(ResourceConstants.EXT_CMT_START)) {\n",
                        "                    inExtendedComment = true;\n",
                        "                } else {\n",
                        "                    final int cmtI = line.indexOf(ResourceConstants.CMT);\n",
                        "                    if (cmtI >= 0) {\n",
                        "                        line = line.substring(0, cmtI);\n",
                        "                    }\n",
                        "\n",
                        "                    line = line.trim();\n",
                        "\n",
                        "                    if (line.isEmpty()) {\n",
                        "                        continue; // empty lines can be safely skipped\n",
                        "                    }\n",
                        "\n",
                        "                    final String[] parts = line.split(\"\\\\s+\");\n",
                        "\n",
                        "                    if (parts.length != 3) {\n",
                        "                        throw new IllegalArgumentException(\n",
                        "                                \"Malformed line '\"\n",
                        "                                        + rawLine\n",
                        "                                        + \"' in language resource '\"\n",
                        "                                        + languageRulesResourceName\n",
                        "                                        + \"'\");\n",
                        "                    }\n",
                        "\n",
                        "                    final Pattern pattern = Pattern.compile(parts[0]);\n",
                        "                    final String[] langs = parts[1].split(\"\\\\+\");\n",
                        "                    final boolean accept = parts[2].equals(\"true\");\n",
                        "\n",
                        "                    rules.add(new LangRule(pattern, new HashSet<>(Arrays.asList(langs)), accept));\n",
                        "                }\n",
                        "            }\n",
                        "        }\n",
                        "        return new Lang(rules, languages);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "Lang",
                            "Lang"
                        ]
                    ],
                    "signature": "loadFromResource(String, Languages)",
                    "parameters": [
                        "languageRulesResourceName",
                        "languages"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/ArrayList",
                            "ArrayList<LangRule>()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Scanner",
                            "Scanner(java.io.InputStream,java.lang.String)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.Resources",
                            "Resources",
                            "35-41:getInputStream"
                        ],
                        [
                            "library",
                            "java.base/java/util/Scanner",
                            "hasNextLine()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Scanner",
                            "nextLine()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "endsWith(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "startsWith(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "indexOf(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "split(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "compile(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "substring(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "trim()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "isEmpty()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/IllegalArgumentException",
                            "IllegalArgumentException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "add(org.apache.commons.codec.language.bm.Lang.LangRule)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Lang",
                            "LangRule",
                            "86-91:LangRule"
                        ],
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "HashSet<String>(java.util.Collection)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "asList(java.lang.Object[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.language.bm.Lang",
                            "Lang",
                            "188-191:Lang"
                        ]
                    ]
                },
                "119-121:instance": {
                    "start": 119,
                    "end": 121,
                    "body": [
                        "    public static Lang instance(final NameType nameType) {\n",
                        "        return Langs.get(nameType);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "Lang",
                            "Lang"
                        ]
                    ],
                    "signature": "instance(NameType)",
                    "parameters": [
                        "nameType"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get(java.lang.Object)"
                        ]
                    ]
                },
                "188-191:Lang": {
                    "start": 188,
                    "end": 191,
                    "body": [
                        "    private Lang(final List<LangRule> rules, final Languages languages) {\n",
                        "        this.rules = Collections.unmodifiableList(rules);\n",
                        "        this.languages = languages;\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "Lang(List<LangRule>, Languages)",
                    "parameters": [
                        "rules",
                        "languages"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Collections",
                            "unmodifiableList(java.util.List)"
                        ]
                    ]
                }
            },
            "fields": {
                "186-186:rules": {
                    "start": 186,
                    "end": 186,
                    "body": [
                        "    private final List<LangRule> rules;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "List<LangRule>",
                            "java.util.List<LangRule>"
                        ]
                    ]
                },
                "185-185:languages": {
                    "start": 185,
                    "end": 185,
                    "body": [
                        "    private final Languages languages;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Languages",
                            "Languages"
                        ]
                    ]
                },
                "100-101:LANGUAGE_RULES_RN": {
                    "start": 100,
                    "end": 101,
                    "body": [
                        "    private static final String LANGUAGE_RULES_RN =\n",
                        "            \"org/apache/commons/codec/language/bm/%s_lang.txt\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "98-98:Langs": {
                    "start": 98,
                    "end": 98,
                    "body": [
                        "    private static final Map<NameType, Lang> Langs = new EnumMap<>(NameType.class);\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "Map<NameType,Lang>",
                            "java.util.Map<NameType,Lang>"
                        ]
                    ]
                }
            },
            "static_initializers": {
                "103-111:run_static_init": {
                    "start": 103,
                    "end": 111,
                    "body": [
                        "    static {\n",
                        "        for (final NameType s : NameType.values()) {\n",
                        "            Langs.put(\n",
                        "                    s,\n",
                        "                    loadFromResource(\n",
                        "                            String.format(LANGUAGE_RULES_RN, s.getName()),\n",
                        "                            Languages.getInstance0(s)));\n",
                        "        }\n",
                        "    }\n"
                    ]
                }
            }
        }
    }
}