{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-csv/src/test/java/org/apache/commons/csv/issues/JiraCsv290Test.java",
    "imports": {
        "27-27:import InputStreamReader": {
            "start": 27,
            "end": 27,
            "body": [
                "import java.io.InputStreamReader;\n"
            ]
        },
        "29-29:import List": {
            "start": 29,
            "end": 29,
            "body": [
                "import java.util.List;\n"
            ]
        },
        "28-28:import ArrayList": {
            "start": 28,
            "end": 28,
            "body": [
                "import java.util.ArrayList;\n"
            ]
        },
        "30-30:import Collectors": {
            "start": 30,
            "end": 30,
            "body": [
                "import java.util.stream.Collectors;\n"
            ]
        },
        "22-22:import CSVFormat": {
            "start": 22,
            "end": 22,
            "body": [
                "import org.apache.commons.csv.CSVFormat;\n"
            ]
        },
        "23-23:import CSVParser": {
            "start": 23,
            "end": 23,
            "body": [
                "import org.apache.commons.csv.CSVParser;\n"
            ]
        },
        "25-25:import Test": {
            "start": 25,
            "end": 25,
            "body": [
                "import org.junit.jupiter.api.Test;\n"
            ]
        },
        "24-24:import CSVRecord": {
            "start": 24,
            "end": 24,
            "body": [
                "import org.apache.commons.csv.CSVRecord;\n"
            ]
        },
        "20-20:import static Assertions.assertEquals": {
            "start": 20,
            "end": 20,
            "body": [
                "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
            ]
        }
    },
    "classes": {
        "JiraCsv290Test": {
            "start": 32,
            "end": 32,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "new Function<CSVRecord,List<String>>(...) { ... }"
            ],
            "implements": [],
            "extends": [],
            "methods": {
                "70-72:testPostgresqlText_test0_decomposed": {
                    "start": 70,
                    "end": 72,
                    "body": [
                        "    public void testPostgresqlText_test0_decomposed() throws Exception {\n",
                        "        testHelper(\"psql.tsv\", CSVFormat.POSTGRESQL_TEXT);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPostgresqlText_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.test.org.apache.commons.csv.issues.JiraCsv290Test",
                            "JiraCsv290Test",
                            "34-62:testHelper"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testPostgresqlText_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "65-67:testPostgresqlCsv_test0_decomposed": {
                    "start": 65,
                    "end": 67,
                    "body": [
                        "    public void testPostgresqlCsv_test0_decomposed() throws Exception {\n",
                        "        testHelper(\"psql.csv\", CSVFormat.POSTGRESQL_CSV);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPostgresqlCsv_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.test.org.apache.commons.csv.issues.JiraCsv290Test",
                            "JiraCsv290Test",
                            "34-62:testHelper"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def testPostgresqlCsv_test0_decomposed(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "34-62:testHelper": {
                    "start": 34,
                    "end": 62,
                    "body": [
                        "    private void testHelper(final String filename, final CSVFormat format) throws Exception {\n",
                        "        List<List<String>> content = new ArrayList<>();\n",
                        "        try (CSVParser csvParser =\n",
                        "                CSVParser.parse3(\n",
                        "                        new InputStreamReader(\n",
                        "                                this.getClass()\n",
                        "                                        .getResourceAsStream(\n",
                        "                                                \"/org/apache/commons/csv/CSV-290/\" + filename)),\n",
                        "                        format)) {\n",
                        "            content =\n",
                        "                    csvParser.stream()\n",
                        "                            .collect(Collectors.mapping(CSVRecord::toList, Collectors.toList()));\n",
                        "        }\n",
                        "\n",
                        "        assertEquals(3, content.size());\n",
                        "\n",
                        "        assertEquals(\"1\", content.get(0).get(0));\n",
                        "        assertEquals(\"abc\", content.get(0).get(1));\n",
                        "        assertEquals(\"test line 1\\ntest line 2\", content.get(0).get(2)); // new line\n",
                        "        assertEquals(null, content.get(0).get(3)); // null\n",
                        "        assertEquals(\"\", content.get(0).get(4));\n",
                        "\n",
                        "        assertEquals(\"2\", content.get(1).get(0));\n",
                        "        assertEquals(\"\\\\b:\\b \\\\t:\\t \\\\n:\\n \\\\r:\\r\", content.get(1).get(2)); // \\b, \\t, \\n, \\r\n",
                        "\n",
                        "        assertEquals(\"3\", content.get(2).get(0));\n",
                        "        assertEquals(\"b,c,d\", content.get(2).get(2)); // value has comma\n",
                        "        assertEquals(\"\\\"quoted\\\"\", content.get(2).get(3)); // quoted\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHelper(String, CSVFormat)",
                    "parameters": [
                        "filename",
                        "format"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/ArrayList",
                            "ArrayList<List<String>>()"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "277-279:parse3"
                        ],
                        [
                            "library",
                            "java.base/java/io/InputStreamReader",
                            "InputStreamReader(java.io.InputStream)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "getResourceAsStream(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "getClass()"
                        ],
                        [
                            "library",
                            "java.base/java/util/stream/Stream",
                            "collect(java.util.stream.Collector)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVParser",
                            "CSVParser",
                            "763-766:stream"
                        ],
                        [
                            "library",
                            "java.base/java/util/stream/Collectors",
                            "mapping(java.util.function.Function,java.util.stream.Collector)"
                        ],
                        [
                            "library",
                            "java.base/java/util/stream/Collectors",
                            "toList()"
                        ],
                        [
                            "library",
                            "Assertions",
                            "assertEquals(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "size()"
                        ],
                        [
                            "library",
                            "Assertions",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "get(int)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __testHelper(self, filename: str, format_: CSVFormat) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                }
            },
            "fields": {},
            "is_enum": false,
            "python_class_declaration": "class JiraCsv290Test(unittest.TestCase):\n\n"
        },
        "new Function<CSVRecord,List<String>>(...) { ... }": {
            "start": 45,
            "end": 45,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "JiraCsv290Test",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "43-45:apply": {
                    "start": 43,
                    "end": 45,
                    "body": [
                        "            content =\n",
                        "                    csvParser.stream()\n",
                        "                            .collect(Collectors.mapping(CSVRecord::toList, Collectors.toList()));\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "List<String>",
                            "java.util.List<String>"
                        ]
                    ],
                    "signature": "apply(CSVRecord)",
                    "parameters": [
                        "p0"
                    ],
                    "calls": [],
                    "is_overload": false
                }
            },
            "fields": {}
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import unittest",
        "import pytest",
        "import io",
        "import os",
        "import unittest",
        "from src.main.org.apache.commons.csv.CSVFormat import *",
        "from src.main.org.apache.commons.csv.CSVParser import *",
        "from src.main.org.apache.commons.csv.CSVRecord import *"
    ]
}