{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-csv/src/test/java/org/apache/commons/csv/issues/JiraCsv248Test.java",
    "imports": {
        "28-28:import IOException": {
            "start": 28,
            "end": 28,
            "body": [
                "import java.io.IOException;\n"
            ]
        },
        "29-29:import InputStream": {
            "start": 29,
            "end": 29,
            "body": [
                "import java.io.InputStream;\n"
            ]
        },
        "30-30:import ObjectInputStream": {
            "start": 30,
            "end": 30,
            "body": [
                "import java.io.ObjectInputStream;\n"
            ]
        },
        "26-26:import Test": {
            "start": 26,
            "end": 26,
            "body": [
                "import org.junit.jupiter.api.Test;\n"
            ]
        },
        "25-25:import CSVRecord": {
            "start": 25,
            "end": 25,
            "body": [
                "import org.apache.commons.csv.CSVRecord;\n"
            ]
        },
        "20-20:import static Assertions.assertEquals": {
            "start": 20,
            "end": 20,
            "body": [
                "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
            ]
        },
        "23-23:import static Assertions.assertTrue": {
            "start": 23,
            "end": 23,
            "body": [
                "import static org.junit.jupiter.api.Assertions.assertTrue;\n"
            ]
        },
        "21-21:import static Assertions.assertFalse": {
            "start": 21,
            "end": 21,
            "body": [
                "import static org.junit.jupiter.api.Assertions.assertFalse;\n"
            ]
        },
        "22-22:import static Assertions.assertNull": {
            "start": 22,
            "end": 22,
            "body": [
                "import static org.junit.jupiter.api.Assertions.assertNull;\n"
            ]
        }
    },
    "classes": {
        "JiraCsv248Test": {
            "start": 32,
            "end": 32,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "49-73:testJiraCsv248_test0_decomposed": {
                    "start": 49,
                    "end": 73,
                    "body": [
                        "    public void testJiraCsv248_test0_decomposed() throws IOException , ClassNotFoundException {\n",
                        "        try (InputStream in = getTestInput();\n",
                        "                final ObjectInputStream ois = new ObjectInputStream(in)) {\n",
                        "            final Object object = ois.readObject();\n",
                        "            assertTrue(object instanceof CSVRecord);\n",
                        "            final CSVRecord rec = (CSVRecord) object;\n",
                        "            assertEquals(1L, rec.getRecordNumber());\n",
                        "            assertEquals(\"One\", rec.get1(0));\n",
                        "            assertEquals(\"Two\", rec.get1(1));\n",
                        "            assertEquals(2, rec.size());\n",
                        "            assertEquals(4, rec.getCharacterPosition());\n",
                        "            assertEquals(\"my comment\", rec.getComment());\n",
                        "            assertNull(rec.getParser());\n",
                        "            assertTrue(rec.isConsistent());\n",
                        "            assertFalse(rec.isMapped(\"A\"));\n",
                        "            assertFalse(rec.isSet1(\"A\"));\n",
                        "            assertEquals(0, rec.toMap().size());\n",
                        "            try {\n",
                        "                rec.get2(\"A\");\n",
                        "                org.junit.jupiter.api.Assertions.fail(\n",
                        "                        \"Access by name is not expected after deserialisation\");\n",
                        "            } catch (final IllegalStateException expected) {\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testJiraCsv248_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.test.org.apache.commons.csv.issues.JiraCsv248Test",
                            "JiraCsv248Test",
                            "33-36:getTestInput"
                        ],
                        [
                            "library",
                            "java.base/java/io/ObjectInputStream",
                            "ObjectInputStream(java.io.InputStream)"
                        ],
                        [
                            "library",
                            "java.base/java/io/ObjectInputStream",
                            "readObject()"
                        ],
                        [
                            "library",
                            "Assertions",
                            "assertTrue(boolean)"
                        ],
                        [
                            "library",
                            "Assertions",
                            "assertEquals(long,long)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVRecord",
                            "CSVRecord",
                            "179-181:getRecordNumber"
                        ],
                        [
                            "library",
                            "Assertions",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVRecord",
                            "CSVRecord",
                            "86-88:get1"
                        ],
                        [
                            "library",
                            "Assertions",
                            "assertEquals(int,int)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVRecord",
                            "CSVRecord",
                            "276-278:size"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVRecord",
                            "CSVRecord",
                            "138-140:getCharacterPosition"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVRecord",
                            "CSVRecord",
                            "149-151:getComment"
                        ],
                        [
                            "library",
                            "Assertions",
                            "assertNull(java.lang.Object)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVRecord",
                            "CSVRecord",
                            "166-168:getParser"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVRecord",
                            "CSVRecord",
                            "203-206:isConsistent"
                        ],
                        [
                            "library",
                            "Assertions",
                            "assertFalse(boolean)"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVRecord",
                            "CSVRecord",
                            "214-217:isMapped"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVRecord",
                            "CSVRecord",
                            "235-237:isSet1"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "size()"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVRecord",
                            "CSVRecord",
                            "309-311:toMap"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVRecord",
                            "CSVRecord",
                            "109-130:get2"
                        ],
                        [
                            "library",
                            "Assertions",
                            "fail(java.lang.String)"
                        ]
                    ]
                },
                "33-36:getTestInput": {
                    "start": 33,
                    "end": 36,
                    "body": [
                        "    private static InputStream getTestInput() {\n",
                        "        return ClassLoader.getSystemClassLoader()\n",
                        "                .getResourceAsStream(\"org/apache/commons/csv/CSV-248/csvRecord.bin\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "InputStream",
                            "java.io.InputStream"
                        ]
                    ],
                    "signature": "getTestInput()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/ClassLoader",
                            "getResourceAsStream(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/ClassLoader",
                            "getSystemClassLoader()"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}