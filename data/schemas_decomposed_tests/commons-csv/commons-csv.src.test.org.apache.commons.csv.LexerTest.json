{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-csv/src/test/java/org/apache/commons/csv/LexerTest.java",
    "imports": {
        "28-28:import IOException": {
            "start": 28,
            "end": 28,
            "body": [
                "import java.io.IOException;\n"
            ]
        },
        "29-29:import StringReader": {
            "start": 29,
            "end": 29,
            "body": [
                "import java.io.StringReader;\n"
            ]
        },
        "26-26:import Test": {
            "start": 26,
            "end": 26,
            "body": [
                "import org.junit.jupiter.api.Test;\n"
            ]
        },
        "25-25:import BeforeEach": {
            "start": 25,
            "end": 25,
            "body": [
                "import org.junit.jupiter.api.BeforeEach;\n"
            ]
        },
        "20-20:import static Constants.BACKSPACE": {
            "start": 20,
            "end": 20,
            "body": [
                "import static org.apache.commons.csv.Constants.BACKSPACE;\n"
            ]
        },
        "21-21:import static Constants.FF": {
            "start": 21,
            "end": 21,
            "body": [
                "import static org.apache.commons.csv.Constants.FF;\n"
            ]
        },
        "22-22:import static Assertions.assertEquals": {
            "start": 22,
            "end": 22,
            "body": [
                "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
            ]
        },
        "23-23:import static Assertions.assertThrows": {
            "start": 23,
            "end": 23,
            "body": [
                "import static org.junit.jupiter.api.Assertions.assertThrows;\n"
            ]
        }
    },
    "classes": {
        "LexerTest": {
            "start": 32,
            "end": 32,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "new Executable(...) { ... }"
            ],
            "implements": [],
            "extends": [],
            "methods": {
                "71-76:testReadEscapeFF_test0_decomposed": {
                    "start": 71,
                    "end": 76,
                    "body": [
                        "    public void testReadEscapeFF_test0_decomposed() throws IOException {\n",
                        "        try (final Lexer lexer = createLexer(\"f\", CSVFormat.DEFAULT.withEscape0('\\f'))) {\n",
                        "            final int ch = lexer.readEscape();\n",
                        "            assertEquals(FF, ch);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testReadEscapeFF_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.test.org.apache.commons.csv.LexerTest",
                            "LexerTest",
                            "37-39:createLexer"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "2479-2481:withEscape0"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.Lexer",
                            "Lexer",
                            "459-486:readEscape"
                        ],
                        [
                            "library",
                            "Assertions",
                            "assertEquals(int,int)"
                        ]
                    ]
                },
                "63-68:testReadEscapeBackspace_test0_decomposed": {
                    "start": 63,
                    "end": 68,
                    "body": [
                        "    public void testReadEscapeBackspace_test0_decomposed() throws IOException {\n",
                        "        try (final Lexer lexer = createLexer(\"b\", CSVFormat.DEFAULT.withEscape0('\\b'))) {\n",
                        "            final int ch = lexer.readEscape();\n",
                        "            assertEquals(BACKSPACE, ch);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testReadEscapeBackspace_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.test.org.apache.commons.csv.LexerTest",
                            "LexerTest",
                            "37-39:createLexer"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "2479-2481:withEscape0"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.Lexer",
                            "Lexer",
                            "459-486:readEscape"
                        ],
                        [
                            "library",
                            "Assertions",
                            "assertEquals(int,int)"
                        ]
                    ]
                },
                "55-60:testIsMetaCharCommentStart_test0_decomposed": {
                    "start": 55,
                    "end": 60,
                    "body": [
                        "    public void testIsMetaCharCommentStart_test0_decomposed() throws IOException {\n",
                        "        try (final Lexer lexer = createLexer(\"#\", CSVFormat.DEFAULT.withCommentMarker0('#'))) {\n",
                        "            final int ch = lexer.readEscape();\n",
                        "            assertEquals('#', ch);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsMetaCharCommentStart_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.test.org.apache.commons.csv.LexerTest",
                            "LexerTest",
                            "37-39:createLexer"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "2433-2435:withCommentMarker0"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.Lexer",
                            "Lexer",
                            "459-486:readEscape"
                        ],
                        [
                            "library",
                            "Assertions",
                            "assertEquals(int,int)"
                        ]
                    ]
                },
                "47-52:testEscapingAtEOF_test0_decomposed": {
                    "start": 47,
                    "end": 52,
                    "body": [
                        "    public void testEscapingAtEOF_test0_decomposed() throws Exception {\n",
                        "        final String code = \"escaping at EOF is evil\\\\\";\n",
                        "        try (final Lexer lexer = createLexer(code, formatWithEscaping)) {\n",
                        "            assertThrows(IOException.class, () -> lexer.nextToken(new Token()));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEscapingAtEOF_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.test.org.apache.commons.csv.LexerTest",
                            "LexerTest",
                            "37-39:createLexer"
                        ],
                        [
                            "library",
                            "Assertions",
                            "assertThrows(java.lang.Class,org.junit.jupiter.api.function.Executable)"
                        ]
                    ]
                },
                "42-44:setUp": {
                    "start": 42,
                    "end": 44,
                    "body": [
                        "    public void setUp() {\n",
                        "        formatWithEscaping = CSVFormat.DEFAULT.withEscape0('\\\\');\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "BeforeEach"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "setUp()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.CSVFormat",
                            "CSVFormat",
                            "2479-2481:withEscape0"
                        ]
                    ]
                },
                "37-39:createLexer": {
                    "start": 37,
                    "end": 39,
                    "body": [
                        "    private Lexer createLexer(final String input, final CSVFormat format) {\n",
                        "        return new Lexer(format, new ExtendedBufferedReader(new StringReader(input)));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "SuppressWarnings(\"resource\")"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "Lexer",
                            "Lexer"
                        ]
                    ],
                    "signature": "createLexer(String, CSVFormat)",
                    "parameters": [
                        "input",
                        "format"
                    ],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.Lexer",
                            "Lexer",
                            "67-77:Lexer"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.ExtendedBufferedReader",
                            "ExtendedBufferedReader",
                            "50-52:ExtendedBufferedReader"
                        ],
                        [
                            "library",
                            "java.base/java/io/StringReader",
                            "StringReader(java.lang.String)"
                        ]
                    ]
                }
            },
            "fields": {
                "34-34:formatWithEscaping": {
                    "start": 34,
                    "end": 34,
                    "body": [
                        "    private CSVFormat formatWithEscaping;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "CSVFormat",
                            "CSVFormat"
                        ]
                    ]
                }
            }
        },
        "new Executable(...) { ... }": {
            "start": 50,
            "end": 50,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "LexerTest",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "50-50:execute": {
                    "start": 50,
                    "end": 50,
                    "body": [
                        "            assertThrows(IOException.class, () -> lexer.nextToken(new Token()));\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "execute()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-csv.src.main.org.apache.commons.csv.Lexer",
                            "Lexer",
                            "223-285:nextToken"
                        ],
                        [
                            "commons-csv.src.main.org.apache.commons.csv.Token",
                            "Token",
                            "Token"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}