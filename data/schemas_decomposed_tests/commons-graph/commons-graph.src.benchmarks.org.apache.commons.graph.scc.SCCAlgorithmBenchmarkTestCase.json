{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-graph/src/benchmarks/java/org/apache/commons/graph/scc/SCCAlgorithmBenchmarkTestCase.java",
    "imports": {
        "39-39:import Random": {
            "start": 39,
            "end": 39,
            "body": [
                "import java.util.Random;\n"
            ]
        },
        "38-38:import List": {
            "start": 38,
            "end": 38,
            "body": [
                "import java.util.List;\n"
            ]
        },
        "40-40:import Set": {
            "start": 40,
            "end": 40,
            "body": [
                "import java.util.Set;\n"
            ]
        },
        "37-37:import ArrayList": {
            "start": 37,
            "end": 37,
            "body": [
                "import java.util.ArrayList;\n"
            ]
        },
        "33-33:import DirectedMutableGraph": {
            "start": 33,
            "end": 33,
            "body": [
                "import org.apache.commons.graph.model.DirectedMutableGraph;\n"
            ]
        },
        "29-29:import GraphException": {
            "start": 29,
            "end": 29,
            "body": [
                "import org.apache.commons.graph.GraphException;\n"
            ]
        },
        "30-30:import AbstractGraphConnection": {
            "start": 30,
            "end": 30,
            "body": [
                "import org.apache.commons.graph.builder.AbstractGraphConnection;\n"
            ]
        },
        "35-35:import Test": {
            "start": 35,
            "end": 35,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "31-31:import BaseLabeledEdge": {
            "start": 31,
            "end": 31,
            "body": [
                "import org.apache.commons.graph.model.BaseLabeledEdge;\n"
            ]
        },
        "32-32:import BaseLabeledVertex": {
            "start": 32,
            "end": 32,
            "body": [
                "import org.apache.commons.graph.model.BaseLabeledVertex;\n"
            ]
        },
        "34-34:import BeforeClass": {
            "start": 34,
            "end": 34,
            "body": [
                "import org.junit.BeforeClass;\n"
            ]
        },
        "26-26:import static String.format": {
            "start": 26,
            "end": 26,
            "body": [
                "import static java.lang.String.format;\n"
            ]
        },
        "27-27:import static String.valueOf": {
            "start": 27,
            "end": 27,
            "body": [
                "import static java.lang.String.valueOf;\n"
            ]
        },
        "22-22:import static CommonsGraph.findStronglyConnectedComponent": {
            "start": 22,
            "end": 22,
            "body": [
                "import static org.apache.commons.graph.CommonsGraph.findStronglyConnectedComponent;\n"
            ]
        },
        "23-23:import static CommonsGraph.newDirectedMutableGraph": {
            "start": 23,
            "end": 23,
            "body": [
                "import static org.apache.commons.graph.CommonsGraph.newDirectedMutableGraph;\n"
            ]
        },
        "24-24:import static Assert.assertTrue": {
            "start": 24,
            "end": 24,
            "body": [
                "import static org.junit.Assert.assertTrue;\n"
            ]
        }
    },
    "classes": {
        "SCCAlgorithmBenchmarkTestCase": {
            "start": 42,
            "end": 42,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [
                "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledEdge>(...) { ... }"
            ],
            "implements": [],
            "extends": [],
            "methods": {
                "93-96:testPerformTarjan": {
                    "start": 93,
                    "end": 96,
                    "body": [
                        "    public void testPerformTarjan() {\n",
                        "        Set<Set<BaseLabeledVertex>> actual = findStronglyConnectedComponent(graph).applyingTarjan();\n",
                        "        assertTrue(actual.size() > 0);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPerformTarjan()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/scc/SccAlgorithmSelector",
                            "applyingTarjan()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "154-161:findStronglyConnectedComponent"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Set",
                            "size()"
                        ]
                    ]
                },
                "86-90:testPerformKosaraju": {
                    "start": 86,
                    "end": 90,
                    "body": [
                        "    public void testPerformKosaraju() {\n",
                        "        Set<Set<BaseLabeledVertex>> actual =\n",
                        "                findStronglyConnectedComponent(graph).applyingKosarajuSharir0();\n",
                        "        assertTrue(actual.size() > 0);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPerformKosaraju()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/scc/SccAlgorithmSelector",
                            "applyingKosarajuSharir0()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "154-161:findStronglyConnectedComponent"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Set",
                            "size()"
                        ]
                    ]
                },
                "79-83:testPerformCheriyanMehlhornGabow": {
                    "start": 79,
                    "end": 83,
                    "body": [
                        "    public void testPerformCheriyanMehlhornGabow() {\n",
                        "        Set<Set<BaseLabeledVertex>> actual =\n",
                        "                findStronglyConnectedComponent(graph).applyingCheriyanMehlhornGabow();\n",
                        "        assertTrue(actual.size() > 0);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testPerformCheriyanMehlhornGabow()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/scc/SccAlgorithmSelector",
                            "applyingCheriyanMehlhornGabow()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "154-161:findStronglyConnectedComponent"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Set",
                            "size()"
                        ]
                    ]
                },
                "49-76:setUp": {
                    "start": 49,
                    "end": 76,
                    "body": [
                        "    public static void setUp() {\n",
                        "        graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<BaseLabeledVertex, BaseLabeledEdge>() {\n",
                        "                            public void connect0() {\n",
                        "                                List<BaseLabeledVertex> vertices =\n",
                        "                                        new ArrayList<BaseLabeledVertex>();\n",
                        "                                for (int i = 0; i < NODES; i++) {\n",
                        "                                    BaseLabeledVertex v = new BaseLabeledVertex(valueOf(i));\n",
                        "                                    addVertex(v);\n",
                        "                                    vertices.add(v);\n",
                        "                                }\n",
                        "\n",
                        "                                Random r = new Random();\n",
                        "                                for (int i = 0; i < EDGES; i++) {\n",
                        "                                    int v1 = r.nextInt(NODES);\n",
                        "                                    int v2 = r.nextInt(NODES);\n",
                        "\n",
                        "                                    try {\n",
                        "                                        addEdge(new BaseLabeledEdge(format(\"%s -> %s\", v1, v2)))\n",
                        "                                                .from(vertices.get(v1))\n",
                        "                                                .to(vertices.get(v2));\n",
                        "                                    } catch (GraphException e) {\n",
                        "                                    }\n",
                        "                                }\n",
                        "                            }\n",
                        "                        });\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "BeforeClass",
                        "BeforeClass"
                    ],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "setUp()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "187-190:newDirectedMutableGraph"
                        ]
                    ]
                }
            },
            "fields": {
                "46-46:graph": {
                    "start": 46,
                    "end": 46,
                    "body": [
                        "    private static DirectedMutableGraph<BaseLabeledVertex, BaseLabeledEdge> graph;\n"
                    ],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledEdge>",
                            "DirectedMutableGraph<BaseLabeledVertex,BaseLabeledEdge>"
                        ]
                    ]
                },
                "44-44:EDGES": {
                    "start": 44,
                    "end": 44,
                    "body": [
                        "    private static final int EDGES = 5000;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                },
                "43-43:NODES": {
                    "start": 43,
                    "end": 43,
                    "body": [
                        "    private static final int NODES = 5000;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                }
            }
        },
        "new AbstractGraphConnection<BaseLabeledVertex,BaseLabeledEdge>(...) { ... }": {
            "start": 52,
            "end": 52,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": "SCCAlgorithmBenchmarkTestCase",
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "53-74:connect0": {
                    "start": 53,
                    "end": 74,
                    "body": [
                        "                            public void connect0() {\n",
                        "                                List<BaseLabeledVertex> vertices =\n",
                        "                                        new ArrayList<BaseLabeledVertex>();\n",
                        "                                for (int i = 0; i < NODES; i++) {\n",
                        "                                    BaseLabeledVertex v = new BaseLabeledVertex(valueOf(i));\n",
                        "                                    addVertex(v);\n",
                        "                                    vertices.add(v);\n",
                        "                                }\n",
                        "\n",
                        "                                Random r = new Random();\n",
                        "                                for (int i = 0; i < EDGES; i++) {\n",
                        "                                    int v1 = r.nextInt(NODES);\n",
                        "                                    int v2 = r.nextInt(NODES);\n",
                        "\n",
                        "                                    try {\n",
                        "                                        addEdge(new BaseLabeledEdge(format(\"%s -> %s\", v1, v2)))\n",
                        "                                                .from(vertices.get(v1))\n",
                        "                                                .to(vertices.get(v2));\n",
                        "                                    } catch (GraphException e) {\n",
                        "                                    }\n",
                        "                                }\n",
                        "                            }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "connect0()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/ArrayList",
                            "ArrayList<BaseLabeledVertex>"
                        ],
                        [
                            "library",
                            "java.base/java/util/Random",
                            "Random"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledVertex",
                            "BaseLabeledVertex",
                            "35-37:BaseLabeledVertex"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "valueOf"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addVertex"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "add"
                        ],
                        [
                            "library",
                            "java.base/java/util/Random",
                            "nextInt"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/TailVertexConnector",
                            "to"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/HeadVertexConnector",
                            "from"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "get"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/builder/AbstractGraphConnection",
                            "addEdge"
                        ],
                        [
                            "commons-graph.src.test.org.apache.commons.graph.model.BaseLabeledEdge",
                            "BaseLabeledEdge",
                            "35-37:BaseLabeledEdge"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "format"
                        ]
                    ]
                },
                "50-52:": {
                    "start": 50,
                    "end": 52,
                    "body": [
                        "        graph =\n",
                        "                newDirectedMutableGraph(\n",
                        "                        new AbstractGraphConnection<BaseLabeledVertex, BaseLabeledEdge>() {\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "()",
                    "parameters": [],
                    "calls": []
                }
            },
            "fields": {}
        }
    }
}