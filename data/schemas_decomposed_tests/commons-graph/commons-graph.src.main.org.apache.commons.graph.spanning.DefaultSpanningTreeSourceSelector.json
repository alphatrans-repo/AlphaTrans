{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-graph/src/main/java/org/apache/commons/graph/spanning/DefaultSpanningTreeSourceSelector.java",
    "imports": {
        "37-37:import List": {
            "start": 37,
            "end": 37,
            "body": [
                "import java.util.List;\n"
            ]
        },
        "39-39:import Queue": {
            "start": 39,
            "end": 39,
            "body": [
                "import java.util.Queue;\n"
            ]
        },
        "36-36:import ArrayList": {
            "start": 36,
            "end": 36,
            "body": [
                "import java.util.ArrayList;\n"
            ]
        },
        "38-38:import PriorityQueue": {
            "start": 38,
            "end": 38,
            "body": [
                "import java.util.PriorityQueue;\n"
            ]
        },
        "28-28:import Graph": {
            "start": 28,
            "end": 28,
            "body": [
                "import org.apache.commons.graph.Graph;\n"
            ]
        },
        "31-31:import VertexPair": {
            "start": 31,
            "end": 31,
            "body": [
                "import org.apache.commons.graph.VertexPair;\n"
            ]
        },
        "29-29:import Mapper": {
            "start": 29,
            "end": 29,
            "body": [
                "import org.apache.commons.graph.Mapper;\n"
            ]
        },
        "30-30:import SpanningTree": {
            "start": 30,
            "end": 30,
            "body": [
                "import org.apache.commons.graph.SpanningTree;\n"
            ]
        },
        "34-34:import OrderedMonoid": {
            "start": 34,
            "end": 34,
            "body": [
                "import org.apache.commons.graph.weight.OrderedMonoid;\n"
            ]
        },
        "32-32:import MutableSpanningTree": {
            "start": 32,
            "end": 32,
            "body": [
                "import org.apache.commons.graph.model.MutableSpanningTree;\n"
            ]
        },
        "33-33:import PathNotFoundException": {
            "start": 33,
            "end": 33,
            "body": [
                "import org.apache.commons.graph.shortestpath.PathNotFoundException;\n"
            ]
        },
        "26-26:import static Collections.reverseOrder": {
            "start": 26,
            "end": 26,
            "body": [
                "import static java.util.Collections.reverseOrder;\n"
            ]
        },
        "22-22:import static CommonsGraph.findShortestPath": {
            "start": 22,
            "end": 22,
            "body": [
                "import static org.apache.commons.graph.CommonsGraph.findShortestPath;\n"
            ]
        },
        "23-23:import static Assertions.checkNotNull": {
            "start": 23,
            "end": 23,
            "body": [
                "import static org.apache.commons.graph.utils.Assertions.checkNotNull;\n"
            ]
        },
        "24-24:import static Assertions.checkState": {
            "start": 24,
            "end": 24,
            "body": [
                "import static org.apache.commons.graph.utils.Assertions.checkState;\n"
            ]
        }
    },
    "classes": {
        "DefaultSpanningTreeSourceSelector": {
            "start": 48,
            "end": 49,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "122-129:fromSource": {
                    "start": 122,
                    "end": 129,
                    "body": [
                        "    public <S extends V> SpanningTreeAlgorithmSelector<V, W, WE> fromSource(S source) {\n",
                        "        source =\n",
                        "                checkNotNull(\n",
                        "                        source,\n",
                        "                        \"Spanning tree cannot be calculated without expressing the source vertex\");\n",
                        "        checkState(graph.containsVertex(source), \"Vertex %s does not exist in the Graph\", source);\n",
                        "        return new DefaultSpanningTreeAlgorithmSelector<V, W, WE>(graph, weightedEdges, source);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "SpanningTreeAlgorithmSelector<V,W,WE>",
                            "SpanningTreeAlgorithmSelector<V,W,WE>"
                        ]
                    ],
                    "signature": "fromSource(S)",
                    "parameters": [
                        "source"
                    ],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.utils.Assertions",
                            "Assertions",
                            "64-70:checkNotNull"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.utils.Assertions",
                            "Assertions",
                            "87-92:checkState"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Graph",
                            "containsVertex(java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/DefaultSpanningTreeAlgorithmSelector",
                            "DefaultSpanningTreeAlgorithmSelector<V,W,WE>(org.apache.commons.graph.Graph,org.apache.commons.graph.Mapper,java.lang.Object)"
                        ]
                    ]
                },
                "116-119:fromArbitrarySource": {
                    "start": 116,
                    "end": 119,
                    "body": [
                        "    public SpanningTreeAlgorithmSelector<V, W, WE> fromArbitrarySource() {\n",
                        "        checkState(graph.getOrder() > 0, \"Spanning tree cannot be calculated on an empty graph\");\n",
                        "        return fromSource(graph.getVertices0().iterator().next());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "SpanningTreeAlgorithmSelector<V,W,WE>",
                            "SpanningTreeAlgorithmSelector<V,W,WE>"
                        ]
                    ],
                    "signature": "fromArbitrarySource()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.utils.Assertions",
                            "Assertions",
                            "87-92:checkState"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Graph",
                            "getOrder()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.spanning.DefaultSpanningTreeSourceSelector",
                            "DefaultSpanningTreeSourceSelector",
                            "122-129:fromSource"
                        ],
                        [
                            "library",
                            "java.base/java/util/Iterator",
                            "next()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Iterable",
                            "iterator()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Graph",
                            "getVertices0()"
                        ]
                    ]
                },
                "61-113:applyingReverseDeleteAlgorithm": {
                    "start": 61,
                    "end": 113,
                    "body": [
                        "    public <WO extends OrderedMonoid<W>> SpanningTree<V, WE, W> applyingReverseDeleteAlgorithm(\n",
                        "            WO weightOperations) {\n",
                        "\n",
                        "        checkNotNull(\n",
                        "                weightOperations,\n",
                        "                \"The Reverse-Delete algorithm cannot be calulated with null weight operations\");\n",
                        "\n",
                        "        final Queue<WE> sortedEdge =\n",
                        "                new PriorityQueue<WE>(\n",
                        "                        11,\n",
                        "                        reverseOrder(\n",
                        "                                new WeightedEdgesComparator<W, WE>(\n",
                        "                                        weightOperations, weightedEdges)));\n",
                        "        final List<WE> visitedEdge = new ArrayList<WE>();\n",
                        "\n",
                        "        Iterable<WE> edges = graph.getEdges();\n",
                        "        for (WE we : edges) {\n",
                        "            sortedEdge.offer(we);\n",
                        "        }\n",
                        "\n",
                        "        Graph<V, WE> tmpGraph = new ReverseDeleteGraph<V, WE>(graph, sortedEdge, visitedEdge);\n",
                        "\n",
                        "        while (!sortedEdge.isEmpty()) {\n",
                        "            WE we = sortedEdge.poll();\n",
                        "\n",
                        "            VertexPair<V> vertices = graph.getVertices1(we);\n",
                        "\n",
                        "            try {\n",
                        "                findShortestPath(tmpGraph)\n",
                        "                        .whereEdgesHaveWeights(weightedEdges)\n",
                        "                        .from(vertices.getHead())\n",
                        "                        .to(vertices.getTail())\n",
                        "                        .applyingDijkstra(weightOperations);\n",
                        "            } catch (PathNotFoundException ex) {\n",
                        "                visitedEdge.add(we);\n",
                        "            }\n",
                        "        }\n",
                        "\n",
                        "        final MutableSpanningTree<V, WE, W> res =\n",
                        "                new MutableSpanningTree<V, WE, W>(weightOperations, weightedEdges);\n",
                        "        for (V v : graph.getVertices0()) {\n",
                        "            res.addVertex(v);\n",
                        "        }\n",
                        "\n",
                        "        for (WE we : edges) {\n",
                        "            VertexPair<V> pair = tmpGraph.getVertices1(we);\n",
                        "            if (pair != null) {\n",
                        "                res.addEdge(pair.getHead(), we, pair.getTail());\n",
                        "            }\n",
                        "        }\n",
                        "\n",
                        "        return res;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "SpanningTree<V,WE,W>",
                            "SpanningTree<V,WE,W>"
                        ]
                    ],
                    "signature": "applyingReverseDeleteAlgorithm(WO)",
                    "parameters": [
                        "weightOperations"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/PriorityQueue",
                            "PriorityQueue<WE>(int,java.util.Comparator)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Collections",
                            "reverseOrder(java.util.Comparator)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/WeightedEdgesComparator",
                            "WeightedEdgesComparator<W,WE>(java.util.Comparator,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "java.base/java/util/ArrayList",
                            "ArrayList<WE>()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Graph",
                            "getEdges()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/spanning/ReverseDeleteGraph",
                            "ReverseDeleteGraph<V,WE>(org.apache.commons.graph.Graph,java.util.Collection,java.util.Collection)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/MutableSpanningTree",
                            "MutableSpanningTree<V,WE,W>(org.apache.commons.graph.weight.Monoid,org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.utils.Assertions",
                            "Assertions",
                            "64-70:checkNotNull"
                        ],
                        [
                            "library",
                            "java.base/java/util/Queue",
                            "offer(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Collection",
                            "isEmpty()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Queue",
                            "poll()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Graph",
                            "getVertices1(java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/ShortestPathAlgorithmSelector",
                            "applyingDijkstra(org.apache.commons.graph.weight.OrderedMonoid)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/TargetSourceSelector",
                            "to(java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathSourceSelector",
                            "from(java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/VertexPair",
                            "getTail()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PathWeightedEdgesBuilder",
                            "whereEdgesHaveWeights(org.apache.commons.graph.Mapper)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/VertexPair",
                            "getHead()"
                        ],
                        [
                            "commons-graph.src.main.org.apache.commons.graph.CommonsGraph",
                            "CommonsGraph",
                            "139-143:findShortestPath"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "add(java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Graph",
                            "getVertices0()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addVertex(java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/model/BaseMutableGraph",
                            "addEdge(java.lang.Object,java.lang.Object,java.lang.Object)"
                        ]
                    ]
                },
                "55-58:DefaultSpanningTreeSourceSelector": {
                    "start": 55,
                    "end": 58,
                    "body": [
                        "    public DefaultSpanningTreeSourceSelector(Graph<V, WE> graph, Mapper<WE, W> weightedEdges) {\n",
                        "        this.graph = graph;\n",
                        "        this.weightedEdges = weightedEdges;\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "DefaultSpanningTreeSourceSelector(Graph<V,WE>, Mapper<WE,W>)",
                    "parameters": [
                        "graph",
                        "weightedEdges"
                    ],
                    "calls": []
                }
            },
            "fields": {
                "53-53:weightedEdges": {
                    "start": 53,
                    "end": 53,
                    "body": [
                        "    private final Mapper<WE, W> weightedEdges;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Mapper<WE,W>",
                            "Mapper<WE,W>"
                        ]
                    ]
                },
                "51-51:graph": {
                    "start": 51,
                    "end": 51,
                    "body": [
                        "    private final Graph<V, WE> graph;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Graph<V,WE>",
                            "Graph<V,WE>"
                        ]
                    ]
                }
            }
        }
    }
}