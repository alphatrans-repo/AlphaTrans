{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-exec/src/main/java/org/apache/commons/exec/launcher/VmsCommandLauncher.java",
    "imports": {
        "21-21:import IOException": {
            "start": 21,
            "end": 21,
            "body": [
                "import java.io.IOException;\n"
            ]
        },
        "22-22:import PrintWriter": {
            "start": 22,
            "end": 22,
            "body": [
                "import java.io.PrintWriter;\n"
            ]
        },
        "20-20:import File": {
            "start": 20,
            "end": 20,
            "body": [
                "import java.io.File;\n"
            ]
        },
        "25-25:import Path": {
            "start": 25,
            "end": 25,
            "body": [
                "import java.nio.file.Path;\n"
            ]
        },
        "23-23:import Charset": {
            "start": 23,
            "end": 23,
            "body": [
                "import java.nio.charset.Charset;\n"
            ]
        },
        "26-26:import Map": {
            "start": 26,
            "end": 26,
            "body": [
                "import java.util.Map;\n"
            ]
        },
        "28-28:import Set": {
            "start": 28,
            "end": 28,
            "body": [
                "import java.util.Set;\n"
            ]
        },
        "24-24:import Files": {
            "start": 24,
            "end": 24,
            "body": [
                "import java.nio.file.Files;\n"
            ]
        },
        "27-27:import Entry": {
            "start": 27,
            "end": 27,
            "body": [
                "import java.util.Map.Entry;\n"
            ]
        },
        "30-30:import CommandLine": {
            "start": 30,
            "end": 30,
            "body": [
                "import org.apache.commons.exec.CommandLine;\n"
            ]
        },
        "31-31:import StringUtils": {
            "start": 31,
            "end": 31,
            "body": [
                "import org.apache.commons.exec.util.StringUtils;\n"
            ]
        }
    },
    "classes": {
        "VmsCommandLauncher": {
            "start": 37,
            "end": 37,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "Java13CommandLauncher"
            ],
            "methods": {
                "121-124:isFailure": {
                    "start": 121,
                    "end": 124,
                    "body": [
                        "    public boolean isFailure(final int exitValue) {\n",
                        "        // even exit value signals failure\n",
                        "        return exitValue % 2 == 0;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isFailure(int)",
                    "parameters": [
                        "exitValue"
                    ],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def isFailure(self, exitValue: int) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "114-117:exec1": {
                    "start": 114,
                    "end": 117,
                    "body": [
                        "    //@Override\n",
                        "    public Process exec1(final CommandLine cmd, final Map<String, String> env, final File workingDir) throws IOException {\n",
                        "        return super.exec1(new CommandLine(2, null, null, createCommandFile(cmd, env).getPath()), env, workingDir);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Process",
                            "java.lang.Process"
                        ]
                    ],
                    "signature": "exec1(CommandLine, Map<String,String>, File)",
                    "parameters": [
                        "cmd",
                        "env",
                        "workingDir"
                    ],
                    "calls": [
                        [
                            "commons-exec.src.main.org.apache.commons.exec.launcher.Java13CommandLauncher",
                            "Java13CommandLauncher",
                            "47-49:exec1"
                        ],
                        [
                            "commons-exec.src.main.org.apache.commons.exec.CommandLine",
                            "CommandLine",
                            "192-208:CommandLine"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "getPath()"
                        ],
                        [
                            "commons-exec.src.main.org.apache.commons.exec.launcher.VmsCommandLauncher",
                            "VmsCommandLauncher",
                            "42-100:createCommandFile"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def exec1(self, cmd: CommandLine, env: typing.Dict[str, str], workingDir: pathlib.Path) -> subprocess.Popen:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "105-108:exec0": {
                    "start": 105,
                    "end": 108,
                    "body": [
                        "    //@Override\n",
                        "    public Process exec0(final CommandLine cmd, final Map<String, String> env) throws IOException {\n",
                        "        return super.exec0(new CommandLine(2, null, null, createCommandFile(cmd, env).getPath()), env);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "Process",
                            "java.lang.Process"
                        ]
                    ],
                    "signature": "exec0(CommandLine, Map<String,String>)",
                    "parameters": [
                        "cmd",
                        "env"
                    ],
                    "calls": [
                        [
                            "commons-exec.src.main.org.apache.commons.exec.launcher.CommandLauncherImpl",
                            "CommandLauncherImpl",
                            "33-36:exec0"
                        ],
                        [
                            "commons-exec.src.main.org.apache.commons.exec.CommandLine",
                            "CommandLine",
                            "192-208:CommandLine"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "getPath()"
                        ],
                        [
                            "commons-exec.src.main.org.apache.commons.exec.launcher.VmsCommandLauncher",
                            "VmsCommandLauncher",
                            "42-100:createCommandFile"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def exec0(self, cmd: CommandLine, env: typing.Dict[str, str]) -> subprocess.Popen:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                },
                "42-100:createCommandFile": {
                    "start": 42,
                    "end": 100,
                    "body": [
                        "    private File createCommandFile(final CommandLine cmd, final Map<String, String> env) throws IOException {\n",
                        "        final Path path = Files.createTempFile(\"EXEC\", \".TMP\");\n",
                        "        final File script = path.toFile();\n",
                        "        script.deleteOnExit();\n",
                        "        try (PrintWriter writer = new PrintWriter(Files.newBufferedWriter(path, Charset.defaultCharset()))) {\n",
                        "            // add the environment as global symbols for the DCL script\n",
                        "            if (env != null) {\n",
                        "                final Set<Entry<String, String>> entries = env.entrySet();\n",
                        "                for (final Entry<String, String> entry : entries) {\n",
                        "                    writer.print(\"$ \");\n",
                        "                    writer.print(entry.getKey());\n",
                        "                    writer.print(\" == \"); // define as global symbol\n",
                        "                    writer.println('\\\"');\n",
                        "                    String value = entry.getValue();\n",
                        "                    // Any embedded \" values need to be doubled\n",
                        "                    if (value.indexOf('\\\"') > 0) {\n",
                        "                        final StringBuilder sb = new StringBuilder();\n",
                        "                        for (int i = 0; i < value.length(); i++) {\n",
                        "                            final char c = value.charAt(i);\n",
                        "                            if (c == '\\\"') {\n",
                        "                                sb.append('\\\"');\n",
                        "                            }\n",
                        "                            sb.append(c);\n",
                        "                        }\n",
                        "                        value = sb.toString();\n",
                        "                    }\n",
                        "                    writer.print(value);\n",
                        "                    writer.println('\\\"');\n",
                        "                }\n",
                        "            }\n",
                        "\n",
                        "            final String command = cmd.getExecutable();\n",
                        "            if (cmd.isFile()) {// We assume it is it a script file\n",
                        "                writer.print(\"$ @\");\n",
                        "                // This is a bit crude, but seems to work\n",
                        "                final String[] parts = StringUtils.split(command, \"/\");\n",
                        "                writer.print(parts[0]); // device\n",
                        "                writer.print(\":[\");\n",
                        "                writer.print(parts[1]); // top level directory\n",
                        "                final int lastPart = parts.length - 1;\n",
                        "                for (int i = 2; i < lastPart; i++) {\n",
                        "                    writer.print(\".\");\n",
                        "                    writer.print(parts[i]);\n",
                        "                }\n",
                        "                writer.print(\"]\");\n",
                        "                writer.print(parts[lastPart]);\n",
                        "            } else {\n",
                        "                writer.print(\"$ \");\n",
                        "                writer.print(command);\n",
                        "            }\n",
                        "            final String[] args = cmd.getArguments();\n",
                        "            for (final String arg : args) {\n",
                        "                writer.println(\" -\");\n",
                        "                writer.print(arg);\n",
                        "            }\n",
                        "            writer.println();\n",
                        "        }\n",
                        "        return script;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "File",
                            "java.io.File"
                        ]
                    ],
                    "signature": "createCommandFile(CommandLine, Map<String,String>)",
                    "parameters": [
                        "cmd",
                        "env"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/file/Files",
                            "createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute[])"
                        ],
                        [
                            "library",
                            "java.base/java/nio/file/Path",
                            "toFile()"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "deleteOnExit()"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "PrintWriter(java.io.Writer)"
                        ],
                        [
                            "library",
                            "java.base/java/nio/file/Files",
                            "newBufferedWriter(java.nio.file.Path,java.nio.charset.Charset,java.nio.file.OpenOption[])"
                        ],
                        [
                            "library",
                            "java.base/java/nio/charset/Charset",
                            "defaultCharset()"
                        ],
                        [
                            "commons-exec.src.main.org.apache.commons.exec.CommandLine",
                            "CommandLine",
                            "356-361:getExecutable"
                        ],
                        [
                            "commons-exec.src.main.org.apache.commons.exec.CommandLine",
                            "CommandLine",
                            "336-349:getArguments"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "entrySet()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map$Entry",
                            "getValue()"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "print(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map$Entry",
                            "getKey()"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "println(char)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "indexOf(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "charAt(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(char)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ],
                        [
                            "commons-exec.src.main.org.apache.commons.exec.CommandLine",
                            "CommandLine",
                            "377-379:isFile"
                        ],
                        [
                            "commons-exec.src.main.org.apache.commons.exec.util.StringUtils",
                            "StringUtils",
                            "108-115:split"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintWriter",
                            "println()"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __createCommandFile(self, cmd: CommandLine, env: typing.Dict[str, str]) -> pathlib.Path:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "deepseek-coder-33b-instruct",
                    "include_implementation": true
                }
            },
            "fields": {},
            "is_enum": false,
            "python_class_declaration": "class VmsCommandLauncher(Java13CommandLauncher):\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import pathlib",
        "import io",
        "import typing\nfrom typing import *",
        "from src.main.org.apache.commons.exec.CommandLine import *",
        "from src.main.org.apache.commons.exec.launcher.Java13CommandLauncher import *",
        "from src.main.org.apache.commons.exec.util.StringUtils import *"
    ]
}