{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-fileupload/src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java",
    "imports": {
        "22-22:import ByteArrayInputStream": {
            "start": 22,
            "end": 22,
            "body": [
                "import java.io.ByteArrayInputStream;\n"
            ]
        },
        "23-23:import ByteArrayOutputStream": {
            "start": 23,
            "end": 23,
            "body": [
                "import java.io.ByteArrayOutputStream;\n"
            ]
        },
        "24-24:import File": {
            "start": 24,
            "end": 24,
            "body": [
                "import java.io.File;\n"
            ]
        },
        "25-25:import ObjectInputStream": {
            "start": 25,
            "end": 25,
            "body": [
                "import java.io.ObjectInputStream;\n"
            ]
        },
        "26-26:import ObjectOutputStream": {
            "start": 26,
            "end": 26,
            "body": [
                "import java.io.ObjectOutputStream;\n"
            ]
        },
        "19-19:import static Assert.assertEquals": {
            "start": 19,
            "end": 19,
            "body": [
                "import static org.junit.Assert.assertEquals;\n"
            ]
        },
        "20-20:import static Assert.assertNotNull": {
            "start": 20,
            "end": 20,
            "body": [
                "import static org.junit.Assert.assertNotNull;\n"
            ]
        }
    },
    "classes": {
        "DiskFileItemSerializeTest": {
            "start": 29,
            "end": 29,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "99-107:deserialize": {
                    "start": 99,
                    "end": 107,
                    "body": [
                        "    private Object deserialize(ByteArrayOutputStream baos) throws Exception {\n",
                        "        Object result = null;\n",
                        "        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n",
                        "        ObjectInputStream ois = new ObjectInputStream(bais);\n",
                        "        result = ois.readObject();\n",
                        "        bais.close();\n",
                        "\n",
                        "        return result;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "Object",
                            "java.lang.Object"
                        ]
                    ],
                    "signature": "deserialize(ByteArrayOutputStream)",
                    "parameters": [
                        "baos"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/ByteArrayInputStream",
                            "ByteArrayInputStream(byte[])"
                        ],
                        [
                            "library",
                            "java.base/java/io/ByteArrayOutputStream",
                            "toByteArray()"
                        ],
                        [
                            "library",
                            "java.base/java/io/ObjectInputStream",
                            "ObjectInputStream(java.io.InputStream)"
                        ],
                        [
                            "library",
                            "java.base/java/io/ObjectInputStream",
                            "readObject()"
                        ],
                        [
                            "library",
                            "java.base/java/io/ByteArrayInputStream",
                            "close()"
                        ]
                    ]
                },
                "89-96:serialize": {
                    "start": 89,
                    "end": 96,
                    "body": [
                        "    private ByteArrayOutputStream serialize(Object target) throws Exception {\n",
                        "        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n",
                        "        ObjectOutputStream oos = new ObjectOutputStream(baos);\n",
                        "        oos.writeObject(target);\n",
                        "        oos.flush();\n",
                        "        oos.close();\n",
                        "        return baos;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "ByteArrayOutputStream",
                            "java.io.ByteArrayOutputStream"
                        ]
                    ],
                    "signature": "serialize(Object)",
                    "parameters": [
                        "target"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/ByteArrayOutputStream",
                            "ByteArrayOutputStream()"
                        ],
                        [
                            "library",
                            "java.base/java/io/ObjectOutputStream",
                            "ObjectOutputStream(java.io.OutputStream)"
                        ],
                        [
                            "library",
                            "java.base/java/io/ObjectOutputStream",
                            "writeObject(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/io/ObjectOutputStream",
                            "flush()"
                        ],
                        [
                            "library",
                            "java.base/java/io/ObjectOutputStream",
                            "close()"
                        ]
                    ]
                },
                "71-82:createContentBytes": {
                    "start": 71,
                    "end": 82,
                    "body": [
                        "    private byte[] createContentBytes(int size) {\n",
                        "        StringBuilder buffer = new StringBuilder(size);\n",
                        "        byte count = 0;\n",
                        "        for (int i = 0; i < size; i++) {\n",
                        "            buffer.append(count + \"\");\n",
                        "            count++;\n",
                        "            if (count > 9) {\n",
                        "                count = 0;\n",
                        "            }\n",
                        "        }\n",
                        "        return buffer.toString().getBytes();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "byte[]",
                            "byte[]"
                        ]
                    ],
                    "signature": "createContentBytes(int)",
                    "parameters": [
                        "size"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "StringBuilder(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "append(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "getBytes()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/StringBuilder",
                            "toString()"
                        ]
                    ]
                },
                "61-68:compareBytes": {
                    "start": 61,
                    "end": 68,
                    "body": [
                        "    private void compareBytes(String text, byte[] origBytes, byte[] newBytes) {\n",
                        "        assertNotNull(\"origBytes must not be null\", origBytes);\n",
                        "        assertNotNull(\"newBytes must not be null\", newBytes);\n",
                        "        assertEquals(text + \" byte[] length\", origBytes.length, newBytes.length);\n",
                        "        for (int i = 0; i < origBytes.length; i++) {\n",
                        "            assertEquals(text + \" byte[\" + i + \"]\", origBytes[i], newBytes[i]);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "compareBytes(String, byte[], byte[])",
                    "parameters": [
                        "text",
                        "origBytes",
                        "newBytes"
                    ],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertNotNull(java.lang.String,java.lang.Object)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ]
                    ]
                }
            },
            "fields": {
                "38-38:threshold": {
                    "start": 38,
                    "end": 38,
                    "body": [
                        "    private static final int threshold = 16;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int",
                            "int"
                        ]
                    ]
                },
                "35-35:textContentType": {
                    "start": 35,
                    "end": 35,
                    "body": [
                        "    private static final String textContentType = \"text/plain\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                },
                "31-32:REPO": {
                    "start": 31,
                    "end": 32,
                    "body": [
                        "    private static final File REPO =\n",
                        "            new File(System.getProperty(\"java.io.tmpdir\"), \"diskfileitemrepo\");\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "File",
                            "java.io.File"
                        ]
                    ]
                }
            }
        }
    }
}