{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-cli/src/main/java/org/apache/commons/cli/GnuParser.java",
    "imports": {
        "21-21:import List": {
            "start": 21,
            "end": 21,
            "body": [
                "import java.util.List;\n"
            ]
        },
        "20-20:import ArrayList": {
            "start": 20,
            "end": 20,
            "body": [
                "import java.util.ArrayList;\n"
            ]
        }
    },
    "classes": {
        "GnuParser": {
            "start": 30,
            "end": 30,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "Parser"
            ],
            "methods": {
                "49-91:flatten": {
                    "start": 49,
                    "end": 91,
                    "body": [
                        "    protected String[] flatten(\n",
                        "            final Options options, final String[] arguments, final boolean stopAtNonOption) {\n",
                        "        final List<String> tokens = new ArrayList<>();\n",
                        "\n",
                        "        boolean eatTheRest = false;\n",
                        "\n",
                        "        for (int i = 0; i < arguments.length; i++) {\n",
                        "            final String arg = arguments[i];\n",
                        "\n",
                        "            if (\"--\".equals(arg)) {\n",
                        "                eatTheRest = true;\n",
                        "                tokens.add(\"--\");\n",
                        "            } else if (\"-\".equals(arg)) {\n",
                        "                tokens.add(\"-\");\n",
                        "            } else if (arg.startsWith(\"-\")) {\n",
                        "                final String opt = Util.stripLeadingHyphens(arg);\n",
                        "\n",
                        "                if (options.hasOption(opt)) {\n",
                        "                    tokens.add(arg);\n",
                        "                } else if (opt.indexOf('=') != -1\n",
                        "                        && options.hasOption(opt.substring(0, opt.indexOf('=')))) {\n",
                        "                    tokens.add(arg.substring(0, arg.indexOf('='))); // --foo\n",
                        "                    tokens.add(arg.substring(arg.indexOf('=') + 1)); // value\n",
                        "                } else if (options.hasOption(arg.substring(0, 2))) {\n",
                        "                    tokens.add(arg.substring(0, 2)); // -D\n",
                        "                    tokens.add(arg.substring(2)); // property=value\n",
                        "                } else {\n",
                        "                    eatTheRest = stopAtNonOption;\n",
                        "                    tokens.add(arg);\n",
                        "                }\n",
                        "            } else {\n",
                        "                tokens.add(arg);\n",
                        "            }\n",
                        "\n",
                        "            if (eatTheRest) {\n",
                        "                for (i++; i < arguments.length; i++) { // NOPMD\n",
                        "                    tokens.add(arguments[i]);\n",
                        "                }\n",
                        "            }\n",
                        "        }\n",
                        "\n",
                        "        return tokens.toArray(Util.EMPTY_STRING_ARRAY);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "protected"
                    ],
                    "return_types": [
                        [
                            "String[]",
                            "java.lang.String[]"
                        ]
                    ],
                    "signature": "flatten(Options, String[], boolean)",
                    "parameters": [
                        "options",
                        "arguments",
                        "stopAtNonOption"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/ArrayList",
                            "ArrayList<String>()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "add(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "startsWith(java.lang.String)"
                        ],
                        [
                            "commons-cli.src.main.org.apache.commons.cli.Util",
                            "Util",
                            "51-63:stripLeadingHyphens"
                        ],
                        [
                            "commons-cli.src.main.org.apache.commons.cli.Options",
                            "Options",
                            "283-287:hasOption"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "indexOf(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "substring(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "substring(int)"
                        ],
                        [
                            "library",
                            "java.base/java/util/List",
                            "toArray(java.lang.Object[])"
                        ]
                    ]
                }
            },
            "fields": {}
        }
    }
}