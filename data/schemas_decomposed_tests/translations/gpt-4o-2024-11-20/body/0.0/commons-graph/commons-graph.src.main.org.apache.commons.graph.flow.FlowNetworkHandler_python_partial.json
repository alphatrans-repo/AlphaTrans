{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-graph/src/main/java/org/apache/commons/graph/flow/FlowNetworkHandler.java",
    "imports": {
        "36-36:import Map": {
            "start": 36,
            "end": 36,
            "body": [
                "import java.util.Map;\n"
            ]
        },
        "35-35:import HashMap": {
            "start": 35,
            "end": 35,
            "body": [
                "import java.util.HashMap;\n"
            ]
        },
        "26-26:import DirectedGraph": {
            "start": 26,
            "end": 26,
            "body": [
                "import org.apache.commons.graph.DirectedGraph;\n"
            ]
        },
        "28-28:import VertexPair": {
            "start": 28,
            "end": 28,
            "body": [
                "import org.apache.commons.graph.VertexPair;\n"
            ]
        },
        "27-27:import Mapper": {
            "start": 27,
            "end": 27,
            "body": [
                "import org.apache.commons.graph.Mapper;\n"
            ]
        },
        "29-29:import WeightedPath": {
            "start": 29,
            "end": 29,
            "body": [
                "import org.apache.commons.graph.WeightedPath;\n"
            ]
        },
        "31-31:import BaseGraphVisitHandler": {
            "start": 31,
            "end": 31,
            "body": [
                "import org.apache.commons.graph.visit.BaseGraphVisitHandler;\n"
            ]
        },
        "32-32:import VisitState": {
            "start": 32,
            "end": 32,
            "body": [
                "import org.apache.commons.graph.visit.VisitState;\n"
            ]
        },
        "33-33:import OrderedMonoid": {
            "start": 33,
            "end": 33,
            "body": [
                "import org.apache.commons.graph.weight.OrderedMonoid;\n"
            ]
        },
        "30-30:import PredecessorsList": {
            "start": 30,
            "end": 30,
            "body": [
                "import org.apache.commons.graph.shortestpath.PredecessorsList;\n"
            ]
        },
        "23-23:import static VisitState.CONTINUE": {
            "start": 23,
            "end": 23,
            "body": [
                "import static org.apache.commons.graph.visit.VisitState.CONTINUE;\n"
            ]
        },
        "22-22:import static VisitState.ABORT": {
            "start": 22,
            "end": 22,
            "body": [
                "import static org.apache.commons.graph.visit.VisitState.ABORT;\n"
            ]
        },
        "24-24:import static VisitState.SKIP": {
            "start": 24,
            "end": 24,
            "body": [
                "import static org.apache.commons.graph.visit.VisitState.SKIP;\n"
            ]
        }
    },
    "classes": {
        "FlowNetworkHandler": {
            "start": 44,
            "end": 45,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "129-131:onCompleted": {
                    "start": 129,
                    "end": 131,
                    "body": [
                        "    public W onCompleted() {\n",
                        "        return maxFlow;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "W",
                            "W"
                        ]
                    ],
                    "signature": "onCompleted()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def onCompleted(self) -> typing.Any:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "99-102:discoverGraph": {
                    "start": 99,
                    "end": 102,
                    "body": [
                        "    public void discoverGraph(DirectedGraph<V, E> graph) {\n",
                        "        predecessors = new PredecessorsList<V, E, W>(graph, weightOperations, weightedEdges);\n",
                        "        foundAugmentingPath = false;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "discoverGraph(DirectedGraph<V,E>)",
                    "parameters": [
                        "graph"
                    ],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PredecessorsList",
                            "PredecessorsList<V,E,W>(org.apache.commons.graph.Graph,org.apache.commons.graph.weight.Monoid,org.apache.commons.graph.Mapper)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def discoverGraph(self, graph: DirectedGraph[typing.Any, typing.Any]) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "88-95:discoverEdge": {
                    "start": 88,
                    "end": 95,
                    "body": [
                        "    public VisitState discoverEdge(V head, E edge, V tail) {\n",
                        "        W residualEdgeCapacity = residualEdgeCapacities.get(edge);\n",
                        "        if (weightOperations.compare(residualEdgeCapacity, weightOperations.identity()) <= 0) {\n",
                        "            return SKIP;\n",
                        "        }\n",
                        "        predecessors.addPredecessor(tail, head);\n",
                        "        return CONTINUE;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "VisitState",
                            "VisitState"
                        ]
                    ],
                    "signature": "discoverEdge(V, E, V)",
                    "parameters": [
                        "head",
                        "edge",
                        "tail"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Comparator",
                            "compare(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PredecessorsList",
                            "addPredecessor(java.lang.Object,java.lang.Object)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def discoverEdge(self, head: typing.Any, edge: typing.Any, tail: typing.Any) -> VisitState:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "110-116:finishVertex": {
                    "start": 110,
                    "end": 116,
                    "body": [
                        "    public VisitState finishVertex(V vertex) {\n",
                        "        if (vertex.equals(target)) {\n",
                        "            foundAugmentingPath = true;\n",
                        "            return ABORT;\n",
                        "        }\n",
                        "        return CONTINUE;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "VisitState",
                            "VisitState"
                        ]
                    ],
                    "signature": "finishVertex(V)",
                    "parameters": [
                        "vertex"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Object",
                            "equals(java.lang.Object)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def finishVertex(self, vertex: typing.Any) -> VisitState:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "105-107:discoverVertex": {
                    "start": 105,
                    "end": 107,
                    "body": [
                        "    public VisitState discoverVertex(V vertex) {\n",
                        "        return finishVertex(vertex);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "VisitState",
                            "VisitState"
                        ]
                    ],
                    "signature": "discoverVertex(V)",
                    "parameters": [
                        "vertex"
                    ],
                    "calls": [
                        [
                            "commons-graph.src.main.org.apache.commons.graph.flow.FlowNetworkHandler",
                            "FlowNetworkHandler",
                            "110-116:finishVertex"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def discoverVertex(self, vertex: typing.Any) -> VisitState:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "137-163:updateResidualNetworkWithCurrentAugmentingPath": {
                    "start": 137,
                    "end": 163,
                    "body": [
                        "    void updateResidualNetworkWithCurrentAugmentingPath() {\n",
                        "        WeightedPath<V, E, W> augmentingPath = predecessors.buildPath0(source, target);\n",
                        "\n",
                        "        W flowIncrement = null;\n",
                        "        for (E edge : augmentingPath.getEdges()) {\n",
                        "            W edgeCapacity = residualEdgeCapacities.get(edge);\n",
                        "            if (flowIncrement == null\n",
                        "                    || weightOperations.compare(edgeCapacity, flowIncrement) < 0) {\n",
                        "                flowIncrement = edgeCapacity;\n",
                        "            }\n",
                        "        }\n",
                        "\n",
                        "        maxFlow = weightOperations.append(maxFlow, flowIncrement);\n",
                        "        for (E edge : augmentingPath.getEdges()) {\n",
                        "            W directCapacity = residualEdgeCapacities.get(edge);\n",
                        "            residualEdgeCapacities.put(\n",
                        "                    edge,\n",
                        "                    weightOperations.append(\n",
                        "                            directCapacity, weightOperations.inverse(flowIncrement)));\n",
                        "\n",
                        "            VertexPair<V> vertexPair = flowNetwork.getVertices1(edge);\n",
                        "            E inverseEdge = flowNetwork.getEdge(vertexPair.getTail(), vertexPair.getHead());\n",
                        "            W inverseCapacity = residualEdgeCapacities.get(inverseEdge);\n",
                        "            residualEdgeCapacities.put(\n",
                        "                    inverseEdge, weightOperations.append(inverseCapacity, flowIncrement));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "updateResidualNetworkWithCurrentAugmentingPath()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/shortestpath/PredecessorsList",
                            "buildPath0(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Graph",
                            "getEdges()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Comparator",
                            "compare(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "append(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Graph",
                            "getVertices1(java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Graph",
                            "getEdge(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/VertexPair",
                            "getTail()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/VertexPair",
                            "getHead()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "inverse(java.lang.Object)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def updateResidualNetworkWithCurrentAugmentingPath(self) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "124-126:hasAugmentingPath": {
                    "start": 124,
                    "end": 126,
                    "body": [
                        "    boolean hasAugmentingPath() {\n",
                        "        return foundAugmentingPath;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "hasAugmentingPath()",
                    "parameters": [],
                    "calls": [],
                    "is_overload": false,
                    "partial_translation": [
                        "    def hasAugmentingPath(self) -> bool:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "65-84:FlowNetworkHandler": {
                    "start": 65,
                    "end": 84,
                    "body": [
                        "    FlowNetworkHandler(\n",
                        "            DirectedGraph<V, E> flowNetwork,\n",
                        "            V source,\n",
                        "            V target,\n",
                        "            OrderedMonoid<W> weightOperations,\n",
                        "            Mapper<E, W> weightedEdges) {\n",
                        "        this.flowNetwork = flowNetwork;\n",
                        "        this.source = source;\n",
                        "        this.target = target;\n",
                        "        this.weightOperations = weightOperations;\n",
                        "        this.weightedEdges = weightedEdges;\n",
                        "\n",
                        "        maxFlow = weightOperations.identity();\n",
                        "\n",
                        "        for (E edge : flowNetwork.getEdges()) {\n",
                        "            residualEdgeCapacities.put(edge, weightedEdges.map(edge));\n",
                        "        }\n",
                        "\n",
                        "        predecessors = null;\n",
                        "    }\n"
                    ],
                    "is_constructor": true,
                    "annotations": [],
                    "modifiers": [],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "FlowNetworkHandler(DirectedGraph<V,E>, V, V, OrderedMonoid<W>, Mapper<E,W>)",
                    "parameters": [
                        "flowNetwork",
                        "source",
                        "target",
                        "weightOperations",
                        "weightedEdges"
                    ],
                    "calls": [
                        [
                            "library",
                            "org/apache/commons/graph/weight/Monoid",
                            "identity()"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Graph",
                            "getEdges()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "org/apache/commons/graph/Mapper",
                            "map(java.lang.Object)"
                        ]
                    ],
                    "is_overload": false,
                    "partial_translation": [
                        "    def __init__(self, flowNetwork: DirectedGraph[typing.Any, typing.Any], source: typing.Any, target: typing.Any, weightOperations: OrderedMonoid[typing.Any], weightedEdges: Mapper[typing.Any, typing.Any]) -> None:\n",
                        "        pass\n\n"
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                }
            },
            "fields": {
                "63-63:foundAugmentingPath": {
                    "start": 63,
                    "end": 63,
                    "body": [
                        "    private boolean foundAugmentingPath;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "partial_translation": [
                        "    __foundAugmentingPath: bool = False",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "61-61:predecessors": {
                    "start": 61,
                    "end": 61,
                    "body": [
                        "    private PredecessorsList<V, E, W> predecessors;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "PredecessorsList<V,E,W>",
                            "PredecessorsList<V,E,W>"
                        ]
                    ],
                    "partial_translation": [
                        "    __predecessors: PredecessorsList[typing.Any, typing,Any, typing.Any] = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "59-59:residualEdgeCapacities": {
                    "start": 59,
                    "end": 59,
                    "body": [
                        "    private final Map<E, W> residualEdgeCapacities = new HashMap<E, W>();\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Map<E,W>",
                            "java.util.Map<E,W>"
                        ]
                    ],
                    "partial_translation": [
                        "    __residualEdgeCapacities: typing.Dict[typing.Any, typing.Any] = {}",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "57-57:maxFlow": {
                    "start": 57,
                    "end": 57,
                    "body": [
                        "    private W maxFlow;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "W",
                            "W"
                        ]
                    ],
                    "partial_translation": [
                        "    __maxFlow: typing.Any = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "55-55:weightedEdges": {
                    "start": 55,
                    "end": 55,
                    "body": [
                        "    private final Mapper<E, W> weightedEdges;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "Mapper<E,W>",
                            "Mapper<E,W>"
                        ]
                    ],
                    "partial_translation": [
                        "    __weightedEdges: Mapper[typing.Any, typing.Any] = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "53-53:weightOperations": {
                    "start": 53,
                    "end": 53,
                    "body": [
                        "    private final OrderedMonoid<W> weightOperations;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "OrderedMonoid<W>",
                            "OrderedMonoid<W>"
                        ]
                    ],
                    "partial_translation": [
                        "    __weightOperations: OrderedMonoid[typing.Any] = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "51-51:target": {
                    "start": 51,
                    "end": 51,
                    "body": [
                        "    private final V target;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "V",
                            "V"
                        ]
                    ],
                    "partial_translation": [
                        "    __target: typing.Any = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "49-49:source": {
                    "start": 49,
                    "end": 49,
                    "body": [
                        "    private final V source;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "V",
                            "V"
                        ]
                    ],
                    "partial_translation": [
                        "    __source: typing.Any = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                },
                "47-47:flowNetwork": {
                    "start": 47,
                    "end": 47,
                    "body": [
                        "    private final DirectedGraph<V, E> flowNetwork;\n"
                    ],
                    "modifiers": [
                        "final",
                        "private"
                    ],
                    "types": [
                        [
                            "DirectedGraph<V,E>",
                            "DirectedGraph<V,E>"
                        ]
                    ],
                    "partial_translation": [
                        "    __flowNetwork: DirectedGraph[typing.Any, typing.Any] = None",
                        ""
                    ],
                    "translation": [],
                    "translation_status": "pending",
                    "syntactic_validation": "pending",
                    "field_exercise": "pending",
                    "graal_validation": "pending",
                    "test_execution": "pending",
                    "elapsed_time": 0,
                    "generation_timestamp": 0,
                    "model_name": "gpt-4o-2024-11-20",
                    "include_implementation": true
                }
            },
            "is_enum": false,
            "python_class_declaration": "class FlowNetworkHandler:\n\n"
        }
    },
    "python_imports": [
        "from __future__ import annotations",
        "import pathlib",
        "import io",
        "import typing\nfrom typing import *",
        "from src.main.org.apache.commons.graph.DirectedGraph import *",
        "from src.main.org.apache.commons.graph.Graph import *",
        "from src.main.org.apache.commons.graph.Mapper import *",
        "from src.main.org.apache.commons.graph.VertexPair import *",
        "from src.main.org.apache.commons.graph.WeightedPath import *",
        "from src.main.org.apache.commons.graph.shortestpath.PredecessorsList import *",
        "from src.main.org.apache.commons.graph.visit.BaseGraphVisitHandler import *",
        "from src.main.org.apache.commons.graph.visit.VisitState import *",
        "from src.main.org.apache.commons.graph.weight.Monoid import *",
        "from src.main.org.apache.commons.graph.weight.OrderedMonoid import *"
    ]
}