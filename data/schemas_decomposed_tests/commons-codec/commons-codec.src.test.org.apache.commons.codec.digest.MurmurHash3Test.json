{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-codec/src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
    "imports": {
        "27-27:import ByteBuffer": {
            "start": 27,
            "end": 27,
            "body": [
                "import java.nio.ByteBuffer;\n"
            ]
        },
        "28-28:import Arrays": {
            "start": 28,
            "end": 28,
            "body": [
                "import java.util.Arrays;\n"
            ]
        },
        "29-29:import ThreadLocalRandom": {
            "start": 29,
            "end": 29,
            "body": [
                "import java.util.concurrent.ThreadLocalRandom;\n"
            ]
        },
        "25-25:import Test": {
            "start": 25,
            "end": 25,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "20-20:import StringUtils": {
            "start": 20,
            "end": 20,
            "body": [
                "import org.apache.commons.codec.binary.StringUtils;\n"
            ]
        },
        "21-21:import IncrementalHash32": {
            "start": 21,
            "end": 21,
            "body": [
                "import org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32;\n"
            ]
        },
        "22-22:import IncrementalHash32x86": {
            "start": 22,
            "end": 22,
            "body": [
                "import org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32x86;\n"
            ]
        },
        "23-23:import Assert": {
            "start": 23,
            "end": 23,
            "body": [
                "import org.junit.Assert;\n"
            ]
        },
        "24-24:import Assume": {
            "start": 24,
            "end": 24,
            "body": [
                "import org.junit.Assume;\n"
            ]
        }
    },
    "classes": {
        "MurmurHash3Test": {
            "start": 33,
            "end": 33,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [],
            "methods": {
                "1396-1410:testIncrementalHashWithUnprocessedBytesAndHugeLengthArray_test3_decomposed": {
                    "start": 1396,
                    "end": 1410,
                    "body": [
                        "    public void testIncrementalHashWithUnprocessedBytesAndHugeLengthArray_test3_decomposed()  {\n",
                        "        final int unprocessedSize = 3;\n",
                        "        final int hugeLength = Integer.MAX_VALUE - 2;\n",
                        "        Assert.assertTrue(\"This should overflow to negative\", unprocessedSize + hugeLength < 4);\n",
                        "        byte[] bytes = null;\n",
                        "        try {\n",
                        "            bytes = new byte[hugeLength];\n",
                        "        } catch (final OutOfMemoryError ignore) {\n",
                        "        }\n",
                        "        Assume.assumeTrue(\"Cannot allocate array of length \" + hugeLength, bytes != null);\n",
                        "        final IncrementalHash32x86 inc = new IncrementalHash32x86();\n",
                        "        inc.start(0);\n",
                        "        inc.add(bytes, 0, unprocessedSize);\n",
                        "        inc.add(bytes, 0, hugeLength);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIncrementalHashWithUnprocessedBytesAndHugeLengthArray_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "IncrementalHash32x86",
                            "IncrementalHash32x86"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "library",
                            "Assume",
                            "assumeTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "IncrementalHash32x86",
                            "1014-1017:start"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "IncrementalHash32x86",
                            "1026-1083:add"
                        ]
                    ]
                },
                "1381-1393:testIncrementalHashWithUnprocessedBytesAndHugeLengthArray_test2_decomposed": {
                    "start": 1381,
                    "end": 1393,
                    "body": [
                        "    public void testIncrementalHashWithUnprocessedBytesAndHugeLengthArray_test2_decomposed()  {\n",
                        "        final int unprocessedSize = 3;\n",
                        "        final int hugeLength = Integer.MAX_VALUE - 2;\n",
                        "        Assert.assertTrue(\"This should overflow to negative\", unprocessedSize + hugeLength < 4);\n",
                        "        byte[] bytes = null;\n",
                        "        try {\n",
                        "            bytes = new byte[hugeLength];\n",
                        "        } catch (final OutOfMemoryError ignore) {\n",
                        "        }\n",
                        "        Assume.assumeTrue(\"Cannot allocate array of length \" + hugeLength, bytes != null);\n",
                        "        final IncrementalHash32x86 inc = new IncrementalHash32x86();\n",
                        "        inc.start(0);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIncrementalHashWithUnprocessedBytesAndHugeLengthArray_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "IncrementalHash32x86",
                            "IncrementalHash32x86"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "library",
                            "Assume",
                            "assumeTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "IncrementalHash32x86",
                            "1014-1017:start"
                        ]
                    ]
                },
                "1367-1378:testIncrementalHashWithUnprocessedBytesAndHugeLengthArray_test1_decomposed": {
                    "start": 1367,
                    "end": 1378,
                    "body": [
                        "    public void testIncrementalHashWithUnprocessedBytesAndHugeLengthArray_test1_decomposed()  {\n",
                        "        final int unprocessedSize = 3;\n",
                        "        final int hugeLength = Integer.MAX_VALUE - 2;\n",
                        "        Assert.assertTrue(\"This should overflow to negative\", unprocessedSize + hugeLength < 4);\n",
                        "        byte[] bytes = null;\n",
                        "        try {\n",
                        "            bytes = new byte[hugeLength];\n",
                        "        } catch (final OutOfMemoryError ignore) {\n",
                        "        }\n",
                        "        Assume.assumeTrue(\"Cannot allocate array of length \" + hugeLength, bytes != null);\n",
                        "        final IncrementalHash32x86 inc = new IncrementalHash32x86();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIncrementalHashWithUnprocessedBytesAndHugeLengthArray_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "IncrementalHash32x86",
                            "IncrementalHash32x86"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "library",
                            "Assume",
                            "assumeTrue(java.lang.String,boolean)"
                        ]
                    ]
                },
                "1360-1364:testIncrementalHashWithUnprocessedBytesAndHugeLengthArray_test0_decomposed": {
                    "start": 1360,
                    "end": 1364,
                    "body": [
                        "    public void testIncrementalHashWithUnprocessedBytesAndHugeLengthArray_test0_decomposed()  {\n",
                        "        final int unprocessedSize = 3;\n",
                        "        final int hugeLength = Integer.MAX_VALUE - 2;\n",
                        "        Assert.assertTrue(\"This should overflow to negative\", unprocessedSize + hugeLength < 4);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIncrementalHashWithUnprocessedBytesAndHugeLengthArray_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertTrue(java.lang.String,boolean)"
                        ]
                    ]
                },
                "1340-1357:testIncrementalHash32x86_test0_decomposed": {
                    "start": 1340,
                    "end": 1357,
                    "body": [
                        "    public void testIncrementalHash32x86_test0_decomposed()  {\n",
                        "        final byte[] bytes = new byte[1023];\n",
                        "        ThreadLocalRandom.current().nextBytes(bytes);\n",
                        "        for (final int seed : new int[] {-567, 0, 6787990}) {\n",
                        "            assertIncrementalHash32x86(bytes, seed, 0, 0);\n",
                        "            assertIncrementalHash32x86(bytes, seed, 1, 1, 1, 1, 1, 1, 1, 1);\n",
                        "            assertIncrementalHash32x86(bytes, seed, 1, 4);\n",
                        "            assertIncrementalHash32x86(bytes, seed, 2, 4);\n",
                        "            assertIncrementalHash32x86(bytes, seed, 3, 4);\n",
                        "            assertIncrementalHash32x86(bytes, seed, 4, 1);\n",
                        "            assertIncrementalHash32x86(bytes, seed, 4, 2);\n",
                        "            assertIncrementalHash32x86(bytes, seed, 4, 3);\n",
                        "            assertIncrementalHash32x86(bytes, seed, 4, 16, 64);\n",
                        "            for (int i = 0; i < 10; i++) {\n",
                        "                assertIncrementalHash32x86(bytes, seed, createRandomBlocks(bytes.length));\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIncrementalHash32x86_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Random",
                            "nextBytes(byte[])"
                        ],
                        [
                            "library",
                            "java.base/java/util/concurrent/ThreadLocalRandom",
                            "current()"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.digest.MurmurHash3Test",
                            "MurmurHash3Test",
                            "377-392:assertIncrementalHash32x86"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.digest.MurmurHash3Test",
                            "MurmurHash3Test",
                            "400-410:createRandomBlocks"
                        ]
                    ]
                },
                "1320-1337:testIncrementalHash32_test0_decomposed": {
                    "start": 1320,
                    "end": 1337,
                    "body": [
                        "    public void testIncrementalHash32_test0_decomposed()  {\n",
                        "        final byte[] bytes = new byte[1023];\n",
                        "        ThreadLocalRandom.current().nextBytes(bytes);\n",
                        "        for (final int seed : new int[] {-567, 0, 6787990}) {\n",
                        "            assertIncrementalHash32(bytes, seed, 0, 0);\n",
                        "            assertIncrementalHash32(bytes, seed, 1, 1, 1, 1, 1, 1, 1, 1);\n",
                        "            assertIncrementalHash32(bytes, seed, 1, 4);\n",
                        "            assertIncrementalHash32(bytes, seed, 2, 4);\n",
                        "            assertIncrementalHash32(bytes, seed, 3, 4);\n",
                        "            assertIncrementalHash32(bytes, seed, 4, 1);\n",
                        "            assertIncrementalHash32(bytes, seed, 4, 2);\n",
                        "            assertIncrementalHash32(bytes, seed, 4, 3);\n",
                        "            assertIncrementalHash32(bytes, seed, 4, 16, 64);\n",
                        "            for (int i = 0; i < 10; i++) {\n",
                        "                assertIncrementalHash32x86(bytes, seed, createRandomBlocks(bytes.length));\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIncrementalHash32_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Random",
                            "nextBytes(byte[])"
                        ],
                        [
                            "library",
                            "java.base/java/util/concurrent/ThreadLocalRandom",
                            "current()"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.digest.MurmurHash3Test",
                            "MurmurHash3Test",
                            "344-359:assertIncrementalHash32"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.digest.MurmurHash3Test",
                            "MurmurHash3Test",
                            "377-392:assertIncrementalHash32x86"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.digest.MurmurHash3Test",
                            "MurmurHash3Test",
                            "400-410:createRandomBlocks"
                        ]
                    ]
                },
                "1274-1317:testHash128x64WithOffsetLengthAndNegativeSeed_test0_decomposed": {
                    "start": 1274,
                    "end": 1317,
                    "body": [
                        "    public void testHash128x64WithOffsetLengthAndNegativeSeed_test0_decomposed()  {\n",
                        "        final int seed = -42;\n",
                        "        final int offset = 13;\n",
                        "        final long[][] answers = {\n",
                        "            {7182599573337898253L, -6490979146667806054L},\n",
                        "            {-461284136738605467L, 7073284964362976233L},\n",
                        "            {-3090354666589400212L, 2978755180788824810L},\n",
                        "            {5052807367580803906L, -4497188744879598335L},\n",
                        "            {5003711854877353474L, -6616808651483337088L},\n",
                        "            {2043501804923817748L, -760668448196918637L},\n",
                        "            {6813003268375229932L, -1818545210475363684L},\n",
                        "            {4488070015393027916L, 8520186429078977003L},\n",
                        "            {4709278711722456062L, -2262080641289046033L},\n",
                        "            {-5944514262756048380L, 5968714500873552518L},\n",
                        "            {-2304397529301122510L, 6451500469518446488L},\n",
                        "            {-1054078041081348909L, -915114408909600132L},\n",
                        "            {1300471646869277217L, -399493387666437046L},\n",
                        "            {-2821780479886030222L, -9061571187511294733L},\n",
                        "            {8005764841242557505L, 4135287855434326053L},\n",
                        "            {318307346637037498L, -5355856739901286522L},\n",
                        "            {3380719536119187025L, 1890890833937151467L},\n",
                        "            {2691044185935730001L, 7963546423617895734L},\n",
                        "            {-5277462388534000227L, 3613853764390780573L},\n",
                        "            {8504421722476165699L, 2058020162708103700L},\n",
                        "            {-6578421288092422241L, 3311200163790829579L},\n",
                        "            {-5915037218487974215L, -7385137075895184179L},\n",
                        "            {659642911937398022L, 854071824595671049L},\n",
                        "            {-7007237968866727198L, 1372258010932080058L},\n",
                        "            {622891376282772539L, -4140783491297489868L},\n",
                        "            {8357110718969014985L, -4737117827581590306L},\n",
                        "            {2208857857926305405L, -8360240839768465042L},\n",
                        "            {858120048221036376L, -5822288789703639119L},\n",
                        "            {-1988334009458340679L, 1262479472434068698L},\n",
                        "            {-8580307083590783934L, 3634449965473715778L},\n",
                        "            {6705664584730187559L, 5192304951463791556L},\n",
                        "            {-6426410954037604142L, -1579122709247558101L},\n",
                        "        };\n",
                        "        for (int i = 0; i < answers.length; i++) {\n",
                        "            Assert.assertArrayEquals(\n",
                        "                    \"Length: \" + i,\n",
                        "                    answers[i],\n",
                        "                    MurmurHash3.hash128x641(RANDOM_BYTES, offset, i, seed));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash128x64WithOffsetLengthAndNegativeSeed_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(java.lang.String,long[],long[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "800-803:hash128x641"
                        ]
                    ]
                },
                "1228-1271:testHash128x64WithOffsetLengthAndSeed_test0_decomposed": {
                    "start": 1228,
                    "end": 1271,
                    "body": [
                        "    public void testHash128x64WithOffsetLengthAndSeed_test0_decomposed()  {\n",
                        "        final int seed = 42;\n",
                        "        final int offset = 13;\n",
                        "        final long[][] answers = {\n",
                        "            {-1140915396076141277L, -3386313222241793095L},\n",
                        "            {2745805417334040752L, -3045882272665292331L},\n",
                        "            {6807939080212835946L, -1975749467247671127L},\n",
                        "            {-7924884987449335214L, -4468571497642087939L},\n",
                        "            {3005389733967167773L, -5809440073240597398L},\n",
                        "            {8032745196600164727L, 4545709434702374224L},\n",
                        "            {2095398623732573832L, 1778447136435513908L},\n",
                        "            {4492723708121417255L, -7411125500882394867L},\n",
                        "            {8467397417110552178L, -1503802302645548949L},\n",
                        "            {4189760269121918355L, -8004336343217265057L},\n",
                        "            {4939298084211301953L, -8419135013628844658L},\n",
                        "            {5497136916151148085L, -394028342910298191L},\n",
                        "            {3405983294878231737L, -3216533807498089078L},\n",
                        "            {5833223403351466775L, -1792451370239813325L},\n",
                        "            {7730583391236194819L, 5356157313842354092L},\n",
                        "            {3111977482488580945L, -3119414725698132191L},\n",
                        "            {3314524606404365027L, -1923219843083192742L},\n",
                        "            {7299569240140613949L, 4176392429810027494L},\n",
                        "            {6398084683727166117L, 7703960505857395788L},\n",
                        "            {-8594572031068184774L, 4394224719145783692L},\n",
                        "            {-7589785442804461713L, 4110439243215224554L},\n",
                        "            {-5343610105946840628L, -4423992782020122809L},\n",
                        "            {-522490326525787270L, 289136460641968781L},\n",
                        "            {-5320637070354802556L, -7845553044730489027L},\n",
                        "            {1344456408744313334L, 3803048032054968586L},\n",
                        "            {1131205296221907191L, -6256656049039287019L},\n",
                        "            {8583339267101027117L, 8934225022848628726L},\n",
                        "            {-6379552869905441749L, 8973517768420051734L},\n",
                        "            {5076646564516328801L, 8561479196844000567L},\n",
                        "            {-4610341636137642517L, -6694266039505142069L},\n",
                        "            {-758896383254029789L, 4050360662271552727L},\n",
                        "            {-6123628195475753507L, 4283875822581966645L},\n",
                        "        };\n",
                        "        for (int i = 0; i < answers.length; i++) {\n",
                        "            Assert.assertArrayEquals(\n",
                        "                    \"Length: \" + i,\n",
                        "                    answers[i],\n",
                        "                    MurmurHash3.hash128x641(RANDOM_BYTES, offset, i, seed));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash128x64WithOffsetLengthAndSeed_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(java.lang.String,long[],long[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "800-803:hash128x641"
                        ]
                    ]
                },
                "1183-1225:testHash128x64_test1_decomposed": {
                    "start": 1183,
                    "end": 1225,
                    "body": [
                        "    public void testHash128x64_test1_decomposed()  {\n",
                        "        Assert.assertArrayEquals(\n",
                        "                new long[] {1972113670104592209L, 5171809317673151911L},\n",
                        "                MurmurHash3.hash128x640(RANDOM_BYTES));\n",
                        "        final long[][] answers = {\n",
                        "            {0L, 0L},\n",
                        "            {-2808653841080383123L, -2531784594030660343L},\n",
                        "            {-1284575471001240306L, -8226941173794461820L},\n",
                        "            {1645529003294647142L, 4109127559758330427L},\n",
                        "            {-4117979116203940765L, -8362902660322042742L},\n",
                        "            {2559943399590596158L, 4738005461125350075L},\n",
                        "            {-1651760031591552651L, -5386079254924224461L},\n",
                        "            {-6208043960690815609L, 7862371518025305074L},\n",
                        "            {-5150023478423646337L, 8346305334874564507L},\n",
                        "            {7658274117911906792L, -4962914659382404165L},\n",
                        "            {1309458104226302269L, 570003296096149119L},\n",
                        "            {7440169453173347487L, -3489345781066813740L},\n",
                        "            {-5698784298612201352L, 3595618450161835420L},\n",
                        "            {-3822574792738072442L, 6878153771369862041L},\n",
                        "            {3705084673301918328L, 3202155281274291907L},\n",
                        "            {-6797166743928506931L, -4447271093653551597L},\n",
                        "            {5240533565589385084L, -5575481185288758327L},\n",
                        "            {-8467620131382649428L, -6450630367251114468L},\n",
                        "            {3632866961828686471L, -5957695976089313500L},\n",
                        "            {-6450283648077271139L, -7908632714374518059L},\n",
                        "            {226350826556351719L, 8225586794606475685L},\n",
                        "            {-2382996224496980401L, 2188369078123678011L},\n",
                        "            {-1337544762358780825L, 7004253486151757299L},\n",
                        "            {2889033453638709716L, -4099509333153901374L},\n",
                        "            {-8644950936809596954L, -5144522919639618331L},\n",
                        "            {-5628571865255520773L, -839021001655132087L},\n",
                        "            {-5226774667293212446L, -505255961194269502L},\n",
                        "            {1337107025517938142L, 3260952073019398505L},\n",
                        "            {9149852874328582511L, 1880188360994521535L},\n",
                        "            {-4035957988359881846L, -7709057850766490780L},\n",
                        "            {-3842593823306330815L, 3805147088291453755L},\n",
                        "            {4030161393619149616L, -2813603781312455238L},\n",
                        "        };\n",
                        "        for (int i = 0; i < answers.length; i++) {\n",
                        "            final byte[] bytes = Arrays.copyOf(RANDOM_BYTES, i);\n",
                        "            Assert.assertArrayEquals(answers[i], MurmurHash3.hash128x640(bytes));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash128x64_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(long[],long[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "729-731:hash128x640"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(byte[],int)"
                        ]
                    ]
                },
                "1176-1180:testHash128x64_test0_decomposed": {
                    "start": 1176,
                    "end": 1180,
                    "body": [
                        "    public void testHash128x64_test0_decomposed()  {\n",
                        "        Assert.assertArrayEquals(\n",
                        "                new long[] {1972113670104592209L, 5171809317673151911L},\n",
                        "                MurmurHash3.hash128x640(RANDOM_BYTES));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash128x64_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(long[],long[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "729-731:hash128x640"
                        ]
                    ]
                },
                "1154-1173:testHash128String_test0_decomposed": {
                    "start": 1154,
                    "end": 1173,
                    "body": [
                        "    public void testHash128String_test0_decomposed()  {\n",
                        "        final int seed = 104729;\n",
                        "        final int minSize = 1;\n",
                        "        final int maxSize = 11;\n",
                        "        final int codePoints = 112956;\n",
                        "        final char[] chars = new char[(maxSize - minSize) * 2];\n",
                        "        for (int i = 0; i < 1000; i++) {\n",
                        "            int pos = 0;\n",
                        "            final int size = ThreadLocalRandom.current().nextInt(minSize, maxSize);\n",
                        "            for (int j = 0; j < size; j++) {\n",
                        "                final int codePoint = ThreadLocalRandom.current().nextInt(codePoints);\n",
                        "                pos += Character.toChars(codePoint, chars, pos);\n",
                        "            }\n",
                        "            final String text = String.copyValueOf(chars, 0, pos);\n",
                        "            final byte[] bytes = StringUtils.getBytesUtf8(text);\n",
                        "            final long[] h1 = MurmurHash3.hash1282(bytes, 0, bytes.length, seed);\n",
                        "            final long[] h2 = MurmurHash3.hash1281(text);\n",
                        "            Assert.assertArrayEquals(h1, h2);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash128String_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/concurrent/ThreadLocalRandom",
                            "nextInt(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/util/concurrent/ThreadLocalRandom",
                            "current()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "copyValueOf(char[],int,int)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "782-785:hash1282"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "757-760:hash1281"
                        ],
                        [
                            "library",
                            "java.base/java/util/concurrent/ThreadLocalRandom",
                            "nextInt(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Character",
                            "toChars(int,char[],int)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(long[],long[])"
                        ]
                    ]
                },
                "1108-1151:testHash128WithOffsetLengthAndNegativeSeed_test0_decomposed": {
                    "start": 1108,
                    "end": 1151,
                    "body": [
                        "    public void testHash128WithOffsetLengthAndNegativeSeed_test0_decomposed()  {\n",
                        "        final int seed = -42;\n",
                        "        final int offset = 13;\n",
                        "        final long[][] answers = {\n",
                        "            {5954234972212089025L, 3342108296337967352L},\n",
                        "            {8501094764898402923L, 7873951092908129427L},\n",
                        "            {-3334322685492296196L, -2842715922956549478L},\n",
                        "            {-2177918982459519644L, -1612349961980368636L},\n",
                        "            {4172870320608886992L, -4177375712254136503L},\n",
                        "            {7546965006884307324L, -5222114032564054641L},\n",
                        "            {-2885083166621537267L, -2069868899915344482L},\n",
                        "            {-2397098497873118851L, 4990578036999888806L},\n",
                        "            {-706479374719025018L, 7531201699171849870L},\n",
                        "            {6487943141157228609L, 3576221902299447884L},\n",
                        "            {6671331646806999453L, -3428049860825046360L},\n",
                        "            {-8700221138601237020L, -2748450904559980545L},\n",
                        "            {-9028762509863648063L, 6130259301750313402L},\n",
                        "            {729958512305702590L, -36367317333638988L},\n",
                        "            {-3803232241584178983L, -4257744207892929651L},\n",
                        "            {5734013720237474696L, -760784490666078990L},\n",
                        "            {-6097477411153026656L, 625288777006549065L},\n",
                        "            {1320365359996757504L, -2251971390373072541L},\n",
                        "            {5551441703887653022L, -3516892619809375941L},\n",
                        "            {698875391638415033L, 3456972931370496131L},\n",
                        "            {5874956830271303805L, -6074126509360777023L},\n",
                        "            {-7030758398537734781L, -3174643657101295554L},\n",
                        "            {6835789852786226556L, 7245353136839389595L},\n",
                        "            {-7755767580598793204L, -6680491060945077989L},\n",
                        "            {-3099789923710523185L, -2751080516924952518L},\n",
                        "            {-7772046549951435453L, 5263206145535830491L},\n",
                        "            {7458715941971015543L, 5470582752171544854L},\n",
                        "            {-7753394773760064468L, -2330157750295630617L},\n",
                        "            {-5899278942232791979L, 6235686401271389982L},\n",
                        "            {4881732293467626532L, 2617335658565007304L},\n",
                        "            {-5722863941703478257L, -5424475653939430258L},\n",
                        "            {-3703319768293496315L, -2124426428486426443L},\n",
                        "        };\n",
                        "        for (int i = 0; i < answers.length; i++) {\n",
                        "            Assert.assertArrayEquals(\n",
                        "                    \"Length: \" + i,\n",
                        "                    answers[i],\n",
                        "                    MurmurHash3.hash1282(RANDOM_BYTES, offset, i, seed));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash128WithOffsetLengthAndNegativeSeed_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(java.lang.String,long[],long[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "782-785:hash1282"
                        ]
                    ]
                },
                "1062-1105:testHash128WithOffsetLengthAndSeed_test0_decomposed": {
                    "start": 1062,
                    "end": 1105,
                    "body": [
                        "    public void testHash128WithOffsetLengthAndSeed_test0_decomposed()  {\n",
                        "        final int seed = 42;\n",
                        "        final int offset = 13;\n",
                        "        final long[][] answers = {\n",
                        "            {-1140915396076141277L, -3386313222241793095L},\n",
                        "            {2745805417334040752L, -3045882272665292331L},\n",
                        "            {6807939080212835946L, -1975749467247671127L},\n",
                        "            {-7924884987449335214L, -4468571497642087939L},\n",
                        "            {3005389733967167773L, -5809440073240597398L},\n",
                        "            {8032745196600164727L, 4545709434702374224L},\n",
                        "            {2095398623732573832L, 1778447136435513908L},\n",
                        "            {4492723708121417255L, -7411125500882394867L},\n",
                        "            {8467397417110552178L, -1503802302645548949L},\n",
                        "            {4189760269121918355L, -8004336343217265057L},\n",
                        "            {4939298084211301953L, -8419135013628844658L},\n",
                        "            {5497136916151148085L, -394028342910298191L},\n",
                        "            {3405983294878231737L, -3216533807498089078L},\n",
                        "            {5833223403351466775L, -1792451370239813325L},\n",
                        "            {7730583391236194819L, 5356157313842354092L},\n",
                        "            {3111977482488580945L, -3119414725698132191L},\n",
                        "            {3314524606404365027L, -1923219843083192742L},\n",
                        "            {7299569240140613949L, 4176392429810027494L},\n",
                        "            {6398084683727166117L, 7703960505857395788L},\n",
                        "            {-8594572031068184774L, 4394224719145783692L},\n",
                        "            {-7589785442804461713L, 4110439243215224554L},\n",
                        "            {-5343610105946840628L, -4423992782020122809L},\n",
                        "            {-522490326525787270L, 289136460641968781L},\n",
                        "            {-5320637070354802556L, -7845553044730489027L},\n",
                        "            {1344456408744313334L, 3803048032054968586L},\n",
                        "            {1131205296221907191L, -6256656049039287019L},\n",
                        "            {8583339267101027117L, 8934225022848628726L},\n",
                        "            {-6379552869905441749L, 8973517768420051734L},\n",
                        "            {5076646564516328801L, 8561479196844000567L},\n",
                        "            {-4610341636137642517L, -6694266039505142069L},\n",
                        "            {-758896383254029789L, 4050360662271552727L},\n",
                        "            {-6123628195475753507L, 4283875822581966645L},\n",
                        "        };\n",
                        "        for (int i = 0; i < answers.length; i++) {\n",
                        "            Assert.assertArrayEquals(\n",
                        "                    \"Length: \" + i,\n",
                        "                    answers[i],\n",
                        "                    MurmurHash3.hash1282(RANDOM_BYTES, offset, i, seed));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash128WithOffsetLengthAndSeed_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(java.lang.String,long[],long[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "782-785:hash1282"
                        ]
                    ]
                },
                "1017-1059:testHash128_test1_decomposed": {
                    "start": 1017,
                    "end": 1059,
                    "body": [
                        "    public void testHash128_test1_decomposed()  {\n",
                        "        Assert.assertArrayEquals(\n",
                        "                new long[] {-5614308156300707300L, -4165733009867452172L},\n",
                        "                MurmurHash3.hash1280(RANDOM_BYTES));\n",
                        "        final long[][] answers = {\n",
                        "            {-7122613646888064702L, -8341524471658347240L},\n",
                        "            {5659994275039884826L, -962335545730945195L},\n",
                        "            {-7641758224504050283L, 4083131074855072837L},\n",
                        "            {-9123564721037921804L, -3321998102976419641L},\n",
                        "            {-7999620158275145567L, -7769992740725283391L},\n",
                        "            {2419143614837736468L, -5474637306496300103L},\n",
                        "            {7781591175729494939L, -9023178611551692650L},\n",
                        "            {-3431043156265556247L, -6589990064676612981L},\n",
                        "            {6315693694262400182L, -6219942557302821890L},\n",
                        "            {-8249934145502892979L, -5646083202776239948L},\n",
                        "            {7500109050276796947L, 5350477981718987260L},\n",
                        "            {-6102338673930022315L, 3413065069102535261L},\n",
                        "            {-6440683413407781313L, -2374360388921904146L},\n",
                        "            {-3071236194203069122L, 7531604855739305895L},\n",
                        "            {-7629408037856591130L, -4070301959951145257L},\n",
                        "            {860008171111471563L, -9026008285726889896L},\n",
                        "            {8059667613600971894L, 3236009436748930210L},\n",
                        "            {1833746055900036985L, 1418052485321768916L},\n",
                        "            {8161230977297923537L, -2668130155009407119L},\n",
                        "            {3653111839268905630L, 5525563908135615453L},\n",
                        "            {-9163026480602019754L, 6819447647029564735L},\n",
                        "            {1102346610654592779L, -6881918401879761029L},\n",
                        "            {-3109499571828331931L, -3782255367340446228L},\n",
                        "            {-7467915444290531104L, 4704551260862209500L},\n",
                        "            {1237530251176898868L, 6144786892208594932L},\n",
                        "            {2347717913548230384L, -7461066668225718223L},\n",
                        "            {-7963311463560798404L, 8435801462986138227L},\n",
                        "            {-7493166089060196513L, 8163503673197886404L},\n",
                        "            {6807249306539951962L, -1438886581269648819L},\n",
                        "            {6752656991043418179L, 6334147827922066123L},\n",
                        "            {-4534351735605790331L, -4530801663887858236L},\n",
                        "            {-7886946241830957955L, -6261339648449285315L},\n",
                        "        };\n",
                        "        for (int i = 0; i < answers.length; i++) {\n",
                        "            final byte[] bytes = Arrays.copyOf(RANDOM_BYTES, i);\n",
                        "            Assert.assertArrayEquals(answers[i], MurmurHash3.hash1280(bytes));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash128_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(long[],long[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "710-712:hash1280"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(byte[],int)"
                        ]
                    ]
                },
                "1010-1014:testHash128_test0_decomposed": {
                    "start": 1010,
                    "end": 1014,
                    "body": [
                        "    public void testHash128_test0_decomposed()  {\n",
                        "        Assert.assertArrayEquals(\n",
                        "                new long[] {-5614308156300707300L, -4165733009867452172L},\n",
                        "                MurmurHash3.hash1280(RANDOM_BYTES));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash128_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertArrayEquals(long[],long[])"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "710-712:hash1280"
                        ]
                    ]
                },
                "997-1007:testHash64InNotEqualToHash128_test0_decomposed": {
                    "start": 997,
                    "end": 1007,
                    "body": [
                        "    public void testHash64InNotEqualToHash128_test0_decomposed()  {\n",
                        "        for (int i = 0; i < 32; i++) {\n",
                        "            final byte[] bytes = Arrays.copyOf(RANDOM_BYTES, i);\n",
                        "            final long h1 = MurmurHash3.hash643(bytes);\n",
                        "            final long[] hash = MurmurHash3.hash1280(bytes);\n",
                        "            Assert.assertNotEquals(\n",
                        "                    \"Did not expect hash64 to match upper bits of hash128\", hash[0], h1);\n",
                        "            Assert.assertNotEquals(\n",
                        "                    \"Did not expect hash64 to match lower bits of hash128\", hash[1], h1);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash64InNotEqualToHash128_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(byte[],int)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "582-584:hash643"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "710-712:hash1280"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotEquals(java.lang.String,long,long)"
                        ]
                    ]
                },
                "967-994:testHash64WithPrimitives_test2_decomposed": {
                    "start": 967,
                    "end": 994,
                    "body": [
                        "    public void testHash64WithPrimitives_test2_decomposed()  {\n",
                        "        final int offset = 0;\n",
                        "        final int seed = 104729;\n",
                        "        final int iters = 1000;\n",
                        "        final ByteBuffer shortBuffer = ByteBuffer.allocate(MurmurHash3.SHORT_BYTES);\n",
                        "        final ByteBuffer intBuffer = ByteBuffer.allocate(MurmurHash3.INTEGER_BYTES);\n",
                        "        final ByteBuffer longBuffer = ByteBuffer.allocate(MurmurHash3.LONG_BYTES);\n",
                        "        final byte[] shortBytes = shortBuffer.array();\n",
                        "        final byte[] intBytes = intBuffer.array();\n",
                        "        final byte[] longBytes = longBuffer.array();\n",
                        "        for (int i = 0; i < iters; ++i) {\n",
                        "            final long ln = ThreadLocalRandom.current().nextLong();\n",
                        "            final int in = (int) (ln >>> 3);\n",
                        "            final short sn = (short) (ln >>> 5);\n",
                        "            shortBuffer.putShort(0, sn);\n",
                        "            Assert.assertEquals(\n",
                        "                    MurmurHash3.hash645(shortBytes, offset, shortBytes.length, seed),\n",
                        "                    MurmurHash3.hash642(sn));\n",
                        "            intBuffer.putInt(0, in);\n",
                        "            Assert.assertEquals(\n",
                        "                    MurmurHash3.hash645(intBytes, offset, intBytes.length, seed),\n",
                        "                    MurmurHash3.hash641(in));\n",
                        "            longBuffer.putLong(0, ln);\n",
                        "            Assert.assertEquals(\n",
                        "                    MurmurHash3.hash645(longBytes, offset, longBytes.length, seed),\n",
                        "                    MurmurHash3.hash640(ln));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash64WithPrimitives_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "allocate(int)"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "array()"
                        ],
                        [
                            "library",
                            "java.base/java/util/concurrent/ThreadLocalRandom",
                            "nextLong()"
                        ],
                        [
                            "library",
                            "java.base/java/util/concurrent/ThreadLocalRandom",
                            "current()"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "putShort(int,short)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "648-691:hash645"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "540-553:hash642"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "putInt(int,int)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "498-509:hash641"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "putLong(int,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "455-467:hash640"
                        ]
                    ]
                },
                "957-964:testHash64WithPrimitives_test1_decomposed": {
                    "start": 957,
                    "end": 964,
                    "body": [
                        "    public void testHash64WithPrimitives_test1_decomposed()  {\n",
                        "        final int offset = 0;\n",
                        "        final int seed = 104729;\n",
                        "        final int iters = 1000;\n",
                        "        final ByteBuffer shortBuffer = ByteBuffer.allocate(MurmurHash3.SHORT_BYTES);\n",
                        "        final ByteBuffer intBuffer = ByteBuffer.allocate(MurmurHash3.INTEGER_BYTES);\n",
                        "        final ByteBuffer longBuffer = ByteBuffer.allocate(MurmurHash3.LONG_BYTES);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash64WithPrimitives_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "allocate(int)"
                        ]
                    ]
                },
                "949-954:testHash64WithPrimitives_test0_decomposed": {
                    "start": 949,
                    "end": 954,
                    "body": [
                        "    public void testHash64WithPrimitives_test0_decomposed()  {\n",
                        "        final int offset = 0;\n",
                        "        final int seed = 104729;\n",
                        "        final int iters = 1000;\n",
                        "        final ByteBuffer shortBuffer = ByteBuffer.allocate(MurmurHash3.SHORT_BYTES);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash64WithPrimitives_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "allocate(int)"
                        ]
                    ]
                },
                "939-946:testHash64WithOffsetAndLength_test3_decomposed": {
                    "start": 939,
                    "end": 946,
                    "body": [
                        "    public void testHash64WithOffsetAndLength_test3_decomposed()  {\n",
                        "        final byte[] origin = StringUtils.getBytesUtf8(TEST_HASH64);\n",
                        "        final byte[] originOffset = new byte[origin.length + 150];\n",
                        "        Arrays.fill(originOffset, (byte) 123);\n",
                        "        System.arraycopy(origin, 0, originOffset, 150, origin.length);\n",
                        "        final long hash = MurmurHash3.hash644(originOffset, 150, origin.length);\n",
                        "        Assert.assertEquals(5785358552565094607L, hash);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash64WithOffsetAndLength_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "614-616:hash644"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "fill(byte[],byte)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ]
                    ]
                },
                "930-936:testHash64WithOffsetAndLength_test2_decomposed": {
                    "start": 930,
                    "end": 936,
                    "body": [
                        "    public void testHash64WithOffsetAndLength_test2_decomposed()  {\n",
                        "        final byte[] origin = StringUtils.getBytesUtf8(TEST_HASH64);\n",
                        "        final byte[] originOffset = new byte[origin.length + 150];\n",
                        "        Arrays.fill(originOffset, (byte) 123);\n",
                        "        System.arraycopy(origin, 0, originOffset, 150, origin.length);\n",
                        "        final long hash = MurmurHash3.hash644(originOffset, 150, origin.length);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash64WithOffsetAndLength_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "614-616:hash644"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "fill(byte[],byte)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
                        ]
                    ]
                },
                "923-927:testHash64WithOffsetAndLength_test1_decomposed": {
                    "start": 923,
                    "end": 927,
                    "body": [
                        "    public void testHash64WithOffsetAndLength_test1_decomposed()  {\n",
                        "        final byte[] origin = StringUtils.getBytesUtf8(TEST_HASH64);\n",
                        "        final byte[] originOffset = new byte[origin.length + 150];\n",
                        "        Arrays.fill(originOffset, (byte) 123);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash64WithOffsetAndLength_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "fill(byte[],byte)"
                        ]
                    ]
                },
                "918-920:testHash64WithOffsetAndLength_test0_decomposed": {
                    "start": 918,
                    "end": 920,
                    "body": [
                        "    public void testHash64WithOffsetAndLength_test0_decomposed()  {\n",
                        "        final byte[] origin = StringUtils.getBytesUtf8(TEST_HASH64);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash64WithOffsetAndLength_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ]
                    ]
                },
                "911-915:testHash64_test2_decomposed": {
                    "start": 911,
                    "end": 915,
                    "body": [
                        "    public void testHash64_test2_decomposed()  {\n",
                        "        final byte[] origin = StringUtils.getBytesUtf8(TEST_HASH64);\n",
                        "        final long hash = MurmurHash3.hash643(origin);\n",
                        "        Assert.assertEquals(5785358552565094607L, hash);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash64_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "582-584:hash643"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ]
                    ]
                },
                "905-908:testHash64_test1_decomposed": {
                    "start": 905,
                    "end": 908,
                    "body": [
                        "    public void testHash64_test1_decomposed()  {\n",
                        "        final byte[] origin = StringUtils.getBytesUtf8(TEST_HASH64);\n",
                        "        final long hash = MurmurHash3.hash643(origin);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash64_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "582-584:hash643"
                        ]
                    ]
                },
                "900-902:testHash64_test0_decomposed": {
                    "start": 900,
                    "end": 902,
                    "body": [
                        "    public void testHash64_test0_decomposed()  {\n",
                        "        final byte[] origin = StringUtils.getBytesUtf8(TEST_HASH64);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash64_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ]
                    ]
                },
                "890-897:testHash32x86WithTrailingNegativeSignedBytes_test0_decomposed": {
                    "start": 890,
                    "end": 897,
                    "body": [
                        "    public void testHash32x86WithTrailingNegativeSignedBytes_test0_decomposed()  {\n",
                        "        Assert.assertEquals(-43192051, MurmurHash3.hash32x861(new byte[] {-1}, 0, 1, 0));\n",
                        "        Assert.assertEquals(-582037868, MurmurHash3.hash32x861(new byte[] {0, -1}, 0, 2, 0));\n",
                        "        Assert.assertEquals(922088087, MurmurHash3.hash32x861(new byte[] {0, 0, -1}, 0, 3, 0));\n",
                        "        Assert.assertEquals(-1309567588, MurmurHash3.hash32x861(new byte[] {-1, 0}, 0, 2, 0));\n",
                        "        Assert.assertEquals(-363779670, MurmurHash3.hash32x861(new byte[] {-1, 0, 0}, 0, 3, 0));\n",
                        "        Assert.assertEquals(-225068062, MurmurHash3.hash32x861(new byte[] {0, -1, 0}, 0, 3, 0));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32x86WithTrailingNegativeSignedBytes_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "395-424:hash32x861"
                        ]
                    ]
                },
                "847-887:testHash32x86WithOffsetLengthAndSeed_test0_decomposed": {
                    "start": 847,
                    "end": 887,
                    "body": [
                        "    public void testHash32x86WithOffsetLengthAndSeed_test0_decomposed()  {\n",
                        "        final int seed = -42;\n",
                        "        final int offset = 13;\n",
                        "        final int[] answers = {\n",
                        "            192929823,\n",
                        "            -27171978,\n",
                        "            -1282326280,\n",
                        "            -816314453,\n",
                        "            -1176217753,\n",
                        "            -1904531247,\n",
                        "            1962794233,\n",
                        "            -1302316624,\n",
                        "            -1151850323,\n",
                        "            -1464386748,\n",
                        "            -369299427,\n",
                        "            972232488,\n",
                        "            1747314487,\n",
                        "            2137398916,\n",
                        "            690986564,\n",
                        "            -1985866226,\n",
                        "            -678669121,\n",
                        "            -2123325690,\n",
                        "            -253319081,\n",
                        "            46181235,\n",
                        "            656058278,\n",
                        "            1401175653,\n",
                        "            1750113912,\n",
                        "            -1567219725,\n",
                        "            2032742772,\n",
                        "            -2024269989,\n",
                        "            -305340794,\n",
                        "            1161737942,\n",
                        "            -661265418,\n",
                        "            172838872,\n",
                        "            -650122718,\n",
                        "            -1934812417,\n",
                        "        };\n",
                        "        for (int i = 0; i < answers.length; i++) {\n",
                        "            Assert.assertEquals(answers[i], MurmurHash3.hash32x861(RANDOM_BYTES, offset, i, seed));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32x86WithOffsetLengthAndSeed_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "395-424:hash32x861"
                        ]
                    ]
                },
                "804-844:testhash32x86_test1_decomposed": {
                    "start": 804,
                    "end": 844,
                    "body": [
                        "    public void testhash32x86_test1_decomposed()  {\n",
                        "        Assert.assertEquals(1546271276, MurmurHash3.hash32x860(RANDOM_BYTES));\n",
                        "        final int[] answers = {\n",
                        "            0,\n",
                        "            -1353253853,\n",
                        "            915381745,\n",
                        "            -734983419,\n",
                        "            1271125654,\n",
                        "            -1042265893,\n",
                        "            -1204521619,\n",
                        "            735845843,\n",
                        "            138310876,\n",
                        "            -1918938664,\n",
                        "            1399647898,\n",
                        "            -1126342309,\n",
                        "            2067593280,\n",
                        "            1220975287,\n",
                        "            1941281084,\n",
                        "            -1289513180,\n",
                        "            942412060,\n",
                        "            -618173583,\n",
                        "            -269546647,\n",
                        "            -1645631262,\n",
                        "            1162379906,\n",
                        "            -1960125577,\n",
                        "            -1856773195,\n",
                        "            1980513522,\n",
                        "            1174612855,\n",
                        "            905810751,\n",
                        "            1044578220,\n",
                        "            -1758486689,\n",
                        "            -491393913,\n",
                        "            839836946,\n",
                        "            -435014415,\n",
                        "            2044851178,\n",
                        "        };\n",
                        "        for (int i = 0; i < answers.length; i++) {\n",
                        "            final byte[] bytes = Arrays.copyOf(RANDOM_BYTES, i);\n",
                        "            Assert.assertEquals(answers[i], MurmurHash3.hash32x860(bytes));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testhash32x86_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "378-380:hash32x860"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(byte[],int)"
                        ]
                    ]
                },
                "799-801:testhash32x86_test0_decomposed": {
                    "start": 799,
                    "end": 801,
                    "body": [
                        "    public void testhash32x86_test0_decomposed()  {\n",
                        "        Assert.assertEquals(1546271276, MurmurHash3.hash32x860(RANDOM_BYTES));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testhash32x86_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "378-380:hash32x860"
                        ]
                    ]
                },
                "789-796:testHash32WithTrailingNegativeSignedBytesIsInvalid_test0_decomposed": {
                    "start": 789,
                    "end": 796,
                    "body": [
                        "    public void testHash32WithTrailingNegativeSignedBytesIsInvalid_test0_decomposed()  {\n",
                        "        Assert.assertNotEquals(-43192051, MurmurHash3.hash328(new byte[] {-1}, 0, 1, 0));\n",
                        "        Assert.assertNotEquals(-582037868, MurmurHash3.hash328(new byte[] {0, -1}, 0, 2, 0));\n",
                        "        Assert.assertNotEquals(922088087, MurmurHash3.hash328(new byte[] {0, 0, -1}, 0, 3, 0));\n",
                        "        Assert.assertNotEquals(-1309567588, MurmurHash3.hash328(new byte[] {-1, 0}, 0, 2, 0));\n",
                        "        Assert.assertNotEquals(-363779670, MurmurHash3.hash328(new byte[] {-1, 0, 0}, 0, 3, 0));\n",
                        "        Assert.assertNotEquals(-225068062, MurmurHash3.hash328(new byte[] {0, -1, 0}, 0, 3, 0));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32WithTrailingNegativeSignedBytesIsInvalid_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertNotEquals(long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "332-361:hash328"
                        ]
                    ]
                },
                "767-786:testHash32String_test0_decomposed": {
                    "start": 767,
                    "end": 786,
                    "body": [
                        "    public void testHash32String_test0_decomposed()  {\n",
                        "        final int seed = 104729;\n",
                        "        final int minSize = 1;\n",
                        "        final int maxSize = 11;\n",
                        "        final int codePoints = 112956;\n",
                        "        final char[] chars = new char[(maxSize - minSize) * 2];\n",
                        "        for (int i = 0; i < 1000; i++) {\n",
                        "            int pos = 0;\n",
                        "            final int size = ThreadLocalRandom.current().nextInt(minSize, maxSize);\n",
                        "            for (int j = 0; j < size; j++) {\n",
                        "                final int codePoint = ThreadLocalRandom.current().nextInt(codePoints);\n",
                        "                pos += Character.toChars(codePoint, chars, pos);\n",
                        "            }\n",
                        "            final String text = String.copyValueOf(chars, 0, pos);\n",
                        "            final byte[] bytes = StringUtils.getBytesUtf8(text);\n",
                        "            final int h1 = MurmurHash3.hash328(bytes, 0, bytes.length, seed);\n",
                        "            final int h2 = MurmurHash3.hash325(text);\n",
                        "            Assert.assertEquals(h1, h2);\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32String_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/concurrent/ThreadLocalRandom",
                            "nextInt(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/util/concurrent/ThreadLocalRandom",
                            "current()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "copyValueOf(char[],int,int)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.binary.StringUtils",
                            "StringUtils",
                            "258-260:getBytesUtf8"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "332-361:hash328"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "253-256:hash325"
                        ],
                        [
                            "library",
                            "java.base/java/util/concurrent/ThreadLocalRandom",
                            "nextInt(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Character",
                            "toChars(int,char[],int)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ]
                    ]
                },
                "719-764:testHash32WithOffsetLengthAndSeed_test0_decomposed": {
                    "start": 719,
                    "end": 764,
                    "body": [
                        "    public void testHash32WithOffsetLengthAndSeed_test0_decomposed()  {\n",
                        "        final int seed = -42;\n",
                        "        final int offset = 13;\n",
                        "        final int[] answers = {\n",
                        "            192929823,\n",
                        "            -27171978,\n",
                        "            -1282326280,\n",
                        "            -816314453,\n",
                        "            -1176217753,\n",
                        "            -1904531247,\n",
                        "            1962794233,\n",
                        "            -1302316624,\n",
                        "            -1151850323,\n",
                        "            -1464386748,\n",
                        "            -369299427,\n",
                        "            972232488,\n",
                        "            1747314487,\n",
                        "            2137398916,\n",
                        "            690986564,\n",
                        "            -1985866226,\n",
                        "            -678669121,\n",
                        "            -2123325690,\n",
                        "            -253319081,\n",
                        "            46181235,\n",
                        "            656058278,\n",
                        "            1401175653,\n",
                        "            1750113912,\n",
                        "            -1567219725,\n",
                        "            2032742772,\n",
                        "            -2024269989,\n",
                        "            -305340794,\n",
                        "            1161737942,\n",
                        "            -661265418,\n",
                        "            172838872,\n",
                        "            -650122718,\n",
                        "            -1934812417,\n",
                        "        };\n",
                        "        for (int i = 0; i < answers.length; i++) {\n",
                        "            if (i % 4 == 0 || !negativeBytes(RANDOM_BYTES, offset + (i / 4) * 4, i % 4)) {\n",
                        "                Assert.assertEquals(answers[i], MurmurHash3.hash328(RANDOM_BYTES, offset, i, seed));\n",
                        "            } else {\n",
                        "                Assert.assertNotEquals(\n",
                        "                        answers[i], MurmurHash3.hash328(RANDOM_BYTES, offset, i, seed));\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32WithOffsetLengthAndSeed_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-codec.src.test.org.apache.commons.codec.digest.MurmurHash3Test",
                            "MurmurHash3Test",
                            "184-191:negativeBytes"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "332-361:hash328"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotEquals(long,long)"
                        ]
                    ]
                },
                "671-716:testHash32WithLengthAndSeed_test1_decomposed": {
                    "start": 671,
                    "end": 716,
                    "body": [
                        "    public void testHash32WithLengthAndSeed_test1_decomposed()  {\n",
                        "        final int seed = -42;\n",
                        "        Assert.assertEquals(\n",
                        "                1693958011, MurmurHash3.hash327(RANDOM_BYTES, RANDOM_BYTES.length, seed));\n",
                        "        final int[] answers = {\n",
                        "            192929823,\n",
                        "            7537536,\n",
                        "            -99368911,\n",
                        "            -1261039957,\n",
                        "            -1719251056,\n",
                        "            -399594848,\n",
                        "            372285930,\n",
                        "            -80756529,\n",
                        "            1770924588,\n",
                        "            -1071759082,\n",
                        "            1832217706,\n",
                        "            1921413466,\n",
                        "            1701676113,\n",
                        "            675584253,\n",
                        "            1620634486,\n",
                        "            427719405,\n",
                        "            -973727623,\n",
                        "            533209078,\n",
                        "            136016960,\n",
                        "            1947798330,\n",
                        "            428635832,\n",
                        "            -1125743884,\n",
                        "            793211715,\n",
                        "            -2068889169,\n",
                        "            -136818786,\n",
                        "            -720841364,\n",
                        "            -891446378,\n",
                        "            1990860976,\n",
                        "            -710528065,\n",
                        "            -1602505694,\n",
                        "            -1493714677,\n",
                        "            1911121524,\n",
                        "        };\n",
                        "        for (int i = 0; i < answers.length; i++) {\n",
                        "            if (i % 4 == 0 || !negativeBytes(RANDOM_BYTES, (i / 4) * 4, i % 4)) {\n",
                        "                Assert.assertEquals(answers[i], MurmurHash3.hash327(RANDOM_BYTES, i, seed));\n",
                        "            } else {\n",
                        "                Assert.assertNotEquals(answers[i], MurmurHash3.hash327(RANDOM_BYTES, i, seed));\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32WithLengthAndSeed_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "308-310:hash327"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.digest.MurmurHash3Test",
                            "MurmurHash3Test",
                            "184-191:negativeBytes"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotEquals(long,long)"
                        ]
                    ]
                },
                "664-668:testHash32WithLengthAndSeed_test0_decomposed": {
                    "start": 664,
                    "end": 668,
                    "body": [
                        "    public void testHash32WithLengthAndSeed_test0_decomposed()  {\n",
                        "        final int seed = -42;\n",
                        "        Assert.assertEquals(\n",
                        "                1693958011, MurmurHash3.hash327(RANDOM_BYTES, RANDOM_BYTES.length, seed));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32WithLengthAndSeed_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "308-310:hash327"
                        ]
                    ]
                },
                "618-661:testHash32WithLength_test1_decomposed": {
                    "start": 618,
                    "end": 661,
                    "body": [
                        "    public void testHash32WithLength_test1_decomposed()  {\n",
                        "        Assert.assertEquals(1905657630, MurmurHash3.hash326(RANDOM_BYTES, RANDOM_BYTES.length));\n",
                        "        final int[] answers = {\n",
                        "            -965378730,\n",
                        "            418246248,\n",
                        "            1175981702,\n",
                        "            -616767012,\n",
                        "            -12304673,\n",
                        "            1697005142,\n",
                        "            -1212417875,\n",
                        "            -420043393,\n",
                        "            -826068069,\n",
                        "            -1721451528,\n",
                        "            -544986914,\n",
                        "            892942691,\n",
                        "            27535194,\n",
                        "            974863697,\n",
                        "            1835661694,\n",
                        "            -894915836,\n",
                        "            1826914566,\n",
                        "            -677571679,\n",
                        "            1218764493,\n",
                        "            -375719050,\n",
                        "            -1320048170,\n",
                        "            -503583763,\n",
                        "            1321750696,\n",
                        "            -175065786,\n",
                        "            -496878386,\n",
                        "            -12065683,\n",
                        "            512351473,\n",
                        "            716560510,\n",
                        "            -1944803590,\n",
                        "            10253199,\n",
                        "            1105638211,\n",
                        "            525704533,\n",
                        "        };\n",
                        "        for (int i = 0; i < answers.length; i++) {\n",
                        "            if (i % 4 == 0 || !negativeBytes(RANDOM_BYTES, (i / 4) * 4, i % 4)) {\n",
                        "                Assert.assertEquals(answers[i], MurmurHash3.hash326(RANDOM_BYTES, i));\n",
                        "            } else {\n",
                        "                Assert.assertNotEquals(answers[i], MurmurHash3.hash326(RANDOM_BYTES, i));\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32WithLength_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "281-283:hash326"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.digest.MurmurHash3Test",
                            "MurmurHash3Test",
                            "184-191:negativeBytes"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotEquals(long,long)"
                        ]
                    ]
                },
                "613-615:testHash32WithLength_test0_decomposed": {
                    "start": 613,
                    "end": 615,
                    "body": [
                        "    public void testHash32WithLength_test0_decomposed()  {\n",
                        "        Assert.assertEquals(1905657630, MurmurHash3.hash326(RANDOM_BYTES, RANDOM_BYTES.length));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32WithLength_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "281-283:hash326"
                        ]
                    ]
                },
                "566-610:testHash32_test1_decomposed": {
                    "start": 566,
                    "end": 610,
                    "body": [
                        "    public void testHash32_test1_decomposed()  {\n",
                        "        Assert.assertEquals(1905657630, MurmurHash3.hash324(RANDOM_BYTES));\n",
                        "        final int[] answers = {\n",
                        "            -965378730,\n",
                        "            418246248,\n",
                        "            1175981702,\n",
                        "            -616767012,\n",
                        "            -12304673,\n",
                        "            1697005142,\n",
                        "            -1212417875,\n",
                        "            -420043393,\n",
                        "            -826068069,\n",
                        "            -1721451528,\n",
                        "            -544986914,\n",
                        "            892942691,\n",
                        "            27535194,\n",
                        "            974863697,\n",
                        "            1835661694,\n",
                        "            -894915836,\n",
                        "            1826914566,\n",
                        "            -677571679,\n",
                        "            1218764493,\n",
                        "            -375719050,\n",
                        "            -1320048170,\n",
                        "            -503583763,\n",
                        "            1321750696,\n",
                        "            -175065786,\n",
                        "            -496878386,\n",
                        "            -12065683,\n",
                        "            512351473,\n",
                        "            716560510,\n",
                        "            -1944803590,\n",
                        "            10253199,\n",
                        "            1105638211,\n",
                        "            525704533,\n",
                        "        };\n",
                        "        for (int i = 0; i < answers.length; i++) {\n",
                        "            final byte[] bytes = Arrays.copyOf(RANDOM_BYTES, i);\n",
                        "            if (i % 4 == 0 || !negativeBytes(bytes, (i / 4) * 4, i % 4)) {\n",
                        "                Assert.assertEquals(answers[i], MurmurHash3.hash324(bytes));\n",
                        "            } else {\n",
                        "                Assert.assertNotEquals(answers[i], MurmurHash3.hash324(bytes));\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "222-224:hash324"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(byte[],int)"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.digest.MurmurHash3Test",
                            "MurmurHash3Test",
                            "184-191:negativeBytes"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertNotEquals(long,long)"
                        ]
                    ]
                },
                "561-563:testHash32_test0_decomposed": {
                    "start": 561,
                    "end": 563,
                    "body": [
                        "    public void testHash32_test0_decomposed()  {\n",
                        "        Assert.assertEquals(1905657630, MurmurHash3.hash324(RANDOM_BYTES));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "222-224:hash324"
                        ]
                    ]
                },
                "545-558:testHash32LongSeed_test2_decomposed": {
                    "start": 545,
                    "end": 558,
                    "body": [
                        "    public void testHash32LongSeed_test2_decomposed()  {\n",
                        "        final int offset = 0;\n",
                        "        final int seed = 104729;\n",
                        "        final int length = MurmurHash3.LONG_BYTES;\n",
                        "        final ByteBuffer buffer = ByteBuffer.allocate(length);\n",
                        "        final byte[] bytes = buffer.array();\n",
                        "        final long[] data = createLongTestData();\n",
                        "        for (final long i : data) {\n",
                        "            buffer.putLong(0, i);\n",
                        "            Assert.assertEquals(\n",
                        "                    MurmurHash3.hash32x861(bytes, offset, length, seed),\n",
                        "                    MurmurHash3.hash323(i, seed));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32LongSeed_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "allocate(int)"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "array()"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.digest.MurmurHash3Test",
                            "MurmurHash3Test",
                            "128-138:createLongTestData"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "putLong(int,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "395-424:hash32x861"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "189-198:hash323"
                        ]
                    ]
                },
                "535-542:testHash32LongSeed_test1_decomposed": {
                    "start": 535,
                    "end": 542,
                    "body": [
                        "    public void testHash32LongSeed_test1_decomposed()  {\n",
                        "        final int offset = 0;\n",
                        "        final int seed = 104729;\n",
                        "        final int length = MurmurHash3.LONG_BYTES;\n",
                        "        final ByteBuffer buffer = ByteBuffer.allocate(length);\n",
                        "        final byte[] bytes = buffer.array();\n",
                        "        final long[] data = createLongTestData();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32LongSeed_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "allocate(int)"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "array()"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.digest.MurmurHash3Test",
                            "MurmurHash3Test",
                            "128-138:createLongTestData"
                        ]
                    ]
                },
                "527-532:testHash32LongSeed_test0_decomposed": {
                    "start": 527,
                    "end": 532,
                    "body": [
                        "    public void testHash32LongSeed_test0_decomposed()  {\n",
                        "        final int offset = 0;\n",
                        "        final int seed = 104729;\n",
                        "        final int length = MurmurHash3.LONG_BYTES;\n",
                        "        final ByteBuffer buffer = ByteBuffer.allocate(length);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32LongSeed_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "allocate(int)"
                        ]
                    ]
                },
                "512-524:testHash32Long_test2_decomposed": {
                    "start": 512,
                    "end": 524,
                    "body": [
                        "    public void testHash32Long_test2_decomposed()  {\n",
                        "        final int offset = 0;\n",
                        "        final int seed = 104729;\n",
                        "        final int length = MurmurHash3.LONG_BYTES;\n",
                        "        final ByteBuffer buffer = ByteBuffer.allocate(length);\n",
                        "        final byte[] bytes = buffer.array();\n",
                        "        final long[] data = createLongTestData();\n",
                        "        for (final long i : data) {\n",
                        "            buffer.putLong(0, i);\n",
                        "            Assert.assertEquals(\n",
                        "                    MurmurHash3.hash32x861(bytes, offset, length, seed), MurmurHash3.hash322(i));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32Long_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "allocate(int)"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "array()"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.digest.MurmurHash3Test",
                            "MurmurHash3Test",
                            "128-138:createLongTestData"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "putLong(int,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "395-424:hash32x861"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "169-171:hash322"
                        ]
                    ]
                },
                "502-509:testHash32Long_test1_decomposed": {
                    "start": 502,
                    "end": 509,
                    "body": [
                        "    public void testHash32Long_test1_decomposed()  {\n",
                        "        final int offset = 0;\n",
                        "        final int seed = 104729;\n",
                        "        final int length = MurmurHash3.LONG_BYTES;\n",
                        "        final ByteBuffer buffer = ByteBuffer.allocate(length);\n",
                        "        final byte[] bytes = buffer.array();\n",
                        "        final long[] data = createLongTestData();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32Long_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "allocate(int)"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "array()"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.digest.MurmurHash3Test",
                            "MurmurHash3Test",
                            "128-138:createLongTestData"
                        ]
                    ]
                },
                "494-499:testHash32Long_test0_decomposed": {
                    "start": 494,
                    "end": 499,
                    "body": [
                        "    public void testHash32Long_test0_decomposed()  {\n",
                        "        final int offset = 0;\n",
                        "        final int seed = 104729;\n",
                        "        final int length = MurmurHash3.LONG_BYTES;\n",
                        "        final ByteBuffer buffer = ByteBuffer.allocate(length);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32Long_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "allocate(int)"
                        ]
                    ]
                },
                "475-491:testHash32LongLongSeed_test2_decomposed": {
                    "start": 475,
                    "end": 491,
                    "body": [
                        "    public void testHash32LongLongSeed_test2_decomposed()  {\n",
                        "        final int offset = 0;\n",
                        "        final int seed = 104729;\n",
                        "        final int length = MurmurHash3.LONG_BYTES * 2;\n",
                        "        final ByteBuffer buffer = ByteBuffer.allocate(length);\n",
                        "        final byte[] bytes = buffer.array();\n",
                        "        final long[] data = createLongTestData();\n",
                        "        for (final long i : data) {\n",
                        "            for (final long j : data) {\n",
                        "                buffer.putLong(0, i);\n",
                        "                buffer.putLong(MurmurHash3.LONG_BYTES, j);\n",
                        "                Assert.assertEquals(\n",
                        "                        MurmurHash3.hash32x861(bytes, offset, length, seed),\n",
                        "                        MurmurHash3.hash321(i, j, seed));\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32LongLongSeed_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "allocate(int)"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "array()"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.digest.MurmurHash3Test",
                            "MurmurHash3Test",
                            "128-138:createLongTestData"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "putLong(int,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "395-424:hash32x861"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "139-151:hash321"
                        ]
                    ]
                },
                "465-472:testHash32LongLongSeed_test1_decomposed": {
                    "start": 465,
                    "end": 472,
                    "body": [
                        "    public void testHash32LongLongSeed_test1_decomposed()  {\n",
                        "        final int offset = 0;\n",
                        "        final int seed = 104729;\n",
                        "        final int length = MurmurHash3.LONG_BYTES * 2;\n",
                        "        final ByteBuffer buffer = ByteBuffer.allocate(length);\n",
                        "        final byte[] bytes = buffer.array();\n",
                        "        final long[] data = createLongTestData();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32LongLongSeed_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "allocate(int)"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "array()"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.digest.MurmurHash3Test",
                            "MurmurHash3Test",
                            "128-138:createLongTestData"
                        ]
                    ]
                },
                "457-462:testHash32LongLongSeed_test0_decomposed": {
                    "start": 457,
                    "end": 462,
                    "body": [
                        "    public void testHash32LongLongSeed_test0_decomposed()  {\n",
                        "        final int offset = 0;\n",
                        "        final int seed = 104729;\n",
                        "        final int length = MurmurHash3.LONG_BYTES * 2;\n",
                        "        final ByteBuffer buffer = ByteBuffer.allocate(length);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32LongLongSeed_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "allocate(int)"
                        ]
                    ]
                },
                "438-454:testHash32LongLong_test2_decomposed": {
                    "start": 438,
                    "end": 454,
                    "body": [
                        "    public void testHash32LongLong_test2_decomposed()  {\n",
                        "        final int offset = 0;\n",
                        "        final int seed = 104729;\n",
                        "        final int length = MurmurHash3.LONG_BYTES * 2;\n",
                        "        final ByteBuffer buffer = ByteBuffer.allocate(length);\n",
                        "        final byte[] bytes = buffer.array();\n",
                        "        final long[] data = createLongTestData();\n",
                        "        for (final long i : data) {\n",
                        "            for (final long j : data) {\n",
                        "                buffer.putLong(0, i);\n",
                        "                buffer.putLong(MurmurHash3.LONG_BYTES, j);\n",
                        "                Assert.assertEquals(\n",
                        "                        MurmurHash3.hash32x861(bytes, offset, length, seed),\n",
                        "                        MurmurHash3.hash320(i, j));\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32LongLong_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "allocate(int)"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "array()"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.digest.MurmurHash3Test",
                            "MurmurHash3Test",
                            "128-138:createLongTestData"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "putLong(int,long)"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(long,long)"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "395-424:hash32x861"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "117-119:hash320"
                        ]
                    ]
                },
                "428-435:testHash32LongLong_test1_decomposed": {
                    "start": 428,
                    "end": 435,
                    "body": [
                        "    public void testHash32LongLong_test1_decomposed()  {\n",
                        "        final int offset = 0;\n",
                        "        final int seed = 104729;\n",
                        "        final int length = MurmurHash3.LONG_BYTES * 2;\n",
                        "        final ByteBuffer buffer = ByteBuffer.allocate(length);\n",
                        "        final byte[] bytes = buffer.array();\n",
                        "        final long[] data = createLongTestData();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32LongLong_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "allocate(int)"
                        ],
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "array()"
                        ],
                        [
                            "commons-codec.src.test.org.apache.commons.codec.digest.MurmurHash3Test",
                            "MurmurHash3Test",
                            "128-138:createLongTestData"
                        ]
                    ]
                },
                "420-425:testHash32LongLong_test0_decomposed": {
                    "start": 420,
                    "end": 425,
                    "body": [
                        "    public void testHash32LongLong_test0_decomposed()  {\n",
                        "        final int offset = 0;\n",
                        "        final int seed = 104729;\n",
                        "        final int length = MurmurHash3.LONG_BYTES * 2;\n",
                        "        final ByteBuffer buffer = ByteBuffer.allocate(length);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testHash32LongLong_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/nio/ByteBuffer",
                            "allocate(int)"
                        ]
                    ]
                },
                "400-410:createRandomBlocks": {
                    "start": 400,
                    "end": 410,
                    "body": [
                        "    private static int[] createRandomBlocks(final int maxLength) {\n",
                        "        final int[] blocks = new int[20];\n",
                        "        int count = 0;\n",
                        "        int length = 0;\n",
                        "        while (count < blocks.length && length < maxLength) {\n",
                        "            final int size = ThreadLocalRandom.current().nextInt(1, 9);\n",
                        "            blocks[count++] = size;\n",
                        "            length += size;\n",
                        "        }\n",
                        "        return Arrays.copyOf(blocks, count);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "int[]",
                            "int[]"
                        ]
                    ],
                    "signature": "createRandomBlocks(int)",
                    "parameters": [
                        "maxLength"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/concurrent/ThreadLocalRandom",
                            "nextInt(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/util/concurrent/ThreadLocalRandom",
                            "current()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Arrays",
                            "copyOf(int[],int)"
                        ]
                    ]
                },
                "377-392:assertIncrementalHash32x86": {
                    "start": 377,
                    "end": 392,
                    "body": [
                        "    private static void assertIncrementalHash32x86(\n",
                        "            final byte[] bytes, final int seed, final int... blocks) {\n",
                        "        int offset = 0;\n",
                        "        int total = 0;\n",
                        "        final IncrementalHash32x86 inc = new IncrementalHash32x86();\n",
                        "        inc.start(seed);\n",
                        "        for (final int block : blocks) {\n",
                        "            total += block;\n",
                        "            final int h1 = MurmurHash3.hash32x861(bytes, 0, total, seed);\n",
                        "            inc.add(bytes, offset, block);\n",
                        "            offset += block;\n",
                        "            final int h2 = inc.end();\n",
                        "            Assert.assertEquals(\"Hashes differ\", h1, h2);\n",
                        "            Assert.assertEquals(\"Hashes differ after no additional data\", h1, inc.end());\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "assertIncrementalHash32x86(byte[], int, int[])",
                    "parameters": [
                        "bytes",
                        "seed",
                        "blocks"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "IncrementalHash32x86",
                            "IncrementalHash32x86"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "IncrementalHash32x86",
                            "1014-1017:start"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "395-424:hash32x861"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "IncrementalHash32x86",
                            "1091-1093:end"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "IncrementalHash32x86",
                            "1026-1083:add"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ]
                    ]
                },
                "344-359:assertIncrementalHash32": {
                    "start": 344,
                    "end": 359,
                    "body": [
                        "    private static void assertIncrementalHash32(\n",
                        "            final byte[] bytes, final int seed, final int... blocks) {\n",
                        "        int offset = 0;\n",
                        "        int total = 0;\n",
                        "        final IncrementalHash32 inc = new IncrementalHash32();\n",
                        "        inc.start(seed);\n",
                        "        for (final int block : blocks) {\n",
                        "            total += block;\n",
                        "            final int h1 = MurmurHash3.hash328(bytes, 0, total, seed);\n",
                        "            inc.add(bytes, offset, block);\n",
                        "            offset += block;\n",
                        "            final int h2 = inc.end();\n",
                        "            Assert.assertEquals(\"Hashes differ\", h1, h2);\n",
                        "            Assert.assertEquals(\"Hashes differ after no additional data\", h1, inc.end());\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "assertIncrementalHash32(byte[], int, int[])",
                    "parameters": [
                        "bytes",
                        "seed",
                        "blocks"
                    ],
                    "calls": [
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "IncrementalHash32",
                            "IncrementalHash32"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "IncrementalHash32x86",
                            "1014-1017:start"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "MurmurHash3",
                            "332-361:hash328"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "IncrementalHash32x86",
                            "1091-1093:end"
                        ],
                        [
                            "commons-codec.src.main.org.apache.commons.codec.digest.MurmurHash3",
                            "IncrementalHash32x86",
                            "1026-1083:add"
                        ],
                        [
                            "library",
                            "Assert",
                            "assertEquals(java.lang.String,long,long)"
                        ]
                    ]
                },
                "184-191:negativeBytes": {
                    "start": 184,
                    "end": 191,
                    "body": [
                        "    private static boolean negativeBytes(final byte[] bytes, final int start, final int length) {\n",
                        "        for (int i = start; i < start + length; i++) {\n",
                        "            if (bytes[i] < 0) {\n",
                        "                return true;\n",
                        "            }\n",
                        "        }\n",
                        "        return false;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "negativeBytes(byte[], int, int)",
                    "parameters": [
                        "bytes",
                        "start",
                        "length"
                    ],
                    "calls": []
                },
                "128-138:createLongTestData": {
                    "start": 128,
                    "end": 138,
                    "body": [
                        "    private static long[] createLongTestData() {\n",
                        "        final long[] data = new long[100];\n",
                        "        data[0] = 0;\n",
                        "        data[1] = Long.MIN_VALUE;\n",
                        "        data[2] = Long.MAX_VALUE;\n",
                        "        data[3] = -1L;\n",
                        "        for (int i = 4; i < data.length; i++) {\n",
                        "            data[i] = ThreadLocalRandom.current().nextLong();\n",
                        "        }\n",
                        "        return data;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "long[]",
                            "long[]"
                        ]
                    ],
                    "signature": "createLongTestData()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/concurrent/ThreadLocalRandom",
                            "nextLong()"
                        ],
                        [
                            "library",
                            "java.base/java/util/concurrent/ThreadLocalRandom",
                            "current()"
                        ]
                    ]
                }
            },
            "fields": {
                "100-100:RANDOM_BYTES": {
                    "start": 100,
                    "end": 100,
                    "body": [
                        "    private static final byte[] RANDOM_BYTES;\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "byte[]",
                            "byte[]"
                        ]
                    ]
                },
                "80-94:RANDOM_INTS": {
                    "start": 80,
                    "end": 94,
                    "body": [
                        "    private static final int[] RANDOM_INTS = {\n",
                        "        46, 246, 249, 184, 247, 84, 99, 144, 62, 77, 195, 220, 92, 20, 150, 159, 38, 40, 124, 252,\n",
                        "        185, 28, 63, 13, 213, 172, 85, 198, 118, 74, 109, 157, 132, 216, 76, 177, 173, 23, 140, 86,\n",
                        "        146, 95, 54, 176, 114, 179, 234, 174, 183, 141, 122, 12, 60, 116, 200, 142, 6, 167, 59, 240,\n",
                        "        33, 29, 165, 111, 243, 30, 219, 110, 255, 53, 32, 35, 64, 225, 96, 152, 70, 41, 133, 80,\n",
                        "        244, 127, 57, 199, 5, 164, 151, 49, 26, 180, 203, 83, 108, 39, 126, 208, 42, 206, 178, 19,\n",
                        "        69, 223, 71, 231, 250, 125, 211, 232, 189, 55, 44, 82, 48, 221, 43, 192, 241, 103, 155, 27,\n",
                        "        51, 163, 21, 169, 91, 94, 217, 191, 78, 72, 93, 102, 104, 105, 8, 113, 100, 143, 89, 245,\n",
                        "        227, 120, 160, 251, 153, 145, 45, 218, 168, 233, 229, 253, 67, 22, 182, 98, 137, 128, 135,\n",
                        "        11, 214, 66, 73, 171, 188, 170, 131, 207, 79, 106, 24, 75, 237, 194, 7, 129, 215, 81, 248,\n",
                        "        242, 16, 25, 136, 147, 156, 97, 52, 10, 181, 17, 205, 58, 101, 68, 230, 1, 37, 0, 222, 88,\n",
                        "        130, 148, 224, 47, 50, 197, 34, 212, 196, 209, 14, 36, 139, 228, 154, 31, 175, 202, 236,\n",
                        "        161, 3, 162, 190, 254, 134, 119, 4, 61, 65, 117, 186, 107, 204, 9, 187, 201, 90, 149, 226,\n",
                        "        56, 239, 238, 235, 112, 87, 18, 121, 115, 138, 123, 210, 2, 193, 166, 158, 15\n",
                        "    };\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "int[]",
                            "int[]"
                        ]
                    ]
                },
                "36-53:TEST_HASH64": {
                    "start": 36,
                    "end": 53,
                    "body": [
                        "    private static final String TEST_HASH64 =\n",
                        "            \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\"\n",
                        "                + \" incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis\"\n",
                        "                + \" nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\"\n",
                        "                + \" Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu\"\n",
                        "                + \" fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\"\n",
                        "                + \" culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde\"\n",
                        "                + \" omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam\"\n",
                        "                + \" rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto\"\n",
                        "                + \" beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit\"\n",
                        "                + \" aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui\"\n",
                        "                + \" ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum\"\n",
                        "                + \" quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius\"\n",
                        "                + \" modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut\"\n",
                        "                + \" enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit\"\n",
                        "                + \" laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure\"\n",
                        "                + \" reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur,\"\n",
                        "                + \" vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\";\n"
                    ],
                    "modifiers": [
                        "final",
                        "static",
                        "private"
                    ],
                    "types": [
                        [
                            "String",
                            "java.lang.String"
                        ]
                    ]
                }
            },
            "static_initializers": {
                "102-107:run_static_init": {
                    "start": 102,
                    "end": 107,
                    "body": [
                        "    static {\n",
                        "        RANDOM_BYTES = new byte[RANDOM_INTS.length];\n",
                        "        for (int i = 0; i < RANDOM_BYTES.length; i++) {\n",
                        "            RANDOM_BYTES[i] = (byte) RANDOM_INTS[i];\n",
                        "        }\n",
                        "    }\n"
                    ]
                }
            }
        }
    }
}