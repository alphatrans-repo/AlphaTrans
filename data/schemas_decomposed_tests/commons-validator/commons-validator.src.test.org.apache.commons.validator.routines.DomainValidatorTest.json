{
    "path": "java_projects/cleaned_final_projects_decomposed_tests/commons-validator/src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java",
    "imports": {
        "24-24:import BufferedReader": {
            "start": 24,
            "end": 24,
            "body": [
                "import java.io.BufferedReader;\n"
            ]
        },
        "29-29:import IOException": {
            "start": 29,
            "end": 29,
            "body": [
                "import java.io.IOException;\n"
            ]
        },
        "30-30:import InputStream": {
            "start": 30,
            "end": 30,
            "body": [
                "import java.io.InputStream;\n"
            ]
        },
        "25-25:import Closeable": {
            "start": 25,
            "end": 25,
            "body": [
                "import java.io.Closeable;\n"
            ]
        },
        "26-26:import File": {
            "start": 26,
            "end": 26,
            "body": [
                "import java.io.File;\n"
            ]
        },
        "35-35:import URL": {
            "start": 35,
            "end": 35,
            "body": [
                "import java.net.URL;\n"
            ]
        },
        "27-27:import FileOutputStream": {
            "start": 27,
            "end": 27,
            "body": [
                "import java.io.FileOutputStream;\n"
            ]
        },
        "28-28:import FileReader": {
            "start": 28,
            "end": 28,
            "body": [
                "import java.io.FileReader;\n"
            ]
        },
        "31-31:import Field": {
            "start": 31,
            "end": 31,
            "body": [
                "import java.lang.reflect.Field;\n"
            ]
        },
        "41-41:import Locale": {
            "start": 41,
            "end": 41,
            "body": [
                "import java.util.Locale;\n"
            ]
        },
        "42-42:import Map": {
            "start": 42,
            "end": 42,
            "body": [
                "import java.util.Map;\n"
            ]
        },
        "43-43:import Set": {
            "start": 43,
            "end": 43,
            "body": [
                "import java.util.Set;\n"
            ]
        },
        "40-40:import Iterator": {
            "start": 40,
            "end": 40,
            "body": [
                "import java.util.Iterator;\n"
            ]
        },
        "32-32:import Modifier": {
            "start": 32,
            "end": 32,
            "body": [
                "import java.lang.reflect.Modifier;\n"
            ]
        },
        "33-33:import HttpURLConnection": {
            "start": 33,
            "end": 33,
            "body": [
                "import java.net.HttpURLConnection;\n"
            ]
        },
        "34-34:import IDN": {
            "start": 34,
            "end": 34,
            "body": [
                "import java.net.IDN;\n"
            ]
        },
        "37-37:import Date": {
            "start": 37,
            "end": 37,
            "body": [
                "import java.util.Date;\n"
            ]
        },
        "36-36:import SimpleDateFormat": {
            "start": 36,
            "end": 36,
            "body": [
                "import java.text.SimpleDateFormat;\n"
            ]
        },
        "38-38:import HashMap": {
            "start": 38,
            "end": 38,
            "body": [
                "import java.util.HashMap;\n"
            ]
        },
        "39-39:import HashSet": {
            "start": 39,
            "end": 39,
            "body": [
                "import java.util.HashSet;\n"
            ]
        },
        "44-44:import TreeMap": {
            "start": 44,
            "end": 44,
            "body": [
                "import java.util.TreeMap;\n"
            ]
        },
        "45-45:import Matcher": {
            "start": 45,
            "end": 45,
            "body": [
                "import java.util.regex.Matcher;\n"
            ]
        },
        "46-46:import Pattern": {
            "start": 46,
            "end": 46,
            "body": [
                "import java.util.regex.Pattern;\n"
            ]
        },
        "20-20:import TestCase": {
            "start": 20,
            "end": 20,
            "body": [
                "import junit.framework.TestCase;\n"
            ]
        },
        "18-18:import Test": {
            "start": 18,
            "end": 18,
            "body": [
                "import org.junit.Test;\n"
            ]
        },
        "22-22:import ArrayType": {
            "start": 22,
            "end": 22,
            "body": [
                "import org.apache.commons.validator.routines.DomainValidator.ArrayType;\n"
            ]
        }
    },
    "classes": {
        "DomainValidatorTest": {
            "start": 53,
            "end": 53,
            "is_abstract": false,
            "is_interface": false,
            "nested_inside": [],
            "nests": [],
            "implements": [],
            "extends": [
                "TestCase"
            ],
            "methods": {
                "851-862:testGetArray_test0_decomposed": {
                    "start": 851,
                    "end": 862,
                    "body": [
                        "    public void testGetArray_test0_decomposed()  {\n",
                        "        assertNotNull(DomainValidator.getTLDEntries(ArrayType.COUNTRY_CODE_MINUS));\n",
                        "        assertNotNull(DomainValidator.getTLDEntries(ArrayType.COUNTRY_CODE_PLUS));\n",
                        "        assertNotNull(DomainValidator.getTLDEntries(ArrayType.GENERIC_MINUS));\n",
                        "        assertNotNull(DomainValidator.getTLDEntries(ArrayType.GENERIC_PLUS));\n",
                        "        assertNotNull(DomainValidator.getTLDEntries(ArrayType.LOCAL_MINUS));\n",
                        "        assertNotNull(DomainValidator.getTLDEntries(ArrayType.LOCAL_PLUS));\n",
                        "        assertNotNull(DomainValidator.getTLDEntries(ArrayType.COUNTRY_CODE_RO));\n",
                        "        assertNotNull(DomainValidator.getTLDEntries(ArrayType.GENERIC_RO));\n",
                        "        assertNotNull(DomainValidator.getTLDEntries(ArrayType.INFRASTRUCTURE_RO));\n",
                        "        assertNotNull(DomainValidator.getTLDEntries(ArrayType.LOCAL_RO));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testGetArray_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertNotNull(java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "2046-2083:getTLDEntries"
                        ]
                    ]
                },
                "846-848:testEnumIsPublic_test0_decomposed": {
                    "start": 846,
                    "end": 848,
                    "body": [
                        "    public void testEnumIsPublic_test0_decomposed()  {\n",
                        "        assertTrue(Modifier.isPublic(DomainValidator.ArrayType.class.getModifiers()));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testEnumIsPublic_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(boolean)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/reflect/Modifier",
                            "isPublic(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "getModifiers()"
                        ]
                    ]
                },
                "840-843:test_LOCAL_TLDS_sortedAndLowerCase_test1_decomposed": {
                    "start": 840,
                    "end": 843,
                    "body": [
                        "    public void test_LOCAL_TLDS_sortedAndLowerCase_test1_decomposed() throws Exception {\n",
                        "        final boolean sorted = isSortedLowerCase0(\"LOCAL_TLDS\");\n",
                        "        assertTrue(sorted);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test_LOCAL_TLDS_sortedAndLowerCase_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.DomainValidatorTest",
                            "DomainValidatorTest",
                            "368-382:isSortedLowerCase0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(boolean)"
                        ]
                    ]
                },
                "835-837:test_LOCAL_TLDS_sortedAndLowerCase_test0_decomposed": {
                    "start": 835,
                    "end": 837,
                    "body": [
                        "    public void test_LOCAL_TLDS_sortedAndLowerCase_test0_decomposed() throws Exception {\n",
                        "        final boolean sorted = isSortedLowerCase0(\"LOCAL_TLDS\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test_LOCAL_TLDS_sortedAndLowerCase_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.DomainValidatorTest",
                            "DomainValidatorTest",
                            "368-382:isSortedLowerCase0"
                        ]
                    ]
                },
                "829-832:test_GENERIC_TLDS_sortedAndLowerCase_test1_decomposed": {
                    "start": 829,
                    "end": 832,
                    "body": [
                        "    public void test_GENERIC_TLDS_sortedAndLowerCase_test1_decomposed() throws Exception {\n",
                        "        final boolean sorted = isSortedLowerCase0(\"GENERIC_TLDS\");\n",
                        "        assertTrue(sorted);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test_GENERIC_TLDS_sortedAndLowerCase_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.DomainValidatorTest",
                            "DomainValidatorTest",
                            "368-382:isSortedLowerCase0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(boolean)"
                        ]
                    ]
                },
                "824-826:test_GENERIC_TLDS_sortedAndLowerCase_test0_decomposed": {
                    "start": 824,
                    "end": 826,
                    "body": [
                        "    public void test_GENERIC_TLDS_sortedAndLowerCase_test0_decomposed() throws Exception {\n",
                        "        final boolean sorted = isSortedLowerCase0(\"GENERIC_TLDS\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test_GENERIC_TLDS_sortedAndLowerCase_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.DomainValidatorTest",
                            "DomainValidatorTest",
                            "368-382:isSortedLowerCase0"
                        ]
                    ]
                },
                "818-821:test_COUNTRY_CODE_TLDS_sortedAndLowerCase_test1_decomposed": {
                    "start": 818,
                    "end": 821,
                    "body": [
                        "    public void test_COUNTRY_CODE_TLDS_sortedAndLowerCase_test1_decomposed() throws Exception {\n",
                        "        final boolean sorted = isSortedLowerCase0(\"COUNTRY_CODE_TLDS\");\n",
                        "        assertTrue(sorted);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test_COUNTRY_CODE_TLDS_sortedAndLowerCase_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.DomainValidatorTest",
                            "DomainValidatorTest",
                            "368-382:isSortedLowerCase0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(boolean)"
                        ]
                    ]
                },
                "813-815:test_COUNTRY_CODE_TLDS_sortedAndLowerCase_test0_decomposed": {
                    "start": 813,
                    "end": 815,
                    "body": [
                        "    public void test_COUNTRY_CODE_TLDS_sortedAndLowerCase_test0_decomposed() throws Exception {\n",
                        "        final boolean sorted = isSortedLowerCase0(\"COUNTRY_CODE_TLDS\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test_COUNTRY_CODE_TLDS_sortedAndLowerCase_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.DomainValidatorTest",
                            "DomainValidatorTest",
                            "368-382:isSortedLowerCase0"
                        ]
                    ]
                },
                "807-810:test_INFRASTRUCTURE_TLDS_sortedAndLowerCase_test1_decomposed": {
                    "start": 807,
                    "end": 810,
                    "body": [
                        "    public void test_INFRASTRUCTURE_TLDS_sortedAndLowerCase_test1_decomposed() throws Exception {\n",
                        "        final boolean sorted = isSortedLowerCase0(\"INFRASTRUCTURE_TLDS\");\n",
                        "        assertTrue(sorted);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test_INFRASTRUCTURE_TLDS_sortedAndLowerCase_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.DomainValidatorTest",
                            "DomainValidatorTest",
                            "368-382:isSortedLowerCase0"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(boolean)"
                        ]
                    ]
                },
                "802-804:test_INFRASTRUCTURE_TLDS_sortedAndLowerCase_test0_decomposed": {
                    "start": 802,
                    "end": 804,
                    "body": [
                        "    public void test_INFRASTRUCTURE_TLDS_sortedAndLowerCase_test0_decomposed() throws Exception {\n",
                        "        final boolean sorted = isSortedLowerCase0(\"INFRASTRUCTURE_TLDS\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "test_INFRASTRUCTURE_TLDS_sortedAndLowerCase_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.DomainValidatorTest",
                            "DomainValidatorTest",
                            "368-382:isSortedLowerCase0"
                        ]
                    ]
                },
                "775-799:testIsIDNtoASCIIBroken_test2_decomposed": {
                    "start": 775,
                    "end": 799,
                    "body": [
                        "    public void testIsIDNtoASCIIBroken_test2_decomposed()  {\n",
                        "        System.out.println(\">>DomainValidatorTest.testIsIDNtoASCIIBroken()\");\n",
                        "        final String input = \".\";\n",
                        "        final boolean ok = input.equals(IDN.toASCII(input));\n",
                        "        System.out.println(\"IDN.toASCII is \" + (ok ? \"OK\" : \"BROKEN\"));\n",
                        "        String props[] = {\n",
                        "            \"java.version\", //    Java Runtime Environment version\n",
                        "            \"java.vendor\", // Java Runtime Environment vendor\n",
                        "            \"java.vm.specification.version\", //   Java Virtual Machine specification version\n",
                        "            \"java.vm.specification.vendor\", //    Java Virtual Machine specification vendor\n",
                        "            \"java.vm.specification.name\", //  Java Virtual Machine specification name\n",
                        "            \"java.vm.version\", // Java Virtual Machine implementation version\n",
                        "            \"java.vm.vendor\", //  Java Virtual Machine implementation vendor\n",
                        "            \"java.vm.name\", //    Java Virtual Machine implementation name\n",
                        "            \"java.specification.version\", //  Java Runtime Environment specification version\n",
                        "            \"java.specification.vendor\", //   Java Runtime Environment specification vendor\n",
                        "            \"java.specification.name\", // Java Runtime Environment specification name\n",
                        "            \"java.class.version\", //  Java class format version number\n",
                        "        };\n",
                        "        for (String t : props) {\n",
                        "            System.out.println(t + \"=\" + System.getProperty(t));\n",
                        "        }\n",
                        "        System.out.println(\"<<DomainValidatorTest.testIsIDNtoASCIIBroken()\");\n",
                        "        assertTrue(true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsIDNtoASCIIBroken_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/net/IDN",
                            "toASCII(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "getProperty(java.lang.String)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(boolean)"
                        ]
                    ]
                },
                "750-772:testIsIDNtoASCIIBroken_test1_decomposed": {
                    "start": 750,
                    "end": 772,
                    "body": [
                        "    public void testIsIDNtoASCIIBroken_test1_decomposed()  {\n",
                        "        System.out.println(\">>DomainValidatorTest.testIsIDNtoASCIIBroken()\");\n",
                        "        final String input = \".\";\n",
                        "        final boolean ok = input.equals(IDN.toASCII(input));\n",
                        "        System.out.println(\"IDN.toASCII is \" + (ok ? \"OK\" : \"BROKEN\"));\n",
                        "        String props[] = {\n",
                        "            \"java.version\", //    Java Runtime Environment version\n",
                        "            \"java.vendor\", // Java Runtime Environment vendor\n",
                        "            \"java.vm.specification.version\", //   Java Virtual Machine specification version\n",
                        "            \"java.vm.specification.vendor\", //    Java Virtual Machine specification vendor\n",
                        "            \"java.vm.specification.name\", //  Java Virtual Machine specification name\n",
                        "            \"java.vm.version\", // Java Virtual Machine implementation version\n",
                        "            \"java.vm.vendor\", //  Java Virtual Machine implementation vendor\n",
                        "            \"java.vm.name\", //    Java Virtual Machine implementation name\n",
                        "            \"java.specification.version\", //  Java Runtime Environment specification version\n",
                        "            \"java.specification.vendor\", //   Java Runtime Environment specification vendor\n",
                        "            \"java.specification.name\", // Java Runtime Environment specification name\n",
                        "            \"java.class.version\", //  Java class format version number\n",
                        "        };\n",
                        "        for (String t : props) {\n",
                        "            System.out.println(t + \"=\" + System.getProperty(t));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsIDNtoASCIIBroken_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/net/IDN",
                            "toASCII(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "getProperty(java.lang.String)"
                        ]
                    ]
                },
                "743-747:testIsIDNtoASCIIBroken_test0_decomposed": {
                    "start": 743,
                    "end": 747,
                    "body": [
                        "    public void testIsIDNtoASCIIBroken_test0_decomposed()  {\n",
                        "        System.out.println(\">>DomainValidatorTest.testIsIDNtoASCIIBroken()\");\n",
                        "        final String input = \".\";\n",
                        "        final boolean ok = input.equals(IDN.toASCII(input));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIsIDNtoASCIIBroken_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/net/IDN",
                            "toASCII(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "708-740:testUnicodeToASCII_test1_decomposed": {
                    "start": 708,
                    "end": 740,
                    "body": [
                        "    public void testUnicodeToASCII_test1_decomposed()  {\n",
                        "        String[] asciidots = {\n",
                        "            \"\", \",\", \".\", // fails IDN.toASCII, but should pass wrapped version\n",
                        "            \"a.\", // ditto\n",
                        "            \"a.b\", \"a..b\", \"a...b\", \".a\", \"..a\",\n",
                        "        };\n",
                        "        for (String s : asciidots) {\n",
                        "            assertEquals(s, DomainValidator.unicodeToASCII(s));\n",
                        "        }\n",
                        "        final String otherDots[][] = {\n",
                        "            {\n",
                        "                \"b\\u3002\", \"b.\",\n",
                        "            },\n",
                        "            {\n",
                        "                \"b\\uFF0E\", \"b.\",\n",
                        "            },\n",
                        "            {\n",
                        "                \"b\\uFF61\", \"b.\",\n",
                        "            },\n",
                        "            {\n",
                        "                \"\\u3002\", \".\",\n",
                        "            },\n",
                        "            {\n",
                        "                \"\\uFF0E\", \".\",\n",
                        "            },\n",
                        "            {\n",
                        "                \"\\uFF61\", \".\",\n",
                        "            },\n",
                        "        };\n",
                        "        for (String s[] : otherDots) {\n",
                        "            assertEquals(s[1], DomainValidator.unicodeToASCII(s[0]));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testUnicodeToASCII_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "2127-2153:unicodeToASCII"
                        ]
                    ]
                },
                "696-705:testUnicodeToASCII_test0_decomposed": {
                    "start": 696,
                    "end": 705,
                    "body": [
                        "    public void testUnicodeToASCII_test0_decomposed()  {\n",
                        "        String[] asciidots = {\n",
                        "            \"\", \",\", \".\", // fails IDN.toASCII, but should pass wrapped version\n",
                        "            \"a.\", // ditto\n",
                        "            \"a.b\", \"a..b\", \"a...b\", \".a\", \"..a\",\n",
                        "        };\n",
                        "        for (String s : asciidots) {\n",
                        "            assertEquals(s, DomainValidator.unicodeToASCII(s));\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testUnicodeToASCII_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "2127-2153:unicodeToASCII"
                        ]
                    ]
                },
                "668-693:testValidator306_test3_decomposed": {
                    "start": 668,
                    "end": 693,
                    "body": [
                        "    public void testValidator306_test3_decomposed()  {\n",
                        "        final String longString = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789A\";\n",
                        "        assertEquals(63, longString.length());\n",
                        "        assertTrue(\n",
                        "                \"63 chars label should validate\",\n",
                        "                validator.isValidDomainSyntax(longString + \".com\"));\n",
                        "        assertFalse(\n",
                        "                \"64 chars label should fail\", validator.isValidDomainSyntax(longString + \"x.com\"));\n",
                        "        assertTrue(\n",
                        "                \"63 chars TLD should validate\",\n",
                        "                validator.isValidDomainSyntax(\"test.\" + longString));\n",
                        "        assertFalse(\n",
                        "                \"64 chars TLD should fail\", validator.isValidDomainSyntax(\"test.x\" + longString));\n",
                        "        final String longDomain =\n",
                        "                longString\n",
                        "                        + \".\"\n",
                        "                        + longString\n",
                        "                        + \".\"\n",
                        "                        + longString\n",
                        "                        + \".\"\n",
                        "                        + longString.substring(0, 61);\n",
                        "        assertEquals(253, longDomain.length());\n",
                        "        assertTrue(\"253 chars domain should validate\", validator.isValidDomainSyntax(longDomain));\n",
                        "        assertFalse(\n",
                        "                \"254 chars domain should fail\", validator.isValidDomainSyntax(longDomain + \"x\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testValidator306_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "substring(int,int)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "252-262:isValidDomainSyntax"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ]
                },
                "643-665:testValidator306_test2_decomposed": {
                    "start": 643,
                    "end": 665,
                    "body": [
                        "    public void testValidator306_test2_decomposed()  {\n",
                        "        final String longString = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789A\";\n",
                        "        assertEquals(63, longString.length());\n",
                        "        assertTrue(\n",
                        "                \"63 chars label should validate\",\n",
                        "                validator.isValidDomainSyntax(longString + \".com\"));\n",
                        "        assertFalse(\n",
                        "                \"64 chars label should fail\", validator.isValidDomainSyntax(longString + \"x.com\"));\n",
                        "        assertTrue(\n",
                        "                \"63 chars TLD should validate\",\n",
                        "                validator.isValidDomainSyntax(\"test.\" + longString));\n",
                        "        assertFalse(\n",
                        "                \"64 chars TLD should fail\", validator.isValidDomainSyntax(\"test.x\" + longString));\n",
                        "        final String longDomain =\n",
                        "                longString\n",
                        "                        + \".\"\n",
                        "                        + longString\n",
                        "                        + \".\"\n",
                        "                        + longString\n",
                        "                        + \".\"\n",
                        "                        + longString.substring(0, 61);\n",
                        "        assertEquals(253, longDomain.length());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testValidator306_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "substring(int,int)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "252-262:isValidDomainSyntax"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ]
                },
                "627-640:testValidator306_test1_decomposed": {
                    "start": 627,
                    "end": 640,
                    "body": [
                        "    public void testValidator306_test1_decomposed()  {\n",
                        "        final String longString = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789A\";\n",
                        "        assertEquals(63, longString.length());\n",
                        "        assertTrue(\n",
                        "                \"63 chars label should validate\",\n",
                        "                validator.isValidDomainSyntax(longString + \".com\"));\n",
                        "        assertFalse(\n",
                        "                \"64 chars label should fail\", validator.isValidDomainSyntax(longString + \"x.com\"));\n",
                        "        assertTrue(\n",
                        "                \"63 chars TLD should validate\",\n",
                        "                validator.isValidDomainSyntax(\"test.\" + longString));\n",
                        "        assertFalse(\n",
                        "                \"64 chars TLD should fail\", validator.isValidDomainSyntax(\"test.x\" + longString));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testValidator306_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertEquals(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "252-262:isValidDomainSyntax"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ]
                },
                "621-624:testValidator306_test0_decomposed": {
                    "start": 621,
                    "end": 624,
                    "body": [
                        "    public void testValidator306_test0_decomposed()  {\n",
                        "        final String longString = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789A\";\n",
                        "        assertEquals(63, longString.length());\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testValidator306_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertEquals(int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "length()"
                        ]
                    ]
                },
                "614-618:testValidator297_test0_decomposed": {
                    "start": 614,
                    "end": 618,
                    "body": [
                        "    public void testValidator297_test0_decomposed()  {\n",
                        "        assertTrue(\n",
                        "                \"xn--d1abbgf6aiiy.xn--p1ai should validate\",\n",
                        "                validator.isValid(\"xn--d1abbgf6aiiy.xn--p1ai\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testValidator297_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "237-250:isValid"
                        ]
                    ]
                },
                "604-611:testDomainNoDots_test0_decomposed": {
                    "start": 604,
                    "end": 611,
                    "body": [
                        "    public void testDomainNoDots_test0_decomposed()  {\n",
                        "        assertTrue(\"a (alpha) should validate\", validator.isValidDomainSyntax(\"a\"));\n",
                        "        assertTrue(\"9 (alphanum) should validate\", validator.isValidDomainSyntax(\"9\"));\n",
                        "        assertTrue(\"c-z (alpha - alpha) should validate\", validator.isValidDomainSyntax(\"c-z\"));\n",
                        "        assertFalse(\"c- (alpha -) should fail\", validator.isValidDomainSyntax(\"c-\"));\n",
                        "        assertFalse(\"-c (- alpha) should fail\", validator.isValidDomainSyntax(\"-c\"));\n",
                        "        assertFalse(\"- (-) should fail\", validator.isValidDomainSyntax(\"-\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testDomainNoDots_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "252-262:isValidDomainSyntax"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ]
                },
                "590-601:testRFC2396toplabel_test0_decomposed": {
                    "start": 590,
                    "end": 601,
                    "body": [
                        "    public void testRFC2396toplabel_test0_decomposed()  {\n",
                        "        assertTrue(\"a.c (alpha) should validate\", validator.isValidDomainSyntax(\"a.c\"));\n",
                        "        assertTrue(\"a.cc (alpha alpha) should validate\", validator.isValidDomainSyntax(\"a.cc\"));\n",
                        "        assertTrue(\"a.c9 (alpha alphanum) should validate\", validator.isValidDomainSyntax(\"a.c9\"));\n",
                        "        assertTrue(\n",
                        "                \"a.c-9 (alpha - alphanum) should validate\", validator.isValidDomainSyntax(\"a.c-9\"));\n",
                        "        assertTrue(\"a.c-z (alpha - alpha) should validate\", validator.isValidDomainSyntax(\"a.c-z\"));\n",
                        "        assertFalse(\"a.9c (alphanum alpha) should fail\", validator.isValidDomainSyntax(\"a.9c\"));\n",
                        "        assertFalse(\"a.c- (alpha -) should fail\", validator.isValidDomainSyntax(\"a.c-\"));\n",
                        "        assertFalse(\"a.- (-) should fail\", validator.isValidDomainSyntax(\"a.-\"));\n",
                        "        assertFalse(\"a.-9 (- alphanum) should fail\", validator.isValidDomainSyntax(\"a.-9\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testRFC2396toplabel_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "252-262:isValidDomainSyntax"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ]
                },
                "579-587:testRFC2396domainlabel_test0_decomposed": {
                    "start": 579,
                    "end": 587,
                    "body": [
                        "    public void testRFC2396domainlabel_test0_decomposed()  {\n",
                        "        assertTrue(\"a.ch should validate\", validator.isValid(\"a.ch\"));\n",
                        "        assertTrue(\"9.ch should validate\", validator.isValid(\"9.ch\"));\n",
                        "        assertTrue(\"az.ch should validate\", validator.isValid(\"az.ch\"));\n",
                        "        assertTrue(\"09.ch should validate\", validator.isValid(\"09.ch\"));\n",
                        "        assertTrue(\"9-1.ch should validate\", validator.isValid(\"9-1.ch\"));\n",
                        "        assertFalse(\"91-.ch should not validate\", validator.isValid(\"91-.ch\"));\n",
                        "        assertFalse(\"-.ch should not validate\", validator.isValid(\"-.ch\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testRFC2396domainlabel_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "237-250:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ]
                },
                "564-576:testIDNJava6OrLater_test2_decomposed": {
                    "start": 564,
                    "end": 576,
                    "body": [
                        "    public void testIDNJava6OrLater_test2_decomposed()  {\n",
                        "        String version = System.getProperty(\"java.version\");\n",
                        "        if (version.compareTo(\"1.6\") < 0) {\n",
                        "            System.out.println(\"Cannot run Unicode IDN tests\");\n",
                        "            return; // Cannot run the test\n",
                        "        }\n",
                        "        assertTrue(\"b\\u00fccher.ch should validate\", validator.isValid(\"www.b\\u00fccher.ch\"));\n",
                        "        assertTrue(\n",
                        "                \"xn--d1abbgf6aiiy.xn--p1ai should validate\",\n",
                        "                validator.isValid(\"xn--d1abbgf6aiiy.xn--p1ai\"));\n",
                        "        assertTrue(\"\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444 should validate\", validator.isValid(\"\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444\"));\n",
                        "        assertFalse(\"www.\\uFFFD.ch FFFD should fail\", validator.isValid(\"www.\\uFFFD.ch\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIDNJava6OrLater_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/System",
                            "getProperty(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "compareTo(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "237-250:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ]
                },
                "554-561:testIDNJava6OrLater_test1_decomposed": {
                    "start": 554,
                    "end": 561,
                    "body": [
                        "    public void testIDNJava6OrLater_test1_decomposed()  {\n",
                        "        String version = System.getProperty(\"java.version\");\n",
                        "        if (version.compareTo(\"1.6\") < 0) {\n",
                        "            System.out.println(\"Cannot run Unicode IDN tests\");\n",
                        "            return; // Cannot run the test\n",
                        "        }\n",
                        "        assertTrue(\"b\\u00fccher.ch should validate\", validator.isValid(\"www.b\\u00fccher.ch\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIDNJava6OrLater_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/System",
                            "getProperty(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "compareTo(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "237-250:isValid"
                        ]
                    ]
                },
                "549-551:testIDNJava6OrLater_test0_decomposed": {
                    "start": 549,
                    "end": 551,
                    "body": [
                        "    public void testIDNJava6OrLater_test0_decomposed()  {\n",
                        "        String version = System.getProperty(\"java.version\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIDNJava6OrLater_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/System",
                            "getProperty(java.lang.String)"
                        ]
                    ]
                },
                "543-546:testIDN_test0_decomposed": {
                    "start": 543,
                    "end": 546,
                    "body": [
                        "    public void testIDN_test0_decomposed()  {\n",
                        "        assertTrue(\n",
                        "                \"b\\u00fccher.ch in IDN should validate\", validator.isValid(\"www.xn--bcher-kva.ch\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testIDN_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "237-250:isValid"
                        ]
                    ]
                },
                "524-540:testAllowLocal_test2_decomposed": {
                    "start": 524,
                    "end": 540,
                    "body": [
                        "    public void testAllowLocal_test2_decomposed()  {\n",
                        "        DomainValidator noLocal = DomainValidator.getInstance1(false);\n",
                        "        DomainValidator allowLocal = DomainValidator.getInstance1(true);\n",
                        "        assertEquals(noLocal, validator);\n",
                        "        assertFalse(\n",
                        "                \"localhost.localdomain should validate\", noLocal.isValid(\"localhost.localdomain\"));\n",
                        "        assertFalse(\"localhost should validate\", noLocal.isValid(\"localhost\"));\n",
                        "        assertTrue(\n",
                        "                \"localhost.localdomain should validate\",\n",
                        "                allowLocal.isValid(\"localhost.localdomain\"));\n",
                        "        assertTrue(\"localhost should validate\", allowLocal.isValid(\"localhost\"));\n",
                        "        assertTrue(\"hostname should validate\", allowLocal.isValid(\"hostname\"));\n",
                        "        assertTrue(\"machinename should validate\", allowLocal.isValid(\"machinename\"));\n",
                        "        assertTrue(\"apache.org should validate\", allowLocal.isValid(\"apache.org\"));\n",
                        "        assertFalse(\n",
                        "                \"domain name with spaces shouldn't validate\", allowLocal.isValid(\" apache.org \"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testAllowLocal_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "115-121:getInstance1"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "237-250:isValid"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ]
                    ]
                },
                "515-521:testAllowLocal_test1_decomposed": {
                    "start": 515,
                    "end": 521,
                    "body": [
                        "    public void testAllowLocal_test1_decomposed()  {\n",
                        "        DomainValidator noLocal = DomainValidator.getInstance1(false);\n",
                        "        DomainValidator allowLocal = DomainValidator.getInstance1(true);\n",
                        "        assertEquals(noLocal, validator);\n",
                        "        assertFalse(\n",
                        "                \"localhost.localdomain should validate\", noLocal.isValid(\"localhost.localdomain\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testAllowLocal_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "115-121:getInstance1"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertEquals(java.lang.Object,java.lang.Object)"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "237-250:isValid"
                        ]
                    ]
                },
                "509-512:testAllowLocal_test0_decomposed": {
                    "start": 509,
                    "end": 512,
                    "body": [
                        "    public void testAllowLocal_test0_decomposed()  {\n",
                        "        DomainValidator noLocal = DomainValidator.getInstance1(false);\n",
                        "        DomainValidator allowLocal = DomainValidator.getInstance1(true);\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testAllowLocal_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "115-121:getInstance1"
                        ]
                    ]
                },
                "492-506:testTopLevelDomains_test4_decomposed": {
                    "start": 492,
                    "end": 506,
                    "body": [
                        "    public void testTopLevelDomains_test4_decomposed()  {\n",
                        "        assertTrue(\".arpa should validate as iTLD\", validator.isValidInfrastructureTld(\".arpa\"));\n",
                        "        assertFalse(\".com shouldn't validate as iTLD\", validator.isValidInfrastructureTld(\".com\"));\n",
                        "        assertTrue(\".name should validate as gTLD\", validator.isValidGenericTld(\".name\"));\n",
                        "        assertFalse(\".us shouldn't validate as gTLD\", validator.isValidGenericTld(\".us\"));\n",
                        "        assertTrue(\".uk should validate as ccTLD\", validator.isValidCountryCodeTld(\".uk\"));\n",
                        "        assertFalse(\".org shouldn't validate as ccTLD\", validator.isValidCountryCodeTld(\".org\"));\n",
                        "        assertTrue(\".COM should validate as TLD\", validator.isValidTld(\".COM\"));\n",
                        "        assertTrue(\".BiZ should validate as TLD\", validator.isValidTld(\".BiZ\"));\n",
                        "        assertFalse(\n",
                        "                \"invalid TLD shouldn't validate\",\n",
                        "                validator.isValid(\".nope\"));\n",
                        "        assertFalse(\"empty string shouldn't validate as TLD\", validator.isValid(\"\"));\n",
                        "        assertFalse(\"null shouldn't validate as TLD\", validator.isValid(null));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTopLevelDomains_test4_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "291-294:isValidInfrastructureTld"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "303-307:isValidGenericTld"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "316-320:isValidCountryCodeTld"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "275-282:isValidTld"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "237-250:isValid"
                        ]
                    ]
                },
                "480-489:testTopLevelDomains_test3_decomposed": {
                    "start": 480,
                    "end": 489,
                    "body": [
                        "    public void testTopLevelDomains_test3_decomposed()  {\n",
                        "        assertTrue(\".arpa should validate as iTLD\", validator.isValidInfrastructureTld(\".arpa\"));\n",
                        "        assertFalse(\".com shouldn't validate as iTLD\", validator.isValidInfrastructureTld(\".com\"));\n",
                        "        assertTrue(\".name should validate as gTLD\", validator.isValidGenericTld(\".name\"));\n",
                        "        assertFalse(\".us shouldn't validate as gTLD\", validator.isValidGenericTld(\".us\"));\n",
                        "        assertTrue(\".uk should validate as ccTLD\", validator.isValidCountryCodeTld(\".uk\"));\n",
                        "        assertFalse(\".org shouldn't validate as ccTLD\", validator.isValidCountryCodeTld(\".org\"));\n",
                        "        assertTrue(\".COM should validate as TLD\", validator.isValidTld(\".COM\"));\n",
                        "        assertTrue(\".BiZ should validate as TLD\", validator.isValidTld(\".BiZ\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTopLevelDomains_test3_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "291-294:isValidInfrastructureTld"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "303-307:isValidGenericTld"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "316-320:isValidCountryCodeTld"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "275-282:isValidTld"
                        ]
                    ]
                },
                "470-477:testTopLevelDomains_test2_decomposed": {
                    "start": 470,
                    "end": 477,
                    "body": [
                        "    public void testTopLevelDomains_test2_decomposed()  {\n",
                        "        assertTrue(\".arpa should validate as iTLD\", validator.isValidInfrastructureTld(\".arpa\"));\n",
                        "        assertFalse(\".com shouldn't validate as iTLD\", validator.isValidInfrastructureTld(\".com\"));\n",
                        "        assertTrue(\".name should validate as gTLD\", validator.isValidGenericTld(\".name\"));\n",
                        "        assertFalse(\".us shouldn't validate as gTLD\", validator.isValidGenericTld(\".us\"));\n",
                        "        assertTrue(\".uk should validate as ccTLD\", validator.isValidCountryCodeTld(\".uk\"));\n",
                        "        assertFalse(\".org shouldn't validate as ccTLD\", validator.isValidCountryCodeTld(\".org\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTopLevelDomains_test2_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "291-294:isValidInfrastructureTld"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "303-307:isValidGenericTld"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "316-320:isValidCountryCodeTld"
                        ]
                    ]
                },
                "462-467:testTopLevelDomains_test1_decomposed": {
                    "start": 462,
                    "end": 467,
                    "body": [
                        "    public void testTopLevelDomains_test1_decomposed()  {\n",
                        "        assertTrue(\".arpa should validate as iTLD\", validator.isValidInfrastructureTld(\".arpa\"));\n",
                        "        assertFalse(\".com shouldn't validate as iTLD\", validator.isValidInfrastructureTld(\".com\"));\n",
                        "        assertTrue(\".name should validate as gTLD\", validator.isValidGenericTld(\".name\"));\n",
                        "        assertFalse(\".us shouldn't validate as gTLD\", validator.isValidGenericTld(\".us\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTopLevelDomains_test1_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "291-294:isValidInfrastructureTld"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "303-307:isValidGenericTld"
                        ]
                    ]
                },
                "456-459:testTopLevelDomains_test0_decomposed": {
                    "start": 456,
                    "end": 459,
                    "body": [
                        "    public void testTopLevelDomains_test0_decomposed()  {\n",
                        "        assertTrue(\".arpa should validate as iTLD\", validator.isValidInfrastructureTld(\".arpa\"));\n",
                        "        assertFalse(\".com shouldn't validate as iTLD\", validator.isValidInfrastructureTld(\".com\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testTopLevelDomains_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "291-294:isValidInfrastructureTld"
                        ],
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ]
                    ]
                },
                "429-453:testInvalidDomains_test0_decomposed": {
                    "start": 429,
                    "end": 453,
                    "body": [
                        "    public void testInvalidDomains_test0_decomposed()  {\n",
                        "        assertFalse(\"bare TLD .org shouldn't validate\", validator.isValid(\".org\"));\n",
                        "        assertFalse(\n",
                        "                \"domain name with spaces shouldn't validate\", validator.isValid(\" apache.org \"));\n",
                        "        assertFalse(\n",
                        "                \"domain name containing spaces shouldn't validate\",\n",
                        "                validator.isValid(\"apa che.org\"));\n",
                        "        assertFalse(\n",
                        "                \"domain name starting with dash shouldn't validate\",\n",
                        "                validator.isValid(\"-testdomain.name\"));\n",
                        "        assertFalse(\n",
                        "                \"domain name ending with dash shouldn't validate\",\n",
                        "                validator.isValid(\"testdomain-.name\"));\n",
                        "        assertFalse(\n",
                        "                \"domain name starting with multiple dashes shouldn't validate\",\n",
                        "                validator.isValid(\"---c.com\"));\n",
                        "        assertFalse(\n",
                        "                \"domain name ending with multiple dashes shouldn't validate\",\n",
                        "                validator.isValid(\"c--.com\"));\n",
                        "        assertFalse(\n",
                        "                \"domain name with invalid TLD shouldn't validate\", validator.isValid(\"apache.rog\"));\n",
                        "        assertFalse(\"URL shouldn't validate\", validator.isValid(\"http://www.apache.org\"));\n",
                        "        assertFalse(\"Empty string shouldn't validate as domain name\", validator.isValid(\" \"));\n",
                        "        assertFalse(\"Null shouldn't validate as domain name\", validator.isValid(null));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testInvalidDomains_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertFalse(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "237-250:isValid"
                        ]
                    ]
                },
                "414-426:testValidDomains_test0_decomposed": {
                    "start": 414,
                    "end": 426,
                    "body": [
                        "    public void testValidDomains_test0_decomposed()  {\n",
                        "        assertTrue(\"apache.org should validate\", validator.isValid(\"apache.org\"));\n",
                        "        assertTrue(\"www.google.com should validate\", validator.isValid(\"www.google.com\"));\n",
                        "        assertTrue(\"test-domain.com should validate\", validator.isValid(\"test-domain.com\"));\n",
                        "        assertTrue(\"test---domain.com should validate\", validator.isValid(\"test---domain.com\"));\n",
                        "        assertTrue(\"test-d-o-m-ain.com should validate\", validator.isValid(\"test-d-o-m-ain.com\"));\n",
                        "        assertTrue(\"two-letter domain label should validate\", validator.isValid(\"as.uk\"));\n",
                        "        assertTrue(\"case-insensitive ApAchE.Org should validate\", validator.isValid(\"ApAchE.Org\"));\n",
                        "        assertTrue(\"single-character domain label should validate\", validator.isValid(\"z.com\"));\n",
                        "        assertTrue(\n",
                        "                \"i.have.an-example.domain.name should validate\",\n",
                        "                validator.isValid(\"i.have.an-example.domain.name\"));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Test"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "testValidDomains_test0_decomposed()",
                    "parameters": [],
                    "calls": [
                        [
                            "library",
                            "TestCase",
                            "assertTrue(java.lang.String,boolean)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "237-250:isValid"
                        ]
                    ]
                },
                "58-60:setUp": {
                    "start": 58,
                    "end": 60,
                    "body": [
                        "    public void setUp() {\n",
                        "        validator = DomainValidator.getInstance0();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [
                        "Override"
                    ],
                    "modifiers": [
                        "public"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "setUp()",
                    "parameters": [],
                    "calls": [
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "104-107:getInstance0"
                        ]
                    ]
                },
                "100-193:main": {
                    "start": 100,
                    "end": 193,
                    "body": [
                        "    public static void main(String a[]) throws Exception {\n",
                        "        boolean OK = true;\n",
                        "        for (String list :\n",
                        "                new String[] {\n",
                        "                    \"INFRASTRUCTURE_TLDS\", \"COUNTRY_CODE_TLDS\", \"GENERIC_TLDS\", \"LOCAL_TLDS\"\n",
                        "                }) {\n",
                        "            OK &= isSortedLowerCase0(list);\n",
                        "        }\n",
                        "        if (!OK) {\n",
                        "            System.out.println(\"Fix arrays before retrying; cannot continue\");\n",
                        "            return;\n",
                        "        }\n",
                        "        Set<String> ianaTlds = new HashSet<String>(); // keep for comparison with array contents\n",
                        "        DomainValidator dv = DomainValidator.getInstance0();\n",
                        "        File txtFile = new File(\"target/tlds-alpha-by-domain.txt\");\n",
                        "        long timestamp =\n",
                        "                download(txtFile, \"https://data.iana.org/TLD/tlds-alpha-by-domain.txt\", 0L);\n",
                        "        final File htmlFile = new File(\"target/tlds-alpha-by-domain.html\");\n",
                        "        download(htmlFile, \"https://www.iana.org/domains/root/db\", timestamp);\n",
                        "\n",
                        "        BufferedReader br = new BufferedReader(new FileReader(txtFile));\n",
                        "        String line;\n",
                        "        final String header;\n",
                        "        line = br.readLine(); // header\n",
                        "        if (line.startsWith(\"# Version \")) {\n",
                        "            header = line.substring(2);\n",
                        "        } else {\n",
                        "            br.close();\n",
                        "            throw new IOException(\"File does not have expected Version header\");\n",
                        "        }\n",
                        "        final boolean generateUnicodeTlds = false; // Change this to generate Unicode TLDs as well\n",
                        "\n",
                        "        Map<String, String[]> htmlInfo = getHtmlInfo(htmlFile);\n",
                        "        Map<String, String> missingTLD =\n",
                        "                new TreeMap<String, String>(); // stores entry and comments as String[]\n",
                        "        Map<String, String> missingCC = new TreeMap<String, String>();\n",
                        "        while ((line = br.readLine()) != null) {\n",
                        "            if (!line.startsWith(\"#\")) {\n",
                        "                final String unicodeTld; // only different from asciiTld if that was punycode\n",
                        "                final String asciiTld = line.toLowerCase(Locale.ENGLISH);\n",
                        "                if (line.startsWith(\"XN--\")) {\n",
                        "                    unicodeTld = IDN.toUnicode(line);\n",
                        "                } else {\n",
                        "                    unicodeTld = asciiTld;\n",
                        "                }\n",
                        "                if (!dv.isValidTld(asciiTld)) {\n",
                        "                    String[] info = htmlInfo.get(asciiTld);\n",
                        "                    if (info != null) {\n",
                        "                        String type = info[0];\n",
                        "                        String comment = info[1];\n",
                        "                        if (\"country-code\".equals(type)) { // Which list to use?\n",
                        "                            missingCC.put(asciiTld, unicodeTld + \" \" + comment);\n",
                        "                            if (generateUnicodeTlds) {\n",
                        "                                missingCC.put(unicodeTld, asciiTld + \" \" + comment);\n",
                        "                            }\n",
                        "                        } else {\n",
                        "                            missingTLD.put(asciiTld, unicodeTld + \" \" + comment);\n",
                        "                            if (generateUnicodeTlds) {\n",
                        "                                missingTLD.put(unicodeTld, asciiTld + \" \" + comment);\n",
                        "                            }\n",
                        "                        }\n",
                        "                    } else {\n",
                        "                        System.err.println(\"Expected to find HTML info for \" + asciiTld);\n",
                        "                    }\n",
                        "                }\n",
                        "                ianaTlds.add(asciiTld);\n",
                        "                if (generateUnicodeTlds) {\n",
                        "                    if (!unicodeTld.equals(asciiTld)) {\n",
                        "                        ianaTlds.add(unicodeTld);\n",
                        "                    }\n",
                        "                }\n",
                        "            }\n",
                        "        }\n",
                        "        br.close();\n",
                        "        for (String key : (new TreeMap<String, String[]>(htmlInfo)).keySet()) {\n",
                        "            if (!ianaTlds.contains(key)) {\n",
                        "                if (isNotInRootZone(key)) {\n",
                        "                    System.out.println(\"INFO: HTML entry not yet in root zone: \" + key);\n",
                        "                } else {\n",
                        "                    System.err.println(\"WARN: Expected to find text entry for html: \" + key);\n",
                        "                }\n",
                        "            }\n",
                        "        }\n",
                        "        if (!missingTLD.isEmpty()) {\n",
                        "            printMap(header, missingTLD, \"TLD\");\n",
                        "        }\n",
                        "        if (!missingCC.isEmpty()) {\n",
                        "            printMap(header, missingCC, \"CC\");\n",
                        "        }\n",
                        "        isInIanaList0(\"INFRASTRUCTURE_TLDS\", ianaTlds);\n",
                        "        isInIanaList0(\"COUNTRY_CODE_TLDS\", ianaTlds);\n",
                        "        isInIanaList0(\"GENERIC_TLDS\", ianaTlds);\n",
                        "        System.out.println(\"Finished checks\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "public",
                        "static"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "main(String[])",
                    "parameters": [
                        "a"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/HashSet",
                            "HashSet<String>()"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "104-107:getInstance0"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "File(java.lang.String)"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.DomainValidatorTest",
                            "DomainValidatorTest",
                            "264-302:download"
                        ],
                        [
                            "library",
                            "java.base/java/io/BufferedReader",
                            "BufferedReader(java.io.Reader)"
                        ],
                        [
                            "library",
                            "java.base/java/io/FileReader",
                            "FileReader(java.io.File)"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.DomainValidatorTest",
                            "DomainValidatorTest",
                            "208-257:getHtmlInfo"
                        ],
                        [
                            "library",
                            "java.base/java/util/TreeMap",
                            "TreeMap<String,String>()"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.DomainValidatorTest",
                            "DomainValidatorTest",
                            "368-382:isSortedLowerCase0"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/BufferedReader",
                            "readLine()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "startsWith(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "substring(int)"
                        ],
                        [
                            "library",
                            "java.base/java/io/BufferedReader",
                            "close()"
                        ],
                        [
                            "library",
                            "java.base/java/io/IOException",
                            "IOException(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "toLowerCase(java.util.Locale)"
                        ],
                        [
                            "library",
                            "java.base/java/net/IDN",
                            "toUnicode(java.lang.String)"
                        ],
                        [
                            "commons-validator.src.main.org.apache.commons.validator.routines.DomainValidator",
                            "DomainValidator",
                            "275-282:isValidTld"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "get(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(java.lang.String,java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Set",
                            "add(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/TreeMap",
                            "keySet()"
                        ],
                        [
                            "library",
                            "java.base/java/util/TreeMap",
                            "TreeMap<String,String[]>(java.util.Map)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Set",
                            "contains(java.lang.Object)"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.DomainValidatorTest",
                            "DomainValidatorTest",
                            "312-332:isNotInRootZone"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "isEmpty()"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.DomainValidatorTest",
                            "DomainValidatorTest",
                            "195-206:printMap"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.DomainValidatorTest",
                            "DomainValidatorTest",
                            "343-357:isInIanaList0"
                        ]
                    ]
                },
                "388-411:isSortedLowerCase1": {
                    "start": 388,
                    "end": 411,
                    "body": [
                        "    private static boolean isSortedLowerCase1(String name, String[] array) {\n",
                        "        boolean sorted = true;\n",
                        "        boolean strictlySorted = true;\n",
                        "        final int length = array.length;\n",
                        "        boolean lowerCase = isLowerCase(array[length - 1]); // Check the last entry\n",
                        "        for (int i = 0; i < length - 1; i++) { // compare all but last entry with next\n",
                        "            final String entry = array[i];\n",
                        "            final String nextEntry = array[i + 1];\n",
                        "            final int cmp = entry.compareTo(nextEntry);\n",
                        "            if (cmp > 0) { // out of order\n",
                        "                System.out.println(\n",
                        "                        \"Out of order entry: \" + entry + \" < \" + nextEntry + \" in \" + name);\n",
                        "                sorted = false;\n",
                        "            } else if (cmp == 0) {\n",
                        "                strictlySorted = false;\n",
                        "                System.out.println(\"Duplicated entry: \" + entry + \" in \" + name);\n",
                        "            }\n",
                        "            if (!isLowerCase(entry)) {\n",
                        "                System.out.println(\"Non lowerCase entry: \" + entry + \" in \" + name);\n",
                        "                lowerCase = false;\n",
                        "            }\n",
                        "        }\n",
                        "        return sorted && strictlySorted && lowerCase;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isSortedLowerCase1(String, String[])",
                    "parameters": [
                        "name",
                        "array"
                    ],
                    "calls": [
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.DomainValidatorTest",
                            "DomainValidatorTest",
                            "384-386:isLowerCase"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "compareTo(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "384-386:isLowerCase": {
                    "start": 384,
                    "end": 386,
                    "body": [
                        "    private static boolean isLowerCase(String string) {\n",
                        "        return string.equals(string.toLowerCase(Locale.ENGLISH));\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isLowerCase(String)",
                    "parameters": [
                        "string"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/String",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "toLowerCase(java.util.Locale)"
                        ]
                    ]
                },
                "368-382:isSortedLowerCase0": {
                    "start": 368,
                    "end": 382,
                    "body": [
                        "    private static boolean isSortedLowerCase0(String arrayName) throws Exception {\n",
                        "        Field f = DomainValidator.class.getDeclaredField(arrayName);\n",
                        "        final boolean isPrivate = Modifier.isPrivate(f.getModifiers());\n",
                        "        if (isPrivate) {\n",
                        "            f.setAccessible(true);\n",
                        "        }\n",
                        "        String[] array = (String[]) f.get(null);\n",
                        "        try {\n",
                        "            return isSortedLowerCase1(arrayName, array);\n",
                        "        } finally {\n",
                        "            if (isPrivate) {\n",
                        "                f.setAccessible(false);\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isSortedLowerCase0(String)",
                    "parameters": [
                        "arrayName"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "getDeclaredField(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/reflect/Modifier",
                            "isPrivate(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/reflect/Field",
                            "getModifiers()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/reflect/Field",
                            "get(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/reflect/Field",
                            "setAccessible(boolean)"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.DomainValidatorTest",
                            "DomainValidatorTest",
                            "388-411:isSortedLowerCase1"
                        ]
                    ]
                },
                "359-366:isInIanaList1": {
                    "start": 359,
                    "end": 366,
                    "body": [
                        "    private static boolean isInIanaList1(String name, String[] array, Set<String> ianaTlds) {\n",
                        "        for (int i = 0; i < array.length; i++) {\n",
                        "            if (!ianaTlds.contains(array[i])) {\n",
                        "                System.out.println(name + \" contains unexpected value: \" + array[i]);\n",
                        "            }\n",
                        "        }\n",
                        "        return true;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isInIanaList1(String, String[], Set<String>)",
                    "parameters": [
                        "name",
                        "array",
                        "ianaTlds"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Set",
                            "contains(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ]
                    ]
                },
                "343-357:isInIanaList0": {
                    "start": 343,
                    "end": 357,
                    "body": [
                        "    private static boolean isInIanaList0(String arrayName, Set<String> ianaTlds) throws Exception {\n",
                        "        Field f = DomainValidator.class.getDeclaredField(arrayName);\n",
                        "        final boolean isPrivate = Modifier.isPrivate(f.getModifiers());\n",
                        "        if (isPrivate) {\n",
                        "            f.setAccessible(true);\n",
                        "        }\n",
                        "        String[] array = (String[]) f.get(null);\n",
                        "        try {\n",
                        "            return isInIanaList1(arrayName, array, ianaTlds);\n",
                        "        } finally {\n",
                        "            if (isPrivate) {\n",
                        "                f.setAccessible(false);\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isInIanaList0(String, Set<String>)",
                    "parameters": [
                        "arrayName",
                        "ianaTlds"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/lang/Class",
                            "getDeclaredField(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/reflect/Modifier",
                            "isPrivate(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/reflect/Field",
                            "getModifiers()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/reflect/Field",
                            "get(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/reflect/Field",
                            "setAccessible(boolean)"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.DomainValidatorTest",
                            "DomainValidatorTest",
                            "359-366:isInIanaList1"
                        ]
                    ]
                },
                "334-341:closeQuietly": {
                    "start": 334,
                    "end": 341,
                    "body": [
                        "    private static void closeQuietly(Closeable in) {\n",
                        "        if (in != null) {\n",
                        "            try {\n",
                        "                in.close();\n",
                        "            } catch (IOException e) {\n",
                        "            }\n",
                        "        }\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "closeQuietly(Closeable)",
                    "parameters": [
                        "in"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/Closeable",
                            "close()"
                        ]
                    ]
                },
                "312-332:isNotInRootZone": {
                    "start": 312,
                    "end": 332,
                    "body": [
                        "    private static boolean isNotInRootZone(String domain) {\n",
                        "        String tldurl = \"http://www.iana.org/domains/root/db/\" + domain + \".html\";\n",
                        "        File rootCheck = new File(\"target\", \"tld_\" + domain + \".html\");\n",
                        "        BufferedReader in = null;\n",
                        "        try {\n",
                        "            download(rootCheck, tldurl, 0L);\n",
                        "            in = new BufferedReader(new FileReader(rootCheck));\n",
                        "            String inputLine;\n",
                        "            while ((inputLine = in.readLine()) != null) {\n",
                        "                if (inputLine.contains(\n",
                        "                        \"This domain is not present in the root zone at this time.\")) {\n",
                        "                    return true;\n",
                        "                }\n",
                        "            }\n",
                        "            in.close();\n",
                        "        } catch (IOException e) {\n",
                        "        } finally {\n",
                        "            closeQuietly(in);\n",
                        "        }\n",
                        "        return false;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "boolean",
                            "boolean"
                        ]
                    ],
                    "signature": "isNotInRootZone(String)",
                    "parameters": [
                        "domain"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/io/File",
                            "File(java.lang.String,java.lang.String)"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.DomainValidatorTest",
                            "DomainValidatorTest",
                            "264-302:download"
                        ],
                        [
                            "library",
                            "java.base/java/io/BufferedReader",
                            "BufferedReader(java.io.Reader)"
                        ],
                        [
                            "library",
                            "java.base/java/io/FileReader",
                            "FileReader(java.io.File)"
                        ],
                        [
                            "library",
                            "java.base/java/io/BufferedReader",
                            "readLine()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "contains(java.lang.CharSequence)"
                        ],
                        [
                            "library",
                            "java.base/java/io/BufferedReader",
                            "close()"
                        ],
                        [
                            "commons-validator.src.test.org.apache.commons.validator.routines.DomainValidatorTest",
                            "DomainValidatorTest",
                            "334-341:closeQuietly"
                        ]
                    ]
                },
                "264-302:download": {
                    "start": 264,
                    "end": 302,
                    "body": [
                        "    private static long download(File f, String tldurl, long timestamp) throws IOException {\n",
                        "        final int HOUR = 60 * 60 * 1000; // an hour in ms\n",
                        "        final long modTime;\n",
                        "        if (f.canRead()) {\n",
                        "            modTime = f.lastModified();\n",
                        "            if (modTime > System.currentTimeMillis() - HOUR) {\n",
                        "                System.out.println(\"Skipping download - found recent \" + f);\n",
                        "                return modTime;\n",
                        "            }\n",
                        "        } else {\n",
                        "            modTime = 0;\n",
                        "        }\n",
                        "        HttpURLConnection hc = (HttpURLConnection) new URL(tldurl).openConnection();\n",
                        "        if (modTime > 0) {\n",
                        "            SimpleDateFormat sdf =\n",
                        "                    new SimpleDateFormat(\n",
                        "                            \"EEE, dd MMM yyyy HH:mm:ss z\"); // Sun, 06 Nov 1994 08:49:37 GMT\n",
                        "            String since = sdf.format(new Date(modTime));\n",
                        "            hc.addRequestProperty(\"If-Modified-Since\", since);\n",
                        "            System.out.println(\"Found \" + f + \" with date \" + since);\n",
                        "        }\n",
                        "        if (hc.getResponseCode() == 304) {\n",
                        "            System.out.println(\"Already have most recent \" + tldurl);\n",
                        "        } else {\n",
                        "            System.out.println(\"Downloading \" + tldurl);\n",
                        "            byte buff[] = new byte[1024];\n",
                        "            InputStream is = hc.getInputStream();\n",
                        "\n",
                        "            FileOutputStream fos = new FileOutputStream(f);\n",
                        "            int len;\n",
                        "            while ((len = is.read(buff)) != -1) {\n",
                        "                fos.write(buff, 0, len);\n",
                        "            }\n",
                        "            fos.close();\n",
                        "            is.close();\n",
                        "            System.out.println(\"Done\");\n",
                        "        }\n",
                        "        return f.lastModified();\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "long",
                            "long"
                        ]
                    ],
                    "signature": "download(File, String, long)",
                    "parameters": [
                        "f",
                        "tldurl",
                        "timestamp"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/net/URL",
                            "openConnection()"
                        ],
                        [
                            "library",
                            "java.base/java/net/URL",
                            "URL(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "canRead()"
                        ],
                        [
                            "library",
                            "java.base/java/io/File",
                            "lastModified()"
                        ],
                        [
                            "library",
                            "java.base/java/lang/System",
                            "currentTimeMillis()"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/text/SimpleDateFormat",
                            "SimpleDateFormat(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/text/DateFormat",
                            "format(java.util.Date)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Date",
                            "Date(long)"
                        ],
                        [
                            "library",
                            "java.base/java/net/URLConnection",
                            "addRequestProperty(java.lang.String,java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/net/HttpURLConnection",
                            "getResponseCode()"
                        ],
                        [
                            "library",
                            "java.base/java/net/URLConnection",
                            "getInputStream()"
                        ],
                        [
                            "library",
                            "java.base/java/io/FileOutputStream",
                            "FileOutputStream(java.io.File)"
                        ],
                        [
                            "library",
                            "java.base/java/io/InputStream",
                            "read(byte[])"
                        ],
                        [
                            "library",
                            "java.base/java/io/FileOutputStream",
                            "write(byte[],int,int)"
                        ],
                        [
                            "library",
                            "java.base/java/io/FileOutputStream",
                            "close()"
                        ],
                        [
                            "library",
                            "java.base/java/io/InputStream",
                            "close()"
                        ]
                    ]
                },
                "208-257:getHtmlInfo": {
                    "start": 208,
                    "end": 257,
                    "body": [
                        "    private static Map<String, String[]> getHtmlInfo(final File f) throws IOException {\n",
                        "        final Map<String, String[]> info = new HashMap<String, String[]>();\n",
                        "\n",
                        "        final Pattern domain = Pattern.compile(\".*<a href=\\\"/domains/root/db/([^.]+)\\\\.html\");\n",
                        "        final Pattern type = Pattern.compile(\"\\\\s+<td>([^<]+)</td>\");\n",
                        "        final Pattern comment = Pattern.compile(\"\\\\s+<td>([^<]+)</td>\");\n",
                        "\n",
                        "        final BufferedReader br = new BufferedReader(new FileReader(f));\n",
                        "        String line;\n",
                        "        while ((line = br.readLine()) != null) {\n",
                        "            Matcher m = domain.matcher(line);\n",
                        "            if (m.lookingAt()) {\n",
                        "                String dom = m.group(1);\n",
                        "                String typ = \"??\";\n",
                        "                String com = \"??\";\n",
                        "                line = br.readLine();\n",
                        "                while (line.matches(\"^\\\\s*$\")) { // extra blank lines introduced\n",
                        "                    line = br.readLine();\n",
                        "                }\n",
                        "                Matcher t = type.matcher(line);\n",
                        "                if (t.lookingAt()) {\n",
                        "                    typ = t.group(1);\n",
                        "                    line = br.readLine();\n",
                        "                    if (line.matches(\"\\\\s+<!--.*\")) {\n",
                        "                        while (!line.matches(\".*-->.*\")) {\n",
                        "                            line = br.readLine();\n",
                        "                        }\n",
                        "                        line = br.readLine();\n",
                        "                    }\n",
                        "                    while (!line.matches(\".*</td>.*\")) {\n",
                        "                        line += \" \" + br.readLine();\n",
                        "                    }\n",
                        "                    Matcher n = comment.matcher(line);\n",
                        "                    if (n.lookingAt()) {\n",
                        "                        com = n.group(1);\n",
                        "                    }\n",
                        "                    if (com.contains(\"Not assigned\")\n",
                        "                            || com.contains(\"Retired\")\n",
                        "                            || typ.equals(\"test\")) {\n",
                        "                    } else {\n",
                        "                        info.put(dom.toLowerCase(Locale.ENGLISH), new String[] {typ, com});\n",
                        "                    }\n",
                        "                } else {\n",
                        "                    System.err.println(\"Unexpected type: \" + line);\n",
                        "                }\n",
                        "            }\n",
                        "        }\n",
                        "        br.close();\n",
                        "        return info;\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "Map<String,String[]>",
                            "java.util.Map<String,String[]>"
                        ]
                    ],
                    "signature": "getHtmlInfo(File)",
                    "parameters": [
                        "f"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/HashMap",
                            "HashMap<String,String[]>()"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "compile(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/BufferedReader",
                            "BufferedReader(java.io.Reader)"
                        ],
                        [
                            "library",
                            "java.base/java/io/FileReader",
                            "FileReader(java.io.File)"
                        ],
                        [
                            "library",
                            "java.base/java/io/BufferedReader",
                            "readLine()"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Pattern",
                            "matcher(java.lang.CharSequence)"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Matcher",
                            "lookingAt()"
                        ],
                        [
                            "library",
                            "java.base/java/util/regex/Matcher",
                            "group(int)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "matches(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "equals(java.lang.Object)"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "contains(java.lang.CharSequence)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "put(java.lang.String,java.lang.String[])"
                        ],
                        [
                            "library",
                            "java.base/java/lang/String",
                            "toLowerCase(java.util.Locale)"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/io/BufferedReader",
                            "close()"
                        ]
                    ]
                },
                "195-206:printMap": {
                    "start": 195,
                    "end": 206,
                    "body": [
                        "    private static void printMap(final String header, Map<String, String> map, String string) {\n",
                        "        System.out.println(\"Entries missing from \" + string + \" List\\n\");\n",
                        "        if (header != null) {\n",
                        "            System.out.println(\"        // Taken from \" + header);\n",
                        "        }\n",
                        "        Iterator<Map.Entry<String, String>> it = map.entrySet().iterator();\n",
                        "        while (it.hasNext()) {\n",
                        "            Map.Entry<String, String> me = it.next();\n",
                        "            System.out.println(\"        \\\"\" + me.getKey() + \"\\\", // \" + me.getValue());\n",
                        "        }\n",
                        "        System.out.println(\"\\nDone\");\n",
                        "    }\n"
                    ],
                    "is_constructor": false,
                    "annotations": [],
                    "modifiers": [
                        "static",
                        "private"
                    ],
                    "return_types": [
                        [
                            "void",
                            "void"
                        ]
                    ],
                    "signature": "printMap(String, Map<String,String>, String)",
                    "parameters": [
                        "header",
                        "map",
                        "string"
                    ],
                    "calls": [
                        [
                            "library",
                            "java.base/java/util/Set",
                            "iterator()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map",
                            "entrySet()"
                        ],
                        [
                            "library",
                            "java.base/java/io/PrintStream",
                            "println(java.lang.String)"
                        ],
                        [
                            "library",
                            "java.base/java/util/Iterator",
                            "hasNext()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Iterator",
                            "next()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map$Entry",
                            "getValue()"
                        ],
                        [
                            "library",
                            "java.base/java/util/Map$Entry",
                            "getKey()"
                        ]
                    ]
                }
            },
            "fields": {
                "55-55:validator": {
                    "start": 55,
                    "end": 55,
                    "body": [
                        "    private DomainValidator validator;\n"
                    ],
                    "modifiers": [
                        "private"
                    ],
                    "types": [
                        [
                            "DomainValidator",
                            "DomainValidator"
                        ]
                    ]
                }
            }
        }
    }
}